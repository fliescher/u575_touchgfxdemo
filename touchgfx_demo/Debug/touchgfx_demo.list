
touchgfx_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027370  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002580  080275a4  080275a4  000375a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08029b24  08029b24  00039b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08029ccc  08029ccc  00039ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00025800  08029ce4  08029ce4  00039ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  0804f4e4  0804f4e4  0005f4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  0804f4f4  0804f4f4  0005f4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  0804f4fc  0804f4fc  0005f4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0804f510  0804f510  0005f510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00025900  20000000  0804f518  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 00025800  20025900  08074e18  00085900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00004874  2004b100  0809a618  000ab100  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2004f974  0809a618  000af974  2**0
                  ALLOC
 14 .ARM.attributes 00000036  00000000  00000000  000ab100  2**0
                  CONTENTS, READONLY
 15 .debug_info   000be107  00000000  00000000  000ab136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00015196  00000000  00000000  0016923d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003eb8  00000000  00000000  0017e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000037f0  00000000  00000000  00182290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004987a  00000000  00000000  00185a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00052341  00000000  00000000  001cf2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00197323  00000000  00000000  0022163b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000cf  00000000  00000000  003b895e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010828  00000000  00000000  003b8a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2004b100 	.word	0x2004b100
 8000250:	00000000 	.word	0x00000000
 8000254:	0802758c 	.word	0x0802758c

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	2004b104 	.word	0x2004b104
 8000270:	0802758c 	.word	0x0802758c

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f897 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	2004cdac 	.word	0x2004cdac
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	2004ce48 	.word	0x2004ce48
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	2004cdb0 	.word	0x2004cdb0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	2004cdb4 	.word	0x2004cdb4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	2004d3b4 	.word	0x2004d3b4

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f00c fb8c 	bl	800cb6c <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f00c faf9 	bl	800ca50 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	2004ce54 	.word	0x2004ce54
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	2004d3b4 	.word	0x2004d3b4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	2004ce58 	.word	0x2004ce58
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	2004cee4 	.word	0x2004cee4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	2004cee8 	.word	0x2004cee8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	2004cee0 	.word	0x2004cee0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	2004cedc 	.word	0x2004cedc
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	2004ce48 	.word	0x2004ce48
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	2004cdb0 	.word	0x2004cdb0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	2004cdb4 	.word	0x2004cdb4
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <__aeabi_uldivmod>:
 80004b0:	b953      	cbnz	r3, 80004c8 <__aeabi_uldivmod+0x18>
 80004b2:	b94a      	cbnz	r2, 80004c8 <__aeabi_uldivmod+0x18>
 80004b4:	2900      	cmp	r1, #0
 80004b6:	bf08      	it	eq
 80004b8:	2800      	cmpeq	r0, #0
 80004ba:	bf1c      	itt	ne
 80004bc:	f04f 31ff 	movne.w	r1, #4294967295
 80004c0:	f04f 30ff 	movne.w	r0, #4294967295
 80004c4:	f000 b982 	b.w	80007cc <__aeabi_idiv0>
 80004c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004d0:	f000 f806 	bl	80004e0 <__udivmoddi4>
 80004d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004dc:	b004      	add	sp, #16
 80004de:	4770      	bx	lr

080004e0 <__udivmoddi4>:
 80004e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80004e6:	4604      	mov	r4, r0
 80004e8:	460f      	mov	r7, r1
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d148      	bne.n	8000580 <__udivmoddi4+0xa0>
 80004ee:	428a      	cmp	r2, r1
 80004f0:	4694      	mov	ip, r2
 80004f2:	d961      	bls.n	80005b8 <__udivmoddi4+0xd8>
 80004f4:	fab2 f382 	clz	r3, r2
 80004f8:	b143      	cbz	r3, 800050c <__udivmoddi4+0x2c>
 80004fa:	f1c3 0120 	rsb	r1, r3, #32
 80004fe:	409f      	lsls	r7, r3
 8000500:	fa02 fc03 	lsl.w	ip, r2, r3
 8000504:	409c      	lsls	r4, r3
 8000506:	fa20 f101 	lsr.w	r1, r0, r1
 800050a:	430f      	orrs	r7, r1
 800050c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	fbb7 f6f1 	udiv	r6, r7, r1
 800051a:	fb01 7716 	mls	r7, r1, r6, r7
 800051e:	fb06 f00e 	mul.w	r0, r6, lr
 8000522:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000526:	4290      	cmp	r0, r2
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x5c>
 800052a:	eb1c 0202 	adds.w	r2, ip, r2
 800052e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x5a>
 8000534:	4290      	cmp	r0, r2
 8000536:	f200 8137 	bhi.w	80007a8 <__udivmoddi4+0x2c8>
 800053a:	463e      	mov	r6, r7
 800053c:	1a12      	subs	r2, r2, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb2 f0f1 	udiv	r0, r2, r1
 8000544:	fb01 2210 	mls	r2, r1, r0, r2
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x86>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 32ff 	add.w	r2, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x84>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 811c 	bhi.w	800079c <__udivmoddi4+0x2bc>
 8000564:	4610      	mov	r0, r2
 8000566:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800056a:	eba4 040e 	sub.w	r4, r4, lr
 800056e:	2600      	movs	r6, #0
 8000570:	b11d      	cbz	r5, 800057a <__udivmoddi4+0x9a>
 8000572:	40dc      	lsrs	r4, r3
 8000574:	2300      	movs	r3, #0
 8000576:	e9c5 4300 	strd	r4, r3, [r5]
 800057a:	4631      	mov	r1, r6
 800057c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000580:	428b      	cmp	r3, r1
 8000582:	d909      	bls.n	8000598 <__udivmoddi4+0xb8>
 8000584:	2d00      	cmp	r5, #0
 8000586:	f000 80fd 	beq.w	8000784 <__udivmoddi4+0x2a4>
 800058a:	2600      	movs	r6, #0
 800058c:	e9c5 0100 	strd	r0, r1, [r5]
 8000590:	4630      	mov	r0, r6
 8000592:	4631      	mov	r1, r6
 8000594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000598:	fab3 f683 	clz	r6, r3
 800059c:	2e00      	cmp	r6, #0
 800059e:	d14b      	bne.n	8000638 <__udivmoddi4+0x158>
 80005a0:	428b      	cmp	r3, r1
 80005a2:	f0c0 80f2 	bcc.w	800078a <__udivmoddi4+0x2aa>
 80005a6:	4282      	cmp	r2, r0
 80005a8:	f240 80ef 	bls.w	800078a <__udivmoddi4+0x2aa>
 80005ac:	4630      	mov	r0, r6
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d0e3      	beq.n	800057a <__udivmoddi4+0x9a>
 80005b2:	e9c5 4700 	strd	r4, r7, [r5]
 80005b6:	e7e0      	b.n	800057a <__udivmoddi4+0x9a>
 80005b8:	b902      	cbnz	r2, 80005bc <__udivmoddi4+0xdc>
 80005ba:	deff      	udf	#255	; 0xff
 80005bc:	fab2 f382 	clz	r3, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f040 809d 	bne.w	8000700 <__udivmoddi4+0x220>
 80005c6:	1a89      	subs	r1, r1, r2
 80005c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005cc:	b297      	uxth	r7, r2
 80005ce:	2601      	movs	r6, #1
 80005d0:	0c20      	lsrs	r0, r4, #16
 80005d2:	fbb1 f2fe 	udiv	r2, r1, lr
 80005d6:	fb0e 1112 	mls	r1, lr, r2, r1
 80005da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005de:	fb07 f002 	mul.w	r0, r7, r2
 80005e2:	4288      	cmp	r0, r1
 80005e4:	d90f      	bls.n	8000606 <__udivmoddi4+0x126>
 80005e6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ea:	f102 38ff 	add.w	r8, r2, #4294967295
 80005ee:	bf2c      	ite	cs
 80005f0:	f04f 0901 	movcs.w	r9, #1
 80005f4:	f04f 0900 	movcc.w	r9, #0
 80005f8:	4288      	cmp	r0, r1
 80005fa:	d903      	bls.n	8000604 <__udivmoddi4+0x124>
 80005fc:	f1b9 0f00 	cmp.w	r9, #0
 8000600:	f000 80cf 	beq.w	80007a2 <__udivmoddi4+0x2c2>
 8000604:	4642      	mov	r2, r8
 8000606:	1a09      	subs	r1, r1, r0
 8000608:	b2a4      	uxth	r4, r4
 800060a:	fbb1 f0fe 	udiv	r0, r1, lr
 800060e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000612:	fb00 f707 	mul.w	r7, r0, r7
 8000616:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800061a:	42a7      	cmp	r7, r4
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x150>
 800061e:	eb1c 0404 	adds.w	r4, ip, r4
 8000622:	f100 31ff 	add.w	r1, r0, #4294967295
 8000626:	d202      	bcs.n	800062e <__udivmoddi4+0x14e>
 8000628:	42a7      	cmp	r7, r4
 800062a:	f200 80b4 	bhi.w	8000796 <__udivmoddi4+0x2b6>
 800062e:	4608      	mov	r0, r1
 8000630:	1be4      	subs	r4, r4, r7
 8000632:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000636:	e79b      	b.n	8000570 <__udivmoddi4+0x90>
 8000638:	f1c6 0720 	rsb	r7, r6, #32
 800063c:	40b3      	lsls	r3, r6
 800063e:	fa01 f406 	lsl.w	r4, r1, r6
 8000642:	fa22 fc07 	lsr.w	ip, r2, r7
 8000646:	40f9      	lsrs	r1, r7
 8000648:	40b2      	lsls	r2, r6
 800064a:	ea4c 0c03 	orr.w	ip, ip, r3
 800064e:	fa20 f307 	lsr.w	r3, r0, r7
 8000652:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000656:	431c      	orrs	r4, r3
 8000658:	fa1f fe8c 	uxth.w	lr, ip
 800065c:	fa00 f306 	lsl.w	r3, r0, r6
 8000660:	0c20      	lsrs	r0, r4, #16
 8000662:	fbb1 f8f9 	udiv	r8, r1, r9
 8000666:	fb09 1118 	mls	r1, r9, r8, r1
 800066a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800066e:	fb08 f00e 	mul.w	r0, r8, lr
 8000672:	4288      	cmp	r0, r1
 8000674:	d90f      	bls.n	8000696 <__udivmoddi4+0x1b6>
 8000676:	eb1c 0101 	adds.w	r1, ip, r1
 800067a:	f108 3aff 	add.w	sl, r8, #4294967295
 800067e:	bf2c      	ite	cs
 8000680:	f04f 0b01 	movcs.w	fp, #1
 8000684:	f04f 0b00 	movcc.w	fp, #0
 8000688:	4288      	cmp	r0, r1
 800068a:	d903      	bls.n	8000694 <__udivmoddi4+0x1b4>
 800068c:	f1bb 0f00 	cmp.w	fp, #0
 8000690:	f000 808d 	beq.w	80007ae <__udivmoddi4+0x2ce>
 8000694:	46d0      	mov	r8, sl
 8000696:	1a09      	subs	r1, r1, r0
 8000698:	b2a4      	uxth	r4, r4
 800069a:	fbb1 f0f9 	udiv	r0, r1, r9
 800069e:	fb09 1110 	mls	r1, r9, r0, r1
 80006a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80006a6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006aa:	458e      	cmp	lr, r1
 80006ac:	d907      	bls.n	80006be <__udivmoddi4+0x1de>
 80006ae:	eb1c 0101 	adds.w	r1, ip, r1
 80006b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80006b6:	d201      	bcs.n	80006bc <__udivmoddi4+0x1dc>
 80006b8:	458e      	cmp	lr, r1
 80006ba:	d87f      	bhi.n	80007bc <__udivmoddi4+0x2dc>
 80006bc:	4620      	mov	r0, r4
 80006be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006c2:	eba1 010e 	sub.w	r1, r1, lr
 80006c6:	fba0 9802 	umull	r9, r8, r0, r2
 80006ca:	4541      	cmp	r1, r8
 80006cc:	464c      	mov	r4, r9
 80006ce:	46c6      	mov	lr, r8
 80006d0:	d302      	bcc.n	80006d8 <__udivmoddi4+0x1f8>
 80006d2:	d106      	bne.n	80006e2 <__udivmoddi4+0x202>
 80006d4:	454b      	cmp	r3, r9
 80006d6:	d204      	bcs.n	80006e2 <__udivmoddi4+0x202>
 80006d8:	3801      	subs	r0, #1
 80006da:	ebb9 0402 	subs.w	r4, r9, r2
 80006de:	eb68 0e0c 	sbc.w	lr, r8, ip
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d070      	beq.n	80007c8 <__udivmoddi4+0x2e8>
 80006e6:	1b1a      	subs	r2, r3, r4
 80006e8:	eb61 010e 	sbc.w	r1, r1, lr
 80006ec:	fa22 f306 	lsr.w	r3, r2, r6
 80006f0:	fa01 f707 	lsl.w	r7, r1, r7
 80006f4:	40f1      	lsrs	r1, r6
 80006f6:	2600      	movs	r6, #0
 80006f8:	431f      	orrs	r7, r3
 80006fa:	e9c5 7100 	strd	r7, r1, [r5]
 80006fe:	e73c      	b.n	800057a <__udivmoddi4+0x9a>
 8000700:	fa02 fc03 	lsl.w	ip, r2, r3
 8000704:	f1c3 0020 	rsb	r0, r3, #32
 8000708:	fa01 f203 	lsl.w	r2, r1, r3
 800070c:	fa21 f600 	lsr.w	r6, r1, r0
 8000710:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000714:	fa24 f100 	lsr.w	r1, r4, r0
 8000718:	fa1f f78c 	uxth.w	r7, ip
 800071c:	409c      	lsls	r4, r3
 800071e:	4311      	orrs	r1, r2
 8000720:	fbb6 f0fe 	udiv	r0, r6, lr
 8000724:	0c0a      	lsrs	r2, r1, #16
 8000726:	fb0e 6610 	mls	r6, lr, r0, r6
 800072a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800072e:	fb00 f607 	mul.w	r6, r0, r7
 8000732:	4296      	cmp	r6, r2
 8000734:	d90e      	bls.n	8000754 <__udivmoddi4+0x274>
 8000736:	eb1c 0202 	adds.w	r2, ip, r2
 800073a:	f100 38ff 	add.w	r8, r0, #4294967295
 800073e:	bf2c      	ite	cs
 8000740:	f04f 0901 	movcs.w	r9, #1
 8000744:	f04f 0900 	movcc.w	r9, #0
 8000748:	4296      	cmp	r6, r2
 800074a:	d902      	bls.n	8000752 <__udivmoddi4+0x272>
 800074c:	f1b9 0f00 	cmp.w	r9, #0
 8000750:	d031      	beq.n	80007b6 <__udivmoddi4+0x2d6>
 8000752:	4640      	mov	r0, r8
 8000754:	1b92      	subs	r2, r2, r6
 8000756:	b289      	uxth	r1, r1
 8000758:	fbb2 f6fe 	udiv	r6, r2, lr
 800075c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000764:	fb06 f207 	mul.w	r2, r6, r7
 8000768:	428a      	cmp	r2, r1
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x29c>
 800076c:	eb1c 0101 	adds.w	r1, ip, r1
 8000770:	f106 38ff 	add.w	r8, r6, #4294967295
 8000774:	d201      	bcs.n	800077a <__udivmoddi4+0x29a>
 8000776:	428a      	cmp	r2, r1
 8000778:	d823      	bhi.n	80007c2 <__udivmoddi4+0x2e2>
 800077a:	4646      	mov	r6, r8
 800077c:	1a89      	subs	r1, r1, r2
 800077e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000782:	e725      	b.n	80005d0 <__udivmoddi4+0xf0>
 8000784:	462e      	mov	r6, r5
 8000786:	4628      	mov	r0, r5
 8000788:	e6f7      	b.n	800057a <__udivmoddi4+0x9a>
 800078a:	1a84      	subs	r4, r0, r2
 800078c:	eb61 0303 	sbc.w	r3, r1, r3
 8000790:	2001      	movs	r0, #1
 8000792:	461f      	mov	r7, r3
 8000794:	e70b      	b.n	80005ae <__udivmoddi4+0xce>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	e749      	b.n	8000630 <__udivmoddi4+0x150>
 800079c:	4464      	add	r4, ip
 800079e:	3802      	subs	r0, #2
 80007a0:	e6e1      	b.n	8000566 <__udivmoddi4+0x86>
 80007a2:	3a02      	subs	r2, #2
 80007a4:	4461      	add	r1, ip
 80007a6:	e72e      	b.n	8000606 <__udivmoddi4+0x126>
 80007a8:	3e02      	subs	r6, #2
 80007aa:	4462      	add	r2, ip
 80007ac:	e6c6      	b.n	800053c <__udivmoddi4+0x5c>
 80007ae:	f1a8 0802 	sub.w	r8, r8, #2
 80007b2:	4461      	add	r1, ip
 80007b4:	e76f      	b.n	8000696 <__udivmoddi4+0x1b6>
 80007b6:	3802      	subs	r0, #2
 80007b8:	4462      	add	r2, ip
 80007ba:	e7cb      	b.n	8000754 <__udivmoddi4+0x274>
 80007bc:	3802      	subs	r0, #2
 80007be:	4461      	add	r1, ip
 80007c0:	e77d      	b.n	80006be <__udivmoddi4+0x1de>
 80007c2:	3e02      	subs	r6, #2
 80007c4:	4461      	add	r1, ip
 80007c6:	e7d9      	b.n	800077c <__udivmoddi4+0x29c>
 80007c8:	462e      	mov	r6, r5
 80007ca:	e6d6      	b.n	800057a <__udivmoddi4+0x9a>

080007cc <__aeabi_idiv0>:
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007dc:	2334      	movs	r3, #52	; 0x34
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <tx_application_define+0x64>)
 80007e6:	4914      	ldr	r1, [pc, #80]	; (8000838 <tx_application_define+0x68>)
 80007e8:	4814      	ldr	r0, [pc, #80]	; (800083c <tx_application_define+0x6c>)
 80007ea:	f00c fc69 	bl	800d0c0 <_txe_byte_pool_create>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d109      	bne.n	8000808 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <tx_application_define+0x6c>)
 80007f6:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	f000 fb9e 	bl	8000f3a <App_ThreadX_Init>
 80007fe:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d000      	beq.n	8000808 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000806:	e7fe      	b.n	8000806 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000808:	2334      	movs	r3, #52	; 0x34
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <tx_application_define+0x70>)
 8000812:	490c      	ldr	r1, [pc, #48]	; (8000844 <tx_application_define+0x74>)
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <tx_application_define+0x78>)
 8000816:	f00c fc53 	bl	800d0c0 <_txe_byte_pool_create>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d104      	bne.n	800082a <tx_application_define+0x5a>
  {
    /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

    /* USER CODE END TouchGFX_Byte_Pool_Success */

    memory_ptr = (VOID *)&touchgfx_app_byte_pool;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <tx_application_define+0x78>)
 8000822:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 8000824:	68b8      	ldr	r0, [r7, #8]
 8000826:	f00d f81f 	bl	800d868 <MX_TouchGFX_Init>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2004b11c 	.word	0x2004b11c
 8000838:	080275a4 	.word	0x080275a4
 800083c:	2004b51c 	.word	0x2004b51c
 8000840:	2004b550 	.word	0x2004b550
 8000844:	080275b8 	.word	0x080275b8
 8000848:	2004c550 	.word	0x2004c550

0800084c <ST7789V_SEND_COMMAND>:

static uint8_t rotationNum=1;
static bool _cp437    = false;

void ST7789V_SEND_COMMAND(uint16_t cmd)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
    ST7789_REG = cmd;
 8000856:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	8013      	strh	r3, [r2, #0]

}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <ST7789V_SEND_DATA>:
void ST7789V_SEND_DATA(uint16_t data)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
    ST7789_RAM = data;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <ST7789V_SEND_DATA+0x1c>)
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	8013      	strh	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	60080000 	.word	0x60080000

0800088c <ST7789V_writeRegister32>:
	ST7789V_SEND_COMMAND(r);
	ST7789V_SEND_DATA((d >> 8));
	ST7789V_SEND_DATA(d);
}

void ST7789V_writeRegister32(uint8_t r, uint32_t d) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
	ST7789V_SEND_COMMAND(r);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffd5 	bl	800084c <ST7789V_SEND_COMMAND>
	ST7789V_SEND_DATA((d >> 24));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	0e1b      	lsrs	r3, r3, #24
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ffdf 	bl	800086c <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 16));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	0c1b      	lsrs	r3, r3, #16
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ffd9 	bl	800086c <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 8));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ffd3 	bl	800086c <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA(d);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ffce 	bl	800086c <ST7789V_SEND_DATA>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <ST7789V_setCursorPosition>:

void ST7789V_setCursorPosition(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4604      	mov	r4, r0
 80008e0:	4608      	mov	r0, r1
 80008e2:	4611      	mov	r1, r2
 80008e4:	461a      	mov	r2, r3
 80008e6:	4623      	mov	r3, r4
 80008e8:	80fb      	strh	r3, [r7, #6]
 80008ea:	4603      	mov	r3, r0
 80008ec:	80bb      	strh	r3, [r7, #4]
 80008ee:	460b      	mov	r3, r1
 80008f0:	807b      	strh	r3, [r7, #2]
 80008f2:	4613      	mov	r3, r2
 80008f4:	803b      	strh	r3, [r7, #0]
  uint32_t t;
  t = (x0 << 16) | x1;
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	041a      	lsls	r2, r3, #16
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000900:	202c      	movs	r0, #44	; 0x2c
 8000902:	f7ff ffa3 	bl	800084c <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_CASET, t);
 8000906:	68f9      	ldr	r1, [r7, #12]
 8000908:	202a      	movs	r0, #42	; 0x2a
 800090a:	f7ff ffbf 	bl	800088c <ST7789V_writeRegister32>
  t = (y0 << 16) | y1;
 800090e:	88bb      	ldrh	r3, [r7, #4]
 8000910:	041a      	lsls	r2, r3, #16
 8000912:	883b      	ldrh	r3, [r7, #0]
 8000914:	4313      	orrs	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000918:	202c      	movs	r0, #44	; 0x2c
 800091a:	f7ff ff97 	bl	800084c <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_RASET, t);
 800091e:	68f9      	ldr	r1, [r7, #12]
 8000920:	202b      	movs	r0, #43	; 0x2b
 8000922:	f7ff ffb3 	bl	800088c <ST7789V_writeRegister32>
  ST7789V_SEND_COMMAND (ST7789V_RAMWR);
 8000926:	202c      	movs	r0, #44	; 0x2c
 8000928:	f7ff ff90 	bl	800084c <ST7789V_SEND_COMMAND>
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bd90      	pop	{r4, r7, pc}

08000934 <ST7789V_init>:
	/* invert area */
	ST7789V_SEND_COMMAND(ST7789V_INVON);
}

void ST7789V_init(void)
 {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
   ExternalSRAMSpecStruct ST7789VSpec = {
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	f8c3 2003 	str.w	r2, [r3, #3]
 8000944:	2310      	movs	r3, #16
 8000946:	703b      	strb	r3, [r7, #0]
 8000948:	2332      	movs	r3, #50	; 0x32
 800094a:	713b      	strb	r3, [r7, #4]
 800094c:	2301      	movs	r3, #1
 800094e:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 8000950:	463b      	mov	r3, r7
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fb05 	bl	8000f64 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2104      	movs	r1, #4
 800095e:	4877      	ldr	r0, [pc, #476]	; (8000b3c <ST7789V_init+0x208>)
 8000960:	f002 fde0 	bl	8003524 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f001 fd41 	bl	80023ec <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2104      	movs	r1, #4
 800096e:	4873      	ldr	r0, [pc, #460]	; (8000b3c <ST7789V_init+0x208>)
 8000970:	f002 fdd8 	bl	8003524 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8000974:	200a      	movs	r0, #10
 8000976:	f001 fd39 	bl	80023ec <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2104      	movs	r1, #4
 800097e:	486f      	ldr	r0, [pc, #444]	; (8000b3c <ST7789V_init+0x208>)
 8000980:	f002 fdd0 	bl	8003524 <HAL_GPIO_WritePin>
      HAL_Delay(120);
 8000984:	2078      	movs	r0, #120	; 0x78
 8000986:	f001 fd31 	bl	80023ec <HAL_Delay>


      ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 800098a:	2011      	movs	r0, #17
 800098c:	f7ff ff5e 	bl	800084c <ST7789V_SEND_COMMAND>
      HAL_Delay(120);
 8000990:	2078      	movs	r0, #120	; 0x78
 8000992:	f001 fd2b 	bl	80023ec <HAL_Delay>

      ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 8000996:	2036      	movs	r0, #54	; 0x36
 8000998:	f7ff ff58 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ff65 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 80009a2:	20b2      	movs	r0, #178	; 0xb2
 80009a4:	f7ff ff52 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0C);
 80009a8:	200c      	movs	r0, #12
 80009aa:	f7ff ff5f 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0C);
 80009ae:	200c      	movs	r0, #12
 80009b0:	f7ff ff5c 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff ff59 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 80009ba:	2033      	movs	r0, #51	; 0x33
 80009bc:	f7ff ff56 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 80009c0:	2033      	movs	r0, #51	; 0x33
 80009c2:	f7ff ff53 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 80009c6:	20b7      	movs	r0, #183	; 0xb7
 80009c8:	f7ff ff40 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x70); //VGH, VGL
 80009cc:	2070      	movs	r0, #112	; 0x70
 80009ce:	f7ff ff4d 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 80009d2:	20bb      	movs	r0, #187	; 0xbb
 80009d4:	f7ff ff3a 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x3A);
 80009d8:	203a      	movs	r0, #58	; 0x3a
 80009da:	f7ff ff47 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 80009de:	20c0      	movs	r0, #192	; 0xc0
 80009e0:	f7ff ff34 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x2C);
 80009e4:	202c      	movs	r0, #44	; 0x2c
 80009e6:	f7ff ff41 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 80009ea:	20c2      	movs	r0, #194	; 0xc2
 80009ec:	f7ff ff2e 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x01);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff ff3b 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VRHS);
 80009f6:	20c3      	movs	r0, #195	; 0xc3
 80009f8:	f7ff ff28 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x14);
 80009fc:	2014      	movs	r0, #20
 80009fe:	f7ff ff35 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVS);
 8000a02:	20c4      	movs	r0, #196	; 0xc4
 8000a04:	f7ff ff22 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x20);
 8000a08:	2020      	movs	r0, #32
 8000a0a:	f7ff ff2f 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 8000a0e:	20c6      	movs	r0, #198	; 0xc6
 8000a10:	f7ff ff1c 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0F); //60Hz 0A
 8000a14:	200f      	movs	r0, #15
 8000a16:	f7ff ff29 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 8000a1a:	20d0      	movs	r0, #208	; 0xd0
 8000a1c:	f7ff ff16 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xA4);
 8000a20:	20a4      	movs	r0, #164	; 0xa4
 8000a22:	f7ff ff23 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xA1); //AVDD VCL
 8000a26:	20a1      	movs	r0, #161	; 0xa1
 8000a28:	f7ff ff20 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 8000a2c:	20e0      	movs	r0, #224	; 0xe0
 8000a2e:	f7ff ff0d 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000a32:	20d0      	movs	r0, #208	; 0xd0
 8000a34:	f7ff ff1a 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000a38:	2007      	movs	r0, #7
 8000a3a:	f7ff ff17 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000a3e:	200d      	movs	r0, #13
 8000a40:	f7ff ff14 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000a44:	2009      	movs	r0, #9
 8000a46:	f7ff ff11 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x08);
 8000a4a:	2008      	movs	r0, #8
 8000a4c:	f7ff ff0e 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000a50:	2025      	movs	r0, #37	; 0x25
 8000a52:	f7ff ff0b 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x28);
 8000a56:	2028      	movs	r0, #40	; 0x28
 8000a58:	f7ff ff08 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x53);
 8000a5c:	2053      	movs	r0, #83	; 0x53
 8000a5e:	f7ff ff05 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000a62:	2039      	movs	r0, #57	; 0x39
 8000a64:	f7ff ff02 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x12);
 8000a68:	2012      	movs	r0, #18
 8000a6a:	f7ff feff 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0B);
 8000a6e:	200b      	movs	r0, #11
 8000a70:	f7ff fefc 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f7ff fef9 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x17);
 8000a7a:	2017      	movs	r0, #23
 8000a7c:	f7ff fef6 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000a80:	2034      	movs	r0, #52	; 0x34
 8000a82:	f7ff fef3 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 8000a86:	20e1      	movs	r0, #225	; 0xe1
 8000a88:	f7ff fee0 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000a8c:	20d0      	movs	r0, #208	; 0xd0
 8000a8e:	f7ff feed 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000a92:	2007      	movs	r0, #7
 8000a94:	f7ff feea 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000a98:	200d      	movs	r0, #13
 8000a9a:	f7ff fee7 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000a9e:	2009      	movs	r0, #9
 8000aa0:	f7ff fee4 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000aa4:	2009      	movs	r0, #9
 8000aa6:	f7ff fee1 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000aaa:	2025      	movs	r0, #37	; 0x25
 8000aac:	f7ff fede 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x29);
 8000ab0:	2029      	movs	r0, #41	; 0x29
 8000ab2:	f7ff fedb 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x35);
 8000ab6:	2035      	movs	r0, #53	; 0x35
 8000ab8:	f7ff fed8 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000abc:	2039      	movs	r0, #57	; 0x39
 8000abe:	f7ff fed5 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x13);
 8000ac2:	2013      	movs	r0, #19
 8000ac4:	f7ff fed2 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000ac8:	200a      	movs	r0, #10
 8000aca:	f7ff fecf 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f7ff fecc 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x16);
 8000ad4:	2016      	movs	r0, #22
 8000ad6:	f7ff fec9 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000ada:	2034      	movs	r0, #52	; 0x34
 8000adc:	f7ff fec6 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000ae0:	2021      	movs	r0, #33	; 0x21
 8000ae2:	f7ff feb3 	bl	800084c <ST7789V_SEND_COMMAND>

      ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 8000ae6:	203a      	movs	r0, #58	; 0x3a
 8000ae8:	f7ff feb0 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000aec:	2055      	movs	r0, #85	; 0x55
 8000aee:	f7ff febd 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_CASET);
 8000af2:	202a      	movs	r0, #42	; 0x2a
 8000af4:	f7ff feaa 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff feb7 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f7ff feb4 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff feb1 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xEF);
 8000b0a:	20ef      	movs	r0, #239	; 0xef
 8000b0c:	f7ff feae 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_RASET);
 8000b10:	202b      	movs	r0, #43	; 0x2b
 8000b12:	f7ff fe9b 	bl	800084c <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fea8 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fea5 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x01);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fea2 	bl	800086c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x3F);
 8000b28:	203f      	movs	r0, #63	; 0x3f
 8000b2a:	f7ff fe9f 	bl	800086c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_DISPON);
 8000b2e:	2029      	movs	r0, #41	; 0x29
 8000b30:	f7ff fe8c 	bl	800084c <ST7789V_SEND_COMMAND>
//      ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 }
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	42021000 	.word	0x42021000

08000b40 <ST7789V_drawPixel>:

void ST7789V_drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	807b      	strh	r3, [r7, #2]
	ST7789V_setCursorPosition(x, y, x, y);
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	88fa      	ldrh	r2, [r7, #6]
 8000b56:	88b9      	ldrh	r1, [r7, #4]
 8000b58:	88f8      	ldrh	r0, [r7, #6]
 8000b5a:	f7ff febd 	bl	80008d8 <ST7789V_setCursorPosition>
	ST7789V_SEND_DATA(color);
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fe83 	bl	800086c <ST7789V_SEND_DATA>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <ST7789V_fill>:

void ST7789V_fill(uint16_t color) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ST7789V_PIXEL_COUNT;
 8000b7a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000b7e:	60fb      	str	r3, [r7, #12]
	
	if(rotationNum==1 || rotationNum==3)
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <ST7789V_fill+0x6c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d003      	beq.n	8000b90 <ST7789V_fill+0x20>
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <ST7789V_fill+0x6c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	d107      	bne.n	8000ba0 <ST7789V_fill+0x30>
	{
		ST7789V_setCursorPosition(0, 0,   ST7789V_WIDTH -1, ST7789V_HEIGHT -1);
 8000b90:	f240 133f 	movw	r3, #319	; 0x13f
 8000b94:	22ef      	movs	r2, #239	; 0xef
 8000b96:	2100      	movs	r1, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fe9d 	bl	80008d8 <ST7789V_setCursorPosition>
 8000b9e:	e00e      	b.n	8000bbe <ST7789V_fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <ST7789V_fill+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d003      	beq.n	8000bb0 <ST7789V_fill+0x40>
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <ST7789V_fill+0x6c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d106      	bne.n	8000bbe <ST7789V_fill+0x4e>
	{
		ST7789V_setCursorPosition(0, 0, ST7789V_HEIGHT -1, ST7789V_WIDTH -1);
 8000bb0:	23ef      	movs	r3, #239	; 0xef
 8000bb2:	f240 123f 	movw	r2, #319	; 0x13f
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fe8d 	bl	80008d8 <ST7789V_setCursorPosition>
	}

	while (n) {
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d007      	beq.n	8000bd4 <ST7789V_fill+0x64>
	   n--;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
	   ST7789V_SEND_DATA(color);
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe4d 	bl	800086c <ST7789V_SEND_DATA>
	while (n) {
 8000bd2:	e7f4      	b.n	8000bbe <ST7789V_fill+0x4e>
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000004 	.word	0x20000004

08000be0 <ST7789V_drawCircle>:
			ST7789V_SEND_DATA(color);
	}
}

void ST7789V_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4604      	mov	r4, r0
 8000be8:	4608      	mov	r0, r1
 8000bea:	4611      	mov	r1, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	4623      	mov	r3, r4
 8000bf0:	80fb      	strh	r3, [r7, #6]
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80bb      	strh	r3, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	807b      	strh	r3, [r7, #2]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	f1c3 0301 	rsb	r3, r3, #1
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000c0c:	887b      	ldrh	r3, [r7, #2]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	03d2      	lsls	r2, r2, #15
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	81fb      	strh	r3, [r7, #14]

  ST7789V_drawPixel(x0  , y0+r, color);
 8000c22:	88ba      	ldrh	r2, [r7, #4]
 8000c24:	887b      	ldrh	r3, [r7, #2]
 8000c26:	4413      	add	r3, r2
 8000c28:	b299      	uxth	r1, r3
 8000c2a:	883a      	ldrh	r2, [r7, #0]
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff86 	bl	8000b40 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0  , y0-r, color);
 8000c34:	88ba      	ldrh	r2, [r7, #4]
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	b299      	uxth	r1, r3
 8000c3c:	883a      	ldrh	r2, [r7, #0]
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff7d 	bl	8000b40 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0+r, y0  , color);
 8000c46:	88fa      	ldrh	r2, [r7, #6]
 8000c48:	887b      	ldrh	r3, [r7, #2]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	883a      	ldrh	r2, [r7, #0]
 8000c50:	88b9      	ldrh	r1, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff74 	bl	8000b40 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0-r, y0  , color);
 8000c58:	88fa      	ldrh	r2, [r7, #6]
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	883a      	ldrh	r2, [r7, #0]
 8000c62:	88b9      	ldrh	r1, [r7, #4]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff6b 	bl	8000b40 <ST7789V_drawPixel>

  while (x<y) {
 8000c6a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	f280 8083 	bge.w	8000d7e <ST7789V_drawCircle+0x19e>
    if (f >= 0) {
 8000c78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0e      	blt.n	8000c9e <ST7789V_drawCircle+0xbe>
      y--;
 8000c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000c8c:	8a7b      	ldrh	r3, [r7, #18]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8000c94:	8afa      	ldrh	r2, [r7, #22]
 8000c96:	8a7b      	ldrh	r3, [r7, #18]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000c9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000caa:	8abb      	ldrh	r3, [r7, #20]
 8000cac:	3302      	adds	r3, #2
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8000cb2:	8afa      	ldrh	r2, [r7, #22]
 8000cb4:	8abb      	ldrh	r3, [r7, #20]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	82fb      	strh	r3, [r7, #22]
  
    ST7789V_drawPixel(x0 + x, y0 + y, color);
 8000cbc:	8a3a      	ldrh	r2, [r7, #16]
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	89fa      	ldrh	r2, [r7, #14]
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	883a      	ldrh	r2, [r7, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff ff36 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 + y, color);
 8000cd4:	8a3b      	ldrh	r3, [r7, #16]
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b298      	uxth	r0, r3
 8000cdc:	89fa      	ldrh	r2, [r7, #14]
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	883a      	ldrh	r2, [r7, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f7ff ff2a 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + x, y0 - y, color);
 8000cec:	8a3a      	ldrh	r2, [r7, #16]
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b298      	uxth	r0, r3
 8000cf4:	89fb      	ldrh	r3, [r7, #14]
 8000cf6:	88ba      	ldrh	r2, [r7, #4]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	883a      	ldrh	r2, [r7, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff ff1e 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 - y, color);
 8000d04:	8a3b      	ldrh	r3, [r7, #16]
 8000d06:	88fa      	ldrh	r2, [r7, #6]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	b298      	uxth	r0, r3
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	88ba      	ldrh	r2, [r7, #4]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	883a      	ldrh	r2, [r7, #0]
 8000d16:	4619      	mov	r1, r3
 8000d18:	f7ff ff12 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 + x, color);
 8000d1c:	89fa      	ldrh	r2, [r7, #14]
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	4413      	add	r3, r2
 8000d22:	b298      	uxth	r0, r3
 8000d24:	8a3a      	ldrh	r2, [r7, #16]
 8000d26:	88bb      	ldrh	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	883a      	ldrh	r2, [r7, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f7ff ff06 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 + x, color);
 8000d34:	89fb      	ldrh	r3, [r7, #14]
 8000d36:	88fa      	ldrh	r2, [r7, #6]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b298      	uxth	r0, r3
 8000d3c:	8a3a      	ldrh	r2, [r7, #16]
 8000d3e:	88bb      	ldrh	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	883a      	ldrh	r2, [r7, #0]
 8000d46:	4619      	mov	r1, r3
 8000d48:	f7ff fefa 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 - x, color);
 8000d4c:	89fa      	ldrh	r2, [r7, #14]
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4413      	add	r3, r2
 8000d52:	b298      	uxth	r0, r3
 8000d54:	8a3b      	ldrh	r3, [r7, #16]
 8000d56:	88ba      	ldrh	r2, [r7, #4]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	883a      	ldrh	r2, [r7, #0]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f7ff feee 	bl	8000b40 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 - x, color);
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	88fa      	ldrh	r2, [r7, #6]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	b298      	uxth	r0, r3
 8000d6c:	8a3b      	ldrh	r3, [r7, #16]
 8000d6e:	88ba      	ldrh	r2, [r7, #4]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	883a      	ldrh	r2, [r7, #0]
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff fee2 	bl	8000b40 <ST7789V_drawPixel>
  while (x<y) {
 8000d7c:	e775      	b.n	8000c6a <ST7789V_drawCircle+0x8a>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd90      	pop	{r4, r7, pc}

08000d86 <ST7789V_drawLine>:
  ST7789V_drawFastVLine(x0, y0-r, 2*r+1, color);
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

void ST7789V_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000d86:	b590      	push	{r4, r7, lr}
 8000d88:	b087      	sub	sp, #28
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	4611      	mov	r1, r2
 8000d92:	461a      	mov	r2, r3
 8000d94:	4623      	mov	r3, r4
 8000d96:	80fb      	strh	r3, [r7, #6]
 8000d98:	4603      	mov	r3, r0
 8000d9a:	80bb      	strh	r3, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
 8000da0:	4613      	mov	r3, r2
 8000da2:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000da4:	883b      	ldrh	r3, [r7, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	88bb      	ldrh	r3, [r7, #4]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000db0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	4619      	mov	r1, r3
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	1acb      	subs	r3, r1, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bfb8      	it	lt
 8000dc0:	425b      	neglt	r3, r3
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	bfcc      	ite	gt
 8000dc6:	2301      	movgt	r3, #1
 8000dc8:	2300      	movle	r3, #0
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	827b      	strh	r3, [r7, #18]
  if (steep) {
 8000dce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00b      	beq.n	8000dee <ST7789V_drawLine+0x68>
	std::swap(x0, y0);
 8000dd6:	1d3a      	adds	r2, r7, #4
 8000dd8:	1dbb      	adds	r3, r7, #6
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f88d 	bl	8000efc <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(x1, y1);
 8000de2:	463a      	mov	r2, r7
 8000de4:	1cbb      	adds	r3, r7, #2
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f887 	bl	8000efc <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  if (x0 > x1) {
 8000dee:	88fa      	ldrh	r2, [r7, #6]
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d90b      	bls.n	8000e0e <ST7789V_drawLine+0x88>
	std::swap(x0, x1);
 8000df6:	1cba      	adds	r2, r7, #2
 8000df8:	1dbb      	adds	r3, r7, #6
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f87d 	bl	8000efc <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(y0, y1);
 8000e02:	463a      	mov	r2, r7
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f877 	bl	8000efc <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  uint16_t dx, dy;
  dx = x1 - x0;
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000e16:	883b      	ldrh	r3, [r7, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bfb8      	it	lt
 8000e22:	425b      	neglt	r3, r3
 8000e24:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx>>1;
 8000e26:	8a3b      	ldrh	r3, [r7, #16]
 8000e28:	085b      	lsrs	r3, r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	82fb      	strh	r3, [r7, #22]
  int16_t ystep;

  if (y0 < y1) {
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	883b      	ldrh	r3, [r7, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d202      	bcs.n	8000e3c <ST7789V_drawLine+0xb6>
    ystep = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	82bb      	strh	r3, [r7, #20]
 8000e3a:	e002      	b.n	8000e42 <ST7789V_drawLine+0xbc>
  } else {
    ystep = -1;
 8000e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e40:	82bb      	strh	r3, [r7, #20]
  }

  for (; x0<=x1; x0++) {
 8000e42:	88fa      	ldrh	r2, [r7, #6]
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d828      	bhi.n	8000e9c <ST7789V_drawLine+0x116>
    if (steep) {
 8000e4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d006      	beq.n	8000e60 <ST7789V_drawLine+0xda>
      ST7789V_drawPixel(y0, x0, color);
 8000e52:	88bb      	ldrh	r3, [r7, #4]
 8000e54:	88f9      	ldrh	r1, [r7, #6]
 8000e56:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fe71 	bl	8000b40 <ST7789V_drawPixel>
 8000e5e:	e005      	b.n	8000e6c <ST7789V_drawLine+0xe6>
    } else {
      ST7789V_drawPixel(x0, y0, color);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	88b9      	ldrh	r1, [r7, #4]
 8000e64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe6a 	bl	8000b40 <ST7789V_drawPixel>
    }
    err -= dy;
 8000e6c:	8afa      	ldrh	r2, [r7, #22]
 8000e6e:	89fb      	ldrh	r3, [r7, #14]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	82fb      	strh	r3, [r7, #22]
    if (err < 0) {
 8000e76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da09      	bge.n	8000e92 <ST7789V_drawLine+0x10c>
      y0 += ystep;
 8000e7e:	88ba      	ldrh	r2, [r7, #4]
 8000e80:	8abb      	ldrh	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000e88:	8afa      	ldrh	r2, [r7, #22]
 8000e8a:	8a3b      	ldrh	r3, [r7, #16]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	82fb      	strh	r3, [r7, #22]
  for (; x0<=x1; x0++) {
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	e7d2      	b.n	8000e42 <ST7789V_drawLine+0xbc>
    }
  }
}	
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}

08000ea4 <ST7789V_drawFastVLine>:
{
	ST7789V_drawLine(x, y, x+w-1, y, color);
}

void ST7789V_drawFastVLine(uint16_t x, uint16_t y, uint16_t h, uint16_t color)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	4604      	mov	r4, r0
 8000eac:	4608      	mov	r0, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4623      	mov	r3, r4
 8000eb4:	80fb      	strh	r3, [r7, #6]
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80bb      	strh	r3, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	807b      	strh	r3, [r7, #2]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	803b      	strh	r3, [r7, #0]
	ST7789V_drawLine(x, y, x, y+h-1, color);
 8000ec2:	88ba      	ldrh	r2, [r7, #4]
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b29c      	uxth	r4, r3
 8000ece:	88fa      	ldrh	r2, [r7, #6]
 8000ed0:	88b9      	ldrh	r1, [r7, #4]
 8000ed2:	88f8      	ldrh	r0, [r7, #6]
 8000ed4:	883b      	ldrh	r3, [r7, #0]
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4623      	mov	r3, r4
 8000eda:	f7ff ff54 	bl	8000d86 <ST7789V_drawLine>
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}

08000ee6 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffed 	bl	8000ee6 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 8000f12:	6838      	ldr	r0, [r7, #0]
 8000f14:	f7ff ffe7 	bl	8000ee6 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000f20:	f107 030e 	add.w	r3, r7, #14
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ffde 	bl	8000ee6 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	801a      	strh	r2, [r3, #0]
    }
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b085      	sub	sp, #20
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60bb      	str	r3, [r7, #8]
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000f5c:	f00a fbda 	bl	800b714 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0a0      	sub	sp, #128	; 0x80
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	2220      	movs	r2, #32
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f025 fad2 	bl	8026522 <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <FMCSRAMInit+0xc4>)
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <FMCSRAMInit+0xc8>)
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d102      	bne.n	8000f92 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8000f90:	e005      	b.n	8000f9e <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	2201      	movs	r2, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d102      	bne.n	8000fac <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000faa:	e008      	b.n	8000fbe <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b10      	cmp	r3, #16
 8000fb2:	d102      	bne.n	8000fba <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fb8:	e001      	b.n	8000fbe <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000fec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ff0:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 8000ffe:	2306      	movs	r3, #6
 8001000:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8001002:	2306      	movs	r3, #6
 8001004:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 8001006:	f107 0108 	add.w	r1, r7, #8
 800100a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100e:	2200      	movs	r2, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f007 fc19 	bl	8008848 <HAL_SRAM_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 800101c:	f000 f808 	bl	8001030 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8001020:	bf00      	nop
 8001022:	3780      	adds	r7, #128	; 0x80
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	420d0400 	.word	0x420d0400
 800102c:	420d0504 	.word	0x420d0504

08001030 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <LL_AHB2_GRP1_EnableClock+0x34>)
 800104a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800104e:	4909      	ldr	r1, [pc, #36]	; (8001074 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <LL_AHB2_GRP1_EnableClock+0x34>)
 800105a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001064:	68fb      	ldr	r3, [r7, #12]
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	46020c00 	.word	0x46020c00

08001078 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <LL_APB1_GRP2_EnableClock+0x34>)
 8001082:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001086:	4909      	ldr	r1, [pc, #36]	; (80010ac <LL_APB1_GRP2_EnableClock+0x34>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4313      	orrs	r3, r2
 800108c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <LL_APB1_GRP2_EnableClock+0x34>)
 8001092:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	46020c00 	.word	0x46020c00

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f001 f94b 	bl	8002350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f893 	bl	80011e4 <_Z18SystemClock_Configv>

  /* Configure the System Power */
  SystemPower_Config();
 80010be:	f000 f904 	bl	80012ca <_ZL18SystemPower_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c2:	f000 fbc3 	bl	800184c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80010c6:	f000 f913 	bl	80012f0 <_ZL12MX_ADC1_Initv>
  MX_UCPD1_Init();
 80010ca:	f000 fa89 	bl	80015e0 <_ZL13MX_UCPD1_Initv>
  MX_USART1_UART_Init();
 80010ce:	f000 fabd 	bl	800164c <_ZL19MX_USART1_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 80010d2:	f000 fb1b 	bl	800170c <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_FMC_Init();
 80010d6:	f000 fb49 	bl	800176c <_ZL11MX_FMC_Initv>
  MX_CRC_Init();
 80010da:	f000 f953 	bl	8001384 <_ZL11MX_CRC_Initv>
  MX_ICACHE_Init();
 80010de:	f000 f9c1 	bl	8001464 <_ZL14MX_ICACHE_Initv>
  MX_DMA2D_Init();
 80010e2:	f000 f977 	bl	80013d4 <_ZL13MX_DMA2D_Initv>
  MX_TIM16_Init();
 80010e6:	f000 fa4f 	bl	8001588 <_ZL13MX_TIM16_Initv>
  MX_TIM3_Init();
 80010ea:	f000 f9ef 	bl	80014cc <_ZL12MX_TIM3_Initv>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80010ee:	f00c fbb3 	bl	800d858 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80010f2:	4838      	ldr	r0, [pc, #224]	; (80011d4 <main+0x124>)
 80010f4:	f007 fc50 	bl	8008998 <HAL_TIM_Base_Start_IT>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	bf14      	ite	ne
 80010fe:	2301      	movne	r3, #1
 8001100:	2300      	moveq	r3, #0
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <main+0x5c>
  	      {
  	      	Error_Handler();
 8001108:	f000 fcd6 	bl	8001ab8 <Error_Handler>
  	      }


  ST7789V_init();
 800110c:	f7ff fc12 	bl	8000934 <ST7789V_init>
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8001110:	202c      	movs	r0, #44	; 0x2c
 8001112:	f7ff fb9b 	bl	800084c <ST7789V_SEND_COMMAND>
  ST7789V_fill(COLOR_BLUE);
 8001116:	201f      	movs	r0, #31
 8001118:	f7ff fd2a 	bl	8000b70 <ST7789V_fill>
  HAL_Delay(100);
 800111c:	2064      	movs	r0, #100	; 0x64
 800111e:	f001 f965 	bl	80023ec <HAL_Delay>



  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001122:	f7ff ff19 	bl	8000f58 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int round_num = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	482a      	ldr	r0, [pc, #168]	; (80011d8 <main+0x128>)
 800112e:	f002 fa11 	bl	8003554 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001132:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001136:	f001 f959 	bl	80023ec <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	4826      	ldr	r0, [pc, #152]	; (80011d8 <main+0x128>)
 800113e:	f002 fa09 	bl	8003554 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8001142:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001146:	f001 f951 	bl	80023ec <HAL_Delay>


	  if(round_num == 0)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10b      	bne.n	8001168 <main+0xb8>

		  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
		  {
			  ST7789V_SEND_DATA(COLOR_RED);
		  }*/
		  ST7789V_fill(COLOR_RED);
 8001150:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001154:	f7ff fd0c 	bl	8000b70 <ST7789V_fill>
		  round_num++;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
		  HAL_Delay(500);
 800115e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001162:	f001 f943 	bl	80023ec <HAL_Delay>
 8001166:	e013      	b.n	8001190 <main+0xe0>
	  }
	  else
	  {
		  //ST7789V_fillCircle(100, 100, 50, COLOR_BLACK);
		  ST7789V_drawCircle(100, 100, 50, COLOR_WHITE);
 8001168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116c:	2232      	movs	r2, #50	; 0x32
 800116e:	2164      	movs	r1, #100	; 0x64
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f7ff fd35 	bl	8000be0 <ST7789V_drawCircle>
		  ST7789V_drawFastVLine(150, 80, 100, COLOR_WHITE);
 8001176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117a:	2264      	movs	r2, #100	; 0x64
 800117c:	2150      	movs	r1, #80	; 0x50
 800117e:	2096      	movs	r0, #150	; 0x96
 8001180:	f7ff fe90 	bl	8000ea4 <ST7789V_drawFastVLine>
			  for(int j = 0; j<200; j++)
			  {
				  ST7789V_drawPixel(i, j, COLOR_WHITE);
			  }
		  }
*/		  HAL_Delay(500);
 8001184:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001188:	f001 f930 	bl	80023ec <HAL_Delay>
		  round_num = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
	   	  round_num = 0;
	  }
/*
	  else if(round_num == 1)
	  {
*/	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800119a:	da0a      	bge.n	80011b2 <main+0x102>
	   	  {
	   		  ST7789V_SEND_DATA(kuhmuh[i]);
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <main+0x12c>)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fb61 	bl	800086c <ST7789V_SEND_DATA>
*/	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	e7f0      	b.n	8001194 <main+0xe4>
	   	  }
	  	  HAL_Delay(500);
 80011b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b6:	f001 f919 	bl	80023ec <HAL_Delay>
	  	  	  {
	  	  		 ST7789V_SEND_DATA(COLOR_BLUE);
	  	  	  }
	  	  	  */

	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80011ba:	2104      	movs	r1, #4
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <main+0x130>)
 80011be:	f002 f9c9 	bl	8003554 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80011c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c6:	f001 f911 	bl	80023ec <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80011ca:	2104      	movs	r1, #4
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <main+0x130>)
 80011ce:	f002 f9c1 	bl	8003554 <HAL_GPIO_TogglePin>

  }
 80011d2:	e7aa      	b.n	800112a <main+0x7a>
 80011d4:	2004c694 	.word	0x2004c694
 80011d8:	42020400 	.word	0x42020400
 80011dc:	20000008 	.word	0x20000008
 80011e0:	42021800 	.word	0x42021800

080011e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b09e      	sub	sp, #120	; 0x78
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2260      	movs	r2, #96	; 0x60
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f025 f995 	bl	8026522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001208:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800120c:	f003 fafc 	bl	8004808 <HAL_PWREx_ControlVoltageScaling>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	bf14      	ite	ne
 8001216:	2301      	movne	r3, #1
 8001218:	2300      	moveq	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <_Z18SystemClock_Configv+0x40>
  {
    Error_Handler();
 8001220:	f000 fc4a 	bl	8001ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001224:	2332      	movs	r3, #50	; 0x32
 8001226:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001234:	2310      	movs	r3, #16
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800123c:	2310      	movs	r3, #16
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001244:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800124a:	2301      	movs	r3, #1
 800124c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001252:	2301      	movs	r3, #1
 8001254:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001256:	2350      	movs	r3, #80	; 0x50
 8001258:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800125e:	2302      	movs	r3, #2
 8001260:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001262:	2302      	movs	r3, #2
 8001264:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001266:	2300      	movs	r3, #0
 8001268:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fbba 	bl	80049ec <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	bf14      	ite	ne
 800127e:	2301      	movne	r3, #1
 8001280:	2300      	moveq	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8001288:	f000 fc16 	bl	8001ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	231f      	movs	r3, #31
 800128e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2303      	movs	r3, #3
 8001292:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	2104      	movs	r1, #4
 80012a8:	4618      	mov	r0, r3
 80012aa:	f004 fa75 	bl	8005798 <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80012be:	f000 fbfb 	bl	8001ab8 <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	3778      	adds	r7, #120	; 0x78
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_ZL18SystemPower_Configv>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80012ce:	f003 fb7d 	bl	80049cc <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80012d2:	2002      	movs	r0, #2
 80012d4:	f003 fb1a 	bl	800490c <HAL_PWREx_ConfigSupply>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <_ZL18SystemPower_Configv+0x22>
  {
    Error_Handler();
 80012e8:	f000 fbe6 	bl	8001ab8 <Error_Handler>
  }
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 80012f6:	4a22      	ldr	r2, [pc, #136]	; (8001380 <_ZL12MX_ADC1_Initv+0x90>)
 80012f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 8001314:	2204      	movs	r2, #4
 8001316:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 800131a:	2200      	movs	r2, #0
 800131c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 8001328:	2201      	movs	r2, #1
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 800132e:	2200      	movs	r2, #0
 8001330:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 800133e:	2200      	movs	r2, #0
 8001340:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 8001344:	2200      	movs	r2, #0
 8001346:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 800134a:	2200      	movs	r2, #0
 800134c:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 8001350:	2200      	movs	r2, #0
 8001352:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <_ZL12MX_ADC1_Initv+0x8c>)
 800135e:	f001 f945 	bl	80025ec <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf14      	ite	ne
 8001368:	2301      	movne	r3, #1
 800136a:	2300      	moveq	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <_ZL12MX_ADC1_Initv+0x86>
  {
    Error_Handler();
 8001372:	f000 fba1 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2004c584 	.word	0x2004c584
 8001380:	42028000 	.word	0x42028000

08001384 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_ZL11MX_CRC_Initv+0x48>)
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <_ZL11MX_CRC_Initv+0x4c>)
 800138c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <_ZL11MX_CRC_Initv+0x48>)
 8001390:	2200      	movs	r2, #0
 8001392:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <_ZL11MX_CRC_Initv+0x48>)
 8001396:	2200      	movs	r2, #0
 8001398:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <_ZL11MX_CRC_Initv+0x48>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <_ZL11MX_CRC_Initv+0x48>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <_ZL11MX_CRC_Initv+0x48>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <_ZL11MX_CRC_Initv+0x48>)
 80013ae:	f001 fcf7 	bl	8002da0 <HAL_CRC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf14      	ite	ne
 80013b8:	2301      	movne	r3, #1
 80013ba:	2300      	moveq	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 80013c2:	f000 fb79 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2004c610 	.word	0x2004c610
 80013d0:	40023000 	.word	0x40023000

080013d4 <_ZL13MX_DMA2D_Initv>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <_ZL13MX_DMA2D_Initv+0x8c>)
 80013dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 80013e6:	2202      	movs	r2, #2
 80013e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 80013fe:	2200      	movs	r2, #0
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 8001404:	2202      	movs	r2, #2
 8001406:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 800140a:	2200      	movs	r2, #0
 800140c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 8001410:	2200      	movs	r2, #0
 8001412:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 8001416:	2200      	movs	r2, #0
 8001418:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 800141c:	2200      	movs	r2, #0
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001420:	480e      	ldr	r0, [pc, #56]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 8001422:	f001 fda7 	bl	8002f74 <HAL_DMA2D_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf14      	ite	ne
 800142c:	2301      	movne	r3, #1
 800142e:	2300      	moveq	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <_ZL13MX_DMA2D_Initv+0x66>
  {
    Error_Handler();
 8001436:	f000 fb3f 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800143a:	2101      	movs	r1, #1
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <_ZL13MX_DMA2D_Initv+0x88>)
 800143e:	f001 fdfb 	bl	8003038 <HAL_DMA2D_ConfigLayer>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <_ZL13MX_DMA2D_Initv+0x82>
  {
    Error_Handler();
 8001452:	f000 fb31 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2004c634 	.word	0x2004c634
 8001460:	4002b000 	.word	0x4002b000

08001464 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8001478:	f002 f8c2 	bl	8003600 <HAL_ICACHE_Disable>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf14      	ite	ne
 8001482:	2301      	movne	r3, #1
 8001484:	2300      	moveq	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <_ZL14MX_ICACHE_Initv+0x2c>
  {
    Error_Handler();
 800148c:	f000 fb14 	bl	8001ab8 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x0;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x0;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8001498:	2301      	movs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(ICACHE_REGION_0, &pRegionConfig) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	2000      	movs	r0, #0
 80014aa:	f002 f8d9 	bl	8003660 <HAL_ICACHE_EnableRemapRegion>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <_ZL14MX_ICACHE_Initv+0x5e>
  {
    Error_Handler();
 80014be:	f000 fafb 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <_ZL12MX_TIM3_Initv+0xb4>)
 80014ec:	4a25      	ldr	r2, [pc, #148]	; (8001584 <_ZL12MX_TIM3_Initv+0xb8>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <_ZL12MX_TIM3_Initv+0xb4>)
 80014f2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80014f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <_ZL12MX_TIM3_Initv+0xb4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 160;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <_ZL12MX_TIM3_Initv+0xb4>)
 8001500:	22a0      	movs	r2, #160	; 0xa0
 8001502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <_ZL12MX_TIM3_Initv+0xb4>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <_ZL12MX_TIM3_Initv+0xb4>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001510:	481b      	ldr	r0, [pc, #108]	; (8001580 <_ZL12MX_TIM3_Initv+0xb4>)
 8001512:	f007 f9e9 	bl	80088e8 <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf14      	ite	ne
 800151c:	2301      	movne	r3, #1
 800151e:	2300      	moveq	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 8001526:	f000 fac7 	bl	8001ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	4812      	ldr	r0, [pc, #72]	; (8001580 <_ZL12MX_TIM3_Initv+0xb4>)
 8001538:	f007 fc4e 	bl	8008dd8 <HAL_TIM_ConfigClockSource>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	bf14      	ite	ne
 8001542:	2301      	movne	r3, #1
 8001544:	2300      	moveq	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 800154c:	f000 fab4 	bl	8001ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <_ZL12MX_TIM3_Initv+0xb4>)
 800155e:	f007 fefb 	bl	8009358 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8001572:	f000 faa1 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	3720      	adds	r7, #32
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2004c694 	.word	0x2004c694
 8001584:	40000400 	.word	0x40000400

08001588 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <_ZL13MX_TIM16_Initv+0x50>)
 800158e:	4a13      	ldr	r2, [pc, #76]	; (80015dc <_ZL13MX_TIM16_Initv+0x54>)
 8001590:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_ZL13MX_TIM16_Initv+0x50>)
 8001594:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001598:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <_ZL13MX_TIM16_Initv+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <_ZL13MX_TIM16_Initv+0x50>)
 80015a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80015a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <_ZL13MX_TIM16_Initv+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <_ZL13MX_TIM16_Initv+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_ZL13MX_TIM16_Initv+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <_ZL13MX_TIM16_Initv+0x50>)
 80015bc:	f007 f994 	bl	80088e8 <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <_ZL13MX_TIM16_Initv+0x4c>
  {
    Error_Handler();
 80015d0:	f000 fa72 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2004c6e0 	.word	0x2004c6e0
 80015dc:	40014400 	.word	0x40014400

080015e0 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	463b      	mov	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80015f6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80015fa:	f7ff fd3d 	bl	8001078 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80015fe:	2002      	movs	r0, #2
 8001600:	f7ff fd1e 	bl	8001040 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff fd1b 	bl	8001040 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800160a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800160e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001610:	2303      	movs	r3, #3
 8001612:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	463b      	mov	r3, r7
 800161a:	4619      	mov	r1, r3
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <_ZL13MX_UCPD1_Initv+0x64>)
 800161e:	f008 fef4 	bl	800a40a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001626:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001628:	2303      	movs	r3, #3
 800162a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <_ZL13MX_UCPD1_Initv+0x68>)
 8001636:	f008 fee8 	bl	800a40a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	42020400 	.word	0x42020400
 8001648:	42020000 	.word	0x42020000

0800164c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001652:	4a2d      	ldr	r2, [pc, #180]	; (8001708 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8001654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001656:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b27      	ldr	r3, [pc, #156]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800168a:	2200      	movs	r2, #0
 800168c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001690:	2200      	movs	r2, #0
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001694:	481b      	ldr	r0, [pc, #108]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001696:	f007 ff67 	bl	8009568 <HAL_UART_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80016aa:	f000 fa05 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4814      	ldr	r0, [pc, #80]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80016b2:	f008 fb39 	bl	8009d28 <HAL_UARTEx_SetTxFifoThreshold>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80016c6:	f000 f9f7 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80016ce:	f008 fb69 	bl	8009da4 <HAL_UARTEx_SetRxFifoThreshold>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80016e2:	f000 f9e9 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80016e8:	f008 fae5 	bl	8009cb6 <HAL_UARTEx_DisableFifoMode>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80016fc:	f000 f9dc 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2004c72c 	.word	0x2004c72c
 8001708:	40013800 	.word	0x40013800

0800170c <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>)
 8001714:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001718:	2206      	movs	r2, #6
 800171a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800171e:	2202      	movs	r2, #2
 8001720:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001748:	f001 ffdc 	bl	8003704 <HAL_PCD_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf14      	ite	ne
 8001752:	2301      	movne	r3, #1
 8001754:	2300      	moveq	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x54>
  {
    Error_Handler();
 800175c:	f000 f9ac 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2004c7bc 	.word	0x2004c7bc
 8001768:	42040000 	.word	0x42040000

0800176c <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001772:	463b      	mov	r3, r7
 8001774:	2220      	movs	r2, #32
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f024 fed2 	bl	8026522 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 8001780:	4a30      	ldr	r2, [pc, #192]	; (8001844 <_ZL11MX_FMC_Initv+0xd8>)
 8001782:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001784:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 8001786:	4a30      	ldr	r2, [pc, #192]	; (8001848 <_ZL11MX_FMC_Initv+0xdc>)
 8001788:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 800179e:	2210      	movs	r2, #16
 80017a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 7;
 80017f6:	2307      	movs	r3, #7
 80017f8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80017fa:	230f      	movs	r3, #15
 80017fc:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 3;
 80017fe:	2303      	movs	r3, #3
 8001800:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 3;
 8001802:	2303      	movs	r3, #3
 8001804:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001806:	230f      	movs	r3, #15
 8001808:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800180a:	2310      	movs	r3, #16
 800180c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800180e:	2311      	movs	r3, #17
 8001810:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	4619      	mov	r1, r3
 800181c:	4808      	ldr	r0, [pc, #32]	; (8001840 <_ZL11MX_FMC_Initv+0xd4>)
 800181e:	f007 f813 	bl	8008848 <HAL_SRAM_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	bf14      	ite	ne
 8001828:	2301      	movne	r3, #1
 800182a:	2300      	moveq	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <_ZL11MX_FMC_Initv+0xca>
  {
    Error_Handler( );
 8001832:	f000 f941 	bl	8001ab8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001836:	bf00      	nop
 8001838:	3720      	adds	r7, #32
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2004ccc8 	.word	0x2004ccc8
 8001844:	420d0400 	.word	0x420d0400
 8001848:	420d0504 	.word	0x420d0504

0800184c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001862:	4b7b      	ldr	r3, [pc, #492]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 8001864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001868:	4a79      	ldr	r2, [pc, #484]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001872:	4b77      	ldr	r3, [pc, #476]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 8001874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001880:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 8001882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001886:	4a72      	ldr	r2, [pc, #456]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001890:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 8001892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800189e:	4b6c      	ldr	r3, [pc, #432]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 80018a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018a4:	4a6a      	ldr	r2, [pc, #424]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 80018a6:	f043 0320 	orr.w	r3, r3, #32
 80018aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018ae:	4b68      	ldr	r3, [pc, #416]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 80018b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4b64      	ldr	r3, [pc, #400]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 80018be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018c2:	4a63      	ldr	r2, [pc, #396]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018cc:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 80018ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018da:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 80018dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018e0:	4a5b      	ldr	r2, [pc, #364]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018ea:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 80018ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018f8:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 80018fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018fe:	4a54      	ldr	r2, [pc, #336]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 8001900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001904:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001908:	4b51      	ldr	r3, [pc, #324]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 800190a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800190e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 8001918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800191c:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <_ZL12MX_GPIO_Initv+0x204>)
 8001928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	2104      	movs	r1, #4
 8001938:	4846      	ldr	r0, [pc, #280]	; (8001a54 <_ZL12MX_GPIO_Initv+0x208>)
 800193a:	f001 fdf3 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	2104      	movs	r1, #4
 8001942:	4845      	ldr	r0, [pc, #276]	; (8001a58 <_ZL12MX_GPIO_Initv+0x20c>)
 8001944:	f001 fdee 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	4843      	ldr	r0, [pc, #268]	; (8001a5c <_ZL12MX_GPIO_Initv+0x210>)
 800194e:	f001 fde9 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	21a0      	movs	r1, #160	; 0xa0
 8001956:	4842      	ldr	r0, [pc, #264]	; (8001a60 <_ZL12MX_GPIO_Initv+0x214>)
 8001958:	f001 fde4 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 800195c:	2304      	movs	r3, #4
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4619      	mov	r1, r3
 8001972:	4838      	ldr	r0, [pc, #224]	; (8001a54 <_ZL12MX_GPIO_Initv+0x208>)
 8001974:	f001 fbfe 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800197e:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <_ZL12MX_GPIO_Initv+0x218>)
 8001980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4833      	ldr	r0, [pc, #204]	; (8001a5c <_ZL12MX_GPIO_Initv+0x210>)
 800198e:	f001 fbf1 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 8001992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <_ZL12MX_GPIO_Initv+0x21c>)
 800199a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4831      	ldr	r0, [pc, #196]	; (8001a6c <_ZL12MX_GPIO_Initv+0x220>)
 80019a8:	f001 fbe4 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80019ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4827      	ldr	r0, [pc, #156]	; (8001a60 <_ZL12MX_GPIO_Initv+0x214>)
 80019c2:	f001 fbd7 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80019c6:	2304      	movs	r3, #4
 80019c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d2:	2302      	movs	r3, #2
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	481e      	ldr	r0, [pc, #120]	; (8001a58 <_ZL12MX_GPIO_Initv+0x20c>)
 80019de:	f001 fbc9 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ee:	2302      	movs	r3, #2
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4818      	ldr	r0, [pc, #96]	; (8001a5c <_ZL12MX_GPIO_Initv+0x210>)
 80019fa:	f001 fbbb 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 80019fe:	2320      	movs	r3, #32
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4812      	ldr	r0, [pc, #72]	; (8001a60 <_ZL12MX_GPIO_Initv+0x214>)
 8001a16:	f001 fbad 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a26:	2302      	movs	r3, #2
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <_ZL12MX_GPIO_Initv+0x214>)
 8001a32:	f001 fb9f 	bl	8003174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2013      	movs	r0, #19
 8001a3c:	f001 f988 	bl	8002d50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001a40:	2013      	movs	r0, #19
 8001a42:	f001 f99f 	bl	8002d84 <HAL_NVIC_EnableIRQ>

}
 8001a46:	bf00      	nop
 8001a48:	3730      	adds	r7, #48	; 0x30
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	46020c00 	.word	0x46020c00
 8001a54:	42021000 	.word	0x42021000
 8001a58:	42021800 	.word	0x42021800
 8001a5c:	42020800 	.word	0x42020800
 8001a60:	42020400 	.word	0x42020400
 8001a64:	10210000 	.word	0x10210000
 8001a68:	10110000 	.word	0x10110000
 8001a6c:	42021400 	.word	0x42021400

08001a70 <signalVSync_caller>:

/* USER CODE BEGIN 4 */

void signalVSync_caller(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001a74:	2104      	movs	r1, #4
 8001a76:	4802      	ldr	r0, [pc, #8]	; (8001a80 <signalVSync_caller+0x10>)
 8001a78:	f001 fd6c 	bl	8003554 <HAL_GPIO_TogglePin>
//	touchgfx::OSWrappers::signalVSync();
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	42021800 	.word	0x42021800

08001a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a96:	f000 fc89 	bl	80023ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == &htim16)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x22>
  {
	  touchgfx::OSWrappers::signalVSync();
 8001aa2:	f010 fba7 	bl	80121f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
  }
  /* USER CODE END Callback 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	2004c6e0 	.word	0x2004c6e0

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <Error_Handler+0x8>
	...

08001ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_MspInit+0x34>)
 8001acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad0:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_MspInit+0x34>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <HAL_MspInit+0x34>)
 8001adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f001 f926 	bl	8002d3a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	46020c00 	.word	0x46020c00

08001afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0bc      	sub	sp, #240	; 0xf0
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	22c8      	movs	r2, #200	; 0xc8
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f024 fd00 	bl	8026522 <memset>
  if(hadc->Instance==ADC1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <HAL_ADC_MspInit+0xbc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d140      	bne.n	8001bae <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001b2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001b38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 fa35 	bl	8005fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001b50:	f7ff ffb2 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_ADC_MspInit+0xc0>)
 8001b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <HAL_ADC_MspInit+0xc0>)
 8001b5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_ADC_MspInit+0xc0>)
 8001b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_ADC_MspInit+0xc0>)
 8001b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b78:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_ADC_MspInit+0xc0>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_ADC_MspInit+0xc0>)
 8001b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001b90:	2304      	movs	r3, #4
 8001b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b96:	2303      	movs	r3, #3
 8001b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <HAL_ADC_MspInit+0xc4>)
 8001baa:	f001 fae3 	bl	8003174 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bae:	bf00      	nop
 8001bb0:	37f0      	adds	r7, #240	; 0xf0
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	42028000 	.word	0x42028000
 8001bbc:	46020c00 	.word	0x46020c00
 8001bc0:	42020800 	.word	0x42020800

08001bc4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <HAL_CRC_MspInit+0x3c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d10e      	bne.n	8001bf4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_CRC_MspInit+0x40>)
 8001bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bdc:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_CRC_MspInit+0x40>)
 8001bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_CRC_MspInit+0x40>)
 8001be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40023000 	.word	0x40023000
 8001c04:	46020c00 	.word	0x46020c00

08001c08 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <HAL_DMA2D_MspInit+0x3c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d10e      	bne.n	8001c38 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_DMA2D_MspInit+0x40>)
 8001c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c20:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_DMA2D_MspInit+0x40>)
 8001c22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_DMA2D_MspInit+0x40>)
 8001c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	4002b000 	.word	0x4002b000
 8001c48:	46020c00 	.word	0x46020c00

08001c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_TIM_Base_MspInit+0x84>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d117      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_TIM_Base_MspInit+0x88>)
 8001c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c64:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <HAL_TIM_Base_MspInit+0x88>)
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_TIM_Base_MspInit+0x88>)
 8001c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	202e      	movs	r0, #46	; 0x2e
 8001c82:	f001 f865 	bl	8002d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c86:	202e      	movs	r0, #46	; 0x2e
 8001c88:	f001 f87c 	bl	8002d84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c8c:	e01b      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM16)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d116      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_TIM_Base_MspInit+0x88>)
 8001c9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c9e:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <HAL_TIM_Base_MspInit+0x88>)
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_TIM_Base_MspInit+0x88>)
 8001caa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2046      	movs	r0, #70	; 0x46
 8001cbc:	f001 f848 	bl	8002d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001cc0:	2046      	movs	r0, #70	; 0x46
 8001cc2:	f001 f85f 	bl	8002d84 <HAL_NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	46020c00 	.word	0x46020c00
 8001cd8:	40014400 	.word	0x40014400

08001cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0bc      	sub	sp, #240	; 0xf0
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	22c8      	movs	r2, #200	; 0xc8
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f024 fc10 	bl	8026522 <memset>
  if(huart->Instance==USART1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <HAL_UART_MspInit+0xc4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d145      	bne.n	8001d98 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d0c:	f04f 0201 	mov.w	r2, #1
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 f947 	bl	8005fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001d2c:	f7ff fec4 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_UART_MspInit+0xc8>)
 8001d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_UART_MspInit+0xc8>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_UART_MspInit+0xc8>)
 8001d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_UART_MspInit+0xc8>)
 8001d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d54:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <HAL_UART_MspInit+0xc8>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_UART_MspInit+0xc8>)
 8001d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001d6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d86:	2307      	movs	r3, #7
 8001d88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d90:	4619      	mov	r1, r3
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <HAL_UART_MspInit+0xcc>)
 8001d94:	f001 f9ee 	bl	8003174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	37f0      	adds	r7, #240	; 0xf0
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40013800 	.word	0x40013800
 8001da4:	46020c00 	.word	0x46020c00
 8001da8:	42020000 	.word	0x42020000

08001dac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b0be      	sub	sp, #248	; 0xf8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc4:	f107 0318 	add.w	r3, r7, #24
 8001dc8:	22c8      	movs	r2, #200	; 0xc8
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f024 fba8 	bl	8026522 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a3c      	ldr	r2, [pc, #240]	; (8001ec8 <HAL_PCD_MspInit+0x11c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d171      	bne.n	8001ec0 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ddc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 f8de 	bl	8005fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001dfe:	f7ff fe5b 	bl	8001ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e08:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001e20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001e3a:	230a      	movs	r3, #10
 8001e3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4822      	ldr	r0, [pc, #136]	; (8001ed0 <HAL_PCD_MspInit+0x124>)
 8001e48:	f001 f994 	bl	8003174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e52:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d119      	bne.n	8001eac <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001e96:	f002 fd89 	bl	80049ac <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_PCD_MspInit+0x120>)
 8001ea2:	f023 0304 	bic.w	r3, r3, #4
 8001ea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001eaa:	e001      	b.n	8001eb0 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001eac:	f002 fd7e 	bl	80049ac <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2049      	movs	r0, #73	; 0x49
 8001eb6:	f000 ff4b 	bl	8002d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001eba:	2049      	movs	r0, #73	; 0x49
 8001ebc:	f000 ff62 	bl	8002d84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	37f8      	adds	r7, #248	; 0xf8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	42040000 	.word	0x42040000
 8001ecc:	46020c00 	.word	0x46020c00
 8001ed0:	42020000 	.word	0x42020000

08001ed4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_FMC_MspInit+0x8c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d132      	bne.n	8001f56 <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_FMC_MspInit+0x8c>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_FMC_MspInit+0x90>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_FMC_MspInit+0x90>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_FMC_MspInit+0x90>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f14:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001f18:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f26:	230c      	movs	r3, #12
 8001f28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480e      	ldr	r0, [pc, #56]	; (8001f68 <HAL_FMC_MspInit+0x94>)
 8001f30:	f001 f920 	bl	8003174 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001f34:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001f38:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f46:	230c      	movs	r3, #12
 8001f48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <HAL_FMC_MspInit+0x98>)
 8001f50:	f001 f910 	bl	8003174 <HAL_GPIO_Init>
 8001f54:	e000      	b.n	8001f58 <HAL_FMC_MspInit+0x84>
    return;
 8001f56:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2004cd20 	.word	0x2004cd20
 8001f64:	46020c00 	.word	0x46020c00
 8001f68:	42021000 	.word	0x42021000
 8001f6c:	42020c00 	.word	0x42020c00

08001f70 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f78:	f7ff ffac 	bl	8001ed4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08e      	sub	sp, #56	; 0x38
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_InitTick+0xcc>)
 8001f96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_InitTick+0xcc>)
 8001f9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fa0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <HAL_InitTick+0xcc>)
 8001fa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fb2:	f107 0210 	add.w	r2, r7, #16
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 ff3b 	bl	8005e38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fc2:	f003 ff11 	bl	8005de8 <HAL_RCC_GetPCLK2Freq>
 8001fc6:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fca:	4a22      	ldr	r2, [pc, #136]	; (8002054 <HAL_InitTick+0xd0>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	0c9b      	lsrs	r3, r3, #18
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_InitTick+0xd4>)
 8001fd8:	4a20      	ldr	r2, [pc, #128]	; (800205c <HAL_InitTick+0xd8>)
 8001fda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_InitTick+0xd4>)
 8001fde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fe2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_InitTick+0xd4>)
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_InitTick+0xd4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_InitTick+0xd4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001ff6:	4818      	ldr	r0, [pc, #96]	; (8002058 <HAL_InitTick+0xd4>)
 8001ff8:	f006 fc76 	bl	80088e8 <HAL_TIM_Base_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8002002:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800200a:	4813      	ldr	r0, [pc, #76]	; (8002058 <HAL_InitTick+0xd4>)
 800200c:	f006 fcc4 	bl	8008998 <HAL_TIM_Base_Start_IT>
 8002010:	4603      	mov	r3, r0
 8002012:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8002016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10e      	bne.n	800203c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d808      	bhi.n	8002036 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002024:	2200      	movs	r2, #0
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	202a      	movs	r0, #42	; 0x2a
 800202a:	f000 fe91 	bl	8002d50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202e:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <HAL_InitTick+0xdc>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e002      	b.n	800203c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800203c:	202a      	movs	r0, #42	; 0x2a
 800203e:	f000 fea1 	bl	8002d84 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002042:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002046:	4618      	mov	r0, r3
 8002048:	3738      	adds	r7, #56	; 0x38
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	46020c00 	.word	0x46020c00
 8002054:	431bde83 	.word	0x431bde83
 8002058:	2004cd24 	.word	0x2004cd24
 800205c:	40012c00 	.word	0x40012c00
 8002060:	2002580c 	.word	0x2002580c

08002064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <NMI_Handler+0x4>

0800206a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <MemManage_Handler+0x4>

08002076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <UsageFault_Handler+0x4>

08002082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_RIGHT_Pin);
 8002094:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002098:	f001 fa76 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <TIM1_UP_IRQHandler+0x10>)
 80020a6:	f006 fd17 	bl	8008ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2004cd24 	.word	0x2004cd24

080020b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020b8:	4805      	ldr	r0, [pc, #20]	; (80020d0 <TIM3_IRQHandler+0x1c>)
 80020ba:	f006 fd0d 	bl	8008ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	4804      	ldr	r0, [pc, #16]	; (80020d4 <TIM3_IRQHandler+0x20>)
 80020c2:	f001 fa47 	bl	8003554 <HAL_GPIO_TogglePin>
signalVSync_caller();
 80020c6:	f7ff fcd3 	bl	8001a70 <signalVSync_caller>
  /* USER CODE END TIM3_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2004c694 	.word	0x2004c694
 80020d4:	42020400 	.word	0x42020400

080020d8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <TIM16_IRQHandler+0x10>)
 80020de:	f006 fcfb 	bl	8008ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2004c6e0 	.word	0x2004c6e0

080020ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <OTG_FS_IRQHandler+0x10>)
 80020f2:	f001 fc2b 	bl	800394c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2004c7bc 	.word	0x2004c7bc

08002100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
	return 1;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_kill>:

int _kill(int pid, int sig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800211a:	f024 f9a9 	bl	8026470 <__errno>
 800211e:	4603      	mov	r3, r0
 8002120:	2216      	movs	r2, #22
 8002122:	601a      	str	r2, [r3, #0]
	return -1;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_exit>:

void _exit (int status)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ffe7 	bl	8002110 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002142:	e7fe      	b.n	8002142 <_exit+0x12>

08002144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e00a      	b.n	800216c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002156:	e000      	b.n	800215a <_read+0x16>
 8002158:	bf00      	nop
 800215a:	4601      	mov	r1, r0
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	60ba      	str	r2, [r7, #8]
 8002162:	b2ca      	uxtb	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf0      	blt.n	8002156 <_read+0x12>
	}

return len;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e009      	b.n	80021a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	60ba      	str	r2, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	e000      	b.n	800219e <_write+0x20>
 800219c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbf1      	blt.n	8002190 <_write+0x12>
	}
	return len;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_close>:

int _close(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	return -1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021de:	605a      	str	r2, [r3, #4]
	return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_isatty>:

int _isatty(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	return 1;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
	return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f024 f90e 	bl	8026470 <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200c0000 	.word	0x200c0000
 8002280:	00000400 	.word	0x00000400
 8002284:	2004cd70 	.word	0x2004cd70
 8002288:	2004f978 	.word	0x2004f978

0800228c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <SystemInit+0x68>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <SystemInit+0x68>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <SystemInit+0x6c>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <SystemInit+0x6c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <SystemInit+0x6c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <SystemInit+0x6c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <SystemInit+0x6c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <SystemInit+0x6c>)
 80022be:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022c2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <SystemInit+0x6c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <SystemInit+0x6c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <SystemInit+0x6c>)
 80022d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <SystemInit+0x6c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SystemInit+0x68>)
 80022e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022e6:	609a      	str	r2, [r3, #8]
  #endif
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00
 80022f8:	46020c00 	.word	0x46020c00

080022fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80022fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002334 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002300:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002302:	e003      	b.n	800230c <LoopCopyDataInit>

08002304 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002306:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002308:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800230a:	3104      	adds	r1, #4

0800230c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800230c:	480b      	ldr	r0, [pc, #44]	; (800233c <LoopForever+0xa>)
	ldr	r3, =_edata
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002310:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002312:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002314:	d3f6      	bcc.n	8002304 <CopyDataInit>
	ldr	r2, =_sbss
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002318:	e002      	b.n	8002320 <LoopFillZerobss>

0800231a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800231a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800231c:	f842 3b04 	str.w	r3, [r2], #4

08002320 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <LoopForever+0x16>)
	cmp	r2, r3
 8002322:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002324:	d3f9      	bcc.n	800231a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002326:	f7ff ffb1 	bl	800228c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800232a:	f024 f8b9 	bl	80264a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800232e:	f7fe febf 	bl	80010b0 <main>

08002332 <LoopForever>:

LoopForever:
    b LoopForever
 8002332:	e7fe      	b.n	8002332 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002334:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002338:	0804f518 	.word	0x0804f518
	ldr	r0, =_sdata
 800233c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002340:	20025900 	.word	0x20025900
	ldr	r2, =_sbss
 8002344:	2004b100 	.word	0x2004b100
	ldr	r3, = _ebss
 8002348:	2004f974 	.word	0x2004f974

0800234c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800234c:	e7fe      	b.n	800234c <ADC1_IRQHandler>
	...

08002350 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_Init+0x4c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_Init+0x4c>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002360:	2003      	movs	r0, #3
 8002362:	f000 fcea 	bl	8002d3a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002366:	f003 fc09 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <HAL_Init+0x50>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	490b      	ldr	r1, [pc, #44]	; (80023a4 <HAL_Init+0x54>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_Init+0x58>)
 800237e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002380:	2007      	movs	r0, #7
 8002382:	f7ff fdff 	bl	8001f84 <HAL_InitTick>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e002      	b.n	8002396 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002390:	f7ff fb98 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40022000 	.word	0x40022000
 80023a0:	46020c00 	.word	0x46020c00
 80023a4:	080285e4 	.word	0x080285e4
 80023a8:	20025808 	.word	0x20025808

080023ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_IncTick+0x20>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_IncTick+0x24>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <HAL_IncTick+0x24>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20025810 	.word	0x20025810
 80023d0:	2004cd74 	.word	0x2004cd74

080023d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_GetTick+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	2004cd74 	.word	0x2004cd74

080023ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f4:	f7ff ffee 	bl	80023d4 <HAL_GetTick>
 80023f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d005      	beq.n	8002412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_Delay+0x44>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002412:	bf00      	nop
 8002414:	f7ff ffde 	bl	80023d4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	429a      	cmp	r2, r3
 8002422:	d8f7      	bhi.n	8002414 <HAL_Delay+0x28>
  {
  }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20025810 	.word	0x20025810

08002434 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	601a      	str	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800246c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	2a00      	cmp	r2, #0
 8002484:	d002      	beq.n	800248c <LL_ADC_SetGainCompensation+0x32>
 8002486:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800248a:	e000      	b.n	800248e <LL_ADC_SetGainCompensation+0x34>
 800248c:	2200      	movs	r2, #0
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2107      	movs	r1, #7
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	401a      	ands	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	431a      	orrs	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6093      	str	r3, [r2, #8]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002516:	d101      	bne.n	800251c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800253a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800253e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	609a      	str	r2, [r3, #8]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002566:	d101      	bne.n	800256c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <LL_ADC_IsEnabled+0x18>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_ADC_IsEnabled+0x1a>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d101      	bne.n	80025b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d101      	bne.n	80025de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e2e3      	b.n	8002bd4 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a92      	ldr	r2, [pc, #584]	; (8002864 <HAL_ADC_Init+0x278>)
 800261a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fa69 	bl	8001afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff60 	bl	8002502 <LL_ADC_IsDeepPowerDownEnabled>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff46 	bl	80024de <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff7b 	bl	8002552 <LL_ADC_IsInternalRegulatorEnabled>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d115      	bne.n	800268e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff5f 	bl	800252a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800266c:	4b7e      	ldr	r3, [pc, #504]	; (8002868 <HAL_ADC_Init+0x27c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	4a7e      	ldr	r2, [pc, #504]	; (800286c <HAL_ADC_Init+0x280>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002680:	e002      	b.n	8002688 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3b01      	subs	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f9      	bne.n	8002682 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff5d 	bl	8002552 <LL_ADC_IsInternalRegulatorEnabled>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10e      	bne.n	80026bc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a2:	f043 0210 	orr.w	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff6d 	bl	80025a0 <LL_ADC_REG_IsConversionOngoing>
 80026c6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f040 8274 	bne.w	8002bbe <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f040 8270 	bne.w	8002bbe <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026e6:	f043 0202 	orr.w	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff41 	bl	800257a <LL_ADC_IsEnabled>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d14e      	bne.n	800279c <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a58      	ldr	r2, [pc, #352]	; (8002864 <HAL_ADC_Init+0x278>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d028      	beq.n	800275a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a58      	ldr	r2, [pc, #352]	; (8002870 <HAL_ADC_Init+0x284>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d109      	bne.n	8002726 <HAL_ADC_Init+0x13a>
 8002712:	4857      	ldr	r0, [pc, #348]	; (8002870 <HAL_ADC_Init+0x284>)
 8002714:	f7ff ff31 	bl	800257a <LL_ADC_IsEnabled>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	e008      	b.n	8002738 <HAL_ADC_Init+0x14c>
 8002726:	484f      	ldr	r0, [pc, #316]	; (8002864 <HAL_ADC_Init+0x278>)
 8002728:	f7ff ff27 	bl	800257a <LL_ADC_IsEnabled>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	bf0c      	ite	eq
 8002732:	2301      	moveq	r3, #1
 8002734:	2300      	movne	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d02f      	beq.n	800279c <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a4b      	ldr	r2, [pc, #300]	; (8002870 <HAL_ADC_Init+0x284>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_ADC_Init+0x15e>
 8002746:	4a4b      	ldr	r2, [pc, #300]	; (8002874 <HAL_ADC_Init+0x288>)
 8002748:	e000      	b.n	800274c <HAL_ADC_Init+0x160>
 800274a:	4a4b      	ldr	r2, [pc, #300]	; (8002878 <HAL_ADC_Init+0x28c>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f7ff fe6e 	bl	8002434 <LL_ADC_SetCommonClock>
 8002758:	e020      	b.n	800279c <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f023 010c 	bic.w	r1, r3, #12
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800276c:	4293      	cmp	r3, r2
 800276e:	d005      	beq.n	800277c <HAL_ADC_Init+0x190>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	3b01      	subs	r3, #1
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	e000      	b.n	800277e <HAL_ADC_Init+0x192>
 800277c:	230c      	movs	r3, #12
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	430b      	orrs	r3, r1
 8002784:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002786:	4b3c      	ldr	r3, [pc, #240]	; (8002878 <HAL_ADC_Init+0x28c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002796:	4938      	ldr	r1, [pc, #224]	; (8002878 <HAL_ADC_Init+0x28c>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a30      	ldr	r2, [pc, #192]	; (8002864 <HAL_ADC_Init+0x278>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d010      	beq.n	80027c8 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ac:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027b2:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80027b8:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80027c0:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80027c2:	4313      	orrs	r3, r2
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	e030      	b.n	800282a <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7f1b      	ldrb	r3, [r3, #28]
 80027cc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d4:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027d6:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027dc:	2a00      	cmp	r2, #0
 80027de:	d002      	beq.n	80027e6 <HAL_ADC_Init+0x1fa>
 80027e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027e4:	e000      	b.n	80027e8 <HAL_ADC_Init+0x1fc>
 80027e6:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80027e8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80027ee:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da04      	bge.n	8002802 <HAL_ADC_Init+0x216>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002800:	e001      	b.n	8002806 <HAL_ADC_Init+0x21a>
 8002802:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8002806:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4918      	ldr	r1, [pc, #96]	; (8002870 <HAL_ADC_Init+0x284>)
 800280e:	428b      	cmp	r3, r1
 8002810:	d103      	bne.n	800281a <HAL_ADC_Init+0x22e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002818:	e003      	b.n	8002822 <HAL_ADC_Init+0x236>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002820:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002822:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	4313      	orrs	r3, r2
 8002828:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d12f      	bne.n	8002894 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <HAL_ADC_Init+0x278>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	3b01      	subs	r3, #1
 8002844:	045b      	lsls	r3, r3, #17
 8002846:	6a3a      	ldr	r2, [r7, #32]
 8002848:	4313      	orrs	r3, r2
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	e022      	b.n	8002894 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002854:	2b00      	cmp	r3, #0
 8002856:	d111      	bne.n	800287c <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	623b      	str	r3, [r7, #32]
 8002860:	e018      	b.n	8002894 <HAL_ADC_Init+0x2a8>
 8002862:	bf00      	nop
 8002864:	46021000 	.word	0x46021000
 8002868:	20025808 	.word	0x20025808
 800286c:	053e2d63 	.word	0x053e2d63
 8002870:	42028000 	.word	0x42028000
 8002874:	42028308 	.word	0x42028308
 8002878:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a93      	ldr	r2, [pc, #588]	; (8002ae8 <HAL_ADC_Init+0x4fc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d018      	beq.n	80028d0 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	4313      	orrs	r3, r2
 80028b4:	6a3a      	ldr	r2, [r7, #32]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	4b8a      	ldr	r3, [pc, #552]	; (8002aec <HAL_ADC_Init+0x500>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	6a39      	ldr	r1, [r7, #32]
 80028ca:	430b      	orrs	r3, r1
 80028cc:	60d3      	str	r3, [r2, #12]
 80028ce:	e033      	b.n	8002938 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	4313      	orrs	r3, r2
 80028e6:	6a3a      	ldr	r2, [r7, #32]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 80028f6:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	6a39      	ldr	r1, [r7, #32]
 8002900:	430b      	orrs	r3, r1
 8002902:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1a      	ldr	r2, [r3, #32]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a6a      	ldr	r2, [pc, #424]	; (8002ae8 <HAL_ADC_Init+0x4fc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	f000 8093 	beq.w	8002a6a <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fe29 	bl	80025a0 <LL_ADC_REG_IsConversionOngoing>
 800294e:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fe36 	bl	80025c6 <LL_ADC_INJ_IsConversionOngoing>
 800295a:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d161      	bne.n	8002a26 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d15e      	bne.n	8002a26 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7f1b      	ldrb	r3, [r3, #28]
 800296c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	495f      	ldr	r1, [pc, #380]	; (8002af0 <HAL_ADC_Init+0x504>)
 8002974:	428b      	cmp	r3, r1
 8002976:	d102      	bne.n	800297e <HAL_ADC_Init+0x392>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	e002      	b.n	8002984 <HAL_ADC_Init+0x398>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002984:	4313      	orrs	r3, r2
 8002986:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	6a39      	ldr	r1, [r7, #32]
 800299c:	430b      	orrs	r3, r1
 800299e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f7ff fd51 	bl	800245a <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d11e      	bne.n	8002a00 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <HAL_ADC_Init+0x508>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80029d6:	0411      	lsls	r1, r2, #16
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029dc:	4311      	orrs	r1, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80029e8:	4311      	orrs	r1, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029ee:	0892      	lsrs	r2, r2, #2
 80029f0:	430a      	orrs	r2, r1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	611a      	str	r2, [r3, #16]
 80029fe:	e007      	b.n	8002a10 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d10c      	bne.n	8002a48 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f023 010f 	bic.w	r1, r3, #15
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	1e5a      	subs	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
 8002a46:	e007      	b.n	8002a58 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 020f 	bic.w	r2, r2, #15
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5c:	f023 0303 	bic.w	r3, r3, #3
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a68:	e0b2      	b.n	8002bd0 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002a72:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8002a78:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8002a7e:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d103      	bne.n	8002a98 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_ADC_Init+0x50c>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	69f9      	ldr	r1, [r7, #28]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	f7ff fcf2 	bl	80024a0 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002aca:	f7ff fce9 	bl	80024a0 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d112      	bne.n	8002afc <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f062 020f 	orn	r2, r2, #15
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae6:	e044      	b.n	8002b72 <HAL_ADC_Init+0x586>
 8002ae8:	46021000 	.word	0x46021000
 8002aec:	fff0c013 	.word	0xfff0c013
 8002af0:	42028000 	.word	0x42028000
 8002af4:	fc00f81e 	.word	0xfc00f81e
 8002af8:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b04:	d135      	bne.n	8002b72 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	e00d      	b.n	8002b28 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	d006      	beq.n	8002b30 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b07      	cmp	r3, #7
 8002b2c:	d9ee      	bls.n	8002b0c <HAL_ADC_Init+0x520>
 8002b2e:	e000      	b.n	8002b32 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8002b30:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d108      	bne.n	8002b4a <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f062 020f 	orn	r2, r2, #15
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
 8002b48:	e013      	b.n	8002b72 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	f003 031c 	and.w	r3, r3, #28
 8002b5c:	f06f 020f 	mvn.w	r2, #15
 8002b60:	fa02 f103 	lsl.w	r1, r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <HAL_ADC_Init+0x5f0>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	6a3a      	ldr	r2, [r7, #32]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d10b      	bne.n	8002b9a <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b8c:	f023 0303 	bic.w	r3, r3, #3
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002b98:	e01a      	b.n	8002bd0 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9e:	f023 0312 	bic.w	r3, r3, #18
 8002ba2:	f043 0210 	orr.w	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002bbc:	e008      	b.n	8002bd0 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc2:	f043 0210 	orr.w	r2, r3, #16
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3728      	adds	r7, #40	; 0x28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	833ffff3 	.word	0x833ffff3

08002be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c12:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <__NVIC_SetPriorityGrouping+0x44>)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	60d3      	str	r3, [r2, #12]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <__NVIC_GetPriorityGrouping+0x18>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	f003 0307 	and.w	r3, r3, #7
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	db0b      	blt.n	8002c6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4907      	ldr	r1, [pc, #28]	; (8002c7c <__NVIC_EnableIRQ+0x38>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	2001      	movs	r0, #1
 8002c66:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e100 	.word	0xe000e100

08002c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	db0a      	blt.n	8002caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	490c      	ldr	r1, [pc, #48]	; (8002ccc <__NVIC_SetPriority+0x4c>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca8:	e00a      	b.n	8002cc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4908      	ldr	r1, [pc, #32]	; (8002cd0 <__NVIC_SetPriority+0x50>)
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	3b04      	subs	r3, #4
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	761a      	strb	r2, [r3, #24]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000e100 	.word	0xe000e100
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f1c3 0307 	rsb	r3, r3, #7
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	bf28      	it	cs
 8002cf2:	2304      	movcs	r3, #4
 8002cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d902      	bls.n	8002d04 <NVIC_EncodePriority+0x30>
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3b03      	subs	r3, #3
 8002d02:	e000      	b.n	8002d06 <NVIC_EncodePriority+0x32>
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	401a      	ands	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43d9      	mvns	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	4313      	orrs	r3, r2
         );
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ff4c 	bl	8002be0 <__NVIC_SetPriorityGrouping>
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5e:	f7ff ff63 	bl	8002c28 <__NVIC_GetPriorityGrouping>
 8002d62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	6978      	ldr	r0, [r7, #20]
 8002d6a:	f7ff ffb3 	bl	8002cd4 <NVIC_EncodePriority>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff82 	bl	8002c80 <__NVIC_SetPriority>
}
 8002d7c:	bf00      	nop
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff56 	bl	8002c44 <__NVIC_EnableIRQ>
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e054      	b.n	8002e5c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7f5b      	ldrb	r3, [r3, #29]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fe fefe 	bl	8001bc4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	791b      	ldrb	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10c      	bne.n	8002df0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <HAL_CRC_Init+0xc4>)
 8002ddc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0218 	bic.w	r2, r2, #24
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	e00c      	b.n	8002e0a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6899      	ldr	r1, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f834 	bl	8002e68 <HAL_CRCEx_Polynomial_Set>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e028      	b.n	8002e5c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	795b      	ldrb	r3, [r3, #5]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1a:	611a      	str	r2, [r3, #16]
 8002e1c:	e004      	b.n	8002e28 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6912      	ldr	r2, [r2, #16]
 8002e26:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	04c11db7 	.word	0x04c11db7

08002e68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e78:	231f      	movs	r3, #31
 8002e7a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e7c:	bf00      	nop
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	613a      	str	r2, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_CRCEx_Polynomial_Set+0x34>
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b18      	cmp	r3, #24
 8002ea0:	d846      	bhi.n	8002f30 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002ea2:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002f37 	.word	0x08002f37
 8002eac:	08002f31 	.word	0x08002f31
 8002eb0:	08002f31 	.word	0x08002f31
 8002eb4:	08002f31 	.word	0x08002f31
 8002eb8:	08002f31 	.word	0x08002f31
 8002ebc:	08002f31 	.word	0x08002f31
 8002ec0:	08002f31 	.word	0x08002f31
 8002ec4:	08002f31 	.word	0x08002f31
 8002ec8:	08002f25 	.word	0x08002f25
 8002ecc:	08002f31 	.word	0x08002f31
 8002ed0:	08002f31 	.word	0x08002f31
 8002ed4:	08002f31 	.word	0x08002f31
 8002ed8:	08002f31 	.word	0x08002f31
 8002edc:	08002f31 	.word	0x08002f31
 8002ee0:	08002f31 	.word	0x08002f31
 8002ee4:	08002f31 	.word	0x08002f31
 8002ee8:	08002f19 	.word	0x08002f19
 8002eec:	08002f31 	.word	0x08002f31
 8002ef0:	08002f31 	.word	0x08002f31
 8002ef4:	08002f31 	.word	0x08002f31
 8002ef8:	08002f31 	.word	0x08002f31
 8002efc:	08002f31 	.word	0x08002f31
 8002f00:	08002f31 	.word	0x08002f31
 8002f04:	08002f31 	.word	0x08002f31
 8002f08:	08002f0d 	.word	0x08002f0d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d913      	bls.n	8002f3a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f16:	e010      	b.n	8002f3a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b07      	cmp	r3, #7
 8002f1c:	d90f      	bls.n	8002f3e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f22:	e00c      	b.n	8002f3e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	d90b      	bls.n	8002f42 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f2e:	e008      	b.n	8002f42 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	75fb      	strb	r3, [r7, #23]
      break;
 8002f34:	e006      	b.n	8002f44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f36:	bf00      	nop
 8002f38:	e004      	b.n	8002f44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f42:	bf00      	nop
  }
  if (status == HAL_OK)
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10d      	bne.n	8002f66 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 0118 	bic.w	r1, r3, #24
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e053      	b.n	800302e <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fe fe34 	bl	8001c08 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6851      	ldr	r1, [r2, #4]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	69d2      	ldr	r2, [r2, #28]
 8002fbe:	4311      	orrs	r1, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6891      	ldr	r1, [r2, #8]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6992      	ldr	r2, [r2, #24]
 8002fde:	4311      	orrs	r1, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	0c1b      	lsrs	r3, r3, #16
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68d1      	ldr	r1, [r2, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	051a      	lsls	r2, r3, #20
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	055b      	lsls	r3, r3, #21
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_DMA2D_ConfigLayer+0x20>
 8003054:	2302      	movs	r3, #2
 8003056:	e084      	b.n	8003162 <HAL_DMA2D_ConfigLayer+0x12a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	3328      	adds	r3, #40	; 0x28
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4413      	add	r3, r2
 8003078:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800308c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003098:	4b35      	ldr	r3, [pc, #212]	; (8003170 <HAL_DMA2D_ConfigLayer+0x138>)
 800309a:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b0a      	cmp	r3, #10
 80030a2:	d003      	beq.n	80030ac <HAL_DMA2D_ConfigLayer+0x74>
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d107      	bne.n	80030bc <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e005      	b.n	80030c8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d120      	bne.n	8003110 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	ea02 0103 	and.w	r1, r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b0a      	cmp	r3, #10
 80030f6:	d003      	beq.n	8003100 <HAL_DMA2D_ConfigLayer+0xc8>
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d127      	bne.n	8003150 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800310c:	629a      	str	r2, [r3, #40]	; 0x28
 800310e:	e01f      	b.n	8003150 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	ea02 0103 	and.w	r1, r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	430a      	orrs	r2, r1
 8003126:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b0a      	cmp	r3, #10
 8003138:	d003      	beq.n	8003142 <HAL_DMA2D_ConfigLayer+0x10a>
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b09      	cmp	r3, #9
 8003140:	d106      	bne.n	8003150 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800314e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	ff33000f 	.word	0xff33000f

08003174 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003186:	e1ba      	b.n	80034fe <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 81aa 	beq.w	80034f8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a55      	ldr	r2, [pc, #340]	; (80032fc <HAL_GPIO_Init+0x188>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d15d      	bne.n	8003268 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80031b2:	2201      	movs	r2, #1
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	4013      	ands	r3, r2
 80031c0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0201 	and.w	r2, r3, #1
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80031dc:	4a48      	ldr	r2, [pc, #288]	; (8003300 <HAL_GPIO_Init+0x18c>)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031e4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80031e6:	4a46      	ldr	r2, [pc, #280]	; (8003300 <HAL_GPIO_Init+0x18c>)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	08da      	lsrs	r2, r3, #3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	3208      	adds	r2, #8
 80031fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	220f      	movs	r2, #15
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	4013      	ands	r3, r2
 8003214:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220b      	movs	r2, #11
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	4313      	orrs	r3, r2
 8003228:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	3208      	adds	r2, #8
 8003232:	69f9      	ldr	r1, [r7, #28]
 8003234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	4013      	ands	r3, r2
 800324e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2202      	movs	r2, #2
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	4313      	orrs	r3, r2
 800325e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e067      	b.n	8003338 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x104>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b12      	cmp	r3, #18
 8003276:	d145      	bne.n	8003304 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	08da      	lsrs	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3208      	adds	r2, #8
 8003280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003284:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	220f      	movs	r2, #15
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	4013      	ands	r3, r2
 800329a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	08da      	lsrs	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3208      	adds	r2, #8
 80032be:	69f9      	ldr	r1, [r7, #28]
 80032c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	4013      	ands	r3, r2
 80032da:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e01e      	b.n	8003338 <HAL_GPIO_Init+0x1c4>
 80032fa:	bf00      	nop
 80032fc:	46020000 	.word	0x46020000
 8003300:	0802863c 	.word	0x0802863c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2203      	movs	r2, #3
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	4013      	ands	r3, r2
 800331a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0203 	and.w	r2, r3, #3
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	4313      	orrs	r3, r2
 8003330:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d00b      	beq.n	8003358 <HAL_GPIO_Init+0x1e4>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d007      	beq.n	8003358 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800334c:	2b11      	cmp	r3, #17
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b12      	cmp	r3, #18
 8003356:	d130      	bne.n	80033ba <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	2203      	movs	r2, #3
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	4013      	ands	r3, r2
 800336e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	4313      	orrs	r3, r2
 8003380:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800338e:	2201      	movs	r2, #1
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	4013      	ands	r3, r2
 800339c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	f003 0201 	and.w	r2, r3, #1
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d017      	beq.n	80033f2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	2203      	movs	r2, #3
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d07c      	beq.n	80034f8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80033fe:	4a47      	ldr	r2, [pc, #284]	; (800351c <HAL_GPIO_Init+0x3a8>)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	3318      	adds	r3, #24
 8003406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	220f      	movs	r2, #15
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	4013      	ands	r3, r2
 8003420:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0a9a      	lsrs	r2, r3, #10
 8003426:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <HAL_GPIO_Init+0x3ac>)
 8003428:	4013      	ands	r3, r2
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	f002 0203 	and.w	r2, r2, #3
 8003430:	00d2      	lsls	r2, r2, #3
 8003432:	4093      	lsls	r3, r2
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	4313      	orrs	r3, r2
 8003438:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800343a:	4938      	ldr	r1, [pc, #224]	; (800351c <HAL_GPIO_Init+0x3a8>)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	3318      	adds	r3, #24
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003448:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_GPIO_Init+0x3a8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	43db      	mvns	r3, r3
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	4013      	ands	r3, r2
 8003456:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800346c:	4a2b      	ldr	r2, [pc, #172]	; (800351c <HAL_GPIO_Init+0x3a8>)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003472:	4b2a      	ldr	r3, [pc, #168]	; (800351c <HAL_GPIO_Init+0x3a8>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	43db      	mvns	r3, r3
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	4013      	ands	r3, r2
 8003480:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003496:	4a21      	ldr	r2, [pc, #132]	; (800351c <HAL_GPIO_Init+0x3a8>)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800349c:	4b1f      	ldr	r3, [pc, #124]	; (800351c <HAL_GPIO_Init+0x3a8>)
 800349e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80034c2:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_GPIO_Init+0x3a8>)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80034ca:	4b14      	ldr	r3, [pc, #80]	; (800351c <HAL_GPIO_Init+0x3a8>)
 80034cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	4013      	ands	r3, r2
 80034da:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80034f0:	4a0a      	ldr	r2, [pc, #40]	; (800351c <HAL_GPIO_Init+0x3a8>)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	3301      	adds	r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	f47f ae3d 	bne.w	8003188 <HAL_GPIO_Init+0x14>
  }
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	3724      	adds	r7, #36	; 0x24
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	46022000 	.word	0x46022000
 8003520:	002f7f7f 	.word	0x002f7f7f

08003524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	4613      	mov	r3, r2
 8003532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003540:	e002      	b.n	8003548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4013      	ands	r3, r2
 800356c:	041a      	lsls	r2, r3, #16
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43d9      	mvns	r1, r3
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	400b      	ands	r3, r1
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	619a      	str	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003592:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800359e:	4a0c      	ldr	r2, [pc, #48]	; (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f814 	bl	80035d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80035b8:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f812 	bl	80035ea <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	46022000 	.word	0x46022000

080035d4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 800360a:	4b14      	ldr	r3, [pc, #80]	; (800365c <HAL_ICACHE_Disable+0x5c>)
 800360c:	2202      	movs	r2, #2
 800360e:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003610:	4b12      	ldr	r3, [pc, #72]	; (800365c <HAL_ICACHE_Disable+0x5c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a11      	ldr	r2, [pc, #68]	; (800365c <HAL_ICACHE_Disable+0x5c>)
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800361c:	f7fe feda 	bl	80023d4 <HAL_GetTick>
 8003620:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003622:	e00f      	b.n	8003644 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8003624:	f7fe fed6 	bl	80023d4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d908      	bls.n	8003644 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_ICACHE_Disable+0x5c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	71fb      	strb	r3, [r7, #7]
        break;
 8003642:	e005      	b.n	8003650 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_ICACHE_Disable+0x5c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e9      	bne.n	8003624 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8003650:	79fb      	ldrb	r3, [r7, #7]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40030400 	.word	0x40030400

08003660 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	75fb      	strb	r3, [r7, #23]
 800367e:	e034      	b.n	80036ea <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	009a      	lsls	r2, r3, #2
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8003686:	4413      	add	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	75fb      	strb	r3, [r7, #23]
 800369a:	e026      	b.n	80036ea <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80036a8:	4013      	ands	r3, r2
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	425b      	negs	r3, r3
 80036ba:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80036bc:	401a      	ands	r2, r3
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	025a      	lsls	r2, r3, #9
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80036d8:	4313      	orrs	r3, r2
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40030400 	.word	0x40030400
 80036fc:	40030420 	.word	0x40030420
 8003700:	07ff0000 	.word	0x07ff0000

08003704 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003706:	b08f      	sub	sp, #60	; 0x3c
 8003708:	af0a      	add	r7, sp, #40	; 0x28
 800370a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e116      	b.n	8003944 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7fe fb3b 	bl	8001dac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2203      	movs	r2, #3
 800373a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f006 ffad 	bl	800a6b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	687e      	ldr	r6, [r7, #4]
 8003762:	466d      	mov	r5, sp
 8003764:	f106 0410 	add.w	r4, r6, #16
 8003768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800376a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800376c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800376e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003774:	e885 0003 	stmia.w	r5, {r0, r1}
 8003778:	1d33      	adds	r3, r6, #4
 800377a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800377c:	6838      	ldr	r0, [r7, #0]
 800377e:	f006 feca 	bl	800a516 <USB_CoreInit>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0d7      	b.n	8003944 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f006 ff9b 	bl	800a6d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e04a      	b.n	800383c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	333d      	adds	r3, #61	; 0x3d
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	333c      	adds	r3, #60	; 0x3c
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	b298      	uxth	r0, r3
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3344      	adds	r3, #68	; 0x44
 80037e2:	4602      	mov	r2, r0
 80037e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037e6:	7bfa      	ldrb	r2, [r7, #15]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	3340      	adds	r3, #64	; 0x40
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3348      	adds	r3, #72	; 0x48
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	334c      	adds	r3, #76	; 0x4c
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3354      	adds	r3, #84	; 0x54
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	3301      	adds	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d3af      	bcc.n	80037a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	e044      	b.n	80038d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	3301      	adds	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d3b5      	bcc.n	800384c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	687e      	ldr	r6, [r7, #4]
 80038e8:	466d      	mov	r5, sp
 80038ea:	f106 0410 	add.w	r4, r6, #16
 80038ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80038fe:	1d33      	adds	r3, r6, #4
 8003900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003902:	6838      	ldr	r0, [r7, #0]
 8003904:	f006 ff34 	bl	800a770 <USB_DevInit>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e014      	b.n	8003944 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	2b01      	cmp	r3, #1
 8003930:	d102      	bne.n	8003938 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 ff38 	bl	80047a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f007 fa47 	bl	800add0 <USB_DevDisconnect>

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800394c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b08d      	sub	sp, #52	; 0x34
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f007 fae8 	bl	800af38 <USB_GetMode>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	f040 84b7 	bne.w	80042de <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f007 fa4c 	bl	800ae12 <USB_ReadInterrupts>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 84ad 	beq.w	80042dc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f007 fa39 	bl	800ae12 <USB_ReadInterrupts>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d107      	bne.n	80039ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f002 0202 	and.w	r2, r2, #2
 80039b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f007 fa27 	bl	800ae12 <USB_ReadInterrupts>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d161      	bne.n	8003a92 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0210 	bic.w	r2, r2, #16
 80039dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	3304      	adds	r3, #4
 80039fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	0c5b      	lsrs	r3, r3, #17
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d124      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d035      	beq.n	8003a82 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	6a38      	ldr	r0, [r7, #32]
 8003a2a:	f007 f979 	bl	800ad20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a3a:	441a      	add	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	6a1a      	ldr	r2, [r3, #32]
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a4c:	441a      	add	r2, r3
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	621a      	str	r2, [r3, #32]
 8003a52:	e016      	b.n	8003a82 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	0c5b      	lsrs	r3, r3, #17
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	2b06      	cmp	r3, #6
 8003a5e:	d110      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a66:	2208      	movs	r2, #8
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6a38      	ldr	r0, [r7, #32]
 8003a6c:	f007 f958 	bl	800ad20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a7c:	441a      	add	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0210 	orr.w	r2, r2, #16
 8003a90:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f007 f9bb 	bl	800ae12 <USB_ReadInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003aa6:	f040 80a7 	bne.w	8003bf8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f007 f9c0 	bl	800ae38 <USB_ReadDevAllOutEpInterrupt>
 8003ab8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003aba:	e099      	b.n	8003bf0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 808e 	beq.w	8003be4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f007 f9e4 	bl	800aea0 <USB_ReadDevOutEPInterrupt>
 8003ad8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00c      	beq.n	8003afe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	461a      	mov	r2, r3
 8003af2:	2301      	movs	r3, #1
 8003af4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fd27 	bl	800454c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00c      	beq.n	8003b22 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	461a      	mov	r2, r3
 8003b16:	2308      	movs	r3, #8
 8003b18:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fdfd 	bl	800471c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d030      	beq.n	8003baa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d109      	bne.n	8003b68 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b66:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4413      	add	r3, r2
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	78db      	ldrb	r3, [r3, #3]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d108      	bne.n	8003b98 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fbf0 	bl	8004378 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2320      	movs	r3, #32
 8003bc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003be2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	3301      	adds	r3, #1
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f47f af62 	bne.w	8003abc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f007 f908 	bl	800ae12 <USB_ReadInterrupts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c0c:	f040 80db 	bne.w	8003dc6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f007 f929 	bl	800ae6c <USB_ReadDevAllInEpInterrupt>
 8003c1a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c20:	e0cd      	b.n	8003dbe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80c2 	beq.w	8003db2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	4611      	mov	r1, r2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f007 f94f 	bl	800aedc <USB_ReadDevInEPInterrupt>
 8003c3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d057      	beq.n	8003cfa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	2201      	movs	r2, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69f9      	ldr	r1, [r7, #28]
 8003c66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d132      	bne.n	8003cee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	334c      	adds	r3, #76	; 0x4c
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4403      	add	r3, r0
 8003ca8:	3348      	adds	r3, #72	; 0x48
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4419      	add	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4403      	add	r3, r0
 8003cbc:	334c      	adds	r3, #76	; 0x4c
 8003cbe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d113      	bne.n	8003cee <HAL_PCD_IRQHandler+0x3a2>
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3354      	adds	r3, #84	; 0x54
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d108      	bne.n	8003cee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2101      	movs	r1, #1
 8003cea:	f007 f957 	bl	800af9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fb01 	bl	80042fc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	461a      	mov	r2, r3
 8003d12:	2308      	movs	r3, #8
 8003d14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2310      	movs	r3, #16
 8003d30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2340      	movs	r3, #64	; 0x40
 8003d4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d023      	beq.n	8003da0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d5a:	6a38      	ldr	r0, [r7, #32]
 8003d5c:	f006 fe56 	bl	800aa0c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	3338      	adds	r3, #56	; 0x38
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4413      	add	r3, r2
 8003d70:	3304      	adds	r3, #4
 8003d72:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	78db      	ldrb	r3, [r3, #3]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d108      	bne.n	8003d8e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fb01 	bl	8004390 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003daa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fb40 	bl	8004432 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	3301      	adds	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f47f af2e 	bne.w	8003c22 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f007 f821 	bl	800ae12 <USB_ReadInterrupts>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dda:	d122      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d108      	bne.n	8003e0c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e02:	2100      	movs	r1, #0
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fcf3 	bl	80047f0 <HAL_PCDEx_LPM_Callback>
 8003e0a:	e002      	b.n	8003e12 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 faa9 	bl	8004364 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f006 fff3 	bl	800ae12 <USB_ReadInterrupts>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e36:	d112      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d102      	bne.n	8003e4e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fa81 	bl	8004350 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f006 ffd5 	bl	800ae12 <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e72:	d121      	bne.n	8003eb8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003e82:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d111      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	f003 020f 	and.w	r2, r3, #15
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fca0 	bl	80047f0 <HAL_PCDEx_LPM_Callback>
 8003eb0:	e002      	b.n	8003eb8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa4c 	bl	8004350 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f006 ffa8 	bl	800ae12 <USB_ReadInterrupts>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ecc:	f040 80b7 	bne.w	800403e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2110      	movs	r1, #16
 8003eea:	4618      	mov	r0, r3
 8003eec:	f006 fd8e 	bl	800aa0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef4:	e046      	b.n	8003f84 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	461a      	mov	r2, r3
 8003f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f36:	461a      	mov	r2, r3
 8003f38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4e:	0151      	lsls	r1, r2, #5
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	440a      	add	r2, r1
 8003f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6e:	0151      	lsls	r1, r2, #5
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	440a      	add	r2, r1
 8003f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	3301      	adds	r3, #1
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d3b3      	bcc.n	8003ef6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003fa0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fba:	f043 030b 	orr.w	r3, r3, #11
 8003fbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fd0:	f043 030b 	orr.w	r3, r3, #11
 8003fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd6:	e015      	b.n	8004004 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003fee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffe:	f043 030b 	orr.w	r3, r3, #11
 8004002:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004012:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004016:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004028:	461a      	mov	r2, r3
 800402a:	f006 ffb7 	bl	800af9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800403c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f006 fee5 	bl	800ae12 <USB_ReadInterrupts>
 8004048:	4603      	mov	r3, r0
 800404a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004052:	d124      	bne.n	800409e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f006 ff7b 	bl	800af54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f006 fd4f 	bl	800ab06 <USB_GetDevSpeed>
 8004068:	4603      	mov	r3, r0
 800406a:	461a      	mov	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681c      	ldr	r4, [r3, #0]
 8004074:	f001 fe8a 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8004078:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800407e:	b2db      	uxtb	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	4620      	mov	r0, r4
 8004084:	f006 fa74 	bl	800a570 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f957 	bl	800433c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800409c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f006 feb5 	bl	800ae12 <USB_ReadInterrupts>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d10a      	bne.n	80040c8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f938 	bl	8004328 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f002 0208 	and.w	r2, r2, #8
 80040c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f006 fea0 	bl	800ae12 <USB_ReadInterrupts>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d122      	bne.n	8004122 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040e8:	2301      	movs	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
 80040ec:	e014      	b.n	8004118 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f2:	4613      	mov	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	b2db      	uxtb	r3, r3
 800410a:	4619      	mov	r1, r3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f95f 	bl	80043d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	3301      	adds	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411e:	429a      	cmp	r2, r3
 8004120:	d3e5      	bcc.n	80040ee <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f006 fe73 	bl	800ae12 <USB_ReadInterrupts>
 800412c:	4603      	mov	r3, r0
 800412e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004136:	d13b      	bne.n	80041b0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004138:	2301      	movs	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	e02b      	b.n	8004196 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3340      	adds	r3, #64	; 0x40
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d115      	bne.n	8004190 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004164:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004166:	2b00      	cmp	r3, #0
 8004168:	da12      	bge.n	8004190 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	333f      	adds	r3, #63	; 0x3f
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004186:	b2db      	uxtb	r3, r3
 8004188:	4619      	mov	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f920 	bl	80043d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	3301      	adds	r3, #1
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	429a      	cmp	r2, r3
 800419e:	d3ce      	bcc.n	800413e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80041ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f006 fe2c 	bl	800ae12 <USB_ReadInterrupts>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041c4:	d155      	bne.n	8004272 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041c6:	2301      	movs	r3, #1
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ca:	e045      	b.n	8004258 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d12e      	bne.n	8004252 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da2b      	bge.n	8004252 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004206:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800420a:	429a      	cmp	r2, r3
 800420c:	d121      	bne.n	8004252 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800424a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424e:	6053      	str	r3, [r2, #4]
            break;
 8004250:	e007      	b.n	8004262 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	3301      	adds	r3, #1
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425e:	429a      	cmp	r2, r3
 8004260:	d3b4      	bcc.n	80041cc <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f006 fdcb 	bl	800ae12 <USB_ReadInterrupts>
 800427c:	4603      	mov	r3, r0
 800427e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d10a      	bne.n	800429e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f88d 	bl	80043a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800429c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f006 fdb5 	bl	800ae12 <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d115      	bne.n	80042de <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f879 	bl	80043bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	e000      	b.n	80042de <HAL_PCD_IRQHandler+0x992>
      return;
 80042dc:	bf00      	nop
    }
  }
}
 80042de:	3734      	adds	r7, #52	; 0x34
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd90      	pop	{r4, r7, pc}

080042e4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	da0c      	bge.n	80043fe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 020f 	and.w	r2, r3, #15
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	3338      	adds	r3, #56	; 0x38
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	3304      	adds	r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e00c      	b.n	8004418 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	f003 020f 	and.w	r2, r3, #15
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	3304      	adds	r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68f9      	ldr	r1, [r7, #12]
 800441e:	4618      	mov	r0, r3
 8004420:	f006 fb96 	bl	800ab50 <USB_EPStopXfer>
 8004424:	4603      	mov	r3, r0
 8004426:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004428:	7afb      	ldrb	r3, [r7, #11]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b08a      	sub	sp, #40	; 0x28
 8004436:	af02      	add	r7, sp, #8
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	3338      	adds	r3, #56	; 0x38
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	429a      	cmp	r2, r3
 8004464:	d901      	bls.n	800446a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e06c      	b.n	8004544 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	429a      	cmp	r2, r3
 800447e:	d902      	bls.n	8004486 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3303      	adds	r3, #3
 800448a:	089b      	lsrs	r3, r3, #2
 800448c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800448e:	e02b      	b.n	80044e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d902      	bls.n	80044ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3303      	adds	r3, #3
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6919      	ldr	r1, [r3, #16]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	4603      	mov	r3, r0
 80044ca:	6978      	ldr	r0, [r7, #20]
 80044cc:	f006 fbea 	bl	800aca4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	441a      	add	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1a      	ldr	r2, [r3, #32]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	441a      	add	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d809      	bhi.n	8004512 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1a      	ldr	r2, [r3, #32]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004506:	429a      	cmp	r2, r3
 8004508:	d203      	bcs.n	8004512 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1be      	bne.n	8004490 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	429a      	cmp	r2, r3
 800451c:	d811      	bhi.n	8004542 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	2201      	movs	r2, #1
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	43db      	mvns	r3, r3
 8004538:	6939      	ldr	r1, [r7, #16]
 800453a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800453e:	4013      	ands	r3, r2
 8004540:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	333c      	adds	r3, #60	; 0x3c
 8004564:	3304      	adds	r3, #4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d17b      	bne.n	800467a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4a61      	ldr	r2, [pc, #388]	; (8004714 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	f240 80b9 	bls.w	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80b3 	beq.w	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	461a      	mov	r2, r3
 80045b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b4:	6093      	str	r3, [r2, #8]
 80045b6:	e0a7      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	461a      	mov	r2, r3
 80045d0:	2320      	movs	r3, #32
 80045d2:	6093      	str	r3, [r2, #8]
 80045d4:	e098      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f040 8093 	bne.w	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	4a4b      	ldr	r2, [pc, #300]	; (8004714 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d90f      	bls.n	800460a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004600:	461a      	mov	r2, r3
 8004602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004606:	6093      	str	r3, [r2, #8]
 8004608:	e07e      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	3304      	adds	r3, #4
 800461e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	0159      	lsls	r1, r3, #5
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	440b      	add	r3, r1
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d114      	bne.n	800466c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004654:	461a      	mov	r2, r3
 8004656:	2101      	movs	r1, #1
 8004658:	f006 fca0 	bl	800af9c <USB_EP0_OutStart>
 800465c:	e006      	b.n	800466c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	441a      	add	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff fe36 	bl	80042e4 <HAL_PCD_DataOutStageCallback>
 8004678:	e046      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	4a26      	ldr	r2, [pc, #152]	; (8004718 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d124      	bne.n	80046cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	461a      	mov	r2, r3
 800469a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469e:	6093      	str	r3, [r2, #8]
 80046a0:	e032      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	461a      	mov	r2, r3
 80046ba:	2320      	movs	r3, #32
 80046bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fe0d 	bl	80042e4 <HAL_PCD_DataOutStageCallback>
 80046ca:	e01d      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d114      	bne.n	80046fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d108      	bne.n	80046fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046f4:	461a      	mov	r2, r3
 80046f6:	2100      	movs	r1, #0
 80046f8:	f006 fc50 	bl	800af9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fdee 	bl	80042e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	4f54300a 	.word	0x4f54300a
 8004718:	4f54310a 	.word	0x4f54310a

0800471c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	333c      	adds	r3, #60	; 0x3c
 8004734:	3304      	adds	r3, #4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d90e      	bls.n	8004770 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004758:	2b00      	cmp	r3, #0
 800475a:	d009      	beq.n	8004770 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004768:	461a      	mov	r2, r3
 800476a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800476e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff fdcf 	bl	8004314 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d90c      	bls.n	8004798 <PCD_EP_OutSetupPacket_int+0x7c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d108      	bne.n	8004798 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004790:	461a      	mov	r2, r3
 8004792:	2101      	movs	r1, #1
 8004794:	f006 fc02 	bl	800af9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	4f54300a 	.word	0x4f54300a

080047a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047da:	f043 0303 	orr.w	r3, r3, #3
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004810:	4b34      	ldr	r3, [pc, #208]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004818:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	429a      	cmp	r2, r3
 8004820:	d101      	bne.n	8004826 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e057      	b.n	80048d6 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482c:	d90a      	bls.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800482e:	4b2d      	ldr	r3, [pc, #180]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4313      	orrs	r3, r2
 800483a:	4a2a      	ldr	r2, [pc, #168]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800483c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004840:	60d3      	str	r3, [r2, #12]
 8004842:	e007      	b.n	8004854 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004844:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800484c:	4925      	ldr	r1, [pc, #148]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4313      	orrs	r3, r2
 8004852:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a24      	ldr	r2, [pc, #144]	; (80048ec <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	2232      	movs	r2, #50	; 0x32
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	4a21      	ldr	r2, [pc, #132]	; (80048ec <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	3301      	adds	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004872:	e002      	b.n	800487a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b01      	subs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800487a:	4b1a      	ldr	r3, [pc, #104]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <HAL_PWREx_ControlVoltageScaling+0x84>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f3      	bne.n	8004874 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01b      	beq.n	80048ca <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a15      	ldr	r2, [pc, #84]	; (80048ec <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	099b      	lsrs	r3, r3, #6
 800489e:	2232      	movs	r2, #50	; 0x32
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	4a11      	ldr	r2, [pc, #68]	; (80048ec <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	3301      	adds	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048b0:	e002      	b.n	80048b8 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80048ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <HAL_PWREx_ControlVoltageScaling+0xc2>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f3      	bne.n	80048b2 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e000      	b.n	80048d6 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	46020800 	.word	0x46020800
 80048e8:	20025808 	.word	0x20025808
 80048ec:	10624dd3 	.word	0x10624dd3

080048f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <HAL_PWREx_GetVoltageRange+0x18>)
 80048f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	46020800 	.word	0x46020800

0800490c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004914:	4b22      	ldr	r3, [pc, #136]	; (80049a0 <HAL_PWREx_ConfigSupply+0x94>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <HAL_PWREx_ConfigSupply+0x98>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	2232      	movs	r2, #50	; 0x32
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_PWREx_ConfigSupply+0x98>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	099b      	lsrs	r3, r3, #6
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d113      	bne.n	8004960 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004938:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <HAL_PWREx_ConfigSupply+0x9c>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a1a      	ldr	r2, [pc, #104]	; (80049a8 <HAL_PWREx_ConfigSupply+0x9c>)
 800493e:	f023 0302 	bic.w	r3, r3, #2
 8004942:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004944:	e002      	b.n	800494c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b01      	subs	r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800494c:	4b16      	ldr	r3, [pc, #88]	; (80049a8 <HAL_PWREx_ConfigSupply+0x9c>)
 800494e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d116      	bne.n	8004986 <HAL_PWREx_ConfigSupply+0x7a>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f3      	bne.n	8004946 <HAL_PWREx_ConfigSupply+0x3a>
 800495e:	e012      	b.n	8004986 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a10      	ldr	r2, [pc, #64]	; (80049a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004966:	f043 0302 	orr.w	r3, r3, #2
 800496a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800496c:	e002      	b.n	8004974 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3b01      	subs	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <HAL_PWREx_ConfigSupply+0x7a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f3      	bne.n	800496e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e000      	b.n	8004992 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20025808 	.word	0x20025808
 80049a4:	10624dd3 	.word	0x10624dd3
 80049a8:	46020800 	.word	0x46020800

080049ac <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ba:	6113      	str	r3, [r2, #16]
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	46020800 	.word	0x46020800

080049cc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80049d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049da:	6113      	str	r3, [r2, #16]
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	46020800 	.word	0x46020800

080049ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08e      	sub	sp, #56	; 0x38
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f000 bec3 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a06:	4b9c      	ldr	r3, [pc, #624]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a10:	4b99      	ldr	r3, [pc, #612]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8172 	beq.w	8004d0c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <HAL_RCC_OscConfig+0x52>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	f040 80e4 	bne.w	8004bfe <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	f040 80e0 	bne.w	8004bfe <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a3e:	4b8e      	ldr	r3, [pc, #568]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d006      	beq.n	8004a58 <HAL_RCC_OscConfig+0x6c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f000 be9a 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a5c:	4b86      	ldr	r3, [pc, #536]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <HAL_RCC_OscConfig+0x86>
 8004a68:	4b83      	ldr	r3, [pc, #524]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a70:	e005      	b.n	8004a7e <HAL_RCC_OscConfig+0x92>
 8004a72:	4b81      	ldr	r3, [pc, #516]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a78:	041b      	lsls	r3, r3, #16
 8004a7a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d255      	bcs.n	8004b2e <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fa0b 	bl	8005ea8 <RCC_SetFlashLatencyFromMSIRange>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f000 be77 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a9e:	4b76      	ldr	r3, [pc, #472]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	4a75      	ldr	r2, [pc, #468]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004aa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004aa8:	6093      	str	r3, [r2, #8]
 8004aaa:	4b73      	ldr	r3, [pc, #460]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	4970      	ldr	r1, [pc, #448]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004ac4:	d309      	bcc.n	8004ada <HAL_RCC_OscConfig+0xee>
 8004ac6:	4b6c      	ldr	r3, [pc, #432]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f023 021f 	bic.w	r2, r3, #31
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	4969      	ldr	r1, [pc, #420]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60cb      	str	r3, [r1, #12]
 8004ad8:	e07e      	b.n	8004bd8 <HAL_RCC_OscConfig+0x1ec>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da0a      	bge.n	8004af8 <HAL_RCC_OscConfig+0x10c>
 8004ae2:	4b65      	ldr	r3, [pc, #404]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	015b      	lsls	r3, r3, #5
 8004af0:	4961      	ldr	r1, [pc, #388]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60cb      	str	r3, [r1, #12]
 8004af6:	e06f      	b.n	8004bd8 <HAL_RCC_OscConfig+0x1ec>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b00:	d30a      	bcc.n	8004b18 <HAL_RCC_OscConfig+0x12c>
 8004b02:	4b5d      	ldr	r3, [pc, #372]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	029b      	lsls	r3, r3, #10
 8004b10:	4959      	ldr	r1, [pc, #356]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60cb      	str	r3, [r1, #12]
 8004b16:	e05f      	b.n	8004bd8 <HAL_RCC_OscConfig+0x1ec>
 8004b18:	4b57      	ldr	r3, [pc, #348]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	03db      	lsls	r3, r3, #15
 8004b26:	4954      	ldr	r1, [pc, #336]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60cb      	str	r3, [r1, #12]
 8004b2c:	e054      	b.n	8004bd8 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004b2e:	4b52      	ldr	r3, [pc, #328]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	4a51      	ldr	r2, [pc, #324]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b38:	6093      	str	r3, [r2, #8]
 8004b3a:	4b4f      	ldr	r3, [pc, #316]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	494c      	ldr	r1, [pc, #304]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004b54:	d309      	bcc.n	8004b6a <HAL_RCC_OscConfig+0x17e>
 8004b56:	4b48      	ldr	r3, [pc, #288]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f023 021f 	bic.w	r2, r3, #31
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	4945      	ldr	r1, [pc, #276]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60cb      	str	r3, [r1, #12]
 8004b68:	e028      	b.n	8004bbc <HAL_RCC_OscConfig+0x1d0>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	da0a      	bge.n	8004b88 <HAL_RCC_OscConfig+0x19c>
 8004b72:	4b41      	ldr	r3, [pc, #260]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	015b      	lsls	r3, r3, #5
 8004b80:	493d      	ldr	r1, [pc, #244]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60cb      	str	r3, [r1, #12]
 8004b86:	e019      	b.n	8004bbc <HAL_RCC_OscConfig+0x1d0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b90:	d30a      	bcc.n	8004ba8 <HAL_RCC_OscConfig+0x1bc>
 8004b92:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	029b      	lsls	r3, r3, #10
 8004ba0:	4935      	ldr	r1, [pc, #212]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60cb      	str	r3, [r1, #12]
 8004ba6:	e009      	b.n	8004bbc <HAL_RCC_OscConfig+0x1d0>
 8004ba8:	4b33      	ldr	r3, [pc, #204]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	03db      	lsls	r3, r3, #15
 8004bb6:	4930      	ldr	r1, [pc, #192]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 f96e 	bl	8005ea8 <RCC_SetFlashLatencyFromMSIRange>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f000 bdda 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004bd8:	f001 f8d8 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bdc:	4b27      	ldr	r3, [pc, #156]	; (8004c7c <HAL_RCC_OscConfig+0x290>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd f9cf 	bl	8001f84 <HAL_InitTick>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 808a 	beq.w	8004d0a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8004bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bfa:	f000 bdc7 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d066      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004c06:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c12:	f7fd fbdf 	bl	80023d4 <HAL_GetTick>
 8004c16:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004c18:	e009      	b.n	8004c2e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c1a:	f7fd fbdb 	bl	80023d4 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d902      	bls.n	8004c2e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	f000 bdaf 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0ef      	beq.n	8004c1a <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004c40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c44:	6093      	str	r3, [r2, #8]
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	4909      	ldr	r1, [pc, #36]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004c60:	d30e      	bcc.n	8004c80 <HAL_RCC_OscConfig+0x294>
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f023 021f 	bic.w	r2, r3, #31
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	4902      	ldr	r1, [pc, #8]	; (8004c78 <HAL_RCC_OscConfig+0x28c>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60cb      	str	r3, [r1, #12]
 8004c74:	e04a      	b.n	8004d0c <HAL_RCC_OscConfig+0x320>
 8004c76:	bf00      	nop
 8004c78:	46020c00 	.word	0x46020c00
 8004c7c:	2002580c 	.word	0x2002580c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	da0a      	bge.n	8004c9e <HAL_RCC_OscConfig+0x2b2>
 8004c88:	4b9b      	ldr	r3, [pc, #620]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	015b      	lsls	r3, r3, #5
 8004c96:	4998      	ldr	r1, [pc, #608]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60cb      	str	r3, [r1, #12]
 8004c9c:	e036      	b.n	8004d0c <HAL_RCC_OscConfig+0x320>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca6:	d30a      	bcc.n	8004cbe <HAL_RCC_OscConfig+0x2d2>
 8004ca8:	4b93      	ldr	r3, [pc, #588]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	029b      	lsls	r3, r3, #10
 8004cb6:	4990      	ldr	r1, [pc, #576]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60cb      	str	r3, [r1, #12]
 8004cbc:	e026      	b.n	8004d0c <HAL_RCC_OscConfig+0x320>
 8004cbe:	4b8e      	ldr	r3, [pc, #568]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	03db      	lsls	r3, r3, #15
 8004ccc:	498a      	ldr	r1, [pc, #552]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60cb      	str	r3, [r1, #12]
 8004cd2:	e01b      	b.n	8004d0c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004cd4:	4b88      	ldr	r3, [pc, #544]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a87      	ldr	r2, [pc, #540]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ce0:	f7fd fb78 	bl	80023d4 <HAL_GetTick>
 8004ce4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004ce6:	e009      	b.n	8004cfc <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce8:	f7fd fb74 	bl	80023d4 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d902      	bls.n	8004cfc <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	f000 bd48 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004cfc:	4b7e      	ldr	r3, [pc, #504]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ef      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2fc>
 8004d08:	e000      	b.n	8004d0c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8094 	beq.w	8004e42 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_OscConfig+0x340>
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d110      	bne.n	8004d48 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d10d      	bne.n	8004d48 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	4b72      	ldr	r3, [pc, #456]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8083 	beq.w	8004e40 <HAL_RCC_OscConfig+0x454>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d17e      	bne.n	8004e40 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	f000 bd22 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d50:	d106      	bne.n	8004d60 <HAL_RCC_OscConfig+0x374>
 8004d52:	4b69      	ldr	r3, [pc, #420]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a68      	ldr	r2, [pc, #416]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e041      	b.n	8004de4 <HAL_RCC_OscConfig+0x3f8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d68:	d112      	bne.n	8004d90 <HAL_RCC_OscConfig+0x3a4>
 8004d6a:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a62      	ldr	r2, [pc, #392]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4b60      	ldr	r3, [pc, #384]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a5f      	ldr	r2, [pc, #380]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004d7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	4b5d      	ldr	r3, [pc, #372]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a5c      	ldr	r2, [pc, #368]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e029      	b.n	8004de4 <HAL_RCC_OscConfig+0x3f8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004d98:	d112      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x3d4>
 8004d9a:	4b57      	ldr	r3, [pc, #348]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a56      	ldr	r2, [pc, #344]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	4b54      	ldr	r3, [pc, #336]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a53      	ldr	r2, [pc, #332]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	4b51      	ldr	r3, [pc, #324]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a50      	ldr	r2, [pc, #320]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e011      	b.n	8004de4 <HAL_RCC_OscConfig+0x3f8>
 8004dc0:	4b4d      	ldr	r3, [pc, #308]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a4c      	ldr	r2, [pc, #304]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	4b4a      	ldr	r3, [pc, #296]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a49      	ldr	r2, [pc, #292]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	4b47      	ldr	r3, [pc, #284]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a46      	ldr	r2, [pc, #280]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004dde:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d014      	beq.n	8004e16 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004dec:	f7fd faf2 	bl	80023d4 <HAL_GetTick>
 8004df0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004df2:	e009      	b.n	8004e08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fd faee 	bl	80023d4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d902      	bls.n	8004e08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	f000 bcc2 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e08:	4b3b      	ldr	r3, [pc, #236]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ef      	beq.n	8004df4 <HAL_RCC_OscConfig+0x408>
 8004e14:	e015      	b.n	8004e42 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004e16:	f7fd fadd 	bl	80023d4 <HAL_GetTick>
 8004e1a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e1c:	e009      	b.n	8004e32 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1e:	f7fd fad9 	bl	80023d4 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b64      	cmp	r3, #100	; 0x64
 8004e2a:	d902      	bls.n	8004e32 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	f000 bcad 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e32:	4b31      	ldr	r3, [pc, #196]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1ef      	bne.n	8004e1e <HAL_RCC_OscConfig+0x432>
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d066      	beq.n	8004f1c <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_OscConfig+0x474>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d11a      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d117      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d006      	beq.n	8004e7a <HAL_RCC_OscConfig+0x48e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f000 bc89 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	491b      	ldr	r1, [pc, #108]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8e:	e045      	b.n	8004f1c <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d024      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004e98:	4b17      	ldr	r3, [pc, #92]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a16      	ldr	r2, [pc, #88]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ea4:	f7fd fa96 	bl	80023d4 <HAL_GetTick>
 8004ea8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eaa:	e009      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eac:	f7fd fa92 	bl	80023d4 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d902      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	f000 bc66 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec0:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0ef      	beq.n	8004eac <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	4907      	ldr	r1, [pc, #28]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	610b      	str	r3, [r1, #16]
 8004ee0:	e01c      	b.n	8004f1c <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <HAL_RCC_OscConfig+0x50c>)
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004eee:	f7fd fa71 	bl	80023d4 <HAL_GetTick>
 8004ef2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef4:	e00c      	b.n	8004f10 <HAL_RCC_OscConfig+0x524>
 8004ef6:	bf00      	nop
 8004ef8:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004efc:	f7fd fa6a 	bl	80023d4 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d902      	bls.n	8004f10 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	f000 bc3e 	b.w	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f10:	4baf      	ldr	r3, [pc, #700]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ef      	bne.n	8004efc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80c7 	beq.w	80050b8 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f30:	4ba7      	ldr	r3, [pc, #668]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8004f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d111      	bne.n	8004f62 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f3e:	4ba4      	ldr	r3, [pc, #656]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f44:	4aa2      	ldr	r2, [pc, #648]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004f4e:	4ba0      	ldr	r3, [pc, #640]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8004f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f62:	4b9c      	ldr	r3, [pc, #624]	; (80051d4 <HAL_RCC_OscConfig+0x7e8>)
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d118      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004f6e:	4b99      	ldr	r3, [pc, #612]	; (80051d4 <HAL_RCC_OscConfig+0x7e8>)
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	4a98      	ldr	r2, [pc, #608]	; (80051d4 <HAL_RCC_OscConfig+0x7e8>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f7a:	f7fd fa2b 	bl	80023d4 <HAL_GetTick>
 8004f7e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f82:	f7fd fa27 	bl	80023d4 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e3fb      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f94:	4b8f      	ldr	r3, [pc, #572]	; (80051d4 <HAL_RCC_OscConfig+0x7e8>)
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d05f      	beq.n	8005068 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004fa8:	4b89      	ldr	r3, [pc, #548]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8004faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fae:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d037      	beq.n	800502e <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e3da      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01b      	beq.n	8005018 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8004fe0:	4b7b      	ldr	r3, [pc, #492]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8004fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fe6:	4a7a      	ldr	r2, [pc, #488]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8004fe8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004fec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004ff0:	f7fd f9f0 	bl	80023d4 <HAL_GetTick>
 8004ff4:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff8:	f7fd f9ec 	bl	80023d4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e3c0      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800500a:	4b71      	ldr	r3, [pc, #452]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 800500c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1ef      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005018:	4b6d      	ldr	r3, [pc, #436]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 800501a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800501e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	496a      	ldr	r1, [pc, #424]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800502e:	4b68      	ldr	r3, [pc, #416]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8005030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005034:	4a66      	ldr	r2, [pc, #408]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8005036:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800503a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800503e:	f7fd f9c9 	bl	80023d4 <HAL_GetTick>
 8005042:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005046:	f7fd f9c5 	bl	80023d4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e399      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005058:	4b5d      	ldr	r3, [pc, #372]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 800505a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800505e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0ef      	beq.n	8005046 <HAL_RCC_OscConfig+0x65a>
 8005066:	e01b      	b.n	80050a0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005068:	4b59      	ldr	r3, [pc, #356]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 800506a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800506e:	4a58      	ldr	r2, [pc, #352]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8005070:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005074:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005078:	f7fd f9ac 	bl	80023d4 <HAL_GetTick>
 800507c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005080:	f7fd f9a8 	bl	80023d4 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e37c      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005092:	4b4f      	ldr	r3, [pc, #316]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8005094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1ef      	bne.n	8005080 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d107      	bne.n	80050b8 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a8:	4b49      	ldr	r3, [pc, #292]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 80050aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ae:	4a48      	ldr	r2, [pc, #288]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 80050b0:	f023 0304 	bic.w	r3, r3, #4
 80050b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8112 	beq.w	80052ea <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80050c6:	2300      	movs	r3, #0
 80050c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050cc:	4b40      	ldr	r3, [pc, #256]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 80050ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d111      	bne.n	80050fe <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050da:	4b3d      	ldr	r3, [pc, #244]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 80050dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e0:	4a3b      	ldr	r2, [pc, #236]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80050ea:	4b39      	ldr	r3, [pc, #228]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 80050ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050fe:	4b35      	ldr	r3, [pc, #212]	; (80051d4 <HAL_RCC_OscConfig+0x7e8>)
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d118      	bne.n	800513c <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800510a:	4b32      	ldr	r3, [pc, #200]	; (80051d4 <HAL_RCC_OscConfig+0x7e8>)
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	4a31      	ldr	r2, [pc, #196]	; (80051d4 <HAL_RCC_OscConfig+0x7e8>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005116:	f7fd f95d 	bl	80023d4 <HAL_GetTick>
 800511a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511e:	f7fd f959 	bl	80023d4 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e32d      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005130:	4b28      	ldr	r3, [pc, #160]	; (80051d4 <HAL_RCC_OscConfig+0x7e8>)
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01f      	beq.n	8005188 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d010      	beq.n	8005176 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005154:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8005156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800515a:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 800515c:	f043 0304 	orr.w	r3, r3, #4
 8005160:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005164:	4b1a      	ldr	r3, [pc, #104]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8005166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800516a:	4a19      	ldr	r2, [pc, #100]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005174:	e018      	b.n	80051a8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005176:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8005178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800517c:	4a14      	ldr	r2, [pc, #80]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005186:	e00f      	b.n	80051a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005188:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 800518a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800518e:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 800519a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800519e:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <HAL_RCC_OscConfig+0x7e4>)
 80051a0:	f023 0304 	bic.w	r3, r3, #4
 80051a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d058      	beq.n	8005262 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80051b0:	f7fd f910 	bl	80023d4 <HAL_GetTick>
 80051b4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b6:	e00f      	b.n	80051d8 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b8:	f7fd f90c 	bl	80023d4 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d906      	bls.n	80051d8 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e2de      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
 80051ce:	bf00      	nop
 80051d0:	46020c00 	.word	0x46020c00
 80051d4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d8:	4b9c      	ldr	r3, [pc, #624]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80051da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0e8      	beq.n	80051b8 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01b      	beq.n	800522a <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80051f2:	4b96      	ldr	r3, [pc, #600]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80051f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051f8:	4a94      	ldr	r2, [pc, #592]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80051fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005202:	e00a      	b.n	800521a <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005204:	f7fd f8e6 	bl	80023d4 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e2b8      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800521a:	4b8c      	ldr	r3, [pc, #560]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 800521c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ed      	beq.n	8005204 <HAL_RCC_OscConfig+0x818>
 8005228:	e053      	b.n	80052d2 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800522a:	4b88      	ldr	r3, [pc, #544]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 800522c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005230:	4a86      	ldr	r2, [pc, #536]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005236:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800523a:	e00a      	b.n	8005252 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523c:	f7fd f8ca 	bl	80023d4 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e29c      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005252:	4b7e      	ldr	r3, [pc, #504]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1ed      	bne.n	800523c <HAL_RCC_OscConfig+0x850>
 8005260:	e037      	b.n	80052d2 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005262:	f7fd f8b7 	bl	80023d4 <HAL_GetTick>
 8005266:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005268:	e00a      	b.n	8005280 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fd f8b3 	bl	80023d4 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	; 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e285      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005280:	4b72      	ldr	r3, [pc, #456]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1ed      	bne.n	800526a <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800528e:	4b6f      	ldr	r3, [pc, #444]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01a      	beq.n	80052d2 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800529c:	4b6b      	ldr	r3, [pc, #428]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 800529e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052a2:	4a6a      	ldr	r2, [pc, #424]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80052a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052ac:	e00a      	b.n	80052c4 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f7fd f891 	bl	80023d4 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e263      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052c4:	4b61      	ldr	r3, [pc, #388]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80052c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1ed      	bne.n	80052ae <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d107      	bne.n	80052ea <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052da:	4b5c      	ldr	r3, [pc, #368]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80052dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e0:	4a5a      	ldr	r2, [pc, #360]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80052e2:	f023 0304 	bic.w	r3, r3, #4
 80052e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d036      	beq.n	8005364 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d019      	beq.n	8005332 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80052fe:	4b53      	ldr	r3, [pc, #332]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a52      	ldr	r2, [pc, #328]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005304:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005308:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800530a:	f7fd f863 	bl	80023d4 <HAL_GetTick>
 800530e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005312:	f7fd f85f 	bl	80023d4 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e233      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005324:	4b49      	ldr	r3, [pc, #292]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0f0      	beq.n	8005312 <HAL_RCC_OscConfig+0x926>
 8005330:	e018      	b.n	8005364 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005332:	4b46      	ldr	r3, [pc, #280]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a45      	ldr	r2, [pc, #276]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800533c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800533e:	f7fd f849 	bl	80023d4 <HAL_GetTick>
 8005342:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005346:	f7fd f845 	bl	80023d4 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e219      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005358:	4b3c      	ldr	r3, [pc, #240]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f0      	bne.n	8005346 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b00      	cmp	r3, #0
 800536e:	d036      	beq.n	80053de <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	2b00      	cmp	r3, #0
 8005376:	d019      	beq.n	80053ac <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005378:	4b34      	ldr	r3, [pc, #208]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a33      	ldr	r2, [pc, #204]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 800537e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005382:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005384:	f7fd f826 	bl	80023d4 <HAL_GetTick>
 8005388:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800538c:	f7fd f822 	bl	80023d4 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e1f6      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800539e:	4b2b      	ldr	r3, [pc, #172]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0x9a0>
 80053aa:	e018      	b.n	80053de <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80053ac:	4b27      	ldr	r3, [pc, #156]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a26      	ldr	r2, [pc, #152]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80053b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053b8:	f7fd f80c 	bl	80023d4 <HAL_GetTick>
 80053bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80053c0:	f7fd f808 	bl	80023d4 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e1dc      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80053d2:	4b1e      	ldr	r3, [pc, #120]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d07f      	beq.n	80054ea <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d062      	beq.n	80054b8 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80053f2:	4b16      	ldr	r3, [pc, #88]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	4a15      	ldr	r2, [pc, #84]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 80053f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053fc:	6093      	str	r3, [r2, #8]
 80053fe:	4b13      	ldr	r3, [pc, #76]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	4910      	ldr	r1, [pc, #64]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 800540c:	4313      	orrs	r3, r2
 800540e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005418:	d309      	bcc.n	800542e <HAL_RCC_OscConfig+0xa42>
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f023 021f 	bic.w	r2, r3, #31
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4909      	ldr	r1, [pc, #36]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005428:	4313      	orrs	r3, r2
 800542a:	60cb      	str	r3, [r1, #12]
 800542c:	e02a      	b.n	8005484 <HAL_RCC_OscConfig+0xa98>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	da0c      	bge.n	8005450 <HAL_RCC_OscConfig+0xa64>
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	015b      	lsls	r3, r3, #5
 8005444:	4901      	ldr	r1, [pc, #4]	; (800544c <HAL_RCC_OscConfig+0xa60>)
 8005446:	4313      	orrs	r3, r2
 8005448:	60cb      	str	r3, [r1, #12]
 800544a:	e01b      	b.n	8005484 <HAL_RCC_OscConfig+0xa98>
 800544c:	46020c00 	.word	0x46020c00
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005458:	d30a      	bcc.n	8005470 <HAL_RCC_OscConfig+0xa84>
 800545a:	4ba5      	ldr	r3, [pc, #660]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	029b      	lsls	r3, r3, #10
 8005468:	49a1      	ldr	r1, [pc, #644]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800546a:	4313      	orrs	r3, r2
 800546c:	60cb      	str	r3, [r1, #12]
 800546e:	e009      	b.n	8005484 <HAL_RCC_OscConfig+0xa98>
 8005470:	4b9f      	ldr	r3, [pc, #636]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	03db      	lsls	r3, r3, #15
 800547e:	499c      	ldr	r1, [pc, #624]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005480:	4313      	orrs	r3, r2
 8005482:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005484:	4b9a      	ldr	r3, [pc, #616]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a99      	ldr	r2, [pc, #612]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800548a:	f043 0310 	orr.w	r3, r3, #16
 800548e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005490:	f7fc ffa0 	bl	80023d4 <HAL_GetTick>
 8005494:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005498:	f7fc ff9c 	bl	80023d4 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e170      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80054aa:	4b91      	ldr	r3, [pc, #580]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0xaac>
 80054b6:	e018      	b.n	80054ea <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80054b8:	4b8d      	ldr	r3, [pc, #564]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a8c      	ldr	r2, [pc, #560]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80054be:	f023 0310 	bic.w	r3, r3, #16
 80054c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054c4:	f7fc ff86 	bl	80023d4 <HAL_GetTick>
 80054c8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80054cc:	f7fc ff82 	bl	80023d4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e156      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80054de:	4b84      	ldr	r3, [pc, #528]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f0      	bne.n	80054cc <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 814b 	beq.w	800578a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054fa:	4b7d      	ldr	r3, [pc, #500]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b0c      	cmp	r3, #12
 8005504:	f000 80fa 	beq.w	80056fc <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	2b02      	cmp	r3, #2
 800550e:	f040 80cc 	bne.w	80056aa <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005512:	4b77      	ldr	r3, [pc, #476]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a76      	ldr	r2, [pc, #472]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800551c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800551e:	f7fc ff59 	bl	80023d4 <HAL_GetTick>
 8005522:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005526:	f7fc ff55 	bl	80023d4 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e129      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005538:	4b6d      	ldr	r3, [pc, #436]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f0      	bne.n	8005526 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005544:	4b6a      	ldr	r3, [pc, #424]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d111      	bne.n	8005576 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005552:	4b67      	ldr	r3, [pc, #412]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005558:	4a65      	ldr	r2, [pc, #404]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800555a:	f043 0304 	orr.w	r3, r3, #4
 800555e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005562:	4b63      	ldr	r3, [pc, #396]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005570:	2301      	movs	r3, #1
 8005572:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005576:	4b5f      	ldr	r3, [pc, #380]	; (80056f4 <HAL_RCC_OscConfig+0xd08>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800557e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005582:	d102      	bne.n	800558a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800558a:	4b5a      	ldr	r3, [pc, #360]	; (80056f4 <HAL_RCC_OscConfig+0xd08>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	4a59      	ldr	r2, [pc, #356]	; (80056f4 <HAL_RCC_OscConfig+0xd08>)
 8005590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005594:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005596:	4b56      	ldr	r3, [pc, #344]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055aa:	3a01      	subs	r2, #1
 80055ac:	0212      	lsls	r2, r2, #8
 80055ae:	4311      	orrs	r1, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055b4:	430a      	orrs	r2, r1
 80055b6:	494e      	ldr	r1, [pc, #312]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	628b      	str	r3, [r1, #40]	; 0x28
 80055bc:	4b4c      	ldr	r3, [pc, #304]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80055be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c0:	4b4d      	ldr	r3, [pc, #308]	; (80056f8 <HAL_RCC_OscConfig+0xd0c>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055c8:	3a01      	subs	r2, #1
 80055ca:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80055d2:	3a01      	subs	r2, #1
 80055d4:	0252      	lsls	r2, r2, #9
 80055d6:	b292      	uxth	r2, r2
 80055d8:	4311      	orrs	r1, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055de:	3a01      	subs	r2, #1
 80055e0:	0412      	lsls	r2, r2, #16
 80055e2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80055e6:	4311      	orrs	r1, r2
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80055ec:	3a01      	subs	r2, #1
 80055ee:	0612      	lsls	r2, r2, #24
 80055f0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80055f4:	430a      	orrs	r2, r1
 80055f6:	493e      	ldr	r1, [pc, #248]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80055fc:	4b3c      	ldr	r3, [pc, #240]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	4a3b      	ldr	r2, [pc, #236]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005602:	f023 0310 	bic.w	r3, r3, #16
 8005606:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005608:	4b39      	ldr	r3, [pc, #228]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005610:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005618:	00d2      	lsls	r2, r2, #3
 800561a:	4935      	ldr	r1, [pc, #212]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800561c:	4313      	orrs	r3, r2
 800561e:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005620:	4b33      	ldr	r3, [pc, #204]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	4a32      	ldr	r2, [pc, #200]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005626:	f043 0310 	orr.w	r3, r3, #16
 800562a:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800562c:	4b30      	ldr	r3, [pc, #192]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	f023 020c 	bic.w	r2, r3, #12
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005638:	492d      	ldr	r1, [pc, #180]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800563a:	4313      	orrs	r3, r2
 800563c:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800563e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <HAL_RCC_OscConfig+0xd08>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <HAL_RCC_OscConfig+0xd08>)
 800564c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005650:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005652:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005656:	2b01      	cmp	r3, #1
 8005658:	d107      	bne.n	800566a <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800565a:	4b25      	ldr	r3, [pc, #148]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800565c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005660:	4a23      	ldr	r2, [pc, #140]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005662:	f023 0304 	bic.w	r3, r3, #4
 8005666:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800566a:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	4a20      	ldr	r2, [pc, #128]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005674:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005676:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800567c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005680:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005682:	f7fc fea7 	bl	80023d4 <HAL_GetTick>
 8005686:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568a:	f7fc fea3 	bl	80023d4 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e077      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800569c:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <HAL_RCC_OscConfig+0xc9e>
 80056a8:	e06f      	b.n	800578a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80056aa:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a10      	ldr	r2, [pc, #64]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80056b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80056b6:	f7fc fe8d 	bl	80023d4 <HAL_GetTick>
 80056ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056be:	f7fc fe89 	bl	80023d4 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e05d      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f0      	bne.n	80056be <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	4a03      	ldr	r2, [pc, #12]	; (80056f0 <HAL_RCC_OscConfig+0xd04>)
 80056e2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	6293      	str	r3, [r2, #40]	; 0x28
 80056ec:	e04d      	b.n	800578a <HAL_RCC_OscConfig+0xd9e>
 80056ee:	bf00      	nop
 80056f0:	46020c00 	.word	0x46020c00
 80056f4:	46020800 	.word	0x46020800
 80056f8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80056fc:	4b25      	ldr	r3, [pc, #148]	; (8005794 <HAL_RCC_OscConfig+0xda8>)
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005702:	4b24      	ldr	r3, [pc, #144]	; (8005794 <HAL_RCC_OscConfig+0xda8>)
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	2b01      	cmp	r3, #1
 800570e:	d03a      	beq.n	8005786 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f003 0203 	and.w	r2, r3, #3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d133      	bne.n	8005786 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	0a1b      	lsrs	r3, r3, #8
 8005722:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d12a      	bne.n	8005786 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	0b1b      	lsrs	r3, r3, #12
 8005734:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800573c:	429a      	cmp	r2, r3
 800573e:	d122      	bne.n	8005786 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d11a      	bne.n	8005786 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	0a5b      	lsrs	r3, r3, #9
 8005754:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800575e:	429a      	cmp	r2, r3
 8005760:	d111      	bne.n	8005786 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005770:	429a      	cmp	r2, r3
 8005772:	d108      	bne.n	8005786 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	0e1b      	lsrs	r3, r3, #24
 8005778:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005782:	429a      	cmp	r2, r3
 8005784:	d001      	beq.n	800578a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3738      	adds	r7, #56	; 0x38
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	46020c00 	.word	0x46020c00

08005798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e1d9      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057ac:	4b9b      	ldr	r3, [pc, #620]	; (8005a1c <HAL_RCC_ClockConfig+0x284>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d910      	bls.n	80057dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b98      	ldr	r3, [pc, #608]	; (8005a1c <HAL_RCC_ClockConfig+0x284>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f023 020f 	bic.w	r2, r3, #15
 80057c2:	4996      	ldr	r1, [pc, #600]	; (8005a1c <HAL_RCC_ClockConfig+0x284>)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b94      	ldr	r3, [pc, #592]	; (8005a1c <HAL_RCC_ClockConfig+0x284>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e1c1      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d010      	beq.n	800580a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	4b8c      	ldr	r3, [pc, #560]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d908      	bls.n	800580a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80057f8:	4b89      	ldr	r3, [pc, #548]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	4986      	ldr	r1, [pc, #536]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 8005806:	4313      	orrs	r3, r2
 8005808:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d012      	beq.n	800583c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	4b81      	ldr	r3, [pc, #516]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005824:	429a      	cmp	r2, r3
 8005826:	d909      	bls.n	800583c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005828:	4b7d      	ldr	r3, [pc, #500]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	497a      	ldr	r1, [pc, #488]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 8005838:	4313      	orrs	r3, r2
 800583a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d010      	beq.n	800586a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	4b74      	ldr	r3, [pc, #464]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005854:	429a      	cmp	r2, r3
 8005856:	d908      	bls.n	800586a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005858:	4b71      	ldr	r3, [pc, #452]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	496e      	ldr	r1, [pc, #440]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 8005866:	4313      	orrs	r3, r2
 8005868:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d010      	beq.n	8005898 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	4b69      	ldr	r3, [pc, #420]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	429a      	cmp	r2, r3
 8005884:	d908      	bls.n	8005898 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005886:	4b66      	ldr	r3, [pc, #408]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 020f 	bic.w	r2, r3, #15
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	4963      	ldr	r1, [pc, #396]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 8005894:	4313      	orrs	r3, r2
 8005896:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80d2 	beq.w	8005a4a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d143      	bne.n	800593a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058b2:	4b5b      	ldr	r3, [pc, #364]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 80058b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d110      	bne.n	80058e2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80058c0:	4b57      	ldr	r3, [pc, #348]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 80058c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c6:	4a56      	ldr	r2, [pc, #344]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80058d0:	4b53      	ldr	r3, [pc, #332]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 80058d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80058de:	2301      	movs	r3, #1
 80058e0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80058e2:	f7fc fd77 	bl	80023d4 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80058e8:	4b4e      	ldr	r3, [pc, #312]	; (8005a24 <HAL_RCC_ClockConfig+0x28c>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00f      	beq.n	8005914 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80058f6:	f7fc fd6d 	bl	80023d4 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e12b      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005908:	4b46      	ldr	r3, [pc, #280]	; (8005a24 <HAL_RCC_ClockConfig+0x28c>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005914:	7dfb      	ldrb	r3, [r7, #23]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d107      	bne.n	800592a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800591a:	4b41      	ldr	r3, [pc, #260]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 800591c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005920:	4a3f      	ldr	r2, [pc, #252]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 8005922:	f023 0304 	bic.w	r3, r3, #4
 8005926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800592a:	4b3d      	ldr	r3, [pc, #244]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d121      	bne.n	800597a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e112      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d107      	bne.n	8005952 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005942:	4b37      	ldr	r3, [pc, #220]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d115      	bne.n	800597a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e106      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d107      	bne.n	800596a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800595a:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e0fa      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800596a:	4b2d      	ldr	r3, [pc, #180]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0f2      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800597a:	4b29      	ldr	r3, [pc, #164]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f023 0203 	bic.w	r2, r3, #3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4926      	ldr	r1, [pc, #152]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 8005988:	4313      	orrs	r3, r2
 800598a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800598c:	f7fc fd22 	bl	80023d4 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d112      	bne.n	80059c0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599c:	f7fc fd1a 	bl	80023d4 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e0d6      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059b2:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b0c      	cmp	r3, #12
 80059bc:	d1ee      	bne.n	800599c <HAL_RCC_ClockConfig+0x204>
 80059be:	e044      	b.n	8005a4a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d112      	bne.n	80059ee <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80059c8:	e00a      	b.n	80059e0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ca:	f7fc fd03 	bl	80023d4 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e0bf      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80059e0:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f003 030c 	and.w	r3, r3, #12
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d1ee      	bne.n	80059ca <HAL_RCC_ClockConfig+0x232>
 80059ec:	e02d      	b.n	8005a4a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d123      	bne.n	8005a3e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80059f6:	e00a      	b.n	8005a0e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f8:	f7fc fcec 	bl	80023d4 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e0a8      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <HAL_RCC_ClockConfig+0x288>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 030c 	and.w	r3, r3, #12
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1ee      	bne.n	80059f8 <HAL_RCC_ClockConfig+0x260>
 8005a1a:	e016      	b.n	8005a4a <HAL_RCC_ClockConfig+0x2b2>
 8005a1c:	40022000 	.word	0x40022000
 8005a20:	46020c00 	.word	0x46020c00
 8005a24:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a28:	f7fc fcd4 	bl	80023d4 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e090      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a3e:	4b4a      	ldr	r3, [pc, #296]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d1ee      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d010      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	4b43      	ldr	r3, [pc, #268]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d208      	bcs.n	8005a78 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005a66:	4b40      	ldr	r3, [pc, #256]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f023 020f 	bic.w	r2, r3, #15
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	493d      	ldr	r1, [pc, #244]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a78:	4b3c      	ldr	r3, [pc, #240]	; (8005b6c <HAL_RCC_ClockConfig+0x3d4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d210      	bcs.n	8005aa8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a86:	4b39      	ldr	r3, [pc, #228]	; (8005b6c <HAL_RCC_ClockConfig+0x3d4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f023 020f 	bic.w	r2, r3, #15
 8005a8e:	4937      	ldr	r1, [pc, #220]	; (8005b6c <HAL_RCC_ClockConfig+0x3d4>)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a96:	4b35      	ldr	r3, [pc, #212]	; (8005b6c <HAL_RCC_ClockConfig+0x3d4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d001      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e05b      	b.n	8005b60 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d208      	bcs.n	8005ad6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005ac4:	4b28      	ldr	r3, [pc, #160]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4925      	ldr	r1, [pc, #148]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d012      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	4b20      	ldr	r3, [pc, #128]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d209      	bcs.n	8005b08 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005af4:	4b1c      	ldr	r3, [pc, #112]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	4919      	ldr	r1, [pc, #100]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d010      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	4b13      	ldr	r3, [pc, #76]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d208      	bcs.n	8005b36 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005b24:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	490d      	ldr	r1, [pc, #52]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005b36:	f000 f821 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <HAL_RCC_ClockConfig+0x3d0>)
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	490a      	ldr	r1, [pc, #40]	; (8005b70 <HAL_RCC_ClockConfig+0x3d8>)
 8005b46:	5ccb      	ldrb	r3, [r1, r3]
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4c:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <HAL_RCC_ClockConfig+0x3dc>)
 8005b4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b50:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <HAL_RCC_ClockConfig+0x3e0>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fc fa15 	bl	8001f84 <HAL_InitTick>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	73fb      	strb	r3, [r7, #15]

  return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	46020c00 	.word	0x46020c00
 8005b6c:	40022000 	.word	0x40022000
 8005b70:	080285e4 	.word	0x080285e4
 8005b74:	20025808 	.word	0x20025808
 8005b78:	2002580c 	.word	0x2002580c

08005b7c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b08b      	sub	sp, #44	; 0x2c
 8005b80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b8a:	4b7b      	ldr	r3, [pc, #492]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b94:	4b78      	ldr	r3, [pc, #480]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b0c      	cmp	r3, #12
 8005ba8:	d121      	bne.n	8005bee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d11e      	bne.n	8005bee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005bb0:	4b71      	ldr	r3, [pc, #452]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d107      	bne.n	8005bcc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005bbc:	4b6e      	ldr	r3, [pc, #440]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bc2:	0b1b      	lsrs	r3, r3, #12
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bca:	e005      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005bcc:	4b6a      	ldr	r3, [pc, #424]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	0f1b      	lsrs	r3, r3, #28
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005bd8:	4a68      	ldr	r2, [pc, #416]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d110      	bne.n	8005c0a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bec:	e00d      	b.n	8005c0a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bee:	4b62      	ldr	r3, [pc, #392]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f003 030c 	and.w	r3, r3, #12
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d102      	bne.n	8005c00 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bfa:	4b61      	ldr	r3, [pc, #388]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bfc:	623b      	str	r3, [r7, #32]
 8005bfe:	e004      	b.n	8005c0a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c06:	4b5e      	ldr	r3, [pc, #376]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c08:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b0c      	cmp	r3, #12
 8005c0e:	f040 80ac 	bne.w	8005d6a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005c12:	4b59      	ldr	r3, [pc, #356]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005c1c:	4b56      	ldr	r3, [pc, #344]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	0a1b      	lsrs	r3, r3, #8
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005c2a:	4b53      	ldr	r3, [pc, #332]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	091b      	lsrs	r3, r3, #4
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c36:	4b50      	ldr	r3, [pc, #320]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	08db      	lsrs	r3, r3, #3
 8005c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8086 	beq.w	8005d66 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d003      	beq.n	8005c68 <HAL_RCC_GetSysClockFreq+0xec>
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d022      	beq.n	8005cac <HAL_RCC_GetSysClockFreq+0x130>
 8005c66:	e043      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c72:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005d84 <HAL_RCC_GetSysClockFreq+0x208>
 8005c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7a:	4b3f      	ldr	r3, [pc, #252]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c8a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c8e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005d88 <HAL_RCC_GetSysClockFreq+0x20c>
 8005c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005caa:	e046      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005d84 <HAL_RCC_GetSysClockFreq+0x208>
 8005cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbe:	4b2e      	ldr	r3, [pc, #184]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005cce:	ed97 6a01 	vldr	s12, [r7, #4]
 8005cd2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005d88 <HAL_RCC_GetSysClockFreq+0x20c>
 8005cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005cee:	e024      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	ee07 3a90 	vmov	s15, r3
 8005d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d08:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d18:	ed97 6a01 	vldr	s12, [r7, #4]
 8005d1c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005d88 <HAL_RCC_GetSysClockFreq+0x20c>
 8005d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d34:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005d38:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	0e1b      	lsrs	r3, r3, #24
 8005d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d44:	3301      	adds	r3, #1
 8005d46:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d5e:	ee17 3a90 	vmov	r3, s15
 8005d62:	623b      	str	r3, [r7, #32]
 8005d64:	e001      	b.n	8005d6a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	372c      	adds	r7, #44	; 0x2c
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	46020c00 	.word	0x46020c00
 8005d7c:	080285fc 	.word	0x080285fc
 8005d80:	00f42400 	.word	0x00f42400
 8005d84:	4b742400 	.word	0x4b742400
 8005d88:	46000000 	.word	0x46000000

08005d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005d90:	f7ff fef4 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8005d94:	4602      	mov	r2, r0
 8005d96:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <HAL_RCC_GetHCLKFreq+0x28>)
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	4906      	ldr	r1, [pc, #24]	; (8005db8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005da0:	5ccb      	ldrb	r3, [r1, r3]
 8005da2:	fa22 f303 	lsr.w	r3, r2, r3
 8005da6:	4a05      	ldr	r2, [pc, #20]	; (8005dbc <HAL_RCC_GetHCLKFreq+0x30>)
 8005da8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005daa:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <HAL_RCC_GetHCLKFreq+0x30>)
 8005dac:	681b      	ldr	r3, [r3, #0]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	46020c00 	.word	0x46020c00
 8005db8:	080285e4 	.word	0x080285e4
 8005dbc:	20025808 	.word	0x20025808

08005dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005dc4:	f7ff ffe2 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	091b      	lsrs	r3, r3, #4
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	4903      	ldr	r1, [pc, #12]	; (8005de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd6:	5ccb      	ldrb	r3, [r1, r3]
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	46020c00 	.word	0x46020c00
 8005de4:	080285f4 	.word	0x080285f4

08005de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005dec:	f7ff ffce 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	4903      	ldr	r1, [pc, #12]	; (8005e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dfe:	5ccb      	ldrb	r3, [r1, r3]
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	46020c00 	.word	0x46020c00
 8005e0c:	080285f4 	.word	0x080285f4

08005e10 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005e14:	f7ff ffba 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	091b      	lsrs	r3, r3, #4
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	4903      	ldr	r1, [pc, #12]	; (8005e34 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005e26:	5ccb      	ldrb	r3, [r1, r3]
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	46020c00 	.word	0x46020c00
 8005e34:	080285f4 	.word	0x080285f4

08005e38 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	221f      	movs	r2, #31
 8005e46:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005e48:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <HAL_RCC_GetClockConfig+0x68>)
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	f003 0203 	and.w	r2, r3, #3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <HAL_RCC_GetClockConfig+0x68>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f003 020f 	and.w	r2, r3, #15
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005e60:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <HAL_RCC_GetClockConfig+0x68>)
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005e6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <HAL_RCC_GetClockConfig+0x68>)
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	091b      	lsrs	r3, r3, #4
 8005e72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <HAL_RCC_GetClockConfig+0x68>)
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <HAL_RCC_GetClockConfig+0x6c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 020f 	and.w	r2, r3, #15
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	601a      	str	r2, [r3, #0]
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	46020c00 	.word	0x46020c00
 8005ea4:	40022000 	.word	0x40022000

08005ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005eb0:	4b3e      	ldr	r3, [pc, #248]	; (8005fac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ebe:	f7fe fd17 	bl	80048f0 <HAL_PWREx_GetVoltageRange>
 8005ec2:	6178      	str	r0, [r7, #20]
 8005ec4:	e019      	b.n	8005efa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ec6:	4b39      	ldr	r3, [pc, #228]	; (8005fac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ecc:	4a37      	ldr	r2, [pc, #220]	; (8005fac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005ece:	f043 0304 	orr.w	r3, r3, #4
 8005ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005ed6:	4b35      	ldr	r3, [pc, #212]	; (8005fac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ee4:	f7fe fd04 	bl	80048f0 <HAL_PWREx_GetVoltageRange>
 8005ee8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005eea:	4b30      	ldr	r3, [pc, #192]	; (8005fac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ef0:	4a2e      	ldr	r2, [pc, #184]	; (8005fac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005ef2:	f023 0304 	bic.w	r3, r3, #4
 8005ef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f00:	d003      	beq.n	8005f0a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f08:	d109      	bne.n	8005f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f10:	d202      	bcs.n	8005f18 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005f12:	2301      	movs	r3, #1
 8005f14:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005f16:	e033      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005f1c:	e030      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f24:	d208      	bcs.n	8005f38 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2c:	d102      	bne.n	8005f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005f2e:	2303      	movs	r3, #3
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	e025      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e035      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f3e:	d90f      	bls.n	8005f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f4c:	d902      	bls.n	8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005f4e:	2300      	movs	r3, #0
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	e015      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005f54:	2301      	movs	r3, #1
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	e012      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	e00f      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f66:	d109      	bne.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6e:	d102      	bne.n	8005f76 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005f70:	2301      	movs	r3, #1
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	e004      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005f76:	2302      	movs	r3, #2
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e001      	b.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f023 020f 	bic.w	r2, r3, #15
 8005f88:	4909      	ldr	r1, [pc, #36]	; (8005fb0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d001      	beq.n	8005fa2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	46020c00 	.word	0x46020c00
 8005fb0:	40022000 	.word	0x40022000

08005fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb8:	b0ba      	sub	sp, #232	; 0xe8
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f002 0401 	and.w	r4, r2, #1
 8005fd8:	2500      	movs	r5, #0
 8005fda:	ea54 0305 	orrs.w	r3, r4, r5
 8005fde:	d00b      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005fe0:	4bcb      	ldr	r3, [pc, #812]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fe6:	f023 0103 	bic.w	r1, r3, #3
 8005fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff0:	4ac7      	ldr	r2, [pc, #796]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f002 0802 	and.w	r8, r2, #2
 8006004:	f04f 0900 	mov.w	r9, #0
 8006008:	ea58 0309 	orrs.w	r3, r8, r9
 800600c:	d00b      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800600e:	4bc0      	ldr	r3, [pc, #768]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006014:	f023 010c 	bic.w	r1, r3, #12
 8006018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	4abc      	ldr	r2, [pc, #752]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006020:	430b      	orrs	r3, r1
 8006022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	f002 0a04 	and.w	sl, r2, #4
 8006032:	f04f 0b00 	mov.w	fp, #0
 8006036:	ea5a 030b 	orrs.w	r3, sl, fp
 800603a:	d00b      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800603c:	4bb4      	ldr	r3, [pc, #720]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800603e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006042:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800604a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604c:	4ab0      	ldr	r2, [pc, #704]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800604e:	430b      	orrs	r3, r1
 8006050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006054:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f002 0308 	and.w	r3, r2, #8
 8006060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006064:	2300      	movs	r3, #0
 8006066:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800606a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800606e:	460b      	mov	r3, r1
 8006070:	4313      	orrs	r3, r2
 8006072:	d00b      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006074:	4ba6      	ldr	r3, [pc, #664]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800607a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800607e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006084:	4aa2      	ldr	r2, [pc, #648]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006086:	430b      	orrs	r3, r1
 8006088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800608c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f002 0310 	and.w	r3, r2, #16
 8006098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	d00b      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80060ac:	4b98      	ldr	r3, [pc, #608]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060bc:	4a94      	ldr	r2, [pc, #592]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060be:	430b      	orrs	r3, r1
 80060c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	f002 0320 	and.w	r3, r2, #32
 80060d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060d4:	2300      	movs	r3, #0
 80060d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80060de:	460b      	mov	r3, r1
 80060e0:	4313      	orrs	r3, r2
 80060e2:	d00b      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80060e4:	4b8a      	ldr	r3, [pc, #552]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060ea:	f023 0107 	bic.w	r1, r3, #7
 80060ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f4:	4a86      	ldr	r2, [pc, #536]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060f6:	430b      	orrs	r3, r1
 80060f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800610c:	2300      	movs	r3, #0
 800610e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006112:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006116:	460b      	mov	r3, r1
 8006118:	4313      	orrs	r3, r2
 800611a:	d00b      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800611c:	4b7c      	ldr	r3, [pc, #496]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800611e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006122:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800612a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800612c:	4a78      	ldr	r2, [pc, #480]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800612e:	430b      	orrs	r3, r1
 8006130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800614a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800614e:	460b      	mov	r3, r1
 8006150:	4313      	orrs	r3, r2
 8006152:	d00b      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006154:	4b6e      	ldr	r3, [pc, #440]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800615a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800615e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006164:	4a6a      	ldr	r2, [pc, #424]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006166:	430b      	orrs	r3, r1
 8006168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800616c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006178:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006182:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006186:	460b      	mov	r3, r1
 8006188:	4313      	orrs	r3, r2
 800618a:	d00b      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800618c:	4b60      	ldr	r3, [pc, #384]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800618e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006192:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800619a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619c:	4a5c      	ldr	r2, [pc, #368]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800619e:	430b      	orrs	r3, r1
 80061a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80061b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061b4:	2300      	movs	r3, #0
 80061b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80061be:	460b      	mov	r3, r1
 80061c0:	4313      	orrs	r3, r2
 80061c2:	d00b      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80061c4:	4b52      	ldr	r3, [pc, #328]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ca:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80061ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d4:	4a4e      	ldr	r2, [pc, #312]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061d6:	430b      	orrs	r3, r1
 80061d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80061e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061ec:	2300      	movs	r3, #0
 80061ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80061f6:	460b      	mov	r3, r1
 80061f8:	4313      	orrs	r3, r2
 80061fa:	d00b      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80061fc:	4b44      	ldr	r3, [pc, #272]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006202:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800620a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800620c:	4a40      	ldr	r2, [pc, #256]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800620e:	430b      	orrs	r3, r1
 8006210:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006214:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006224:	2300      	movs	r3, #0
 8006226:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800622a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800622e:	460b      	mov	r3, r1
 8006230:	4313      	orrs	r3, r2
 8006232:	d00b      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006234:	4b36      	ldr	r3, [pc, #216]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800623a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800623e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006244:	4a32      	ldr	r2, [pc, #200]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006246:	430b      	orrs	r3, r1
 8006248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800624c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800625c:	2300      	movs	r3, #0
 800625e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006262:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006266:	460b      	mov	r3, r1
 8006268:	4313      	orrs	r3, r2
 800626a:	d00c      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800626c:	4b28      	ldr	r3, [pc, #160]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800626e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006272:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800627a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800627e:	4a24      	ldr	r2, [pc, #144]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006280:	430b      	orrs	r3, r1
 8006282:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006292:	67bb      	str	r3, [r7, #120]	; 0x78
 8006294:	2300      	movs	r3, #0
 8006296:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006298:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800629c:	460b      	mov	r3, r1
 800629e:	4313      	orrs	r3, r2
 80062a0:	d04f      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80062a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	2b80      	cmp	r3, #128	; 0x80
 80062ac:	d02d      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80062ae:	2b80      	cmp	r3, #128	; 0x80
 80062b0:	d827      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80062b2:	2b60      	cmp	r3, #96	; 0x60
 80062b4:	d02e      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80062b6:	2b60      	cmp	r3, #96	; 0x60
 80062b8:	d823      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d006      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x318>
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d81f      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x326>
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d011      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80062ca:	e01a      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062cc:	4b10      	ldr	r3, [pc, #64]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	4a0f      	ldr	r2, [pc, #60]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062d8:	e01d      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062de:	3308      	adds	r3, #8
 80062e0:	4618      	mov	r0, r3
 80062e2:	f002 f981 	bl	80085e8 <RCCEx_PLL2_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062ec:	e013      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062f2:	332c      	adds	r3, #44	; 0x2c
 80062f4:	4618      	mov	r0, r3
 80062f6:	f002 fa0f 	bl	8008718 <RCCEx_PLL3_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006300:	e009      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006308:	e005      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800630a:	bf00      	nop
 800630c:	e003      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800630e:	bf00      	nop
 8006310:	46020c00 	.word	0x46020c00
        break;
 8006314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006316:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800631e:	4bb6      	ldr	r3, [pc, #728]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006320:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006324:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006330:	4ab1      	ldr	r2, [pc, #708]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006332:	430b      	orrs	r3, r1
 8006334:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006338:	e003      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800633e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800634e:	673b      	str	r3, [r7, #112]	; 0x70
 8006350:	2300      	movs	r3, #0
 8006352:	677b      	str	r3, [r7, #116]	; 0x74
 8006354:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006358:	460b      	mov	r3, r1
 800635a:	4313      	orrs	r3, r2
 800635c:	d053      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800635e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d033      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006370:	d82c      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006376:	d02f      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800637c:	d826      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800637e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006382:	d008      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006388:	d820      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800638e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006392:	d011      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006394:	e01a      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006396:	4b98      	ldr	r3, [pc, #608]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	4a97      	ldr	r2, [pc, #604]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800639c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063a2:	e01a      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063a8:	3308      	adds	r3, #8
 80063aa:	4618      	mov	r0, r3
 80063ac:	f002 f91c 	bl	80085e8 <RCCEx_PLL2_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063b6:	e010      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063bc:	332c      	adds	r3, #44	; 0x2c
 80063be:	4618      	mov	r0, r3
 80063c0:	f002 f9aa 	bl	8008718 <RCCEx_PLL3_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063ca:	e006      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80063d2:	e002      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80063d4:	bf00      	nop
 80063d6:	e000      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80063d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10d      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80063e2:	4b85      	ldr	r3, [pc, #532]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80063e8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80063ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063f4:	4a80      	ldr	r2, [pc, #512]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063f6:	430b      	orrs	r3, r1
 80063f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80063fc:	e003      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006402:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006412:	66bb      	str	r3, [r7, #104]	; 0x68
 8006414:	2300      	movs	r3, #0
 8006416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006418:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800641c:	460b      	mov	r3, r1
 800641e:	4313      	orrs	r3, r2
 8006420:	d046      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006426:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800642a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800642e:	d028      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006430:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006434:	d821      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800643a:	d022      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800643c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006440:	d81b      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006442:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006446:	d01c      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006448:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800644c:	d815      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800644e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006452:	d008      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006458:	d80f      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d011      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800645e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006462:	d00e      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006464:	e009      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800646a:	3308      	adds	r3, #8
 800646c:	4618      	mov	r0, r3
 800646e:	f002 f8bb 	bl	80085e8 <RCCEx_PLL2_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006478:	e004      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006480:	e000      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006484:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10d      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800648c:	4b5a      	ldr	r3, [pc, #360]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800648e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006492:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800649a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800649e:	4a56      	ldr	r2, [pc, #344]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064a0:	430b      	orrs	r3, r1
 80064a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064a6:	e003      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064ac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80064b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80064bc:	663b      	str	r3, [r7, #96]	; 0x60
 80064be:	2300      	movs	r3, #0
 80064c0:	667b      	str	r3, [r7, #100]	; 0x64
 80064c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80064c6:	460b      	mov	r3, r1
 80064c8:	4313      	orrs	r3, r2
 80064ca:	d03f      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80064cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d81e      	bhi.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80064d8:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80064da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064de:	bf00      	nop
 80064e0:	0800651f 	.word	0x0800651f
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	08006503 	.word	0x08006503
 80064ec:	0800651f 	.word	0x0800651f
 80064f0:	0800651f 	.word	0x0800651f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064f4:	4b40      	ldr	r3, [pc, #256]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	4a3f      	ldr	r2, [pc, #252]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064fe:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006500:	e00e      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006506:	332c      	adds	r3, #44	; 0x2c
 8006508:	4618      	mov	r0, r3
 800650a:	f002 f905 	bl	8008718 <RCCEx_PLL3_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006514:	e004      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800651c:	e000      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800651e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006520:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10d      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006528:	4b33      	ldr	r3, [pc, #204]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800652a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800652e:	f023 0107 	bic.w	r1, r3, #7
 8006532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653a:	4a2f      	ldr	r2, [pc, #188]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800653c:	430b      	orrs	r3, r1
 800653e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006542:	e003      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006548:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800654c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006558:	65bb      	str	r3, [r7, #88]	; 0x58
 800655a:	2300      	movs	r3, #0
 800655c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800655e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006562:	460b      	mov	r3, r1
 8006564:	4313      	orrs	r3, r2
 8006566:	d04d      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006568:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800656c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006570:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006574:	d028      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006576:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800657a:	d821      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800657c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006580:	d024      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006582:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006586:	d81b      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800658c:	d00e      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800658e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006592:	d815      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01b      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800659c:	d110      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800659e:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80065aa:	e012      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065b0:	332c      	adds	r3, #44	; 0x2c
 80065b2:	4618      	mov	r0, r3
 80065b4:	f002 f8b0 	bl	8008718 <RCCEx_PLL3_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065be:	e008      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065c6:	e004      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80065c8:	bf00      	nop
 80065ca:	e002      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80065cc:	bf00      	nop
 80065ce:	e000      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80065d0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80065d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d110      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80065da:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065e0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80065e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ec:	4a02      	ldr	r2, [pc, #8]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065ee:	430b      	orrs	r3, r1
 80065f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80065f4:	e006      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80065f6:	bf00      	nop
 80065f8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006600:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006610:	653b      	str	r3, [r7, #80]	; 0x50
 8006612:	2300      	movs	r3, #0
 8006614:	657b      	str	r3, [r7, #84]	; 0x54
 8006616:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800661a:	460b      	mov	r3, r1
 800661c:	4313      	orrs	r3, r2
 800661e:	f000 80b5 	beq.w	800678c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006622:	2300      	movs	r3, #0
 8006624:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006628:	4b9d      	ldr	r3, [pc, #628]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800662a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d113      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006636:	4b9a      	ldr	r3, [pc, #616]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800663c:	4a98      	ldr	r2, [pc, #608]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800663e:	f043 0304 	orr.w	r3, r3, #4
 8006642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006646:	4b96      	ldr	r3, [pc, #600]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800665e:	4b91      	ldr	r3, [pc, #580]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	4a90      	ldr	r2, [pc, #576]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800666a:	f7fb feb3 	bl	80023d4 <HAL_GetTick>
 800666e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006672:	e00b      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006674:	f7fb feae 	bl	80023d4 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d903      	bls.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800668a:	e005      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800668c:	4b85      	ldr	r3, [pc, #532]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0ed      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006698:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d165      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066a0:	4b7f      	ldr	r3, [pc, #508]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d023      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80066b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d01b      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066c6:	4b76      	ldr	r3, [pc, #472]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066d4:	4b72      	ldr	r3, [pc, #456]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066da:	4a71      	ldr	r2, [pc, #452]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066e4:	4b6e      	ldr	r3, [pc, #440]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066ea:	4a6d      	ldr	r2, [pc, #436]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066f4:	4a6a      	ldr	r2, [pc, #424]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d019      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670a:	f7fb fe63 	bl	80023d4 <HAL_GetTick>
 800670e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006712:	e00d      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006714:	f7fb fe5e 	bl	80023d4 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	f241 3388 	movw	r3, #5000	; 0x1388
 8006724:	429a      	cmp	r2, r3
 8006726:	d903      	bls.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800672e:	e006      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006730:	4b5b      	ldr	r3, [pc, #364]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0ea      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800673e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10d      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006746:	4b56      	ldr	r3, [pc, #344]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800674c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006754:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006758:	4a51      	ldr	r2, [pc, #324]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800675a:	430b      	orrs	r3, r1
 800675c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006760:	e008      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006762:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006766:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800676a:	e003      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006770:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006774:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006778:	2b01      	cmp	r3, #1
 800677a:	d107      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800677c:	4b48      	ldr	r3, [pc, #288]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800677e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006782:	4a47      	ldr	r2, [pc, #284]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006784:	f023 0304 	bic.w	r3, r3, #4
 8006788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800678c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006798:	64bb      	str	r3, [r7, #72]	; 0x48
 800679a:	2300      	movs	r3, #0
 800679c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800679e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80067a2:	460b      	mov	r3, r1
 80067a4:	4313      	orrs	r3, r2
 80067a6:	d042      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80067a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067b4:	d022      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x848>
 80067b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067ba:	d81b      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80067bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c0:	d011      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80067c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c6:	d815      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d019      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80067cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067d0:	d110      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067d6:	3308      	adds	r3, #8
 80067d8:	4618      	mov	r0, r3
 80067da:	f001 ff05 	bl	80085e8 <RCCEx_PLL2_Config>
 80067de:	4603      	mov	r3, r0
 80067e0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067e4:	e00d      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e6:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80067e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ea:	4a2d      	ldr	r2, [pc, #180]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80067ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80067f2:	e006      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067fa:	e002      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80067fc:	bf00      	nop
 80067fe:	e000      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006800:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006802:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10d      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800680a:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800680c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006810:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800681c:	4a20      	ldr	r2, [pc, #128]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800681e:	430b      	orrs	r3, r1
 8006820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006824:	e003      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006826:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800682a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800682e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800683a:	643b      	str	r3, [r7, #64]	; 0x40
 800683c:	2300      	movs	r3, #0
 800683e:	647b      	str	r3, [r7, #68]	; 0x44
 8006840:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006844:	460b      	mov	r3, r1
 8006846:	4313      	orrs	r3, r2
 8006848:	d032      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800684a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800684e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006856:	d00b      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800685c:	d804      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d008      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006866:	d007      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800686e:	e004      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006870:	bf00      	nop
 8006872:	e002      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006878:	bf00      	nop
    }
    if (ret == HAL_OK)
 800687a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d112      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006882:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006884:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006888:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800688c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006894:	4a02      	ldr	r2, [pc, #8]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006896:	430b      	orrs	r3, r1
 8006898:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800689c:	e008      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800689e:	bf00      	nop
 80068a0:	46020c00 	.word	0x46020c00
 80068a4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068ac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80068b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80068bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80068be:	2300      	movs	r3, #0
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d00c      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80068cc:	4b98      	ldr	r3, [pc, #608]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80068d2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80068d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068de:	4a94      	ldr	r2, [pc, #592]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068e0:	430b      	orrs	r3, r1
 80068e2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80068e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80068f2:	633b      	str	r3, [r7, #48]	; 0x30
 80068f4:	2300      	movs	r3, #0
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
 80068f8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80068fc:	460b      	mov	r3, r1
 80068fe:	4313      	orrs	r3, r2
 8006900:	d019      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800690a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800690e:	d105      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006910:	4b87      	ldr	r3, [pc, #540]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	4a86      	ldr	r2, [pc, #536]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800691a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800691c:	4b84      	ldr	r3, [pc, #528]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800691e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006922:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800692a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800692e:	4a80      	ldr	r2, [pc, #512]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006930:	430b      	orrs	r3, r1
 8006932:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28
 8006944:	2300      	movs	r3, #0
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006948:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800694c:	460b      	mov	r3, r1
 800694e:	4313      	orrs	r3, r2
 8006950:	d00c      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006952:	4b77      	ldr	r3, [pc, #476]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800695c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006960:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006964:	4972      	ldr	r1, [pc, #456]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800696c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	2300      	movs	r3, #0
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
 800697e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006982:	460b      	mov	r3, r1
 8006984:	4313      	orrs	r3, r2
 8006986:	d00c      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006988:	4b69      	ldr	r3, [pc, #420]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800698a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800698e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006996:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800699a:	4965      	ldr	r1, [pc, #404]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80069a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80069b8:	460b      	mov	r3, r1
 80069ba:	4313      	orrs	r3, r2
 80069bc:	d00c      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80069be:	4b5c      	ldr	r3, [pc, #368]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069c4:	f023 0218 	bic.w	r2, r3, #24
 80069c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80069d0:	4957      	ldr	r1, [pc, #348]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80069d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80069ee:	460b      	mov	r3, r1
 80069f0:	4313      	orrs	r3, r2
 80069f2:	d032      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80069f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a00:	d105      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a02:	4b4b      	ldr	r3, [pc, #300]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	4a4a      	ldr	r2, [pc, #296]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a1a:	d108      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a20:	3308      	adds	r3, #8
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 fde0 	bl	80085e8 <RCCEx_PLL2_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006a2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10d      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006a36:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a48:	4939      	ldr	r1, [pc, #228]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006a50:	e003      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a52:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a56:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a70:	460b      	mov	r3, r1
 8006a72:	4313      	orrs	r3, r2
 8006a74:	d03a      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a82:	d00e      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a88:	d815      	bhi.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d017      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006a8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a92:	d110      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a94:	4b26      	ldr	r3, [pc, #152]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	4a25      	ldr	r2, [pc, #148]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9e:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006aa0:	e00e      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 fd9d 	bl	80085e8 <RCCEx_PLL2_Config>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006ab4:	e004      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006abc:	e000      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006abe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ac0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10d      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006ac8:	4b19      	ldr	r3, [pc, #100]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ace:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ada:	4915      	ldr	r1, [pc, #84]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006ae2:	e003      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ae8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006aec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006af8:	603b      	str	r3, [r7, #0]
 8006afa:	2300      	movs	r3, #0
 8006afc:	607b      	str	r3, [r7, #4]
 8006afe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b02:	460b      	mov	r3, r1
 8006b04:	4313      	orrs	r3, r2
 8006b06:	d00c      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006b08:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b0e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b1a:	4905      	ldr	r1, [pc, #20]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006b22:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	37e8      	adds	r7, #232	; 0xe8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b30:	46020c00 	.word	0x46020c00

08006b34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b089      	sub	sp, #36	; 0x24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006b3c:	4bac      	ldr	r3, [pc, #688]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b44:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006b46:	4baa      	ldr	r3, [pc, #680]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006b50:	4ba7      	ldr	r3, [pc, #668]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	0a1b      	lsrs	r3, r3, #8
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006b5e:	4ba4      	ldr	r3, [pc, #656]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	f003 0310 	and.w	r3, r3, #16
 8006b66:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b68:	4ba1      	ldr	r3, [pc, #644]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	08db      	lsrs	r3, r3, #3
 8006b6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	fb02 f303 	mul.w	r3, r2, r3
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b80:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 8123 	beq.w	8006dd2 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d062      	beq.n	8006c58 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	f200 8081 	bhi.w	8006c9c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d024      	beq.n	8006bea <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d17a      	bne.n	8006c9c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006df4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb8:	4b8d      	ldr	r3, [pc, #564]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc0:	ee07 3a90 	vmov	s15, r3
 8006bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bcc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be8:	e08f      	b.n	8006d0a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006bea:	4b81      	ldr	r3, [pc, #516]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006bf6:	4b7e      	ldr	r3, [pc, #504]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	0f1b      	lsrs	r3, r3, #28
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	e006      	b.n	8006c10 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006c02:	4b7b      	ldr	r3, [pc, #492]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	0f1b      	lsrs	r3, r3, #28
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	4a7a      	ldr	r2, [pc, #488]	; (8006dfc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	ee07 3a90 	vmov	s15, r3
 8006c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c3a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c56:	e058      	b.n	8006d0a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006df4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6a:	4b61      	ldr	r3, [pc, #388]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c7e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c9a:	e036      	b.n	8006d0a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c9c:	4b54      	ldr	r3, [pc, #336]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006ca8:	4b51      	ldr	r3, [pc, #324]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	0f1b      	lsrs	r3, r3, #28
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	e006      	b.n	8006cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006cb4:	4b4e      	ldr	r3, [pc, #312]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	0f1b      	lsrs	r3, r3, #28
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	4a4e      	ldr	r2, [pc, #312]	; (8006dfc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc8:	ee07 3a90 	vmov	s15, r3
 8006ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cec:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d08:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006d0a:	4b39      	ldr	r3, [pc, #228]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d017      	beq.n	8006d46 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d16:	4b36      	ldr	r3, [pc, #216]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1a:	0a5b      	lsrs	r3, r3, #9
 8006d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d20:	ee07 3a90 	vmov	s15, r3
 8006d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d3c:	ee17 2a90 	vmov	r2, s15
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e002      	b.n	8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006d4c:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d017      	beq.n	8006d88 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d58:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5c:	0c1b      	lsrs	r3, r3, #16
 8006d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d7e:	ee17 2a90 	vmov	r2, s15
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	605a      	str	r2, [r3, #4]
 8006d86:	e002      	b.n	8006d8e <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006d8e:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d017      	beq.n	8006dca <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d9a:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9e:	0e1b      	lsrs	r3, r3, #24
 8006da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006db0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc0:	ee17 2a90 	vmov	r2, s15
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006dc8:	e00c      	b.n	8006de4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	609a      	str	r2, [r3, #8]
}
 8006dd0:	e008      	b.n	8006de4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	609a      	str	r2, [r3, #8]
}
 8006de4:	bf00      	nop
 8006de6:	3724      	adds	r7, #36	; 0x24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	46020c00 	.word	0x46020c00
 8006df4:	4b742400 	.word	0x4b742400
 8006df8:	46000000 	.word	0x46000000
 8006dfc:	080285fc 	.word	0x080285fc

08006e00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b089      	sub	sp, #36	; 0x24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006e08:	4bac      	ldr	r3, [pc, #688]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e10:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006e12:	4baa      	ldr	r3, [pc, #680]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006e1c:	4ba7      	ldr	r3, [pc, #668]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	0a1b      	lsrs	r3, r3, #8
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	3301      	adds	r3, #1
 8006e28:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006e2a:	4ba4      	ldr	r3, [pc, #656]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006e34:	4ba1      	ldr	r3, [pc, #644]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	08db      	lsrs	r3, r3, #3
 8006e3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	fb02 f303 	mul.w	r3, r2, r3
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8123 	beq.w	800709e <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d062      	beq.n	8006f24 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	f200 8081 	bhi.w	8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d024      	beq.n	8006eb6 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d17a      	bne.n	8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e84:	4b8d      	ldr	r3, [pc, #564]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e94:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e98:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eb4:	e08f      	b.n	8006fd6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006eb6:	4b81      	ldr	r3, [pc, #516]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006ec2:	4b7e      	ldr	r3, [pc, #504]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	0f1b      	lsrs	r3, r3, #28
 8006ec8:	f003 030f 	and.w	r3, r3, #15
 8006ecc:	e006      	b.n	8006edc <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006ece:	4b7b      	ldr	r3, [pc, #492]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ed4:	041b      	lsls	r3, r3, #16
 8006ed6:	0f1b      	lsrs	r3, r3, #28
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	4a7a      	ldr	r2, [pc, #488]	; (80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f06:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f22:	e058      	b.n	8006fd6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f36:	4b61      	ldr	r3, [pc, #388]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f4a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f66:	e036      	b.n	8006fd6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006f68:	4b54      	ldr	r3, [pc, #336]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006f74:	4b51      	ldr	r3, [pc, #324]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	0f1b      	lsrs	r3, r3, #28
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	e006      	b.n	8006f8e <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006f80:	4b4e      	ldr	r3, [pc, #312]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f86:	041b      	lsls	r3, r3, #16
 8006f88:	0f1b      	lsrs	r3, r3, #28
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	4a4e      	ldr	r2, [pc, #312]	; (80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	ee07 3a90 	vmov	s15, r3
 8006fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fb8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fd4:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006fd6:	4b39      	ldr	r3, [pc, #228]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d017      	beq.n	8007012 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fe2:	4b36      	ldr	r3, [pc, #216]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe6:	0a5b      	lsrs	r3, r3, #9
 8006fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fec:	ee07 3a90 	vmov	s15, r3
 8006ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ff8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007008:	ee17 2a90 	vmov	r2, s15
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	e002      	b.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007018:	4b28      	ldr	r3, [pc, #160]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d017      	beq.n	8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007024:	4b25      	ldr	r3, [pc, #148]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007028:	0c1b      	lsrs	r3, r3, #16
 800702a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800703a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800703e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704a:	ee17 2a90 	vmov	r2, s15
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	e002      	b.n	800705a <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d017      	beq.n	8007096 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007066:	4b15      	ldr	r3, [pc, #84]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706a:	0e1b      	lsrs	r3, r3, #24
 800706c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800707c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007080:	edd7 6a07 	vldr	s13, [r7, #28]
 8007084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708c:	ee17 2a90 	vmov	r2, s15
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007094:	e00c      	b.n	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	609a      	str	r2, [r3, #8]
}
 800709c:	e008      	b.n	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	609a      	str	r2, [r3, #8]
}
 80070b0:	bf00      	nop
 80070b2:	3724      	adds	r7, #36	; 0x24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	46020c00 	.word	0x46020c00
 80070c0:	4b742400 	.word	0x4b742400
 80070c4:	46000000 	.word	0x46000000
 80070c8:	080285fc 	.word	0x080285fc

080070cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b089      	sub	sp, #36	; 0x24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80070d4:	4bac      	ldr	r3, [pc, #688]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070dc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80070de:	4baa      	ldr	r3, [pc, #680]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80070e8:	4ba7      	ldr	r3, [pc, #668]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	3301      	adds	r3, #1
 80070f4:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80070f6:	4ba4      	ldr	r3, [pc, #656]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007100:	4ba1      	ldr	r3, [pc, #644]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007104:	08db      	lsrs	r3, r3, #3
 8007106:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	ee07 3a90 	vmov	s15, r3
 8007114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007118:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 8123 	beq.w	800736a <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2b03      	cmp	r3, #3
 8007128:	d062      	beq.n	80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b03      	cmp	r3, #3
 800712e:	f200 8081 	bhi.w	8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d024      	beq.n	8007182 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d17a      	bne.n	8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007148:	eddf 6a90 	vldr	s13, [pc, #576]	; 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800714c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007150:	4b8d      	ldr	r3, [pc, #564]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007160:	ed97 6a02 	vldr	s12, [r7, #8]
 8007164:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007168:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800716c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007174:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717c:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8007180:	e08f      	b.n	80072a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007182:	4b81      	ldr	r3, [pc, #516]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800718e:	4b7e      	ldr	r3, [pc, #504]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	0f1b      	lsrs	r3, r3, #28
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	e006      	b.n	80071a8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800719a:	4b7b      	ldr	r3, [pc, #492]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800719c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071a0:	041b      	lsls	r3, r3, #16
 80071a2:	0f1b      	lsrs	r3, r3, #28
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	4a7a      	ldr	r2, [pc, #488]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80071aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80071d2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ee:	e058      	b.n	80072a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a64 	vldr	s13, [pc, #400]	; 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b61      	ldr	r3, [pc, #388]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007212:	ed97 6a02 	vldr	s12, [r7, #8]
 8007216:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007232:	e036      	b.n	80072a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007234:	4b54      	ldr	r3, [pc, #336]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8007240:	4b51      	ldr	r3, [pc, #324]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	0f1b      	lsrs	r3, r3, #28
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	e006      	b.n	800725a <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800724c:	4b4e      	ldr	r3, [pc, #312]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800724e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	0f1b      	lsrs	r3, r3, #28
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	4a4e      	ldr	r2, [pc, #312]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800725c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007280:	ed97 6a02 	vldr	s12, [r7, #8]
 8007284:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007294:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072a0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80072a2:	4b39      	ldr	r3, [pc, #228]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d017      	beq.n	80072de <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072ae:	4b36      	ldr	r3, [pc, #216]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b2:	0a5b      	lsrs	r3, r3, #9
 80072b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b8:	ee07 3a90 	vmov	s15, r3
 80072bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80072c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072c4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d4:	ee17 2a90 	vmov	r2, s15
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	e002      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80072e4:	4b28      	ldr	r3, [pc, #160]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d017      	beq.n	8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072f0:	4b25      	ldr	r3, [pc, #148]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f4:	0c1b      	lsrs	r3, r3, #16
 80072f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007306:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800730a:	edd7 6a07 	vldr	s13, [r7, #28]
 800730e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007316:	ee17 2a90 	vmov	r2, s15
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	e002      	b.n	8007326 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007326:	4b18      	ldr	r3, [pc, #96]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d017      	beq.n	8007362 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007336:	0e1b      	lsrs	r3, r3, #24
 8007338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733c:	ee07 3a90 	vmov	s15, r3
 8007340:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007344:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007348:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800734c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007358:	ee17 2a90 	vmov	r2, s15
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007360:	e00c      	b.n	800737c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	609a      	str	r2, [r3, #8]
}
 8007368:	e008      	b.n	800737c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	609a      	str	r2, [r3, #8]
}
 800737c:	bf00      	nop
 800737e:	3724      	adds	r7, #36	; 0x24
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	46020c00 	.word	0x46020c00
 800738c:	4b742400 	.word	0x4b742400
 8007390:	46000000 	.word	0x46000000
 8007394:	080285fc 	.word	0x080285fc

08007398 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08e      	sub	sp, #56	; 0x38
 800739c:	af00      	add	r7, sp, #0
 800739e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80073a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073a6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80073aa:	430b      	orrs	r3, r1
 80073ac:	d145      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80073ae:	4ba7      	ldr	r3, [pc, #668]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80073ba:	4ba4      	ldr	r3, [pc, #656]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d108      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ce:	d104      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80073d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34
 80073d6:	f001 b8fc 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80073da:	4b9c      	ldr	r3, [pc, #624]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073e8:	d114      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f0:	d110      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073f2:	4b96      	ldr	r3, [pc, #600]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007400:	d103      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007402:	23fa      	movs	r3, #250	; 0xfa
 8007404:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007406:	f001 b8e4 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800740a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800740e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007410:	f001 b8df 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007414:	4b8d      	ldr	r3, [pc, #564]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800741c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007420:	d107      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007428:	d103      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800742a:	4b89      	ldr	r3, [pc, #548]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
 800742e:	f001 b8d0 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
 8007436:	f001 b8cc 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800743a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800743e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007442:	430b      	orrs	r3, r1
 8007444:	d151      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007446:	4b81      	ldr	r3, [pc, #516]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007448:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800744c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007450:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	2b80      	cmp	r3, #128	; 0x80
 8007456:	d035      	beq.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	2b80      	cmp	r3, #128	; 0x80
 800745c:	d841      	bhi.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	2b60      	cmp	r3, #96	; 0x60
 8007462:	d02a      	beq.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	2b60      	cmp	r3, #96	; 0x60
 8007468:	d83b      	bhi.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	2b40      	cmp	r3, #64	; 0x40
 800746e:	d009      	beq.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	d835      	bhi.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00c      	beq.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	2b20      	cmp	r3, #32
 8007480:	d012      	beq.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007482:	e02e      	b.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff fb53 	bl	8006b34 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007492:	f001 b89e 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007496:	f107 0318 	add.w	r3, r7, #24
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff fcb0 	bl	8006e00 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074a4:	f001 b895 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074a8:	f107 030c 	add.w	r3, r7, #12
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff fe0d 	bl	80070cc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074b6:	f001 b88c 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80074ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80074be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074c0:	f001 b887 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074c4:	4b61      	ldr	r3, [pc, #388]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d0:	d103      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80074d2:	4b60      	ldr	r3, [pc, #384]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074d6:	f001 b87c 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074de:	f001 b878 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074e6:	f001 b874 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80074ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ee:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80074f2:	430b      	orrs	r3, r1
 80074f4:	d158      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80074f6:	4b55      	ldr	r3, [pc, #340]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007500:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007508:	d03b      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007510:	d846      	bhi.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007518:	d02e      	beq.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007520:	d83e      	bhi.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007528:	d00b      	beq.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007530:	d836      	bhi.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00d      	beq.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753e:	d012      	beq.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007540:	e02e      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff faf4 	bl	8006b34 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007550:	f001 b83f 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007554:	f107 0318 	add.w	r3, r7, #24
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff fc51 	bl	8006e00 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007562:	f001 b836 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007566:	f107 030c 	add.w	r3, r7, #12
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff fdae 	bl	80070cc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007574:	f001 b82d 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007578:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800757e:	f001 b828 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007582:	4b32      	ldr	r3, [pc, #200]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800758a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800758e:	d103      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007590:	4b30      	ldr	r3, [pc, #192]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007594:	f001 b81d 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800759c:	f001 b819 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075a4:	f001 b815 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80075a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ac:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80075b0:	430b      	orrs	r3, r1
 80075b2:	d126      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80075b4:	4b25      	ldr	r3, [pc, #148]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80075ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075be:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80075c0:	4b22      	ldr	r3, [pc, #136]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075cc:	d106      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d103      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80075d4:	4b1f      	ldr	r3, [pc, #124]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80075d6:	637b      	str	r3, [r7, #52]	; 0x34
 80075d8:	f000 bffb 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80075dc:	4b1b      	ldr	r3, [pc, #108]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e8:	d107      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075f0:	d103      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80075f2:	4b19      	ldr	r3, [pc, #100]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
 80075f6:	f000 bfec 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
 80075fe:	f000 bfe8 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007606:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800760a:	430b      	orrs	r3, r1
 800760c:	d164      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800760e:	4b0f      	ldr	r3, [pc, #60]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007614:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007618:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007620:	d03d      	beq.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007628:	d852      	bhi.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007630:	d014      	beq.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007638:	d84a      	bhi.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01f      	beq.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007646:	d012      	beq.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007648:	e042      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800764a:	bf00      	nop
 800764c:	46020c00 	.word	0x46020c00
 8007650:	0007a120 	.word	0x0007a120
 8007654:	00f42400 	.word	0x00f42400
 8007658:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800765c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fa67 	bl	8006b34 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800766a:	f000 bfb2 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800766e:	f107 0318 	add.w	r3, r7, #24
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff fbc4 	bl	8006e00 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800767c:	f000 bfa9 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007680:	4bab      	ldr	r3, [pc, #684]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800768c:	d103      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800768e:	4ba9      	ldr	r3, [pc, #676]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007692:	f000 bf9e 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800769a:	f000 bf9a 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800769e:	4ba4      	ldr	r3, [pc, #656]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80076aa:	4ba1      	ldr	r3, [pc, #644]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	0e1b      	lsrs	r3, r3, #24
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	e006      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80076b6:	4b9e      	ldr	r3, [pc, #632]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076bc:	041b      	lsls	r3, r3, #16
 80076be:	0e1b      	lsrs	r3, r3, #24
 80076c0:	f003 030f 	and.w	r3, r3, #15
 80076c4:	4a9c      	ldr	r2, [pc, #624]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80076c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076cc:	f000 bf81 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076d4:	f000 bf7d 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076dc:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80076e0:	430b      	orrs	r3, r1
 80076e2:	d175      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80076e4:	4b92      	ldr	r3, [pc, #584]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80076ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ee:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d15b      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80076f6:	4b8e      	ldr	r3, [pc, #568]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076fc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007700:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007708:	d034      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007710:	d849      	bhi.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007718:	d00b      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007720:	d841      	bhi.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	2b00      	cmp	r3, #0
 8007726:	d016      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800772e:	d009      	beq.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007730:	e039      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff f9fc 	bl	8006b34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007740:	f000 bf47 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007744:	f107 0318 	add.w	r3, r7, #24
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff fb59 	bl	8006e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007752:	f000 bf3e 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007756:	4b76      	ldr	r3, [pc, #472]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800775e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007762:	d103      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8007764:	4b73      	ldr	r3, [pc, #460]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007766:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007768:	f000 bf33 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007770:	f000 bf2f 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007774:	4b6e      	ldr	r3, [pc, #440]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8007780:	4b6b      	ldr	r3, [pc, #428]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	0e1b      	lsrs	r3, r3, #24
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	e006      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800778c:	4b68      	ldr	r3, [pc, #416]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800778e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007792:	041b      	lsls	r3, r3, #16
 8007794:	0e1b      	lsrs	r3, r3, #24
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	4a67      	ldr	r2, [pc, #412]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800779c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80077a2:	f000 bf16 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80077aa:	f000 bf12 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077b4:	d108      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff f9ba 	bl	8006b34 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
 80077c4:	f000 bf05 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	637b      	str	r3, [r7, #52]	; 0x34
 80077cc:	f000 bf01 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80077d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d4:	1e51      	subs	r1, r2, #1
 80077d6:	430b      	orrs	r3, r1
 80077d8:	d136      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80077da:	4b55      	ldr	r3, [pc, #340]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80077ec:	f7fe fafc 	bl	8005de8 <HAL_RCC_GetPCLK2Freq>
 80077f0:	6378      	str	r0, [r7, #52]	; 0x34
 80077f2:	f000 beee 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d104      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077fc:	f7fe f9be 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8007800:	6378      	str	r0, [r7, #52]	; 0x34
 8007802:	f000 bee6 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007806:	4b4a      	ldr	r3, [pc, #296]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800780e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007812:	d106      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	2b02      	cmp	r3, #2
 8007818:	d103      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800781a:	4b48      	ldr	r3, [pc, #288]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800781c:	637b      	str	r3, [r7, #52]	; 0x34
 800781e:	f000 bed8 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007822:	4b43      	ldr	r3, [pc, #268]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b02      	cmp	r3, #2
 800782e:	d107      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	2b03      	cmp	r3, #3
 8007834:	d104      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8007836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800783a:	637b      	str	r3, [r7, #52]	; 0x34
 800783c:	f000 bec9 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	637b      	str	r3, [r7, #52]	; 0x34
 8007844:	f000 bec5 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800784c:	1e91      	subs	r1, r2, #2
 800784e:	430b      	orrs	r3, r1
 8007850:	d136      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007852:	4b37      	ldr	r3, [pc, #220]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007858:	f003 030c 	and.w	r3, r3, #12
 800785c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	2b00      	cmp	r3, #0
 8007862:	d104      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007864:	f7fe faac 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8007868:	6378      	str	r0, [r7, #52]	; 0x34
 800786a:	f000 beb2 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	2b04      	cmp	r3, #4
 8007872:	d104      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007874:	f7fe f982 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8007878:	6378      	str	r0, [r7, #52]	; 0x34
 800787a:	f000 beaa 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800787e:	4b2c      	ldr	r3, [pc, #176]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788a:	d106      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	2b08      	cmp	r3, #8
 8007890:	d103      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8007892:	4b2a      	ldr	r3, [pc, #168]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007894:	637b      	str	r3, [r7, #52]	; 0x34
 8007896:	f000 be9c 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800789a:	4b25      	ldr	r3, [pc, #148]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800789c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d107      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	2b0c      	cmp	r3, #12
 80078ac:	d104      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80078ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078b2:	637b      	str	r3, [r7, #52]	; 0x34
 80078b4:	f000 be8d 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	637b      	str	r3, [r7, #52]	; 0x34
 80078bc:	f000 be89 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80078c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c4:	1f11      	subs	r1, r2, #4
 80078c6:	430b      	orrs	r3, r1
 80078c8:	d13e      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80078ca:	4b19      	ldr	r3, [pc, #100]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d104      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078dc:	f7fe fa70 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 80078e0:	6378      	str	r0, [r7, #52]	; 0x34
 80078e2:	f000 be76 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	2b10      	cmp	r3, #16
 80078ea:	d104      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078ec:	f7fe f946 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 80078f0:	6378      	str	r0, [r7, #52]	; 0x34
 80078f2:	f000 be6e 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80078f6:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007902:	d106      	bne.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	2b20      	cmp	r3, #32
 8007908:	d103      	bne.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800790a:	4b0c      	ldr	r3, [pc, #48]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800790c:	637b      	str	r3, [r7, #52]	; 0x34
 800790e:	f000 be60 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007912:	4b07      	ldr	r3, [pc, #28]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b02      	cmp	r3, #2
 800791e:	d10f      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	2b30      	cmp	r3, #48	; 0x30
 8007924:	d10c      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8007926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
 800792c:	f000 be51 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007930:	46020c00 	.word	0x46020c00
 8007934:	02dc6c00 	.word	0x02dc6c00
 8007938:	080285fc 	.word	0x080285fc
 800793c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007940:	2300      	movs	r3, #0
 8007942:	637b      	str	r3, [r7, #52]	; 0x34
 8007944:	f000 be45 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794c:	f1a2 0108 	sub.w	r1, r2, #8
 8007950:	430b      	orrs	r3, r1
 8007952:	d136      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007954:	4b9f      	ldr	r3, [pc, #636]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800795a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800795e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	2b00      	cmp	r3, #0
 8007964:	d104      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007966:	f7fe fa2b 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 800796a:	6378      	str	r0, [r7, #52]	; 0x34
 800796c:	f000 be31 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	d104      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007976:	f7fe f901 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 800797a:	6378      	str	r0, [r7, #52]	; 0x34
 800797c:	f000 be29 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007980:	4b94      	ldr	r3, [pc, #592]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800798c:	d106      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	2b80      	cmp	r3, #128	; 0x80
 8007992:	d103      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8007994:	4b90      	ldr	r3, [pc, #576]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007996:	637b      	str	r3, [r7, #52]	; 0x34
 8007998:	f000 be1b 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800799c:	4b8d      	ldr	r3, [pc, #564]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800799e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d107      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	2bc0      	cmp	r3, #192	; 0xc0
 80079ae:	d104      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 80079b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079b4:	637b      	str	r3, [r7, #52]	; 0x34
 80079b6:	f000 be0c 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
 80079be:	f000 be08 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80079c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c6:	f1a2 0110 	sub.w	r1, r2, #16
 80079ca:	430b      	orrs	r3, r1
 80079cc:	d139      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80079ce:	4b81      	ldr	r3, [pc, #516]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80079e0:	f7fe f9ee 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 80079e4:	6378      	str	r0, [r7, #52]	; 0x34
 80079e6:	f000 bdf4 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f0:	d104      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079f2:	f7fe f8c3 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 80079f6:	6378      	str	r0, [r7, #52]	; 0x34
 80079f8:	f000 bdeb 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80079fc:	4b75      	ldr	r3, [pc, #468]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a08:	d107      	bne.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a10:	d103      	bne.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007a12:	4b71      	ldr	r3, [pc, #452]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
 8007a16:	f000 bddc 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007a1a:	4b6e      	ldr	r3, [pc, #440]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d108      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a2e:	d104      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8007a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34
 8007a36:	f000 bdcc 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3e:	f000 bdc8 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a46:	f1a2 0120 	sub.w	r1, r2, #32
 8007a4a:	430b      	orrs	r3, r1
 8007a4c:	d158      	bne.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007a4e:	4b61      	ldr	r3, [pc, #388]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d104      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007a60:	f7fe f9d6 	bl	8005e10 <HAL_RCC_GetPCLK3Freq>
 8007a64:	6378      	str	r0, [r7, #52]	; 0x34
 8007a66:	f000 bdb4 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d104      	bne.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a70:	f7fe f884 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8007a74:	6378      	str	r0, [r7, #52]	; 0x34
 8007a76:	f000 bdac 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007a7a:	4b56      	ldr	r3, [pc, #344]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a86:	d106      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d103      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007a8e:	4b52      	ldr	r3, [pc, #328]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34
 8007a92:	f000 bd9e 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007a96:	4b4f      	ldr	r3, [pc, #316]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d107      	bne.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d104      	bne.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8007aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab0:	f000 bd8f 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007ab4:	4b47      	ldr	r3, [pc, #284]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b20      	cmp	r3, #32
 8007abe:	d11b      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d118      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ac6:	4b43      	ldr	r3, [pc, #268]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007ad2:	4b40      	ldr	r3, [pc, #256]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	0e1b      	lsrs	r3, r3, #24
 8007ad8:	f003 030f 	and.w	r3, r3, #15
 8007adc:	e006      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007ade:	4b3d      	ldr	r3, [pc, #244]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ae4:	041b      	lsls	r3, r3, #16
 8007ae6:	0e1b      	lsrs	r3, r3, #24
 8007ae8:	f003 030f 	and.w	r3, r3, #15
 8007aec:	4a3b      	ldr	r2, [pc, #236]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
 8007af4:	f000 bd6d 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	637b      	str	r3, [r7, #52]	; 0x34
 8007afc:	f000 bd69 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b04:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	d169      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007b0c:	4b31      	ldr	r3, [pc, #196]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b12:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007b16:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b1e:	d104      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b20:	f7fe f82c 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8007b24:	6378      	str	r0, [r7, #52]	; 0x34
 8007b26:	f000 bd54 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b30:	d108      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b32:	f107 0318 	add.w	r3, r7, #24
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff f962 	bl	8006e00 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b40:	f000 bd47 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d104      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007b4a:	f7fe f91f 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8007b4e:	6378      	str	r0, [r7, #52]	; 0x34
 8007b50:	f000 bd3f 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007b5a:	d118      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007b5c:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007b68:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	0f1b      	lsrs	r3, r3, #28
 8007b6e:	f003 030f 	and.w	r3, r3, #15
 8007b72:	e006      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007b74:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b7a:	041b      	lsls	r3, r3, #16
 8007b7c:	0f1b      	lsrs	r3, r3, #28
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	4a16      	ldr	r2, [pc, #88]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
 8007b8a:	f000 bd22 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007b8e:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b9a:	d107      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ba2:	d103      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007ba4:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba8:	f000 bd13 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb8:	d107      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc0:	d103      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007bc2:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc6:	f000 bd04 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bce:	f000 bd00 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007bd2:	bf00      	nop
 8007bd4:	46020c00 	.word	0x46020c00
 8007bd8:	00f42400 	.word	0x00f42400
 8007bdc:	080285fc 	.word	0x080285fc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007be8:	430b      	orrs	r3, r1
 8007bea:	d14e      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007bec:	4ba8      	ldr	r3, [pc, #672]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d841      	bhi.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007bfe:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c04:	08007c3d 	.word	0x08007c3d
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007c2b 	.word	0x08007c2b
 8007c10:	08007c47 	.word	0x08007c47
 8007c14:	08007c51 	.word	0x08007c51
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe ff89 	bl	8006b34 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c26:	f000 bcd4 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c2a:	f107 030c 	add.w	r3, r7, #12
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fa4c 	bl	80070cc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c38:	f000 bccb 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007c3c:	f7fe f8a6 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8007c40:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c42:	f000 bcc6 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007c46:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c4c:	f000 bcc1 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c50:	4b8f      	ldr	r3, [pc, #572]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007c5c:	4b8c      	ldr	r3, [pc, #560]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	0e1b      	lsrs	r3, r3, #24
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	e006      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007c68:	4b89      	ldr	r3, [pc, #548]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c6e:	041b      	lsls	r3, r3, #16
 8007c70:	0e1b      	lsrs	r3, r3, #24
 8007c72:	f003 030f 	and.w	r3, r3, #15
 8007c76:	4a87      	ldr	r2, [pc, #540]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c7e:	f000 bca8 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c86:	f000 bca4 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007c92:	430b      	orrs	r3, r1
 8007c94:	d15d      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007c96:	4b7e      	ldr	r3, [pc, #504]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c9c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007ca0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ca8:	d036      	beq.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cb0:	d84b      	bhi.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007cb8:	d029      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007cc0:	d843      	bhi.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cc8:	d013      	beq.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd0:	d83b      	bhi.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d015      	beq.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cde:	d134      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe ff25 	bl	8006b34 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cee:	f000 bc70 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff f9e8 	bl	80070cc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d00:	f000 bc67 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007d04:	f7fe f842 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8007d08:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007d0a:	f000 bc62 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007d0e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d14:	f000 bc5d 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d18:	4b5d      	ldr	r3, [pc, #372]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007d24:	4b5a      	ldr	r3, [pc, #360]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	0e1b      	lsrs	r3, r3, #24
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	e006      	b.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007d30:	4b57      	ldr	r3, [pc, #348]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d36:	041b      	lsls	r3, r3, #16
 8007d38:	0e1b      	lsrs	r3, r3, #24
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	4a55      	ldr	r2, [pc, #340]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d46:	f000 bc44 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d4e:	f000 bc40 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d56:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007d5a:	430b      	orrs	r3, r1
 8007d5c:	d14a      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007d5e:	4b4c      	ldr	r3, [pc, #304]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d68:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d70:	f7fe f826 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8007d74:	6378      	str	r0, [r7, #52]	; 0x34
 8007d76:	f000 bc2c 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d80:	d104      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d82:	f7fd fefb 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8007d86:	6378      	str	r0, [r7, #52]	; 0x34
 8007d88:	f000 bc23 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007d8c:	4b40      	ldr	r3, [pc, #256]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d98:	d107      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da0:	d103      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007da2:	4b3d      	ldr	r3, [pc, #244]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
 8007da6:	f000 bc14 	b.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007daa:	4b39      	ldr	r3, [pc, #228]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d11b      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dbc:	d117      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007dbe:	4b34      	ldr	r3, [pc, #208]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007dca:	4b31      	ldr	r3, [pc, #196]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	0e1b      	lsrs	r3, r3, #24
 8007dd0:	f003 030f 	and.w	r3, r3, #15
 8007dd4:	e006      	b.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007dd6:	4b2e      	ldr	r3, [pc, #184]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ddc:	041b      	lsls	r3, r3, #16
 8007dde:	0e1b      	lsrs	r3, r3, #24
 8007de0:	f003 030f 	and.w	r3, r3, #15
 8007de4:	4a2b      	ldr	r2, [pc, #172]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dea:	637b      	str	r3, [r7, #52]	; 0x34
 8007dec:	e3f1      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34
 8007df2:	e3ee      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007df8:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007dfc:	430b      	orrs	r3, r1
 8007dfe:	d14d      	bne.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007e00:	4b23      	ldr	r3, [pc, #140]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e0a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e12:	f7fd ffd5 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8007e16:	6378      	str	r0, [r7, #52]	; 0x34
 8007e18:	e3db      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e20:	d103      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e22:	f7fd feab 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8007e26:	6378      	str	r0, [r7, #52]	; 0x34
 8007e28:	e3d3      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007e2a:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e36:	d106      	bne.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e3e:	d102      	bne.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8007e40:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007e42:	637b      	str	r3, [r7, #52]	; 0x34
 8007e44:	e3c5      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007e46:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d11b      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e58:	d117      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e5a:	4b0d      	ldr	r3, [pc, #52]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d005      	beq.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8007e66:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	0e1b      	lsrs	r3, r3, #24
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	e006      	b.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007e72:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e78:	041b      	lsls	r3, r3, #16
 8007e7a:	0e1b      	lsrs	r3, r3, #24
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	4a04      	ldr	r2, [pc, #16]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e86:	637b      	str	r3, [r7, #52]	; 0x34
 8007e88:	e3a3      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8e:	e3a0      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007e90:	46020c00 	.word	0x46020c00
 8007e94:	080285fc 	.word	0x080285fc
 8007e98:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	d148      	bne.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007ea8:	4b9d      	ldr	r3, [pc, #628]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007eae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007eb2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8007eb8:	d024      	beq.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	2bc0      	cmp	r3, #192	; 0xc0
 8007ebe:	d839      	bhi.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	2b80      	cmp	r3, #128	; 0x80
 8007ec4:	d00d      	beq.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	2b80      	cmp	r3, #128	; 0x80
 8007eca:	d833      	bhi.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	2b40      	cmp	r3, #64	; 0x40
 8007ed6:	d011      	beq.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007ed8:	e02c      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007eda:	f7fd ff99 	bl	8005e10 <HAL_RCC_GetPCLK3Freq>
 8007ede:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007ee0:	e377      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ee2:	4b8f      	ldr	r3, [pc, #572]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eee:	d102      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007ef0:	4b8c      	ldr	r3, [pc, #560]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007ef2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ef4:	e36d      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007efa:	e36a      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007efc:	f7fd fe3e 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8007f00:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f02:	e366      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007f04:	4b86      	ldr	r3, [pc, #536]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007f10:	4b83      	ldr	r3, [pc, #524]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	0f1b      	lsrs	r3, r3, #28
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	e006      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007f1c:	4b80      	ldr	r3, [pc, #512]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f22:	041b      	lsls	r3, r3, #16
 8007f24:	0f1b      	lsrs	r3, r3, #28
 8007f26:	f003 030f 	and.w	r3, r3, #15
 8007f2a:	4a7f      	ldr	r2, [pc, #508]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f32:	e34e      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f38:	e34b      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f3e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007f42:	430b      	orrs	r3, r1
 8007f44:	d147      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007f46:	4b76      	ldr	r3, [pc, #472]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f50:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d103      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f58:	f7fd ff32 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8007f5c:	6378      	str	r0, [r7, #52]	; 0x34
 8007f5e:	e338      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f66:	d103      	bne.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f68:	f7fd fe08 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8007f6c:	6378      	str	r0, [r7, #52]	; 0x34
 8007f6e:	e330      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007f70:	4b6b      	ldr	r3, [pc, #428]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f7c:	d106      	bne.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f84:	d102      	bne.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8007f86:	4b67      	ldr	r3, [pc, #412]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
 8007f8a:	e322      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007f8c:	4b64      	ldr	r3, [pc, #400]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d11b      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f9e:	d117      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fa0:	4b5f      	ldr	r3, [pc, #380]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d005      	beq.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007fac:	4b5c      	ldr	r3, [pc, #368]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	0e1b      	lsrs	r3, r3, #24
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	e006      	b.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007fb8:	4b59      	ldr	r3, [pc, #356]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fbe:	041b      	lsls	r3, r3, #16
 8007fc0:	0e1b      	lsrs	r3, r3, #24
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	4a58      	ldr	r2, [pc, #352]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fce:	e300      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd4:	e2fd      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fda:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007fde:	430b      	orrs	r3, r1
 8007fe0:	d15b      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007fe2:	4b4f      	ldr	r3, [pc, #316]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d117      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ff4:	4b4a      	ldr	r3, [pc, #296]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8008000:	4b47      	ldr	r3, [pc, #284]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	0e1b      	lsrs	r3, r3, #24
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	e006      	b.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800800c:	4b44      	ldr	r3, [pc, #272]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800800e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008012:	041b      	lsls	r3, r3, #16
 8008014:	0e1b      	lsrs	r3, r3, #24
 8008016:	f003 030f 	and.w	r3, r3, #15
 800801a:	4a43      	ldr	r2, [pc, #268]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800801c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
 8008022:	e2d6      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008024:	4b3e      	ldr	r3, [pc, #248]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800802a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800802e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008032:	d112      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800803a:	d10e      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800803c:	4b38      	ldr	r3, [pc, #224]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800803e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800804a:	d102      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800804c:	23fa      	movs	r3, #250	; 0xfa
 800804e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008050:	e2bf      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008052:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008056:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008058:	e2bb      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800805a:	4b31      	ldr	r3, [pc, #196]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008066:	d106      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806e:	d102      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8008070:	4b2c      	ldr	r3, [pc, #176]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008072:	637b      	str	r3, [r7, #52]	; 0x34
 8008074:	e2ad      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008076:	4b2a      	ldr	r3, [pc, #168]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b02      	cmp	r3, #2
 8008082:	d107      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800808a:	d103      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800808c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
 8008092:	e29e      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
 8008098:	e29b      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800809a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800809e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80080a2:	430b      	orrs	r3, r1
 80080a4:	d162      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80080a6:	4b1e      	ldr	r3, [pc, #120]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080b0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d117      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080b8:	4b19      	ldr	r3, [pc, #100]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80080c4:	4b16      	ldr	r3, [pc, #88]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	0e1b      	lsrs	r3, r3, #24
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	e006      	b.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80080d0:	4b13      	ldr	r3, [pc, #76]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080d6:	041b      	lsls	r3, r3, #16
 80080d8:	0e1b      	lsrs	r3, r3, #24
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	4a12      	ldr	r2, [pc, #72]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80080e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
 80080e6:	e274      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80080e8:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080f6:	d119      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fe:	d115      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008100:	4b07      	ldr	r3, [pc, #28]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800810a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800810e:	d102      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8008110:	23fa      	movs	r3, #250	; 0xfa
 8008112:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008114:	e25d      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008116:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800811a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800811c:	e259      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800811e:	bf00      	nop
 8008120:	46020c00 	.word	0x46020c00
 8008124:	00f42400 	.word	0x00f42400
 8008128:	080285fc 	.word	0x080285fc
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800812c:	4b9d      	ldr	r3, [pc, #628]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008138:	d106      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008140:	d102      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8008142:	4b99      	ldr	r3, [pc, #612]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008144:	637b      	str	r3, [r7, #52]	; 0x34
 8008146:	e244      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008148:	4b96      	ldr	r3, [pc, #600]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800814a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b02      	cmp	r3, #2
 8008154:	d107      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800815c:	d103      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800815e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
 8008164:	e235      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	637b      	str	r3, [r7, #52]	; 0x34
 800816a:	e232      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800816c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008170:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008174:	430b      	orrs	r3, r1
 8008176:	d147      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008178:	4b8a      	ldr	r3, [pc, #552]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800817a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800817e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008182:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	2b00      	cmp	r3, #0
 8008188:	d103      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800818a:	f7fd fe19 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 800818e:	6378      	str	r0, [r7, #52]	; 0x34
 8008190:	e21f      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008192:	4b84      	ldr	r3, [pc, #528]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800819c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081a0:	d112      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081a8:	d10e      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081aa:	4b7e      	ldr	r3, [pc, #504]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081b8:	d102      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80081ba:	23fa      	movs	r3, #250	; 0xfa
 80081bc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081be:	e208      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80081c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80081c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081c6:	e204      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80081c8:	4b76      	ldr	r3, [pc, #472]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d4:	d106      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081dc:	d102      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80081de:	4b72      	ldr	r3, [pc, #456]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80081e0:	637b      	str	r3, [r7, #52]	; 0x34
 80081e2:	e1f6      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80081e4:	4b6f      	ldr	r3, [pc, #444]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d107      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80081f8:	d103      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80081fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008200:	e1e7      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	637b      	str	r3, [r7, #52]	; 0x34
 8008206:	e1e4      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800820c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008210:	430b      	orrs	r3, r1
 8008212:	d12d      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008214:	4b63      	ldr	r3, [pc, #396]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800821a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800821e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008220:	4b60      	ldr	r3, [pc, #384]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800822c:	d105      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	2b00      	cmp	r3, #0
 8008232:	d102      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8008234:	4b5c      	ldr	r3, [pc, #368]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008236:	637b      	str	r3, [r7, #52]	; 0x34
 8008238:	e1cb      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008240:	d107      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fc74 	bl	8006b34 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	637b      	str	r3, [r7, #52]	; 0x34
 8008250:	e1bf      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008258:	d107      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800825a:	f107 0318 	add.w	r3, r7, #24
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fdce 	bl	8006e00 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	637b      	str	r3, [r7, #52]	; 0x34
 8008268:	e1b3      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	637b      	str	r3, [r7, #52]	; 0x34
 800826e:	e1b0      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008274:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008278:	430b      	orrs	r3, r1
 800827a:	d14d      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800827c:	4b49      	ldr	r3, [pc, #292]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800827e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008282:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008286:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800828e:	d028      	beq.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008296:	d83c      	bhi.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800829e:	d013      	beq.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082a6:	d834      	bhi.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d004      	beq.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082b4:	d004      	beq.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80082b6:	e02c      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80082b8:	f7fd fd96 	bl	8005de8 <HAL_RCC_GetPCLK2Freq>
 80082bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80082be:	e188      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80082c0:	f7fd fc5c 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 80082c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80082c6:	e184      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082c8:	4b36      	ldr	r3, [pc, #216]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d4:	d102      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80082d6:	4b34      	ldr	r3, [pc, #208]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80082da:	e17a      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082e0:	e177      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082e2:	4b30      	ldr	r3, [pc, #192]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80082ee:	4b2d      	ldr	r3, [pc, #180]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	0e1b      	lsrs	r3, r3, #24
 80082f4:	f003 030f 	and.w	r3, r3, #15
 80082f8:	e006      	b.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80082fa:	4b2a      	ldr	r3, [pc, #168]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80082fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008300:	041b      	lsls	r3, r3, #16
 8008302:	0e1b      	lsrs	r3, r3, #24
 8008304:	f003 030f 	and.w	r3, r3, #15
 8008308:	4a28      	ldr	r2, [pc, #160]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800830a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008310:	e15f      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008316:	e15c      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008320:	430b      	orrs	r3, r1
 8008322:	d154      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008324:	4b1f      	ldr	r3, [pc, #124]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800832a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800832e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008336:	d028      	beq.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800833e:	d843      	bhi.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008346:	d013      	beq.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800834e:	d83b      	bhi.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800835c:	d004      	beq.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800835e:	e033      	b.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008360:	f7fd fd2e 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8008364:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008366:	e134      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008368:	f7fd fc08 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 800836c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800836e:	e130      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008370:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800837c:	d102      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800837e:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008380:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008382:	e126      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008388:	e123      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800838a:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00c      	beq.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8008396:	4b03      	ldr	r3, [pc, #12]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	0e1b      	lsrs	r3, r3, #24
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	e00d      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80083a2:	bf00      	nop
 80083a4:	46020c00 	.word	0x46020c00
 80083a8:	00f42400 	.word	0x00f42400
 80083ac:	080285fc 	.word	0x080285fc
 80083b0:	4b8a      	ldr	r3, [pc, #552]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083b6:	041b      	lsls	r3, r3, #16
 80083b8:	0e1b      	lsrs	r3, r3, #24
 80083ba:	f003 030f 	and.w	r3, r3, #15
 80083be:	4a88      	ldr	r2, [pc, #544]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80083c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083c6:	e104      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083cc:	e101      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80083ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083d2:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80083d6:	430b      	orrs	r3, r1
 80083d8:	d16e      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80083da:	4b80      	ldr	r3, [pc, #512]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083e0:	f003 0318 	and.w	r3, r3, #24
 80083e4:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	2b18      	cmp	r3, #24
 80083ea:	d862      	bhi.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80083ec:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80083ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f2:	bf00      	nop
 80083f4:	08008459 	.word	0x08008459
 80083f8:	080084b3 	.word	0x080084b3
 80083fc:	080084b3 	.word	0x080084b3
 8008400:	080084b3 	.word	0x080084b3
 8008404:	080084b3 	.word	0x080084b3
 8008408:	080084b3 	.word	0x080084b3
 800840c:	080084b3 	.word	0x080084b3
 8008410:	080084b3 	.word	0x080084b3
 8008414:	08008461 	.word	0x08008461
 8008418:	080084b3 	.word	0x080084b3
 800841c:	080084b3 	.word	0x080084b3
 8008420:	080084b3 	.word	0x080084b3
 8008424:	080084b3 	.word	0x080084b3
 8008428:	080084b3 	.word	0x080084b3
 800842c:	080084b3 	.word	0x080084b3
 8008430:	080084b3 	.word	0x080084b3
 8008434:	08008469 	.word	0x08008469
 8008438:	080084b3 	.word	0x080084b3
 800843c:	080084b3 	.word	0x080084b3
 8008440:	080084b3 	.word	0x080084b3
 8008444:	080084b3 	.word	0x080084b3
 8008448:	080084b3 	.word	0x080084b3
 800844c:	080084b3 	.word	0x080084b3
 8008450:	080084b3 	.word	0x080084b3
 8008454:	08008483 	.word	0x08008483
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008458:	f7fd fcda 	bl	8005e10 <HAL_RCC_GetPCLK3Freq>
 800845c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800845e:	e0b8      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008460:	f7fd fb8c 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8008464:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008466:	e0b4      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008468:	4b5c      	ldr	r3, [pc, #368]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008474:	d102      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8008476:	4b5b      	ldr	r3, [pc, #364]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8008478:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800847a:	e0aa      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008480:	e0a7      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008482:	4b56      	ldr	r3, [pc, #344]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d005      	beq.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800848e:	4b53      	ldr	r3, [pc, #332]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	0e1b      	lsrs	r3, r3, #24
 8008494:	f003 030f 	and.w	r3, r3, #15
 8008498:	e006      	b.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800849a:	4b50      	ldr	r3, [pc, #320]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800849c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084a0:	041b      	lsls	r3, r3, #16
 80084a2:	0e1b      	lsrs	r3, r3, #24
 80084a4:	f003 030f 	and.w	r3, r3, #15
 80084a8:	4a4d      	ldr	r2, [pc, #308]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80084aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084b0:	e08f      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084b6:	e08c      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80084b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084bc:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80084c0:	430b      	orrs	r3, r1
 80084c2:	d14c      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80084c4:	4b45      	ldr	r3, [pc, #276]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80084c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80084ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80084ce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084d6:	d013      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084de:	d83b      	bhi.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084e6:	d013      	beq.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084ee:	d833      	bhi.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d014      	beq.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084fc:	d014      	beq.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80084fe:	e02b      	b.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008500:	f107 0318 	add.w	r3, r7, #24
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe fc7b 	bl	8006e00 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800850e:	e060      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe fb0d 	bl	8006b34 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800851e:	e058      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008520:	f7fd fb2c 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8008524:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008526:	e054      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008528:	4b2c      	ldr	r3, [pc, #176]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8008534:	4b29      	ldr	r3, [pc, #164]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	0e1b      	lsrs	r3, r3, #24
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	e006      	b.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008540:	4b26      	ldr	r3, [pc, #152]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008546:	041b      	lsls	r3, r3, #16
 8008548:	0e1b      	lsrs	r3, r3, #24
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	4a24      	ldr	r2, [pc, #144]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008556:	e03c      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800855c:	e039      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800855e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008562:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008566:	430b      	orrs	r3, r1
 8008568:	d131      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800856a:	4b1c      	ldr	r3, [pc, #112]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800856c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008574:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008576:	4b19      	ldr	r3, [pc, #100]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b02      	cmp	r3, #2
 8008582:	d106      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	2b00      	cmp	r3, #0
 8008588:	d103      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800858a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
 8008590:	e01f      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008592:	4b12      	ldr	r3, [pc, #72]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800859c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a0:	d112      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a8:	d10e      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085aa:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80085ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085b8:	d102      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80085ba:	23fa      	movs	r3, #250	; 0xfa
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085be:	e008      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80085c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085c6:	e004      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	637b      	str	r3, [r7, #52]	; 0x34
 80085cc:	e001      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80085d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3738      	adds	r7, #56	; 0x38
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	46020c00 	.word	0x46020c00
 80085e0:	080285fc 	.word	0x080285fc
 80085e4:	00f42400 	.word	0x00f42400

080085e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80085f0:	4b47      	ldr	r3, [pc, #284]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a46      	ldr	r2, [pc, #280]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80085f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80085fc:	f7f9 feea 	bl	80023d4 <HAL_GetTick>
 8008600:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008602:	e008      	b.n	8008616 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008604:	f7f9 fee6 	bl	80023d4 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d901      	bls.n	8008616 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e077      	b.n	8008706 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008616:	4b3e      	ldr	r3, [pc, #248]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1f0      	bne.n	8008604 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008622:	4b3b      	ldr	r3, [pc, #236]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800862a:	f023 0303 	bic.w	r3, r3, #3
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	6811      	ldr	r1, [r2, #0]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6852      	ldr	r2, [r2, #4]
 8008636:	3a01      	subs	r2, #1
 8008638:	0212      	lsls	r2, r2, #8
 800863a:	430a      	orrs	r2, r1
 800863c:	4934      	ldr	r1, [pc, #208]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 800863e:	4313      	orrs	r3, r2
 8008640:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008642:	4b33      	ldr	r3, [pc, #204]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 8008644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008646:	4b33      	ldr	r3, [pc, #204]	; (8008714 <RCCEx_PLL2_Config+0x12c>)
 8008648:	4013      	ands	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6892      	ldr	r2, [r2, #8]
 800864e:	3a01      	subs	r2, #1
 8008650:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	68d2      	ldr	r2, [r2, #12]
 8008658:	3a01      	subs	r2, #1
 800865a:	0252      	lsls	r2, r2, #9
 800865c:	b292      	uxth	r2, r2
 800865e:	4311      	orrs	r1, r2
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6912      	ldr	r2, [r2, #16]
 8008664:	3a01      	subs	r2, #1
 8008666:	0412      	lsls	r2, r2, #16
 8008668:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800866c:	4311      	orrs	r1, r2
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	6952      	ldr	r2, [r2, #20]
 8008672:	3a01      	subs	r2, #1
 8008674:	0612      	lsls	r2, r2, #24
 8008676:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800867a:	430a      	orrs	r2, r1
 800867c:	4924      	ldr	r1, [pc, #144]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 800867e:	4313      	orrs	r3, r2
 8008680:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008682:	4b23      	ldr	r3, [pc, #140]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 8008684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008686:	f023 020c 	bic.w	r2, r3, #12
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	4920      	ldr	r1, [pc, #128]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 8008690:	4313      	orrs	r3, r2
 8008692:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008694:	4b1e      	ldr	r3, [pc, #120]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 8008696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	491c      	ldr	r1, [pc, #112]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80086a2:	4b1b      	ldr	r3, [pc, #108]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a6:	4a1a      	ldr	r2, [pc, #104]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80086a8:	f023 0310 	bic.w	r3, r3, #16
 80086ac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80086ae:	4b18      	ldr	r3, [pc, #96]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	69d2      	ldr	r2, [r2, #28]
 80086be:	00d2      	lsls	r2, r2, #3
 80086c0:	4913      	ldr	r1, [pc, #76]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80086c6:	4b12      	ldr	r3, [pc, #72]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	4a11      	ldr	r2, [pc, #68]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80086cc:	f043 0310 	orr.w	r3, r3, #16
 80086d0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a0e      	ldr	r2, [pc, #56]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80086d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80086de:	f7f9 fe79 	bl	80023d4 <HAL_GetTick>
 80086e2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086e4:	e008      	b.n	80086f8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086e6:	f7f9 fe75 	bl	80023d4 <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d901      	bls.n	80086f8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e006      	b.n	8008706 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086f8:	4b05      	ldr	r3, [pc, #20]	; (8008710 <RCCEx_PLL2_Config+0x128>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0f0      	beq.n	80086e6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008704:	2300      	movs	r3, #0

}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	46020c00 	.word	0x46020c00
 8008714:	80800000 	.word	0x80800000

08008718 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008720:	4b47      	ldr	r3, [pc, #284]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a46      	ldr	r2, [pc, #280]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 8008726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800872a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800872c:	f7f9 fe52 	bl	80023d4 <HAL_GetTick>
 8008730:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008732:	e008      	b.n	8008746 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008734:	f7f9 fe4e 	bl	80023d4 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e077      	b.n	8008836 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008746:	4b3e      	ldr	r3, [pc, #248]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1f0      	bne.n	8008734 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008752:	4b3b      	ldr	r3, [pc, #236]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6811      	ldr	r1, [r2, #0]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	6852      	ldr	r2, [r2, #4]
 8008766:	3a01      	subs	r2, #1
 8008768:	0212      	lsls	r2, r2, #8
 800876a:	430a      	orrs	r2, r1
 800876c:	4934      	ldr	r1, [pc, #208]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 800876e:	4313      	orrs	r3, r2
 8008770:	630b      	str	r3, [r1, #48]	; 0x30
 8008772:	4b33      	ldr	r3, [pc, #204]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 8008774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008776:	4b33      	ldr	r3, [pc, #204]	; (8008844 <RCCEx_PLL3_Config+0x12c>)
 8008778:	4013      	ands	r3, r2
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	6892      	ldr	r2, [r2, #8]
 800877e:	3a01      	subs	r2, #1
 8008780:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	68d2      	ldr	r2, [r2, #12]
 8008788:	3a01      	subs	r2, #1
 800878a:	0252      	lsls	r2, r2, #9
 800878c:	b292      	uxth	r2, r2
 800878e:	4311      	orrs	r1, r2
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6912      	ldr	r2, [r2, #16]
 8008794:	3a01      	subs	r2, #1
 8008796:	0412      	lsls	r2, r2, #16
 8008798:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800879c:	4311      	orrs	r1, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6952      	ldr	r2, [r2, #20]
 80087a2:	3a01      	subs	r2, #1
 80087a4:	0612      	lsls	r2, r2, #24
 80087a6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80087aa:	430a      	orrs	r2, r1
 80087ac:	4924      	ldr	r1, [pc, #144]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80087b2:	4b23      	ldr	r3, [pc, #140]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	f023 020c 	bic.w	r2, r3, #12
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	4920      	ldr	r1, [pc, #128]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80087c4:	4b1e      	ldr	r3, [pc, #120]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	491c      	ldr	r1, [pc, #112]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80087d2:	4b1b      	ldr	r3, [pc, #108]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d6:	4a1a      	ldr	r2, [pc, #104]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087d8:	f023 0310 	bic.w	r3, r3, #16
 80087dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087de:	4b18      	ldr	r3, [pc, #96]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	69d2      	ldr	r2, [r2, #28]
 80087ee:	00d2      	lsls	r2, r2, #3
 80087f0:	4913      	ldr	r1, [pc, #76]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80087f6:	4b12      	ldr	r3, [pc, #72]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	4a11      	ldr	r2, [pc, #68]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 80087fc:	f043 0310 	orr.w	r3, r3, #16
 8008800:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008802:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a0e      	ldr	r2, [pc, #56]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 8008808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800880c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800880e:	f7f9 fde1 	bl	80023d4 <HAL_GetTick>
 8008812:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008814:	e008      	b.n	8008828 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008816:	f7f9 fddd 	bl	80023d4 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e006      	b.n	8008836 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008828:	4b05      	ldr	r3, [pc, #20]	; (8008840 <RCCEx_PLL3_Config+0x128>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0f0      	beq.n	8008816 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	46020c00 	.word	0x46020c00
 8008844:	80800000 	.word	0x80800000

08008848 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e03e      	b.n	80088dc <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f7f9 fb7c 	bl	8001f70 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3308      	adds	r3, #8
 8008880:	4619      	mov	r1, r3
 8008882:	4610      	mov	r0, r2
 8008884:	f001 fb1a 	bl	8009ebc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	461a      	mov	r2, r3
 8008892:	68b9      	ldr	r1, [r7, #8]
 8008894:	f001 fbe2 	bl	800a05c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6858      	ldr	r0, [r3, #4]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	6879      	ldr	r1, [r7, #4]
 80088a6:	f001 fc2b 	bl	800a100 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	6892      	ldr	r2, [r2, #8]
 80088b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	6892      	ldr	r2, [r2, #8]
 80088be:	f041 0101 	orr.w	r1, r1, #1
 80088c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80088c6:	4b07      	ldr	r3, [pc, #28]	; (80088e4 <HAL_SRAM_Init+0x9c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a06      	ldr	r2, [pc, #24]	; (80088e4 <HAL_SRAM_Init+0x9c>)
 80088cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088d0:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	420d0400 	.word	0x420d0400

080088e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e049      	b.n	800898e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7f9 f99c 	bl	8001c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3304      	adds	r3, #4
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f000 fb80 	bl	800902c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d001      	beq.n	80089b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e072      	b.n	8008a96 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0201 	orr.w	r2, r2, #1
 80089c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a35      	ldr	r2, [pc, #212]	; (8008aa4 <HAL_TIM_Base_Start_IT+0x10c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d040      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a34      	ldr	r2, [pc, #208]	; (8008aa8 <HAL_TIM_Base_Start_IT+0x110>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d03b      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e4:	d036      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089ee:	d031      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a2d      	ldr	r2, [pc, #180]	; (8008aac <HAL_TIM_Base_Start_IT+0x114>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d02c      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a2c      	ldr	r2, [pc, #176]	; (8008ab0 <HAL_TIM_Base_Start_IT+0x118>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d027      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a2a      	ldr	r2, [pc, #168]	; (8008ab4 <HAL_TIM_Base_Start_IT+0x11c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d022      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a29      	ldr	r2, [pc, #164]	; (8008ab8 <HAL_TIM_Base_Start_IT+0x120>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d01d      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a27      	ldr	r2, [pc, #156]	; (8008abc <HAL_TIM_Base_Start_IT+0x124>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d018      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a26      	ldr	r2, [pc, #152]	; (8008ac0 <HAL_TIM_Base_Start_IT+0x128>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d013      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a24      	ldr	r2, [pc, #144]	; (8008ac4 <HAL_TIM_Base_Start_IT+0x12c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00e      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a23      	ldr	r2, [pc, #140]	; (8008ac8 <HAL_TIM_Base_Start_IT+0x130>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d009      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a21      	ldr	r2, [pc, #132]	; (8008acc <HAL_TIM_Base_Start_IT+0x134>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d004      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0xbc>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a20      	ldr	r2, [pc, #128]	; (8008ad0 <HAL_TIM_Base_Start_IT+0x138>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d115      	bne.n	8008a80 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689a      	ldr	r2, [r3, #8]
 8008a5a:	4b1e      	ldr	r3, [pc, #120]	; (8008ad4 <HAL_TIM_Base_Start_IT+0x13c>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b06      	cmp	r3, #6
 8008a64:	d015      	beq.n	8008a92 <HAL_TIM_Base_Start_IT+0xfa>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6c:	d011      	beq.n	8008a92 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f042 0201 	orr.w	r2, r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7e:	e008      	b.n	8008a92 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0201 	orr.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	e000      	b.n	8008a94 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	40012c00 	.word	0x40012c00
 8008aa8:	50012c00 	.word	0x50012c00
 8008aac:	40000400 	.word	0x40000400
 8008ab0:	50000400 	.word	0x50000400
 8008ab4:	40000800 	.word	0x40000800
 8008ab8:	50000800 	.word	0x50000800
 8008abc:	40000c00 	.word	0x40000c00
 8008ac0:	50000c00 	.word	0x50000c00
 8008ac4:	40013400 	.word	0x40013400
 8008ac8:	50013400 	.word	0x50013400
 8008acc:	40014000 	.word	0x40014000
 8008ad0:	50014000 	.word	0x50014000
 8008ad4:	00010007 	.word	0x00010007

08008ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d122      	bne.n	8008b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d11b      	bne.n	8008b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f06f 0202 	mvn.w	r2, #2
 8008b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fa68 	bl	8008ff0 <HAL_TIM_IC_CaptureCallback>
 8008b20:	e005      	b.n	8008b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fa5a 	bl	8008fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fa6b 	bl	8009004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0304 	and.w	r3, r3, #4
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d122      	bne.n	8008b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d11b      	bne.n	8008b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0204 	mvn.w	r2, #4
 8008b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fa3e 	bl	8008ff0 <HAL_TIM_IC_CaptureCallback>
 8008b74:	e005      	b.n	8008b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa30 	bl	8008fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fa41 	bl	8009004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f003 0308 	and.w	r3, r3, #8
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d122      	bne.n	8008bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d11b      	bne.n	8008bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f06f 0208 	mvn.w	r2, #8
 8008bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2204      	movs	r2, #4
 8008bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa14 	bl	8008ff0 <HAL_TIM_IC_CaptureCallback>
 8008bc8:	e005      	b.n	8008bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa06 	bl	8008fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fa17 	bl	8009004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	f003 0310 	and.w	r3, r3, #16
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d122      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b10      	cmp	r3, #16
 8008bf6:	d11b      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f06f 0210 	mvn.w	r2, #16
 8008c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2208      	movs	r2, #8
 8008c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f9ea 	bl	8008ff0 <HAL_TIM_IC_CaptureCallback>
 8008c1c:	e005      	b.n	8008c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f9dc 	bl	8008fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f9ed 	bl	8009004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d10e      	bne.n	8008c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d107      	bne.n	8008c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f06f 0201 	mvn.w	r2, #1
 8008c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7f8 ff14 	bl	8001a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c66:	2b80      	cmp	r3, #128	; 0x80
 8008c68:	d10e      	bne.n	8008c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c74:	2b80      	cmp	r3, #128	; 0x80
 8008c76:	d107      	bne.n	8008c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fc34 	bl	80094f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c96:	d10e      	bne.n	8008cb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d107      	bne.n	8008cb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fc27 	bl	8009504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc0:	2b40      	cmp	r3, #64	; 0x40
 8008cc2:	d10e      	bne.n	8008ce2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b40      	cmp	r3, #64	; 0x40
 8008cd0:	d107      	bne.n	8008ce2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f99b 	bl	8009018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f003 0320 	and.w	r3, r3, #32
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	d10e      	bne.n	8008d0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f003 0320 	and.w	r3, r3, #32
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	d107      	bne.n	8008d0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f06f 0220 	mvn.w	r2, #32
 8008d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fbe7 	bl	80094dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d1c:	d10f      	bne.n	8008d3e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d2c:	d107      	bne.n	8008d3e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fbed 	bl	8009518 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d4c:	d10f      	bne.n	8008d6e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d5c:	d107      	bne.n	8008d6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fbdf 	bl	800952c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d7c:	d10f      	bne.n	8008d9e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d8c:	d107      	bne.n	8008d9e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fbd1 	bl	8009540 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008da8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dac:	d10f      	bne.n	8008dce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dbc:	d107      	bne.n	8008dce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fbc3 	bl	8009554 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d101      	bne.n	8008df4 <HAL_TIM_ConfigClockSource+0x1c>
 8008df0:	2302      	movs	r3, #2
 8008df2:	e0e6      	b.n	8008fc2 <HAL_TIM_ConfigClockSource+0x1ea>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a67      	ldr	r2, [pc, #412]	; (8008fcc <HAL_TIM_ConfigClockSource+0x1f4>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	f000 80b1 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1be>
 8008e34:	4a65      	ldr	r2, [pc, #404]	; (8008fcc <HAL_TIM_ConfigClockSource+0x1f4>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	f200 80b6 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008e3c:	4a64      	ldr	r2, [pc, #400]	; (8008fd0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	f000 80a9 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1be>
 8008e44:	4a62      	ldr	r2, [pc, #392]	; (8008fd0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	f200 80ae 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008e4c:	4a61      	ldr	r2, [pc, #388]	; (8008fd4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	f000 80a1 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1be>
 8008e54:	4a5f      	ldr	r2, [pc, #380]	; (8008fd4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	f200 80a6 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008e5c:	4a5e      	ldr	r2, [pc, #376]	; (8008fd8 <HAL_TIM_ConfigClockSource+0x200>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	f000 8099 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1be>
 8008e64:	4a5c      	ldr	r2, [pc, #368]	; (8008fd8 <HAL_TIM_ConfigClockSource+0x200>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	f200 809e 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008e6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008e70:	f000 8091 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1be>
 8008e74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008e78:	f200 8096 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e80:	f000 8089 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1be>
 8008e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e88:	f200 808e 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e90:	d03e      	beq.n	8008f10 <HAL_TIM_ConfigClockSource+0x138>
 8008e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e96:	f200 8087 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e9e:	f000 8086 	beq.w	8008fae <HAL_TIM_ConfigClockSource+0x1d6>
 8008ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea6:	d87f      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008ea8:	2b70      	cmp	r3, #112	; 0x70
 8008eaa:	d01a      	beq.n	8008ee2 <HAL_TIM_ConfigClockSource+0x10a>
 8008eac:	2b70      	cmp	r3, #112	; 0x70
 8008eae:	d87b      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008eb0:	2b60      	cmp	r3, #96	; 0x60
 8008eb2:	d050      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x17e>
 8008eb4:	2b60      	cmp	r3, #96	; 0x60
 8008eb6:	d877      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008eb8:	2b50      	cmp	r3, #80	; 0x50
 8008eba:	d03c      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x15e>
 8008ebc:	2b50      	cmp	r3, #80	; 0x50
 8008ebe:	d873      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008ec0:	2b40      	cmp	r3, #64	; 0x40
 8008ec2:	d058      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x19e>
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d86f      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008ec8:	2b30      	cmp	r3, #48	; 0x30
 8008eca:	d064      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x1be>
 8008ecc:	2b30      	cmp	r3, #48	; 0x30
 8008ece:	d86b      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	d060      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x1be>
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	d867      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d05c      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x1be>
 8008edc:	2b10      	cmp	r3, #16
 8008ede:	d05a      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x1be>
 8008ee0:	e062      	b.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6818      	ldr	r0, [r3, #0]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	6899      	ldr	r1, [r3, #8]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	f000 fa11 	bl	8009318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	609a      	str	r2, [r3, #8]
      break;
 8008f0e:	e04f      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	6899      	ldr	r1, [r3, #8]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f000 f9fa 	bl	8009318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689a      	ldr	r2, [r3, #8]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f32:	609a      	str	r2, [r3, #8]
      break;
 8008f34:	e03c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	6859      	ldr	r1, [r3, #4]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	461a      	mov	r2, r3
 8008f44:	f000 f96c 	bl	8009220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2150      	movs	r1, #80	; 0x50
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f9c5 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8008f54:	e02c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6859      	ldr	r1, [r3, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f000 f98b 	bl	800927e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2160      	movs	r1, #96	; 0x60
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 f9b5 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8008f74:	e01c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6859      	ldr	r1, [r3, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	461a      	mov	r2, r3
 8008f84:	f000 f94c 	bl	8009220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2140      	movs	r1, #64	; 0x40
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 f9a5 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8008f94:	e00c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	f000 f99c 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8008fa6:	e003      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	73fb      	strb	r3, [r7, #15]
      break;
 8008fac:	e000      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8008fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	00100070 	.word	0x00100070
 8008fd0:	00100040 	.word	0x00100040
 8008fd4:	00100030 	.word	0x00100030
 8008fd8:	00100020 	.word	0x00100020

08008fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a68      	ldr	r2, [pc, #416]	; (80091e0 <TIM_Base_SetConfig+0x1b4>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d02b      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a67      	ldr	r2, [pc, #412]	; (80091e4 <TIM_Base_SetConfig+0x1b8>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d027      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009052:	d023      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800905a:	d01f      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a62      	ldr	r2, [pc, #392]	; (80091e8 <TIM_Base_SetConfig+0x1bc>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d01b      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a61      	ldr	r2, [pc, #388]	; (80091ec <TIM_Base_SetConfig+0x1c0>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d017      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a60      	ldr	r2, [pc, #384]	; (80091f0 <TIM_Base_SetConfig+0x1c4>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d013      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a5f      	ldr	r2, [pc, #380]	; (80091f4 <TIM_Base_SetConfig+0x1c8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00f      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a5e      	ldr	r2, [pc, #376]	; (80091f8 <TIM_Base_SetConfig+0x1cc>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d00b      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a5d      	ldr	r2, [pc, #372]	; (80091fc <TIM_Base_SetConfig+0x1d0>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d007      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a5c      	ldr	r2, [pc, #368]	; (8009200 <TIM_Base_SetConfig+0x1d4>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d003      	beq.n	800909c <TIM_Base_SetConfig+0x70>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a5b      	ldr	r2, [pc, #364]	; (8009204 <TIM_Base_SetConfig+0x1d8>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d108      	bne.n	80090ae <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a4b      	ldr	r2, [pc, #300]	; (80091e0 <TIM_Base_SetConfig+0x1b4>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d043      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a4a      	ldr	r2, [pc, #296]	; (80091e4 <TIM_Base_SetConfig+0x1b8>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d03f      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c4:	d03b      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090cc:	d037      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a45      	ldr	r2, [pc, #276]	; (80091e8 <TIM_Base_SetConfig+0x1bc>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d033      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a44      	ldr	r2, [pc, #272]	; (80091ec <TIM_Base_SetConfig+0x1c0>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d02f      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a43      	ldr	r2, [pc, #268]	; (80091f0 <TIM_Base_SetConfig+0x1c4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d02b      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a42      	ldr	r2, [pc, #264]	; (80091f4 <TIM_Base_SetConfig+0x1c8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d027      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a41      	ldr	r2, [pc, #260]	; (80091f8 <TIM_Base_SetConfig+0x1cc>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d023      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a40      	ldr	r2, [pc, #256]	; (80091fc <TIM_Base_SetConfig+0x1d0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d01f      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a3f      	ldr	r2, [pc, #252]	; (8009200 <TIM_Base_SetConfig+0x1d4>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d01b      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a3e      	ldr	r2, [pc, #248]	; (8009204 <TIM_Base_SetConfig+0x1d8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d017      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a3d      	ldr	r2, [pc, #244]	; (8009208 <TIM_Base_SetConfig+0x1dc>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d013      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a3c      	ldr	r2, [pc, #240]	; (800920c <TIM_Base_SetConfig+0x1e0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d00f      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a3b      	ldr	r2, [pc, #236]	; (8009210 <TIM_Base_SetConfig+0x1e4>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d00b      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a3a      	ldr	r2, [pc, #232]	; (8009214 <TIM_Base_SetConfig+0x1e8>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d007      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a39      	ldr	r2, [pc, #228]	; (8009218 <TIM_Base_SetConfig+0x1ec>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d003      	beq.n	800913e <TIM_Base_SetConfig+0x112>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a38      	ldr	r2, [pc, #224]	; (800921c <TIM_Base_SetConfig+0x1f0>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d108      	bne.n	8009150 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a1a      	ldr	r2, [pc, #104]	; (80091e0 <TIM_Base_SetConfig+0x1b4>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d023      	beq.n	80091c4 <TIM_Base_SetConfig+0x198>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a19      	ldr	r2, [pc, #100]	; (80091e4 <TIM_Base_SetConfig+0x1b8>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d01f      	beq.n	80091c4 <TIM_Base_SetConfig+0x198>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a1e      	ldr	r2, [pc, #120]	; (8009200 <TIM_Base_SetConfig+0x1d4>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d01b      	beq.n	80091c4 <TIM_Base_SetConfig+0x198>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a1d      	ldr	r2, [pc, #116]	; (8009204 <TIM_Base_SetConfig+0x1d8>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d017      	beq.n	80091c4 <TIM_Base_SetConfig+0x198>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a1c      	ldr	r2, [pc, #112]	; (8009208 <TIM_Base_SetConfig+0x1dc>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d013      	beq.n	80091c4 <TIM_Base_SetConfig+0x198>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a1b      	ldr	r2, [pc, #108]	; (800920c <TIM_Base_SetConfig+0x1e0>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d00f      	beq.n	80091c4 <TIM_Base_SetConfig+0x198>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a1a      	ldr	r2, [pc, #104]	; (8009210 <TIM_Base_SetConfig+0x1e4>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00b      	beq.n	80091c4 <TIM_Base_SetConfig+0x198>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a19      	ldr	r2, [pc, #100]	; (8009214 <TIM_Base_SetConfig+0x1e8>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d007      	beq.n	80091c4 <TIM_Base_SetConfig+0x198>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a18      	ldr	r2, [pc, #96]	; (8009218 <TIM_Base_SetConfig+0x1ec>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d003      	beq.n	80091c4 <TIM_Base_SetConfig+0x198>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a17      	ldr	r2, [pc, #92]	; (800921c <TIM_Base_SetConfig+0x1f0>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d103      	bne.n	80091cc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	615a      	str	r2, [r3, #20]
}
 80091d2:	bf00      	nop
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	40012c00 	.word	0x40012c00
 80091e4:	50012c00 	.word	0x50012c00
 80091e8:	40000400 	.word	0x40000400
 80091ec:	50000400 	.word	0x50000400
 80091f0:	40000800 	.word	0x40000800
 80091f4:	50000800 	.word	0x50000800
 80091f8:	40000c00 	.word	0x40000c00
 80091fc:	50000c00 	.word	0x50000c00
 8009200:	40013400 	.word	0x40013400
 8009204:	50013400 	.word	0x50013400
 8009208:	40014000 	.word	0x40014000
 800920c:	50014000 	.word	0x50014000
 8009210:	40014400 	.word	0x40014400
 8009214:	50014400 	.word	0x50014400
 8009218:	40014800 	.word	0x40014800
 800921c:	50014800 	.word	0x50014800

08009220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	f023 0201 	bic.w	r2, r3, #1
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	699b      	ldr	r3, [r3, #24]
 8009242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800924a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f023 030a 	bic.w	r3, r3, #10
 800925c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	621a      	str	r2, [r3, #32]
}
 8009272:	bf00      	nop
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800927e:	b480      	push	{r7}
 8009280:	b087      	sub	sp, #28
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	f023 0210 	bic.w	r2, r3, #16
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	031b      	lsls	r3, r3, #12
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  *            @arg TIM_TS_ITR11: Internal Trigger 11
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092de:	b480      	push	{r7}
 80092e0:	b085      	sub	sp, #20
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80092f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4313      	orrs	r3, r2
 8009300:	f043 0307 	orr.w	r3, r3, #7
 8009304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	609a      	str	r2, [r3, #8]
}
 800930c:	bf00      	nop
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	021a      	lsls	r2, r3, #8
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	431a      	orrs	r2, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4313      	orrs	r3, r2
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	4313      	orrs	r3, r2
 8009344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	609a      	str	r2, [r3, #8]
}
 800934c:	bf00      	nop
 800934e:	371c      	adds	r7, #28
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009368:	2b01      	cmp	r3, #1
 800936a:	d101      	bne.n	8009370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800936c:	2302      	movs	r3, #2
 800936e:	e097      	b.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a45      	ldr	r2, [pc, #276]	; (80094ac <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00e      	beq.n	80093b8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a44      	ldr	r2, [pc, #272]	; (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d009      	beq.n	80093b8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a42      	ldr	r2, [pc, #264]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d004      	beq.n	80093b8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a41      	ldr	r2, [pc, #260]	; (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d108      	bne.n	80093ca <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80093d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	4313      	orrs	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a2f      	ldr	r2, [pc, #188]	; (80094ac <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d040      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a2e      	ldr	r2, [pc, #184]	; (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d03b      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009404:	d036      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800940e:	d031      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a29      	ldr	r2, [pc, #164]	; (80094bc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d02c      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a28      	ldr	r2, [pc, #160]	; (80094c0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d027      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a26      	ldr	r2, [pc, #152]	; (80094c4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d022      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a25      	ldr	r2, [pc, #148]	; (80094c8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d01d      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a23      	ldr	r2, [pc, #140]	; (80094cc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d018      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a22      	ldr	r2, [pc, #136]	; (80094d0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d013      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d00e      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d009      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a1b      	ldr	r2, [pc, #108]	; (80094d4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d004      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a1a      	ldr	r2, [pc, #104]	; (80094d8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d10c      	bne.n	800948e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800947a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	4313      	orrs	r3, r2
 8009484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	40012c00 	.word	0x40012c00
 80094b0:	50012c00 	.word	0x50012c00
 80094b4:	40013400 	.word	0x40013400
 80094b8:	50013400 	.word	0x50013400
 80094bc:	40000400 	.word	0x40000400
 80094c0:	50000400 	.word	0x50000400
 80094c4:	40000800 	.word	0x40000800
 80094c8:	50000800 	.word	0x50000800
 80094cc:	40000c00 	.word	0x40000c00
 80094d0:	50000c00 	.word	0x50000c00
 80094d4:	40014000 	.word	0x40014000
 80094d8:	50014000 	.word	0x50014000

080094dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e042      	b.n	8009600 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7f8 fba5 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2224      	movs	r2, #36	; 0x24
 8009596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 0201 	bic.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f82c 	bl	8009608 <UART_SetConfig>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d101      	bne.n	80095ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e022      	b.n	8009600 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f9c2 	bl	800994c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0201 	orr.w	r2, r2, #1
 80095f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fa49 	bl	8009a90 <UART_CheckIdleState>
 80095fe:	4603      	mov	r3, r0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800960c:	b094      	sub	sp, #80	; 0x50
 800960e:	af00      	add	r7, sp, #0
 8009610:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	4b7e      	ldr	r3, [pc, #504]	; (8009818 <UART_SetConfig+0x210>)
 800961e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	689a      	ldr	r2, [r3, #8]
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	431a      	orrs	r2, r3
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	431a      	orrs	r2, r3
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	4313      	orrs	r3, r2
 8009636:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4977      	ldr	r1, [pc, #476]	; (800981c <UART_SetConfig+0x214>)
 8009640:	4019      	ands	r1, r3
 8009642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009648:	430b      	orrs	r3, r1
 800964a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009658:	68d9      	ldr	r1, [r3, #12]
 800965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	ea40 0301 	orr.w	r3, r0, r1
 8009662:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	4b6a      	ldr	r3, [pc, #424]	; (8009818 <UART_SetConfig+0x210>)
 8009670:	429a      	cmp	r2, r3
 8009672:	d009      	beq.n	8009688 <UART_SetConfig+0x80>
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	4b69      	ldr	r3, [pc, #420]	; (8009820 <UART_SetConfig+0x218>)
 800967a:	429a      	cmp	r2, r3
 800967c:	d004      	beq.n	8009688 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009680:	6a1a      	ldr	r2, [r3, #32]
 8009682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009684:	4313      	orrs	r3, r2
 8009686:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8009692:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800969c:	430b      	orrs	r3, r1
 800969e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	f023 000f 	bic.w	r0, r3, #15
 80096aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	ea40 0301 	orr.w	r3, r0, r1
 80096b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	4b59      	ldr	r3, [pc, #356]	; (8009824 <UART_SetConfig+0x21c>)
 80096be:	429a      	cmp	r2, r3
 80096c0:	d102      	bne.n	80096c8 <UART_SetConfig+0xc0>
 80096c2:	2301      	movs	r3, #1
 80096c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80096c6:	e029      	b.n	800971c <UART_SetConfig+0x114>
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	4b56      	ldr	r3, [pc, #344]	; (8009828 <UART_SetConfig+0x220>)
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d102      	bne.n	80096d8 <UART_SetConfig+0xd0>
 80096d2:	2302      	movs	r3, #2
 80096d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80096d6:	e021      	b.n	800971c <UART_SetConfig+0x114>
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	4b53      	ldr	r3, [pc, #332]	; (800982c <UART_SetConfig+0x224>)
 80096de:	429a      	cmp	r2, r3
 80096e0:	d102      	bne.n	80096e8 <UART_SetConfig+0xe0>
 80096e2:	2304      	movs	r3, #4
 80096e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80096e6:	e019      	b.n	800971c <UART_SetConfig+0x114>
 80096e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	4b50      	ldr	r3, [pc, #320]	; (8009830 <UART_SetConfig+0x228>)
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d102      	bne.n	80096f8 <UART_SetConfig+0xf0>
 80096f2:	2308      	movs	r3, #8
 80096f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80096f6:	e011      	b.n	800971c <UART_SetConfig+0x114>
 80096f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	4b4d      	ldr	r3, [pc, #308]	; (8009834 <UART_SetConfig+0x22c>)
 80096fe:	429a      	cmp	r2, r3
 8009700:	d102      	bne.n	8009708 <UART_SetConfig+0x100>
 8009702:	2310      	movs	r3, #16
 8009704:	64bb      	str	r3, [r7, #72]	; 0x48
 8009706:	e009      	b.n	800971c <UART_SetConfig+0x114>
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	4b42      	ldr	r3, [pc, #264]	; (8009818 <UART_SetConfig+0x210>)
 800970e:	429a      	cmp	r2, r3
 8009710:	d102      	bne.n	8009718 <UART_SetConfig+0x110>
 8009712:	2320      	movs	r3, #32
 8009714:	64bb      	str	r3, [r7, #72]	; 0x48
 8009716:	e001      	b.n	800971c <UART_SetConfig+0x114>
 8009718:	2300      	movs	r3, #0
 800971a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800971c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	4b3d      	ldr	r3, [pc, #244]	; (8009818 <UART_SetConfig+0x210>)
 8009722:	429a      	cmp	r2, r3
 8009724:	d005      	beq.n	8009732 <UART_SetConfig+0x12a>
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	4b3d      	ldr	r3, [pc, #244]	; (8009820 <UART_SetConfig+0x218>)
 800972c:	429a      	cmp	r2, r3
 800972e:	f040 8085 	bne.w	800983c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009734:	2200      	movs	r2, #0
 8009736:	623b      	str	r3, [r7, #32]
 8009738:	627a      	str	r2, [r7, #36]	; 0x24
 800973a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800973e:	f7fd fe2b 	bl	8007398 <HAL_RCCEx_GetPeriphCLKFreq>
 8009742:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80e8 	beq.w	800991c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009750:	4a39      	ldr	r2, [pc, #228]	; (8009838 <UART_SetConfig+0x230>)
 8009752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009756:	461a      	mov	r2, r3
 8009758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800975a:	fbb3 f3f2 	udiv	r3, r3, r2
 800975e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	4613      	mov	r3, r2
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	4413      	add	r3, r2
 800976a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800976c:	429a      	cmp	r2, r3
 800976e:	d305      	bcc.n	800977c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009778:	429a      	cmp	r2, r3
 800977a:	d903      	bls.n	8009784 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009782:	e048      	b.n	8009816 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009786:	2200      	movs	r2, #0
 8009788:	61bb      	str	r3, [r7, #24]
 800978a:	61fa      	str	r2, [r7, #28]
 800978c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	4a29      	ldr	r2, [pc, #164]	; (8009838 <UART_SetConfig+0x230>)
 8009792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009796:	b29b      	uxth	r3, r3
 8009798:	2200      	movs	r2, #0
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	617a      	str	r2, [r7, #20]
 800979e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80097a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80097a6:	f7f6 fe83 	bl	80004b0 <__aeabi_uldivmod>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4610      	mov	r0, r2
 80097b0:	4619      	mov	r1, r3
 80097b2:	f04f 0200 	mov.w	r2, #0
 80097b6:	f04f 0300 	mov.w	r3, #0
 80097ba:	020b      	lsls	r3, r1, #8
 80097bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097c0:	0202      	lsls	r2, r0, #8
 80097c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097c4:	6849      	ldr	r1, [r1, #4]
 80097c6:	0849      	lsrs	r1, r1, #1
 80097c8:	2000      	movs	r0, #0
 80097ca:	460c      	mov	r4, r1
 80097cc:	4605      	mov	r5, r0
 80097ce:	eb12 0804 	adds.w	r8, r2, r4
 80097d2:	eb43 0905 	adc.w	r9, r3, r5
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	60bb      	str	r3, [r7, #8]
 80097de:	60fa      	str	r2, [r7, #12]
 80097e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097e4:	4640      	mov	r0, r8
 80097e6:	4649      	mov	r1, r9
 80097e8:	f7f6 fe62 	bl	80004b0 <__aeabi_uldivmod>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4613      	mov	r3, r2
 80097f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097fa:	d308      	bcc.n	800980e <UART_SetConfig+0x206>
 80097fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009802:	d204      	bcs.n	800980e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8009804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800980a:	60da      	str	r2, [r3, #12]
 800980c:	e003      	b.n	8009816 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009814:	e082      	b.n	800991c <UART_SetConfig+0x314>
 8009816:	e081      	b.n	800991c <UART_SetConfig+0x314>
 8009818:	46002400 	.word	0x46002400
 800981c:	cfff69f3 	.word	0xcfff69f3
 8009820:	56002400 	.word	0x56002400
 8009824:	40013800 	.word	0x40013800
 8009828:	40004400 	.word	0x40004400
 800982c:	40004800 	.word	0x40004800
 8009830:	40004c00 	.word	0x40004c00
 8009834:	40005000 	.word	0x40005000
 8009838:	080286bc 	.word	0x080286bc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009844:	d13c      	bne.n	80098c0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009848:	2200      	movs	r2, #0
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	607a      	str	r2, [r7, #4]
 800984e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009852:	f7fd fda1 	bl	8007398 <HAL_RCCEx_GetPeriphCLKFreq>
 8009856:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	d05e      	beq.n	800991c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800985e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009862:	4a39      	ldr	r2, [pc, #228]	; (8009948 <UART_SetConfig+0x340>)
 8009864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009868:	461a      	mov	r2, r3
 800986a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800986c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009870:	005a      	lsls	r2, r3, #1
 8009872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	085b      	lsrs	r3, r3, #1
 8009878:	441a      	add	r2, r3
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009882:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009886:	2b0f      	cmp	r3, #15
 8009888:	d916      	bls.n	80098b8 <UART_SetConfig+0x2b0>
 800988a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009890:	d212      	bcs.n	80098b8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009894:	b29b      	uxth	r3, r3
 8009896:	f023 030f 	bic.w	r3, r3, #15
 800989a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800989c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800989e:	085b      	lsrs	r3, r3, #1
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	f003 0307 	and.w	r3, r3, #7
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80098aa:	4313      	orrs	r3, r2
 80098ac:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80098b4:	60da      	str	r2, [r3, #12]
 80098b6:	e031      	b.n	800991c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80098be:	e02d      	b.n	800991c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80098c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c2:	2200      	movs	r2, #0
 80098c4:	469a      	mov	sl, r3
 80098c6:	4693      	mov	fp, r2
 80098c8:	4650      	mov	r0, sl
 80098ca:	4659      	mov	r1, fp
 80098cc:	f7fd fd64 	bl	8007398 <HAL_RCCEx_GetPeriphCLKFreq>
 80098d0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80098d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d021      	beq.n	800991c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	4a1a      	ldr	r2, [pc, #104]	; (8009948 <UART_SetConfig+0x340>)
 80098de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098e2:	461a      	mov	r2, r3
 80098e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	085b      	lsrs	r3, r3, #1
 80098f0:	441a      	add	r2, r3
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098fe:	2b0f      	cmp	r3, #15
 8009900:	d909      	bls.n	8009916 <UART_SetConfig+0x30e>
 8009902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009908:	d205      	bcs.n	8009916 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800990a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990c:	b29a      	uxth	r2, r3
 800990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	60da      	str	r2, [r3, #12]
 8009914:	e002      	b.n	800991c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	2201      	movs	r2, #1
 8009920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	2201      	movs	r2, #1
 8009928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800992c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992e:	2200      	movs	r2, #0
 8009930:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	2200      	movs	r2, #0
 8009936:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009938:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800993c:	4618      	mov	r0, r3
 800993e:	3750      	adds	r7, #80	; 0x50
 8009940:	46bd      	mov	sp, r7
 8009942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009946:	bf00      	nop
 8009948:	080286bc 	.word	0x080286bc

0800994c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00a      	beq.n	8009976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997a:	f003 0302 	and.w	r3, r3, #2
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00a      	beq.n	8009998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999c:	f003 0304 	and.w	r3, r3, #4
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00a      	beq.n	80099ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099be:	f003 0308 	and.w	r3, r3, #8
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00a      	beq.n	80099dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	430a      	orrs	r2, r1
 80099da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e0:	f003 0310 	and.w	r3, r3, #16
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00a      	beq.n	80099fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d01a      	beq.n	8009a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a4a:	d10a      	bne.n	8009a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00a      	beq.n	8009a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	605a      	str	r2, [r3, #4]
  }
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009aa0:	f7f8 fc98 	bl	80023d4 <HAL_GetTick>
 8009aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0308 	and.w	r3, r3, #8
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d10e      	bne.n	8009ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f82f 	bl	8009b26 <UART_WaitOnFlagUntilTimeout>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e025      	b.n	8009b1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b04      	cmp	r3, #4
 8009ade:	d10e      	bne.n	8009afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f819 	bl	8009b26 <UART_WaitOnFlagUntilTimeout>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e00f      	b.n	8009b1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2220      	movs	r2, #32
 8009b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b09c      	sub	sp, #112	; 0x70
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	603b      	str	r3, [r7, #0]
 8009b32:	4613      	mov	r3, r2
 8009b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b36:	e0a9      	b.n	8009c8c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3e:	f000 80a5 	beq.w	8009c8c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b42:	f7f8 fc47 	bl	80023d4 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d302      	bcc.n	8009b58 <UART_WaitOnFlagUntilTimeout+0x32>
 8009b52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d140      	bne.n	8009bda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b60:	e853 3f00 	ldrex	r3, [r3]
 8009b64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b6c:	667b      	str	r3, [r7, #100]	; 0x64
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b78:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e6      	bne.n	8009b58 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9c:	f023 0301 	bic.w	r3, r3, #1
 8009ba0:	663b      	str	r3, [r7, #96]	; 0x60
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009baa:	64ba      	str	r2, [r7, #72]	; 0x48
 8009bac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e5      	bne.n	8009b8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e069      	b.n	8009cae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d051      	beq.n	8009c8c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bf6:	d149      	bne.n	8009c8c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	e853 3f00 	ldrex	r3, [r3]
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c20:	637b      	str	r3, [r7, #52]	; 0x34
 8009c22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c28:	e841 2300 	strex	r3, r2, [r1]
 8009c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e6      	bne.n	8009c02 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3308      	adds	r3, #8
 8009c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	e853 3f00 	ldrex	r3, [r3]
 8009c42:	613b      	str	r3, [r7, #16]
   return(result);
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f023 0301 	bic.w	r3, r3, #1
 8009c4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3308      	adds	r3, #8
 8009c52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c54:	623a      	str	r2, [r7, #32]
 8009c56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c58:	69f9      	ldr	r1, [r7, #28]
 8009c5a:	6a3a      	ldr	r2, [r7, #32]
 8009c5c:	e841 2300 	strex	r3, r2, [r1]
 8009c60:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1e5      	bne.n	8009c34 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2220      	movs	r2, #32
 8009c7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e010      	b.n	8009cae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	69da      	ldr	r2, [r3, #28]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4013      	ands	r3, r2
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	bf0c      	ite	eq
 8009c9c:	2301      	moveq	r3, #1
 8009c9e:	2300      	movne	r3, #0
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	f43f af46 	beq.w	8009b38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3770      	adds	r7, #112	; 0x70
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b085      	sub	sp, #20
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d101      	bne.n	8009ccc <HAL_UARTEx_DisableFifoMode+0x16>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e027      	b.n	8009d1c <HAL_UARTEx_DisableFifoMode+0x66>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2224      	movs	r2, #36	; 0x24
 8009cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f022 0201 	bic.w	r2, r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009cfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d101      	bne.n	8009d40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e02d      	b.n	8009d9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2224      	movs	r2, #36	; 0x24
 8009d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f022 0201 	bic.w	r2, r2, #1
 8009d66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f84f 	bl	8009e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e02d      	b.n	8009e18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2224      	movs	r2, #36	; 0x24
 8009dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0201 	bic.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f811 	bl	8009e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d108      	bne.n	8009e42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e40:	e031      	b.n	8009ea6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e42:	2308      	movs	r3, #8
 8009e44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e46:	2308      	movs	r3, #8
 8009e48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	0e5b      	lsrs	r3, r3, #25
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	f003 0307 	and.w	r3, r3, #7
 8009e58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	0f5b      	lsrs	r3, r3, #29
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 0307 	and.w	r3, r3, #7
 8009e68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	7b3a      	ldrb	r2, [r7, #12]
 8009e6e:	4911      	ldr	r1, [pc, #68]	; (8009eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8009e70:	5c8a      	ldrb	r2, [r1, r2]
 8009e72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e76:	7b3a      	ldrb	r2, [r7, #12]
 8009e78:	490f      	ldr	r1, [pc, #60]	; (8009eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8009e7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
 8009e8a:	7b7a      	ldrb	r2, [r7, #13]
 8009e8c:	4909      	ldr	r1, [pc, #36]	; (8009eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8009e8e:	5c8a      	ldrb	r2, [r1, r2]
 8009e90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e94:	7b7a      	ldrb	r2, [r7, #13]
 8009e96:	4908      	ldr	r1, [pc, #32]	; (8009eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8009e98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ea6:	bf00      	nop
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	080286d4 	.word	0x080286d4
 8009eb8:	080286dc 	.word	0x080286dc

08009ebc <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	f023 0101 	bic.w	r1, r3, #1
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	2b08      	cmp	r3, #8
 8009ee4:	d102      	bne.n	8009eec <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009ee6:	2340      	movs	r3, #64	; 0x40
 8009ee8:	617b      	str	r3, [r7, #20]
 8009eea:	e001      	b.n	8009ef0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009eec:	2300      	movs	r3, #0
 8009eee:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009efc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009f02:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009f08:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009f0e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009f14:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009f1a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009f20:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009f26:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009f2c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009f32:	4313      	orrs	r3, r2
 8009f34:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8009f5e:	4b3e      	ldr	r3, [pc, #248]	; (800a058 <FMC_NORSRAM_Init+0x19c>)
 8009f60:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f68:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f70:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8009f78:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009f80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	43db      	mvns	r3, r3
 8009f90:	ea02 0103 	and.w	r1, r2, r3
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	4319      	orrs	r1, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009faa:	d10c      	bne.n	8009fc6 <FMC_NORSRAM_Init+0x10a>
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d008      	beq.n	8009fc6 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d12f      	bne.n	800a046 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	0c1b      	lsrs	r3, r3, #16
 8009fec:	041b      	lsls	r3, r3, #16
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	d014      	beq.n	800a02a <FMC_NORSRAM_Init+0x16e>
 800a000:	2b04      	cmp	r3, #4
 800a002:	d819      	bhi.n	800a038 <FMC_NORSRAM_Init+0x17c>
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <FMC_NORSRAM_Init+0x152>
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d007      	beq.n	800a01c <FMC_NORSRAM_Init+0x160>
 800a00c:	e014      	b.n	800a038 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	621a      	str	r2, [r3, #32]
        break;
 800a01a:	e015      	b.n	800a048 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	621a      	str	r2, [r3, #32]
        break;
 800a028:	e00e      	b.n	800a048 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	621a      	str	r2, [r3, #32]
        break;
 800a036:	e007      	b.n	800a048 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	621a      	str	r2, [r3, #32]
        break;
 800a044:	e000      	b.n	800a048 <FMC_NORSRAM_Init+0x18c>
    }
  }
 800a046:	bf00      	nop

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	371c      	adds	r7, #28
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	0008fb7f 	.word	0x0008fb7f

0800a05c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	011b      	lsls	r3, r3, #4
 800a07c:	431a      	orrs	r2, r3
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	431a      	orrs	r2, r3
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	079b      	lsls	r3, r3, #30
 800a08c:	431a      	orrs	r2, r3
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	041b      	lsls	r3, r3, #16
 800a094:	431a      	orrs	r2, r3
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	051b      	lsls	r3, r3, #20
 800a09e:	431a      	orrs	r2, r3
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	3b02      	subs	r3, #2
 800a0a6:	061b      	lsls	r3, r3, #24
 800a0a8:	ea42 0103 	orr.w	r1, r2, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	69db      	ldr	r3, [r3, #28]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	3201      	adds	r2, #1
 800a0b4:	4319      	orrs	r1, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0c8:	d113      	bne.n	800a0f2 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a0d2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	051b      	lsls	r3, r3, #20
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	371c      	adds	r7, #28
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a114:	d121      	bne.n	800a15a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	6819      	ldr	r1, [r3, #0]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	011b      	lsls	r3, r3, #4
 800a12c:	4319      	orrs	r1, r3
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	021b      	lsls	r3, r3, #8
 800a134:	4319      	orrs	r1, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	079b      	lsls	r3, r3, #30
 800a13c:	4319      	orrs	r1, r3
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	69db      	ldr	r3, [r3, #28]
 800a142:	4319      	orrs	r1, r3
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	041b      	lsls	r3, r3, #16
 800a14a:	430b      	orrs	r3, r1
 800a14c:	ea42 0103 	orr.w	r1, r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a158:	e005      	b.n	800a166 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a174:	b480      	push	{r7}
 800a176:	b08b      	sub	sp, #44	; 0x2c
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	fa93 f3a3 	rbit	r3, r3
 800a18e:	613b      	str	r3, [r7, #16]
  return result;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a19a:	2320      	movs	r3, #32
 800a19c:	e003      	b.n	800a1a6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	fab3 f383 	clz	r3, r3
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	2103      	movs	r1, #3
 800a1aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ae:	43db      	mvns	r3, r3
 800a1b0:	401a      	ands	r2, r3
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	fa93 f3a3 	rbit	r3, r3
 800a1bc:	61fb      	str	r3, [r7, #28]
  return result;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d101      	bne.n	800a1cc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a1c8:	2320      	movs	r3, #32
 800a1ca:	e003      	b.n	800a1d4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	fab3 f383 	clz	r3, r3
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	601a      	str	r2, [r3, #0]
}
 800a1e2:	bf00      	nop
 800a1e4:	372c      	adds	r7, #44	; 0x2c
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b085      	sub	sp, #20
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	43db      	mvns	r3, r3
 800a202:	401a      	ands	r2, r3
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	fb01 f303 	mul.w	r3, r1, r3
 800a20c:	431a      	orrs	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	605a      	str	r2, [r3, #4]
}
 800a212:	bf00      	nop
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a21e:	b480      	push	{r7}
 800a220:	b08b      	sub	sp, #44	; 0x2c
 800a222:	af00      	add	r7, sp, #0
 800a224:	60f8      	str	r0, [r7, #12]
 800a226:	60b9      	str	r1, [r7, #8]
 800a228:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	689a      	ldr	r2, [r3, #8]
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	fa93 f3a3 	rbit	r3, r3
 800a238:	613b      	str	r3, [r7, #16]
  return result;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a244:	2320      	movs	r3, #32
 800a246:	e003      	b.n	800a250 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	fab3 f383 	clz	r3, r3
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	2103      	movs	r1, #3
 800a254:	fa01 f303 	lsl.w	r3, r1, r3
 800a258:	43db      	mvns	r3, r3
 800a25a:	401a      	ands	r2, r3
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a260:	6a3b      	ldr	r3, [r7, #32]
 800a262:	fa93 f3a3 	rbit	r3, r3
 800a266:	61fb      	str	r3, [r7, #28]
  return result;
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a272:	2320      	movs	r3, #32
 800a274:	e003      	b.n	800a27e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	fab3 f383 	clz	r3, r3
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	005b      	lsls	r3, r3, #1
 800a280:	6879      	ldr	r1, [r7, #4]
 800a282:	fa01 f303 	lsl.w	r3, r1, r3
 800a286:	431a      	orrs	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a28c:	bf00      	nop
 800a28e:	372c      	adds	r7, #44	; 0x2c
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a298:	b480      	push	{r7}
 800a29a:	b08b      	sub	sp, #44	; 0x2c
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68da      	ldr	r2, [r3, #12]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	fa93 f3a3 	rbit	r3, r3
 800a2b2:	613b      	str	r3, [r7, #16]
  return result;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a2be:	2320      	movs	r3, #32
 800a2c0:	e003      	b.n	800a2ca <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	fab3 f383 	clz	r3, r3
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	2103      	movs	r1, #3
 800a2ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d2:	43db      	mvns	r3, r3
 800a2d4:	401a      	ands	r2, r3
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	fa93 f3a3 	rbit	r3, r3
 800a2e0:	61fb      	str	r3, [r7, #28]
  return result;
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a2ec:	2320      	movs	r3, #32
 800a2ee:	e003      	b.n	800a2f8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	fab3 f383 	clz	r3, r3
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	6879      	ldr	r1, [r7, #4]
 800a2fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a300:	431a      	orrs	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	60da      	str	r2, [r3, #12]
}
 800a306:	bf00      	nop
 800a308:	372c      	adds	r7, #44	; 0x2c
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a312:	b480      	push	{r7}
 800a314:	b08b      	sub	sp, #44	; 0x2c
 800a316:	af00      	add	r7, sp, #0
 800a318:	60f8      	str	r0, [r7, #12]
 800a31a:	60b9      	str	r1, [r7, #8]
 800a31c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6a1a      	ldr	r2, [r3, #32]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	fa93 f3a3 	rbit	r3, r3
 800a32c:	613b      	str	r3, [r7, #16]
  return result;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d101      	bne.n	800a33c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a338:	2320      	movs	r3, #32
 800a33a:	e003      	b.n	800a344 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	fab3 f383 	clz	r3, r3
 800a342:	b2db      	uxtb	r3, r3
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	210f      	movs	r1, #15
 800a348:	fa01 f303 	lsl.w	r3, r1, r3
 800a34c:	43db      	mvns	r3, r3
 800a34e:	401a      	ands	r2, r3
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	fa93 f3a3 	rbit	r3, r3
 800a35a:	61fb      	str	r3, [r7, #28]
  return result;
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a366:	2320      	movs	r3, #32
 800a368:	e003      	b.n	800a372 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	fab3 f383 	clz	r3, r3
 800a370:	b2db      	uxtb	r3, r3
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	6879      	ldr	r1, [r7, #4]
 800a376:	fa01 f303 	lsl.w	r3, r1, r3
 800a37a:	431a      	orrs	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a380:	bf00      	nop
 800a382:	372c      	adds	r7, #44	; 0x2c
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b08b      	sub	sp, #44	; 0x2c
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	0a1b      	lsrs	r3, r3, #8
 800a3a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	fa93 f3a3 	rbit	r3, r3
 800a3a8:	613b      	str	r3, [r7, #16]
  return result;
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a3b4:	2320      	movs	r3, #32
 800a3b6:	e003      	b.n	800a3c0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	fab3 f383 	clz	r3, r3
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	210f      	movs	r1, #15
 800a3c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	401a      	ands	r2, r3
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	0a1b      	lsrs	r3, r3, #8
 800a3d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	fa93 f3a3 	rbit	r3, r3
 800a3d8:	61fb      	str	r3, [r7, #28]
  return result;
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	e003      	b.n	800a3f0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	fab3 f383 	clz	r3, r3
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	6879      	ldr	r1, [r7, #4]
 800a3f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f8:	431a      	orrs	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a3fe:	bf00      	nop
 800a400:	372c      	adds	r7, #44	; 0x2c
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b08a      	sub	sp, #40	; 0x28
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	fa93 f3a3 	rbit	r3, r3
 800a420:	617b      	str	r3, [r7, #20]
  return result;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <LL_GPIO_Init+0x26>
    return 32U;
 800a42c:	2320      	movs	r3, #32
 800a42e:	e003      	b.n	800a438 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	fab3 f383 	clz	r3, r3
 800a436:	b2db      	uxtb	r3, r3
 800a438:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a43a:	e050      	b.n	800a4de <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	2101      	movs	r1, #1
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	fa01 f303 	lsl.w	r3, r1, r3
 800a448:	4013      	ands	r3, r2
 800a44a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d042      	beq.n	800a4d8 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	461a      	mov	r2, r3
 800a458:	6a39      	ldr	r1, [r7, #32]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f7ff fe8a 	bl	800a174 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d003      	beq.n	800a470 <LL_GPIO_Init+0x66>
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d106      	bne.n	800a47e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	461a      	mov	r2, r3
 800a476:	6a39      	ldr	r1, [r7, #32]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff fed0 	bl	800a21e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	461a      	mov	r2, r3
 800a484:	6a39      	ldr	r1, [r7, #32]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff ff06 	bl	800a298 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d121      	bne.n	800a4d8 <LL_GPIO_Init+0xce>
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	fa93 f3a3 	rbit	r3, r3
 800a49e:	60bb      	str	r3, [r7, #8]
  return result;
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <LL_GPIO_Init+0xa4>
    return 32U;
 800a4aa:	2320      	movs	r3, #32
 800a4ac:	e003      	b.n	800a4b6 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	fab3 f383 	clz	r3, r3
 800a4b4:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a4b6:	2b07      	cmp	r3, #7
 800a4b8:	d807      	bhi.n	800a4ca <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	6a39      	ldr	r1, [r7, #32]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7ff ff25 	bl	800a312 <LL_GPIO_SetAFPin_0_7>
 800a4c8:	e006      	b.n	800a4d8 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	6a39      	ldr	r1, [r7, #32]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff ff5a 	bl	800a38c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	3301      	adds	r3, #1
 800a4dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1a7      	bne.n	800a43c <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d003      	beq.n	800a4fc <LL_GPIO_Init+0xf2>
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d107      	bne.n	800a50c <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	6819      	ldr	r1, [r3, #0]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	461a      	mov	r2, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff fe71 	bl	800a1ee <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3728      	adds	r7, #40	; 0x28
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a516:	b084      	sub	sp, #16
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	f107 001c 	add.w	r0, r7, #28
 800a524:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fd8f 	bl	800b058 <USB_CoreReset>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a53e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a540:	2b00      	cmp	r3, #0
 800a542:	d106      	bne.n	800a552 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a548:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	639a      	str	r2, [r3, #56]	; 0x38
 800a550:	e005      	b.n	800a55e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a56a:	b004      	add	sp, #16
 800a56c:	4770      	bx	lr
	...

0800a570 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	4613      	mov	r3, r2
 800a57c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a57e:	79fb      	ldrb	r3, [r7, #7]
 800a580:	2b02      	cmp	r3, #2
 800a582:	d165      	bne.n	800a650 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	4a41      	ldr	r2, [pc, #260]	; (800a68c <USB_SetTurnaroundTime+0x11c>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d906      	bls.n	800a59a <USB_SetTurnaroundTime+0x2a>
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	4a40      	ldr	r2, [pc, #256]	; (800a690 <USB_SetTurnaroundTime+0x120>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d202      	bcs.n	800a59a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a594:	230f      	movs	r3, #15
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	e062      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	4a3c      	ldr	r2, [pc, #240]	; (800a690 <USB_SetTurnaroundTime+0x120>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d306      	bcc.n	800a5b0 <USB_SetTurnaroundTime+0x40>
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	4a3b      	ldr	r2, [pc, #236]	; (800a694 <USB_SetTurnaroundTime+0x124>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d202      	bcs.n	800a5b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a5aa:	230e      	movs	r3, #14
 800a5ac:	617b      	str	r3, [r7, #20]
 800a5ae:	e057      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	4a38      	ldr	r2, [pc, #224]	; (800a694 <USB_SetTurnaroundTime+0x124>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d306      	bcc.n	800a5c6 <USB_SetTurnaroundTime+0x56>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	4a37      	ldr	r2, [pc, #220]	; (800a698 <USB_SetTurnaroundTime+0x128>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d202      	bcs.n	800a5c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a5c0:	230d      	movs	r3, #13
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	e04c      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	4a33      	ldr	r2, [pc, #204]	; (800a698 <USB_SetTurnaroundTime+0x128>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d306      	bcc.n	800a5dc <USB_SetTurnaroundTime+0x6c>
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	4a32      	ldr	r2, [pc, #200]	; (800a69c <USB_SetTurnaroundTime+0x12c>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d802      	bhi.n	800a5dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a5d6:	230c      	movs	r3, #12
 800a5d8:	617b      	str	r3, [r7, #20]
 800a5da:	e041      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	4a2f      	ldr	r2, [pc, #188]	; (800a69c <USB_SetTurnaroundTime+0x12c>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d906      	bls.n	800a5f2 <USB_SetTurnaroundTime+0x82>
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	4a2e      	ldr	r2, [pc, #184]	; (800a6a0 <USB_SetTurnaroundTime+0x130>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d802      	bhi.n	800a5f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a5ec:	230b      	movs	r3, #11
 800a5ee:	617b      	str	r3, [r7, #20]
 800a5f0:	e036      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	4a2a      	ldr	r2, [pc, #168]	; (800a6a0 <USB_SetTurnaroundTime+0x130>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d906      	bls.n	800a608 <USB_SetTurnaroundTime+0x98>
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	4a29      	ldr	r2, [pc, #164]	; (800a6a4 <USB_SetTurnaroundTime+0x134>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d802      	bhi.n	800a608 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a602:	230a      	movs	r3, #10
 800a604:	617b      	str	r3, [r7, #20]
 800a606:	e02b      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	4a26      	ldr	r2, [pc, #152]	; (800a6a4 <USB_SetTurnaroundTime+0x134>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d906      	bls.n	800a61e <USB_SetTurnaroundTime+0xae>
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	4a25      	ldr	r2, [pc, #148]	; (800a6a8 <USB_SetTurnaroundTime+0x138>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d202      	bcs.n	800a61e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a618:	2309      	movs	r3, #9
 800a61a:	617b      	str	r3, [r7, #20]
 800a61c:	e020      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	4a21      	ldr	r2, [pc, #132]	; (800a6a8 <USB_SetTurnaroundTime+0x138>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d306      	bcc.n	800a634 <USB_SetTurnaroundTime+0xc4>
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	4a20      	ldr	r2, [pc, #128]	; (800a6ac <USB_SetTurnaroundTime+0x13c>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d802      	bhi.n	800a634 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a62e:	2308      	movs	r3, #8
 800a630:	617b      	str	r3, [r7, #20]
 800a632:	e015      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	4a1d      	ldr	r2, [pc, #116]	; (800a6ac <USB_SetTurnaroundTime+0x13c>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d906      	bls.n	800a64a <USB_SetTurnaroundTime+0xda>
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	4a1c      	ldr	r2, [pc, #112]	; (800a6b0 <USB_SetTurnaroundTime+0x140>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d202      	bcs.n	800a64a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a644:	2307      	movs	r3, #7
 800a646:	617b      	str	r3, [r7, #20]
 800a648:	e00a      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a64a:	2306      	movs	r3, #6
 800a64c:	617b      	str	r3, [r7, #20]
 800a64e:	e007      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d102      	bne.n	800a65c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a656:	2309      	movs	r3, #9
 800a658:	617b      	str	r3, [r7, #20]
 800a65a:	e001      	b.n	800a660 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a65c:	2309      	movs	r3, #9
 800a65e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	029b      	lsls	r3, r3, #10
 800a674:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a678:	431a      	orrs	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	371c      	adds	r7, #28
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	00d8acbf 	.word	0x00d8acbf
 800a690:	00e4e1c0 	.word	0x00e4e1c0
 800a694:	00f42400 	.word	0x00f42400
 800a698:	01067380 	.word	0x01067380
 800a69c:	011a499f 	.word	0x011a499f
 800a6a0:	01312cff 	.word	0x01312cff
 800a6a4:	014ca43f 	.word	0x014ca43f
 800a6a8:	016e3600 	.word	0x016e3600
 800a6ac:	01a6ab1f 	.word	0x01a6ab1f
 800a6b0:	01e84800 	.word	0x01e84800

0800a6b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	f023 0201 	bic.w	r2, r3, #1
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a6f2:	78fb      	ldrb	r3, [r7, #3]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d115      	bne.n	800a724 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a704:	2001      	movs	r0, #1
 800a706:	f7f7 fe71 	bl	80023ec <HAL_Delay>
      ms++;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3301      	adds	r3, #1
 800a70e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fc11 	bl	800af38 <USB_GetMode>
 800a716:	4603      	mov	r3, r0
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d01e      	beq.n	800a75a <USB_SetCurrentMode+0x84>
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2b31      	cmp	r3, #49	; 0x31
 800a720:	d9f0      	bls.n	800a704 <USB_SetCurrentMode+0x2e>
 800a722:	e01a      	b.n	800a75a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d115      	bne.n	800a756 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a736:	2001      	movs	r0, #1
 800a738:	f7f7 fe58 	bl	80023ec <HAL_Delay>
      ms++;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3301      	adds	r3, #1
 800a740:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fbf8 	bl	800af38 <USB_GetMode>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <USB_SetCurrentMode+0x84>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2b31      	cmp	r3, #49	; 0x31
 800a752:	d9f0      	bls.n	800a736 <USB_SetCurrentMode+0x60>
 800a754:	e001      	b.n	800a75a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e005      	b.n	800a766 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2b32      	cmp	r3, #50	; 0x32
 800a75e:	d101      	bne.n	800a764 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e000      	b.n	800a766 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a770:	b084      	sub	sp, #16
 800a772:	b580      	push	{r7, lr}
 800a774:	b086      	sub	sp, #24
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a77e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a78a:	2300      	movs	r3, #0
 800a78c:	613b      	str	r3, [r7, #16]
 800a78e:	e009      	b.n	800a7a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	3340      	adds	r3, #64	; 0x40
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	2200      	movs	r2, #0
 800a79c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	613b      	str	r3, [r7, #16]
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	2b0e      	cmp	r3, #14
 800a7a8:	d9f2      	bls.n	800a790 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a7aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d11c      	bne.n	800a7ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7be:	f043 0302 	orr.w	r3, r3, #2
 800a7c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	e005      	b.n	800a7f6 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	2300      	movs	r3, #0
 800a800:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a808:	4619      	mov	r1, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a810:	461a      	mov	r2, r3
 800a812:	680b      	ldr	r3, [r1, #0]
 800a814:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a816:	2103      	movs	r1, #3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f95b 	bl	800aad4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a81e:	2110      	movs	r1, #16
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f8f3 	bl	800aa0c <USB_FlushTxFifo>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 f91f 	bl	800aa74 <USB_FlushRxFifo>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a846:	461a      	mov	r2, r3
 800a848:	2300      	movs	r3, #0
 800a84a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a852:	461a      	mov	r2, r3
 800a854:	2300      	movs	r3, #0
 800a856:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a85e:	461a      	mov	r2, r3
 800a860:	2300      	movs	r3, #0
 800a862:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a864:	2300      	movs	r3, #0
 800a866:	613b      	str	r3, [r7, #16]
 800a868:	e043      	b.n	800a8f2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	015a      	lsls	r2, r3, #5
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	4413      	add	r3, r2
 800a872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a87c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a880:	d118      	bne.n	800a8b4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	015a      	lsls	r2, r3, #5
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	4413      	add	r3, r2
 800a890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a894:	461a      	mov	r2, r3
 800a896:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a89a:	6013      	str	r3, [r2, #0]
 800a89c:	e013      	b.n	800a8c6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	015a      	lsls	r2, r3, #5
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	e008      	b.n	800a8c6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	613b      	str	r3, [r7, #16]
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d3b7      	bcc.n	800a86a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	613b      	str	r3, [r7, #16]
 800a8fe:	e043      	b.n	800a988 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	015a      	lsls	r2, r3, #5
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	4413      	add	r3, r2
 800a908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a916:	d118      	bne.n	800a94a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10a      	bne.n	800a934 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a92a:	461a      	mov	r2, r3
 800a92c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	e013      	b.n	800a95c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a940:	461a      	mov	r2, r3
 800a942:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	e008      	b.n	800a95c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4413      	add	r3, r2
 800a952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a956:	461a      	mov	r2, r3
 800a958:	2300      	movs	r3, #0
 800a95a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a968:	461a      	mov	r2, r3
 800a96a:	2300      	movs	r3, #0
 800a96c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97a:	461a      	mov	r2, r3
 800a97c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a980:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	3301      	adds	r3, #1
 800a986:	613b      	str	r3, [r7, #16]
 800a988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d3b7      	bcc.n	800a900 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a99e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a9b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d105      	bne.n	800a9c4 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	f043 0210 	orr.w	r2, r3, #16
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	699a      	ldr	r2, [r3, #24]
 800a9c8:	4b0f      	ldr	r3, [pc, #60]	; (800aa08 <USB_DevInit+0x298>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d005      	beq.n	800a9e2 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	f043 0208 	orr.w	r2, r3, #8
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a9e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d107      	bne.n	800a9f8 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9f0:	f043 0304 	orr.w	r3, r3, #4
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa04:	b004      	add	sp, #16
 800aa06:	4770      	bx	lr
 800aa08:	803c3800 	.word	0x803c3800

0800aa0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa16:	2300      	movs	r3, #0
 800aa18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4a13      	ldr	r2, [pc, #76]	; (800aa70 <USB_FlushTxFifo+0x64>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d901      	bls.n	800aa2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e01b      	b.n	800aa64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	daf2      	bge.n	800aa1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	019b      	lsls	r3, r3, #6
 800aa3c:	f043 0220 	orr.w	r2, r3, #32
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	4a08      	ldr	r2, [pc, #32]	; (800aa70 <USB_FlushTxFifo+0x64>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d901      	bls.n	800aa56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e006      	b.n	800aa64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	f003 0320 	and.w	r3, r3, #32
 800aa5e:	2b20      	cmp	r3, #32
 800aa60:	d0f0      	beq.n	800aa44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	00030d40 	.word	0x00030d40

0800aa74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3301      	adds	r3, #1
 800aa84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	4a11      	ldr	r2, [pc, #68]	; (800aad0 <USB_FlushRxFifo+0x5c>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d901      	bls.n	800aa92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e018      	b.n	800aac4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	daf2      	bge.n	800aa80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2210      	movs	r2, #16
 800aaa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4a08      	ldr	r2, [pc, #32]	; (800aad0 <USB_FlushRxFifo+0x5c>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d901      	bls.n	800aab6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	e006      	b.n	800aac4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	f003 0310 	and.w	r3, r3, #16
 800aabe:	2b10      	cmp	r3, #16
 800aac0:	d0f0      	beq.n	800aaa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	00030d40 	.word	0x00030d40

0800aad4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	78fb      	ldrb	r3, [r7, #3]
 800aaee:	68f9      	ldr	r1, [r7, #12]
 800aaf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b087      	sub	sp, #28
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f003 0306 	and.w	r3, r3, #6
 800ab1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d102      	bne.n	800ab2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ab26:	2300      	movs	r3, #0
 800ab28:	75fb      	strb	r3, [r7, #23]
 800ab2a:	e00a      	b.n	800ab42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d002      	beq.n	800ab38 <USB_GetDevSpeed+0x32>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b06      	cmp	r3, #6
 800ab36:	d102      	bne.n	800ab3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ab38:	2302      	movs	r3, #2
 800ab3a:	75fb      	strb	r3, [r7, #23]
 800ab3c:	e001      	b.n	800ab42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ab3e:	230f      	movs	r3, #15
 800ab40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	371c      	adds	r7, #28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b087      	sub	sp, #28
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	785b      	ldrb	r3, [r3, #1]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d14a      	bne.n	800ac04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab86:	f040 8086 	bne.w	800ac96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	015a      	lsls	r2, r3, #5
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	7812      	ldrb	r2, [r2, #0]
 800ab9e:	0151      	lsls	r1, r2, #5
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	440a      	add	r2, r1
 800aba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aba8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	015a      	lsls	r2, r3, #5
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	4413      	add	r3, r2
 800abb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	7812      	ldrb	r2, [r2, #0]
 800abc2:	0151      	lsls	r1, r2, #5
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	440a      	add	r2, r1
 800abc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3301      	adds	r3, #1
 800abd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f242 7210 	movw	r2, #10000	; 0x2710
 800abde:	4293      	cmp	r3, r2
 800abe0:	d902      	bls.n	800abe8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	75fb      	strb	r3, [r7, #23]
          break;
 800abe6:	e056      	b.n	800ac96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac00:	d0e7      	beq.n	800abd2 <USB_EPStopXfer+0x82>
 800ac02:	e048      	b.n	800ac96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	015a      	lsls	r2, r3, #5
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac1c:	d13b      	bne.n	800ac96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	015a      	lsls	r2, r3, #5
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	4413      	add	r3, r2
 800ac28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	7812      	ldrb	r2, [r2, #0]
 800ac32:	0151      	lsls	r1, r2, #5
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	440a      	add	r2, r1
 800ac38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	7812      	ldrb	r2, [r2, #0]
 800ac56:	0151      	lsls	r1, r2, #5
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	440a      	add	r2, r1
 800ac5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f242 7210 	movw	r2, #10000	; 0x2710
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d902      	bls.n	800ac7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	75fb      	strb	r3, [r7, #23]
          break;
 800ac7a:	e00c      	b.n	800ac96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac94:	d0e7      	beq.n	800ac66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	371c      	adds	r7, #28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b089      	sub	sp, #36	; 0x24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	4611      	mov	r1, r2
 800acb0:	461a      	mov	r2, r3
 800acb2:	460b      	mov	r3, r1
 800acb4:	71fb      	strb	r3, [r7, #7]
 800acb6:	4613      	mov	r3, r2
 800acb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800acc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d123      	bne.n	800ad12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800acca:	88bb      	ldrh	r3, [r7, #4]
 800accc:	3303      	adds	r3, #3
 800acce:	089b      	lsrs	r3, r3, #2
 800acd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800acd2:	2300      	movs	r3, #0
 800acd4:	61bb      	str	r3, [r7, #24]
 800acd6:	e018      	b.n	800ad0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	031a      	lsls	r2, r3, #12
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace4:	461a      	mov	r2, r3
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6013      	str	r3, [r2, #0]
      pSrc++;
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	3301      	adds	r3, #1
 800acf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	3301      	adds	r3, #1
 800acf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	3301      	adds	r3, #1
 800acfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	3301      	adds	r3, #1
 800ad02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	3301      	adds	r3, #1
 800ad08:	61bb      	str	r3, [r7, #24]
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d3e2      	bcc.n	800acd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3724      	adds	r7, #36	; 0x24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b08b      	sub	sp, #44	; 0x2c
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ad36:	88fb      	ldrh	r3, [r7, #6]
 800ad38:	089b      	lsrs	r3, r3, #2
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ad3e:	88fb      	ldrh	r3, [r7, #6]
 800ad40:	f003 0303 	and.w	r3, r3, #3
 800ad44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ad46:	2300      	movs	r3, #0
 800ad48:	623b      	str	r3, [r7, #32]
 800ad4a:	e014      	b.n	800ad76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad56:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad60:	3301      	adds	r3, #1
 800ad62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad66:	3301      	adds	r3, #1
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ad70:	6a3b      	ldr	r3, [r7, #32]
 800ad72:	3301      	adds	r3, #1
 800ad74:	623b      	str	r3, [r7, #32]
 800ad76:	6a3a      	ldr	r2, [r7, #32]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d3e6      	bcc.n	800ad4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ad7e:	8bfb      	ldrh	r3, [r7, #30]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d01e      	beq.n	800adc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ad84:	2300      	movs	r3, #0
 800ad86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f107 0310 	add.w	r3, r7, #16
 800ad94:	6812      	ldr	r2, [r2, #0]
 800ad96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	fa22 f303 	lsr.w	r3, r2, r3
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	701a      	strb	r2, [r3, #0]
      i++;
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	3301      	adds	r3, #1
 800adae:	623b      	str	r3, [r7, #32]
      pDest++;
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	3301      	adds	r3, #1
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800adb6:	8bfb      	ldrh	r3, [r7, #30]
 800adb8:	3b01      	subs	r3, #1
 800adba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800adbc:	8bfb      	ldrh	r3, [r7, #30]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1ea      	bne.n	800ad98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	372c      	adds	r7, #44	; 0x2c
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800adea:	f023 0303 	bic.w	r3, r3, #3
 800adee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adfe:	f043 0302 	orr.w	r3, r3, #2
 800ae02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ae12:	b480      	push	{r7}
 800ae14:	b085      	sub	sp, #20
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	4013      	ands	r3, r2
 800ae28:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	4013      	ands	r3, r2
 800ae5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	0c1b      	lsrs	r3, r3, #16
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	b29b      	uxth	r3, r3
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec6:	695b      	ldr	r3, [r3, #20]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	4013      	ands	r3, r2
 800aecc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aece:	68bb      	ldr	r3, [r7, #8]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af00:	78fb      	ldrb	r3, [r7, #3]
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	fa22 f303 	lsr.w	r3, r2, r3
 800af0c:	01db      	lsls	r3, r3, #7
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4313      	orrs	r3, r2
 800af14:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af16:	78fb      	ldrb	r3, [r7, #3]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	4013      	ands	r3, r2
 800af28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af2a:	68bb      	ldr	r3, [r7, #8]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	371c      	adds	r7, #28
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	f003 0301 	and.w	r3, r3, #1
}
 800af48:	4618      	mov	r0, r3
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800af72:	f023 0307 	bic.w	r3, r3, #7
 800af76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
	...

0800af9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	460b      	mov	r3, r1
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	333c      	adds	r3, #60	; 0x3c
 800afb2:	3304      	adds	r3, #4
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	4a26      	ldr	r2, [pc, #152]	; (800b054 <USB_EP0_OutStart+0xb8>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d90a      	bls.n	800afd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afd0:	d101      	bne.n	800afd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	e037      	b.n	800b046 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afdc:	461a      	mov	r2, r3
 800afde:	2300      	movs	r3, #0
 800afe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b004:	f043 0318 	orr.w	r3, r3, #24
 800b008:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b018:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b01c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b01e:	7afb      	ldrb	r3, [r7, #11]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d10f      	bne.n	800b044 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b02a:	461a      	mov	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b03e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	371c      	adds	r7, #28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	4f54300a 	.word	0x4f54300a

0800b058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b060:	2300      	movs	r3, #0
 800b062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	4a13      	ldr	r2, [pc, #76]	; (800b0bc <USB_CoreReset+0x64>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d901      	bls.n	800b076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e01b      	b.n	800b0ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	daf2      	bge.n	800b064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b07e:	2300      	movs	r3, #0
 800b080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	f043 0201 	orr.w	r2, r3, #1
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	3301      	adds	r3, #1
 800b092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	4a09      	ldr	r2, [pc, #36]	; (800b0bc <USB_CoreReset+0x64>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d901      	bls.n	800b0a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e006      	b.n	800b0ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d0f0      	beq.n	800b08e <USB_CoreReset+0x36>

  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	00030d40 	.word	0x00030d40

0800b0c0 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b096      	sub	sp, #88	; 0x58
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3303      	adds	r3, #3
 800b0d2:	f023 0303 	bic.w	r3, r3, #3
 800b0d6:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b0d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b0dc:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800b0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b0e0:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b0e2:	b672      	cpsid	i
#endif
    return(int_posture);
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800b0e6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b0e8:	4b55      	ldr	r3, [pc, #340]	; (800b240 <_tx_byte_allocate+0x180>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0f6:	621a      	str	r2, [r3, #32]
 800b0f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0fa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	f383 8810 	msr	PRIMASK, r3
}
 800b102:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800b104:	6879      	ldr	r1, [r7, #4]
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f000 f9b2 	bl	800b470 <_tx_byte_pool_search>
 800b10c:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b10e:	f3ef 8310 	mrs	r3, PRIMASK
 800b112:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800b114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800b116:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b118:	b672      	cpsid	i
    return(int_posture);
 800b11a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800b11c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800b11e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800b124:	2301      	movs	r3, #1
 800b126:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b128:	e006      	b.n	800b138 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b130:	429a      	cmp	r2, r3
 800b132:	d101      	bne.n	800b138 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800b134:	2301      	movs	r3, #1
 800b136:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800b138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0d9      	beq.n	800b0f2 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b142:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800b144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b146:	2b00      	cmp	r3, #0
 800b148:	d008      	beq.n	800b15c <_tx_byte_allocate+0x9c>
 800b14a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b14c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	f383 8810 	msr	PRIMASK, r3
}
 800b154:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800b156:	2300      	movs	r3, #0
 800b158:	653b      	str	r3, [r7, #80]	; 0x50
 800b15a:	e06c      	b.n	800b236 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d061      	beq.n	800b226 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800b162:	4b38      	ldr	r3, [pc, #224]	; (800b244 <_tx_byte_allocate+0x184>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d007      	beq.n	800b17a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800b16a:	2310      	movs	r3, #16
 800b16c:	653b      	str	r3, [r7, #80]	; 0x50
 800b16e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b170:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	f383 8810 	msr	PRIMASK, r3
}
 800b178:	e05d      	b.n	800b236 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800b17a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b17c:	4a32      	ldr	r2, [pc, #200]	; (800b248 <_tx_byte_allocate+0x188>)
 800b17e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800b180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800b186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800b18c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b194:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b19c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d109      	bne.n	800b1ca <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1ba:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b1bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1c0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b1c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1c6:	675a      	str	r2, [r3, #116]	; 0x74
 800b1c8:	e011      	b.n	800b1ee <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1d4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b1d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1da:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b1dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1e0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1e6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1ec:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800b1ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1f0:	2209      	movs	r2, #9
 800b1f2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b1f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b200:	4b10      	ldr	r3, [pc, #64]	; (800b244 <_tx_byte_allocate+0x184>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3301      	adds	r3, #1
 800b206:	4a0f      	ldr	r2, [pc, #60]	; (800b244 <_tx_byte_allocate+0x184>)
 800b208:	6013      	str	r3, [r2, #0]
 800b20a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b20c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	f383 8810 	msr	PRIMASK, r3
}
 800b214:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b216:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b218:	f001 fb02 	bl	800c820 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800b21c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b222:	653b      	str	r3, [r7, #80]	; 0x50
 800b224:	e007      	b.n	800b236 <_tx_byte_allocate+0x176>
 800b226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b228:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f383 8810 	msr	PRIMASK, r3
}
 800b230:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800b232:	2310      	movs	r3, #16
 800b234:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800b236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3758      	adds	r7, #88	; 0x58
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	2004cdb0 	.word	0x2004cdb0
 800b244:	2004ce48 	.word	0x2004ce48
 800b248:	0800b24d 	.word	0x0800b24d

0800b24c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08e      	sub	sp, #56	; 0x38
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b256:	f3ef 8310 	mrs	r3, PRIMASK
 800b25a:	623b      	str	r3, [r7, #32]
    return(posture);
 800b25c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b25e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b260:	b672      	cpsid	i
    return(int_posture);
 800b262:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800b264:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b26a:	4a33      	ldr	r2, [pc, #204]	; (800b338 <_tx_byte_pool_cleanup+0xec>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d158      	bne.n	800b322 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d152      	bne.n	800b322 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b280:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	2b00      	cmp	r3, #0
 800b286:	d04c      	beq.n	800b322 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800b288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a2b      	ldr	r2, [pc, #172]	; (800b33c <_tx_byte_pool_cleanup+0xf0>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d147      	bne.n	800b322 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b296:	2b00      	cmp	r3, #0
 800b298:	d043      	beq.n	800b322 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800b2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a4:	1e5a      	subs	r2, r3, #1
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ae:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d103      	bne.n	800b2be <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	625a      	str	r2, [r3, #36]	; 0x24
 800b2bc:	e013      	b.n	800b2e6 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2c2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2c8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ce:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2d4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d102      	bne.n	800b2e6 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2e4:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ea:	2b09      	cmp	r3, #9
 800b2ec:	d119      	bne.n	800b322 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2210      	movs	r2, #16
 800b2f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b2f6:	4b12      	ldr	r3, [pc, #72]	; (800b340 <_tx_byte_pool_cleanup+0xf4>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	4a10      	ldr	r2, [pc, #64]	; (800b340 <_tx_byte_pool_cleanup+0xf4>)
 800b2fe:	6013      	str	r3, [r2, #0]
 800b300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b302:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	f383 8810 	msr	PRIMASK, r3
}
 800b30a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f001 f987 	bl	800c620 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b312:	f3ef 8310 	mrs	r3, PRIMASK
 800b316:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b318:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b31a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b31c:	b672      	cpsid	i
    return(int_posture);
 800b31e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b320:	637b      	str	r3, [r7, #52]	; 0x34
 800b322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b324:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f383 8810 	msr	PRIMASK, r3
}
 800b32c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b32e:	bf00      	nop
 800b330:	3738      	adds	r7, #56	; 0x38
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	0800b24d 	.word	0x0800b24d
 800b33c:	42595445 	.word	0x42595445
 800b340:	2004ce48 	.word	0x2004ce48

0800b344 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b08e      	sub	sp, #56	; 0x38
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b352:	2234      	movs	r2, #52	; 0x34
 800b354:	2100      	movs	r1, #0
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f01b f8e3 	bl	8026522 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	f023 0303 	bic.w	r3, r3, #3
 800b362:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	f1a3 0208 	sub.w	r2, r3, #8
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2202      	movs	r2, #2
 800b390:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	4413      	add	r3, r2
 800b39c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a0:	3b04      	subs	r3, #4
 800b3a2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800b3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3b0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b4:	3b04      	subs	r3, #4
 800b3b6:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3ce:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3dc:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e0:	4a1f      	ldr	r2, [pc, #124]	; (800b460 <_tx_byte_pool_create+0x11c>)
 800b3e2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ee:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b3f0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b3f2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3f4:	b672      	cpsid	i
    return(int_posture);
 800b3f6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b3f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	4a19      	ldr	r2, [pc, #100]	; (800b464 <_tx_byte_pool_create+0x120>)
 800b3fe:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b400:	4b19      	ldr	r3, [pc, #100]	; (800b468 <_tx_byte_pool_create+0x124>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d109      	bne.n	800b41c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b408:	4a18      	ldr	r2, [pc, #96]	; (800b46c <_tx_byte_pool_create+0x128>)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	631a      	str	r2, [r3, #48]	; 0x30
 800b41a:	e011      	b.n	800b440 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b41c:	4b13      	ldr	r3, [pc, #76]	; (800b46c <_tx_byte_pool_create+0x128>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b426:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	69fa      	ldr	r2, [r7, #28]
 800b438:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6a3a      	ldr	r2, [r7, #32]
 800b43e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b440:	4b09      	ldr	r3, [pc, #36]	; (800b468 <_tx_byte_pool_create+0x124>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3301      	adds	r3, #1
 800b446:	4a08      	ldr	r2, [pc, #32]	; (800b468 <_tx_byte_pool_create+0x124>)
 800b448:	6013      	str	r3, [r2, #0]
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f383 8810 	msr	PRIMASK, r3
}
 800b454:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3738      	adds	r7, #56	; 0x38
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	ffffeeee 	.word	0xffffeeee
 800b464:	42595445 	.word	0x42595445
 800b468:	2004cda4 	.word	0x2004cda4
 800b46c:	2004cda0 	.word	0x2004cda0

0800b470 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800b470:	b480      	push	{r7}
 800b472:	b097      	sub	sp, #92	; 0x5c
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800b47a:	2300      	movs	r3, #0
 800b47c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b47e:	f3ef 8310 	mrs	r3, PRIMASK
 800b482:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800b486:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b488:	b672      	cpsid	i
    return(int_posture);
 800b48a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800b48c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	689a      	ldr	r2, [r3, #8]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	3b02      	subs	r3, #2
 800b498:	00db      	lsls	r3, r3, #3
 800b49a:	4413      	add	r3, r2
 800b49c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d308      	bcc.n	800b4b8 <_tx_byte_pool_search+0x48>
 800b4a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4a8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	f383 8810 	msr	PRIMASK, r3
}
 800b4b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	653b      	str	r3, [r7, #80]	; 0x50
 800b4b6:	e0dd      	b.n	800b674 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800b4b8:	4b72      	ldr	r3, [pc, #456]	; (800b684 <_tx_byte_pool_search+0x214>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4c2:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d8:	3304      	adds	r3, #4
 800b4da:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4de:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a68      	ldr	r2, [pc, #416]	; (800b688 <_tx_byte_pool_search+0x218>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d143      	bne.n	800b572 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800b4ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d104      	bne.n	800b4fa <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4f4:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4fc:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b50c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b50e:	3b08      	subs	r3, #8
 800b510:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800b512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d257      	bcs.n	800b5ca <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800b51a:	2300      	movs	r3, #0
 800b51c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	3304      	adds	r3, #4
 800b522:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a56      	ldr	r2, [pc, #344]	; (800b688 <_tx_byte_pool_search+0x218>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d113      	bne.n	800b55a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b534:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	1e5a      	subs	r2, r3, #1
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	695b      	ldr	r3, [r3, #20]
 800b54c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b54e:	429a      	cmp	r2, r3
 800b550:	d114      	bne.n	800b57c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b556:	615a      	str	r2, [r3, #20]
 800b558:	e010      	b.n	800b57c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800b564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b566:	2b00      	cmp	r3, #0
 800b568:	d008      	beq.n	800b57c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800b56a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b56c:	3b01      	subs	r3, #1
 800b56e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b570:	e004      	b.n	800b57c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b574:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800b57c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800b582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b584:	3b01      	subs	r3, #1
 800b586:	64bb      	str	r3, [r7, #72]	; 0x48
 800b588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b58a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f383 8810 	msr	PRIMASK, r3
}
 800b592:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b594:	f3ef 8310 	mrs	r3, PRIMASK
 800b598:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b59a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b59c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b59e:	b672      	cpsid	i
    return(int_posture);
 800b5a0:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800b5a2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a1b      	ldr	r3, [r3, #32]
 800b5a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d009      	beq.n	800b5c2 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5c0:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800b5c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d186      	bne.n	800b4d6 <_tx_byte_pool_search+0x66>
 800b5c8:	e000      	b.n	800b5cc <_tx_byte_pool_search+0x15c>
                    break;
 800b5ca:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800b5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d048      	beq.n	800b664 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800b5d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	2b13      	cmp	r3, #19
 800b5da:	d91e      	bls.n	800b61a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	3308      	adds	r3, #8
 800b5e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5e2:	4413      	add	r3, r2
 800b5e4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e8:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b5ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ec:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800b600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b602:	4a21      	ldr	r2, [pc, #132]	; (800b688 <_tx_byte_pool_search+0x218>)
 800b604:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b614:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b61a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b61c:	3304      	adds	r3, #4
 800b61e:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	689a      	ldr	r2, [r3, #8]
 800b62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	f1a3 0208 	sub.w	r2, r3, #8
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b640:	429a      	cmp	r2, r3
 800b642:	d105      	bne.n	800b650 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b646:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800b648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	615a      	str	r2, [r3, #20]
 800b650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b652:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f383 8810 	msr	PRIMASK, r3
}
 800b65a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b65c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b65e:	3308      	adds	r3, #8
 800b660:	653b      	str	r3, [r7, #80]	; 0x50
 800b662:	e007      	b.n	800b674 <_tx_byte_pool_search+0x204>
 800b664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b666:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f383 8810 	msr	PRIMASK, r3
}
 800b66e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800b670:	2300      	movs	r3, #0
 800b672:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b676:	4618      	mov	r0, r3
 800b678:	375c      	adds	r7, #92	; 0x5c
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	2004cdb0 	.word	0x2004cdb0
 800b688:	ffffeeee 	.word	0xffffeeee

0800b68c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b690:	f000 ff04 	bl	800c49c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b694:	f001 fa8c 	bl	800cbb0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b698:	4b12      	ldr	r3, [pc, #72]	; (800b6e4 <_tx_initialize_high_level+0x58>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	4b12      	ldr	r3, [pc, #72]	; (800b6e8 <_tx_initialize_high_level+0x5c>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b6a4:	4b11      	ldr	r3, [pc, #68]	; (800b6ec <_tx_initialize_high_level+0x60>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <_tx_initialize_high_level+0x64>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b6b0:	4b10      	ldr	r3, [pc, #64]	; (800b6f4 <_tx_initialize_high_level+0x68>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	4b10      	ldr	r3, [pc, #64]	; (800b6f8 <_tx_initialize_high_level+0x6c>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b6bc:	4b0f      	ldr	r3, [pc, #60]	; (800b6fc <_tx_initialize_high_level+0x70>)
 800b6be:	2200      	movs	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]
 800b6c2:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <_tx_initialize_high_level+0x74>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b6c8:	4b0e      	ldr	r3, [pc, #56]	; (800b704 <_tx_initialize_high_level+0x78>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	601a      	str	r2, [r3, #0]
 800b6ce:	4b0e      	ldr	r3, [pc, #56]	; (800b708 <_tx_initialize_high_level+0x7c>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b6d4:	4b0d      	ldr	r3, [pc, #52]	; (800b70c <_tx_initialize_high_level+0x80>)
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	601a      	str	r2, [r3, #0]
 800b6da:	4b0d      	ldr	r3, [pc, #52]	; (800b710 <_tx_initialize_high_level+0x84>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]
#endif
}
 800b6e0:	bf00      	nop
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	2004cd78 	.word	0x2004cd78
 800b6e8:	2004cd7c 	.word	0x2004cd7c
 800b6ec:	2004cd80 	.word	0x2004cd80
 800b6f0:	2004cd84 	.word	0x2004cd84
 800b6f4:	2004cd88 	.word	0x2004cd88
 800b6f8:	2004cd8c 	.word	0x2004cd8c
 800b6fc:	2004cd98 	.word	0x2004cd98
 800b700:	2004cd9c 	.word	0x2004cd9c
 800b704:	2004cda0 	.word	0x2004cda0
 800b708:	2004cda4 	.word	0x2004cda4
 800b70c:	2004cd90 	.word	0x2004cd90
 800b710:	2004cd94 	.word	0x2004cd94

0800b714 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b718:	4b10      	ldr	r3, [pc, #64]	; (800b75c <_tx_initialize_kernel_enter+0x48>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b720:	d00c      	beq.n	800b73c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b722:	4b0e      	ldr	r3, [pc, #56]	; (800b75c <_tx_initialize_kernel_enter+0x48>)
 800b724:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b728:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b72a:	f7f4 fda3 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b72e:	f7ff ffad 	bl	800b68c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b732:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <_tx_initialize_kernel_enter+0x4c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3301      	adds	r3, #1
 800b738:	4a09      	ldr	r2, [pc, #36]	; (800b760 <_tx_initialize_kernel_enter+0x4c>)
 800b73a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b73c:	4b07      	ldr	r3, [pc, #28]	; (800b75c <_tx_initialize_kernel_enter+0x48>)
 800b73e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b742:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b744:	4b07      	ldr	r3, [pc, #28]	; (800b764 <_tx_initialize_kernel_enter+0x50>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4618      	mov	r0, r3
 800b74a:	f7f5 f841 	bl	80007d0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b74e:	4b03      	ldr	r3, [pc, #12]	; (800b75c <_tx_initialize_kernel_enter+0x48>)
 800b750:	2200      	movs	r2, #0
 800b752:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b754:	f7f4 fdca 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b758:	bf00      	nop
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20025814 	.word	0x20025814
 800b760:	2004ce48 	.word	0x2004ce48
 800b764:	2004cda8 	.word	0x2004cda8

0800b768 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08e      	sub	sp, #56	; 0x38
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b772:	f3ef 8310 	mrs	r3, PRIMASK
 800b776:	623b      	str	r3, [r7, #32]
    return(posture);
 800b778:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b77a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b77c:	b672      	cpsid	i
    return(int_posture);
 800b77e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b780:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b786:	4a37      	ldr	r2, [pc, #220]	; (800b864 <_tx_queue_cleanup+0xfc>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d161      	bne.n	800b850 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	429a      	cmp	r2, r3
 800b796:	d15b      	bne.n	800b850 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b79c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d055      	beq.n	800b850 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a2f      	ldr	r2, [pc, #188]	; (800b868 <_tx_queue_cleanup+0x100>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d150      	bne.n	800b850 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d04c      	beq.n	800b850 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c0:	1e5a      	subs	r2, r3, #1
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c4:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ca:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d103      	bne.n	800b7da <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	629a      	str	r2, [r3, #40]	; 0x28
 800b7d8:	e013      	b.n	800b802 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7de:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7e4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ea:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d102      	bne.n	800b802 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b800:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b806:	2b05      	cmp	r3, #5
 800b808:	d122      	bne.n	800b850 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d004      	beq.n	800b81c <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	220b      	movs	r2, #11
 800b816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b81a:	e003      	b.n	800b824 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	220a      	movs	r2, #10
 800b820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b824:	4b11      	ldr	r3, [pc, #68]	; (800b86c <_tx_queue_cleanup+0x104>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3301      	adds	r3, #1
 800b82a:	4a10      	ldr	r2, [pc, #64]	; (800b86c <_tx_queue_cleanup+0x104>)
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b830:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	f383 8810 	msr	PRIMASK, r3
}
 800b838:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fef0 	bl	800c620 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b840:	f3ef 8310 	mrs	r3, PRIMASK
 800b844:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b846:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b848:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b84a:	b672      	cpsid	i
    return(int_posture);
 800b84c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b84e:	637b      	str	r3, [r7, #52]	; 0x34
 800b850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b852:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f383 8810 	msr	PRIMASK, r3
}
 800b85a:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b85c:	bf00      	nop
 800b85e:	3738      	adds	r7, #56	; 0x38
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	0800b769 	.word	0x0800b769
 800b868:	51554555 	.word	0x51554555
 800b86c:	2004ce48 	.word	0x2004ce48

0800b870 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b08c      	sub	sp, #48	; 0x30
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b87e:	2238      	movs	r2, #56	; 0x38
 800b880:	2100      	movs	r1, #0
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f01a fe4d 	bl	8026522 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89e:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 800b8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	fb02 f303 	mul.w	r3, r2, r3
 800b8a8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	683a      	ldr	r2, [r7, #0]
 800b8ae:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	699a      	ldr	r2, [r3, #24]
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	441a      	add	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8ce:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8d4:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b8da:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b8dc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b8de:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8e0:	b672      	cpsid	i
    return(int_posture);
 800b8e2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b8e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	4a18      	ldr	r2, [pc, #96]	; (800b94c <_tx_queue_create+0xdc>)
 800b8ea:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b8ec:	4b18      	ldr	r3, [pc, #96]	; (800b950 <_tx_queue_create+0xe0>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d109      	bne.n	800b908 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b8f4:	4a17      	ldr	r2, [pc, #92]	; (800b954 <_tx_queue_create+0xe4>)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	635a      	str	r2, [r3, #52]	; 0x34
 800b906:	e011      	b.n	800b92c <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b908:	4b12      	ldr	r3, [pc, #72]	; (800b954 <_tx_queue_create+0xe4>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b912:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b914:	6a3b      	ldr	r3, [r7, #32]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	69fa      	ldr	r2, [r7, #28]
 800b924:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6a3a      	ldr	r2, [r7, #32]
 800b92a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b92c:	4b08      	ldr	r3, [pc, #32]	; (800b950 <_tx_queue_create+0xe0>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3301      	adds	r3, #1
 800b932:	4a07      	ldr	r2, [pc, #28]	; (800b950 <_tx_queue_create+0xe0>)
 800b934:	6013      	str	r3, [r2, #0]
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	f383 8810 	msr	PRIMASK, r3
}
 800b940:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3730      	adds	r7, #48	; 0x30
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	51554555 	.word	0x51554555
 800b950:	2004cd84 	.word	0x2004cd84
 800b954:	2004cd80 	.word	0x2004cd80

0800b958 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b096      	sub	sp, #88	; 0x58
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b964:	2300      	movs	r3, #0
 800b966:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b968:	f3ef 8310 	mrs	r3, PRIMASK
 800b96c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b970:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b972:	b672      	cpsid	i
    return(int_posture);
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800b976:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 8136 	beq.w	800bbf4 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d13c      	bne.n	800ba08 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b99e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9a0:	1d13      	adds	r3, r2, #4
 800b9a2:	657b      	str	r3, [r7, #84]	; 0x54
 800b9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a6:	1d19      	adds	r1, r3, #4
 800b9a8:	6539      	str	r1, [r7, #80]	; 0x50
 800b9aa:	6812      	ldr	r2, [r2, #0]
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d90e      	bls.n	800b9d2 <_tx_queue_receive+0x7a>
 800b9b4:	e007      	b.n	800b9c6 <_tx_queue_receive+0x6e>
 800b9b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9b8:	1d13      	adds	r3, r2, #4
 800b9ba:	657b      	str	r3, [r7, #84]	; 0x54
 800b9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9be:	1d19      	adds	r1, r3, #4
 800b9c0:	6539      	str	r1, [r7, #80]	; 0x50
 800b9c2:	6812      	ldr	r2, [r2, #0]
 800b9c4:	601a      	str	r2, [r3, #0]
 800b9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1f1      	bne.n	800b9b6 <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d102      	bne.n	800b9e2 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	699b      	ldr	r3, [r3, #24]
 800b9e0:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9e6:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	1c5a      	adds	r2, r3, #1
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	1e5a      	subs	r2, r3, #1
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	611a      	str	r2, [r3, #16]
 800b9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9fe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	f383 8810 	msr	PRIMASK, r3
}
 800ba06:	e163      	b.n	800bcd0 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800ba0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d153      	bne.n	800bac0 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800ba18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba1c:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800ba28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba2a:	1d13      	adds	r3, r2, #4
 800ba2c:	657b      	str	r3, [r7, #84]	; 0x54
 800ba2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba30:	1d19      	adds	r1, r3, #4
 800ba32:	6539      	str	r1, [r7, #80]	; 0x50
 800ba34:	6812      	ldr	r2, [r2, #0]
 800ba36:	601a      	str	r2, [r3, #0]
 800ba38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d90e      	bls.n	800ba5c <_tx_queue_receive+0x104>
 800ba3e:	e007      	b.n	800ba50 <_tx_queue_receive+0xf8>
 800ba40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba42:	1d13      	adds	r3, r2, #4
 800ba44:	657b      	str	r3, [r7, #84]	; 0x54
 800ba46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba48:	1d19      	adds	r1, r3, #4
 800ba4a:	6539      	str	r1, [r7, #80]	; 0x50
 800ba4c:	6812      	ldr	r2, [r2, #0]
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba52:	3b01      	subs	r3, #1
 800ba54:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1f1      	bne.n	800ba40 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800ba5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ba62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d103      	bne.n	800ba70 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	629a      	str	r2, [r3, #40]	; 0x28
 800ba6e:	e00e      	b.n	800ba8e <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800ba70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba74:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba7a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800ba7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba80:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800ba82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba86:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800ba88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba8c:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba92:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ba94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba96:	2200      	movs	r2, #0
 800ba98:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ba9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800baa2:	4b8e      	ldr	r3, [pc, #568]	; (800bcdc <_tx_queue_receive+0x384>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3301      	adds	r3, #1
 800baa8:	4a8c      	ldr	r2, [pc, #560]	; (800bcdc <_tx_queue_receive+0x384>)
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	f383 8810 	msr	PRIMASK, r3
}
 800bab6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bab8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800baba:	f000 fdb1 	bl	800c620 <_tx_thread_system_resume>
 800babe:	e107      	b.n	800bcd0 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6a1b      	ldr	r3, [r3, #32]
 800bac4:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bad2:	1d13      	adds	r3, r2, #4
 800bad4:	657b      	str	r3, [r7, #84]	; 0x54
 800bad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad8:	1d19      	adds	r1, r3, #4
 800bada:	6539      	str	r1, [r7, #80]	; 0x50
 800badc:	6812      	ldr	r2, [r2, #0]
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d90e      	bls.n	800bb04 <_tx_queue_receive+0x1ac>
 800bae6:	e007      	b.n	800baf8 <_tx_queue_receive+0x1a0>
 800bae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800baea:	1d13      	adds	r3, r2, #4
 800baec:	657b      	str	r3, [r7, #84]	; 0x54
 800baee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baf0:	1d19      	adds	r1, r3, #4
 800baf2:	6539      	str	r1, [r7, #80]	; 0x50
 800baf4:	6812      	ldr	r2, [r2, #0]
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bafa:	3b01      	subs	r3, #1
 800bafc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1f1      	bne.n	800bae8 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	69db      	ldr	r3, [r3, #28]
 800bb08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d102      	bne.n	800bb14 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb18:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800bb1a:	4b70      	ldr	r3, [pc, #448]	; (800bcdc <_tx_queue_receive+0x384>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	4a6e      	ldr	r2, [pc, #440]	; (800bcdc <_tx_queue_receive+0x384>)
 800bb22:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800bb24:	4b6d      	ldr	r3, [pc, #436]	; (800bcdc <_tx_queue_receive+0x384>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	4a6c      	ldr	r2, [pc, #432]	; (800bcdc <_tx_queue_receive+0x384>)
 800bb2c:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb32:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb38:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bb40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb42:	1d13      	adds	r3, r2, #4
 800bb44:	657b      	str	r3, [r7, #84]	; 0x54
 800bb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb48:	1d19      	adds	r1, r3, #4
 800bb4a:	6539      	str	r1, [r7, #80]	; 0x50
 800bb4c:	6812      	ldr	r2, [r2, #0]
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d90e      	bls.n	800bb74 <_tx_queue_receive+0x21c>
 800bb56:	e007      	b.n	800bb68 <_tx_queue_receive+0x210>
 800bb58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb5a:	1d13      	adds	r3, r2, #4
 800bb5c:	657b      	str	r3, [r7, #84]	; 0x54
 800bb5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb60:	1d19      	adds	r1, r3, #4
 800bb62:	6539      	str	r1, [r7, #80]	; 0x50
 800bb64:	6812      	ldr	r2, [r2, #0]
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1f1      	bne.n	800bb58 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d102      	bne.n	800bb84 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb88:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8e:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bb90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb92:	3b01      	subs	r3, #1
 800bb94:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bb96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d103      	bne.n	800bba4 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	629a      	str	r2, [r3, #40]	; 0x28
 800bba2:	e00e      	b.n	800bbc2 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba8:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbae:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbb4:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbba:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800bbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbc0:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbc6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbca:	2200      	movs	r2, #0
 800bbcc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bbd6:	4b41      	ldr	r3, [pc, #260]	; (800bcdc <_tx_queue_receive+0x384>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	4a3f      	ldr	r2, [pc, #252]	; (800bcdc <_tx_queue_receive+0x384>)
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	f383 8810 	msr	PRIMASK, r3
}
 800bbea:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bbec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbee:	f000 fd17 	bl	800c620 <_tx_thread_system_resume>
 800bbf2:	e06d      	b.n	800bcd0 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d062      	beq.n	800bcc0 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bbfa:	4b38      	ldr	r3, [pc, #224]	; (800bcdc <_tx_queue_receive+0x384>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d008      	beq.n	800bc14 <_tx_queue_receive+0x2bc>
 800bc02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc04:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	f383 8810 	msr	PRIMASK, r3
}
 800bc0c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800bc0e:	230a      	movs	r3, #10
 800bc10:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc12:	e05d      	b.n	800bcd0 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bc14:	4b32      	ldr	r3, [pc, #200]	; (800bce0 <_tx_queue_receive+0x388>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800bc1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc1c:	4a31      	ldr	r2, [pc, #196]	; (800bce4 <_tx_queue_receive+0x38c>)
 800bc1e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800bc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800bc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800bc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800bc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc3a:	1c5a      	adds	r2, r3, #1
 800bc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc3e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bc42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d109      	bne.n	800bc5c <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc4c:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc52:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800bc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc58:	675a      	str	r2, [r3, #116]	; 0x74
 800bc5a:	e011      	b.n	800bc80 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc60:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc66:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc6c:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc72:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bc74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc78:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc7e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800bc80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc82:	1c5a      	adds	r2, r3, #1
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800bc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc8a:	2205      	movs	r2, #5
 800bc8c:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bc8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc90:	2201      	movs	r2, #1
 800bc92:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bc94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bc9a:	4b10      	ldr	r3, [pc, #64]	; (800bcdc <_tx_queue_receive+0x384>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	4a0e      	ldr	r2, [pc, #56]	; (800bcdc <_tx_queue_receive+0x384>)
 800bca2:	6013      	str	r3, [r2, #0]
 800bca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bca6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	f383 8810 	msr	PRIMASK, r3
}
 800bcae:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bcb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bcb2:	f000 fdb5 	bl	800c820 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800bcb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcbe:	e007      	b.n	800bcd0 <_tx_queue_receive+0x378>
 800bcc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcc2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	f383 8810 	msr	PRIMASK, r3
}
 800bcca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800bccc:	230a      	movs	r3, #10
 800bcce:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 800bcd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3758      	adds	r7, #88	; 0x58
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	2004ce48 	.word	0x2004ce48
 800bce0:	2004cdb0 	.word	0x2004cdb0
 800bce4:	0800b769 	.word	0x0800b769

0800bce8 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b094      	sub	sp, #80	; 0x50
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcf8:	f3ef 8310 	mrs	r3, PRIMASK
 800bcfc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800bd00:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd02:	b672      	cpsid	i
    return(int_posture);
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800bd06:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f000 809b 	beq.w	800be4e <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d13c      	bne.n	800bd98 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	1e5a      	subs	r2, r3, #1
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bd42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd44:	1d13      	adds	r3, r2, #4
 800bd46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd4a:	1d19      	adds	r1, r3, #4
 800bd4c:	64b9      	str	r1, [r7, #72]	; 0x48
 800bd4e:	6812      	ldr	r2, [r2, #0]
 800bd50:	601a      	str	r2, [r3, #0]
 800bd52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d90e      	bls.n	800bd76 <_tx_queue_send+0x8e>
 800bd58:	e007      	b.n	800bd6a <_tx_queue_send+0x82>
 800bd5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd5c:	1d13      	adds	r3, r2, #4
 800bd5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd62:	1d19      	adds	r1, r3, #4
 800bd64:	64b9      	str	r1, [r7, #72]	; 0x48
 800bd66:	6812      	ldr	r2, [r2, #0]
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	647b      	str	r3, [r7, #68]	; 0x44
 800bd70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1f1      	bne.n	800bd5a <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d102      	bne.n	800bd86 <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd8a:	625a      	str	r2, [r3, #36]	; 0x24
 800bd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd8e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	f383 8810 	msr	PRIMASK, r3
}
 800bd96:	e0c8      	b.n	800bf2a <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9c:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800bd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda0:	3b01      	subs	r3, #1
 800bda2:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d103      	bne.n	800bdb2 <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2200      	movs	r2, #0
 800bdae:	629a      	str	r2, [r3, #40]	; 0x28
 800bdb0:	e012      	b.n	800bdd8 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800bdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdbe:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc4:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdca:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdd0:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800bdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdd6:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bddc:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde0:	2200      	movs	r2, #0
 800bde2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdec:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bdf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdf6:	1d13      	adds	r3, r2, #4
 800bdf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdfc:	1d19      	adds	r1, r3, #4
 800bdfe:	64b9      	str	r1, [r7, #72]	; 0x48
 800be00:	6812      	ldr	r2, [r2, #0]
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be06:	2b01      	cmp	r3, #1
 800be08:	d90e      	bls.n	800be28 <_tx_queue_send+0x140>
 800be0a:	e007      	b.n	800be1c <_tx_queue_send+0x134>
 800be0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be0e:	1d13      	adds	r3, r2, #4
 800be10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be14:	1d19      	adds	r1, r3, #4
 800be16:	64b9      	str	r1, [r7, #72]	; 0x48
 800be18:	6812      	ldr	r2, [r2, #0]
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be1e:	3b01      	subs	r3, #1
 800be20:	647b      	str	r3, [r7, #68]	; 0x44
 800be22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1f1      	bne.n	800be0c <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800be28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be2a:	2200      	movs	r2, #0
 800be2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800be30:	4b40      	ldr	r3, [pc, #256]	; (800bf34 <_tx_queue_send+0x24c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3301      	adds	r3, #1
 800be36:	4a3f      	ldr	r2, [pc, #252]	; (800bf34 <_tx_queue_send+0x24c>)
 800be38:	6013      	str	r3, [r2, #0]
 800be3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be3c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	f383 8810 	msr	PRIMASK, r3
}
 800be44:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800be46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be48:	f000 fbea 	bl	800c620 <_tx_thread_system_resume>
 800be4c:	e06d      	b.n	800bf2a <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d062      	beq.n	800bf1a <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800be54:	4b37      	ldr	r3, [pc, #220]	; (800bf34 <_tx_queue_send+0x24c>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d008      	beq.n	800be6e <_tx_queue_send+0x186>
 800be5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be5e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	f383 8810 	msr	PRIMASK, r3
}
 800be66:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800be68:	230b      	movs	r3, #11
 800be6a:	643b      	str	r3, [r7, #64]	; 0x40
 800be6c:	e05d      	b.n	800bf2a <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800be6e:	4b32      	ldr	r3, [pc, #200]	; (800bf38 <_tx_queue_send+0x250>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800be74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be76:	4a31      	ldr	r2, [pc, #196]	; (800bf3c <_tx_queue_send+0x254>)
 800be78:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800be7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800be80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be88:	2200      	movs	r2, #0
 800be8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800be8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be94:	1c5a      	adds	r2, r3, #1
 800be96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be98:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800be9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d109      	bne.n	800beb6 <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bea6:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800beac:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800beae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800beb2:	675a      	str	r2, [r3, #116]	; 0x74
 800beb4:	e011      	b.n	800beda <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beba:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bec0:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bec6:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800becc:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bed2:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bed8:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800beda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800bee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee4:	2205      	movs	r2, #5
 800bee6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beea:	2201      	movs	r2, #1
 800beec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800beee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bef4:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <_tx_queue_send+0x24c>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	4a0e      	ldr	r2, [pc, #56]	; (800bf34 <_tx_queue_send+0x24c>)
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf00:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	f383 8810 	msr	PRIMASK, r3
}
 800bf08:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bf0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bf0c:	f000 fc88 	bl	800c820 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800bf10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf16:	643b      	str	r3, [r7, #64]	; 0x40
 800bf18:	e007      	b.n	800bf2a <_tx_queue_send+0x242>
 800bf1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f383 8810 	msr	PRIMASK, r3
}
 800bf24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800bf26:	230b      	movs	r3, #11
 800bf28:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 800bf2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3750      	adds	r7, #80	; 0x50
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	2004ce48 	.word	0x2004ce48
 800bf38:	2004cdb0 	.word	0x2004cdb0
 800bf3c:	0800b769 	.word	0x0800b769

0800bf40 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08e      	sub	sp, #56	; 0x38
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf4a:	f3ef 8310 	mrs	r3, PRIMASK
 800bf4e:	623b      	str	r3, [r7, #32]
    return(posture);
 800bf50:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bf52:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bf54:	b672      	cpsid	i
    return(int_posture);
 800bf56:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800bf58:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf5e:	4a33      	ldr	r2, [pc, #204]	; (800c02c <_tx_semaphore_cleanup+0xec>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d158      	bne.n	800c016 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d152      	bne.n	800c016 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf74:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d04c      	beq.n	800c016 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a2b      	ldr	r2, [pc, #172]	; (800c030 <_tx_semaphore_cleanup+0xf0>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d147      	bne.n	800c016 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d043      	beq.n	800c016 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800bf94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	1e5a      	subs	r2, r3, #1
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800bfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d103      	bne.n	800bfb2 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	2200      	movs	r2, #0
 800bfae:	60da      	str	r2, [r3, #12]
 800bfb0:	e013      	b.n	800bfda <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfbc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfc8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d102      	bne.n	800bfda <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfd8:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfde:	2b06      	cmp	r3, #6
 800bfe0:	d119      	bne.n	800c016 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	220d      	movs	r2, #13
 800bfe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800bfea:	4b12      	ldr	r3, [pc, #72]	; (800c034 <_tx_semaphore_cleanup+0xf4>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	3301      	adds	r3, #1
 800bff0:	4a10      	ldr	r2, [pc, #64]	; (800c034 <_tx_semaphore_cleanup+0xf4>)
 800bff2:	6013      	str	r3, [r2, #0]
 800bff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	f383 8810 	msr	PRIMASK, r3
}
 800bffe:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fb0d 	bl	800c620 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c006:	f3ef 8310 	mrs	r3, PRIMASK
 800c00a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c00c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c00e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c010:	b672      	cpsid	i
    return(int_posture);
 800c012:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c014:	637b      	str	r3, [r7, #52]	; 0x34
 800c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c018:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f383 8810 	msr	PRIMASK, r3
}
 800c020:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c022:	bf00      	nop
 800c024:	3738      	adds	r7, #56	; 0x38
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	0800bf41 	.word	0x0800bf41
 800c030:	53454d41 	.word	0x53454d41
 800c034:	2004ce48 	.word	0x2004ce48

0800c038 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b08a      	sub	sp, #40	; 0x28
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c044:	221c      	movs	r2, #28
 800c046:	2100      	movs	r1, #0
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f01a fa6a 	bl	8026522 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c05a:	f3ef 8310 	mrs	r3, PRIMASK
 800c05e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c060:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c062:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c064:	b672      	cpsid	i
    return(int_posture);
 800c066:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c068:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	4a18      	ldr	r2, [pc, #96]	; (800c0d0 <_tx_semaphore_create+0x98>)
 800c06e:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c070:	4b18      	ldr	r3, [pc, #96]	; (800c0d4 <_tx_semaphore_create+0x9c>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d109      	bne.n	800c08c <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c078:	4a17      	ldr	r2, [pc, #92]	; (800c0d8 <_tx_semaphore_create+0xa0>)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	619a      	str	r2, [r3, #24]
 800c08a:	e011      	b.n	800c0b0 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c08c:	4b12      	ldr	r3, [pc, #72]	; (800c0d8 <_tx_semaphore_create+0xa0>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c092:	6a3b      	ldr	r3, [r7, #32]
 800c094:	699b      	ldr	r3, [r3, #24]
 800c096:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c098:	6a3b      	ldr	r3, [r7, #32]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	69fa      	ldr	r2, [r7, #28]
 800c0a8:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6a3a      	ldr	r2, [r7, #32]
 800c0ae:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800c0b0:	4b08      	ldr	r3, [pc, #32]	; (800c0d4 <_tx_semaphore_create+0x9c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	4a07      	ldr	r2, [pc, #28]	; (800c0d4 <_tx_semaphore_create+0x9c>)
 800c0b8:	6013      	str	r3, [r2, #0]
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	f383 8810 	msr	PRIMASK, r3
}
 800c0c4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3728      	adds	r7, #40	; 0x28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	53454d41 	.word	0x53454d41
 800c0d4:	2004cd7c 	.word	0x2004cd7c
 800c0d8:	2004cd78 	.word	0x2004cd78

0800c0dc <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b08e      	sub	sp, #56	; 0x38
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c0ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c0ee:	623b      	str	r3, [r7, #32]
    return(posture);
 800c0f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c0f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c0f4:	b672      	cpsid	i
    return(int_posture);
 800c0f6:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800c0f8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00a      	beq.n	800c118 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	1e5a      	subs	r2, r3, #1
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	609a      	str	r2, [r3, #8]
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	f383 8810 	msr	PRIMASK, r3
}
 800c116:	e068      	b.n	800c1ea <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d05d      	beq.n	800c1da <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c11e:	4b35      	ldr	r3, [pc, #212]	; (800c1f4 <_tx_semaphore_get+0x118>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d008      	beq.n	800c138 <_tx_semaphore_get+0x5c>
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	f383 8810 	msr	PRIMASK, r3
}
 800c130:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800c132:	230d      	movs	r3, #13
 800c134:	637b      	str	r3, [r7, #52]	; 0x34
 800c136:	e058      	b.n	800c1ea <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c138:	4b2f      	ldr	r3, [pc, #188]	; (800c1f8 <_tx_semaphore_get+0x11c>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800c13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c140:	4a2e      	ldr	r2, [pc, #184]	; (800c1fc <_tx_semaphore_get+0x120>)
 800c142:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800c144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c154:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d109      	bne.n	800c174 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c164:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c16a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800c16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c170:	675a      	str	r2, [r3, #116]	; 0x74
 800c172:	e011      	b.n	800c198 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c17e:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c184:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c18a:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c190:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c196:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	691b      	ldr	r3, [r3, #16]
 800c19c:	1c5a      	adds	r2, r3, #1
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	2206      	movs	r2, #6
 800c1a6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c1b4:	4b0f      	ldr	r3, [pc, #60]	; (800c1f4 <_tx_semaphore_get+0x118>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	4a0e      	ldr	r2, [pc, #56]	; (800c1f4 <_tx_semaphore_get+0x118>)
 800c1bc:	6013      	str	r3, [r2, #0]
 800c1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	f383 8810 	msr	PRIMASK, r3
}
 800c1c8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c1ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1cc:	f000 fb28 	bl	800c820 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d8:	e007      	b.n	800c1ea <_tx_semaphore_get+0x10e>
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f383 8810 	msr	PRIMASK, r3
}
 800c1e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800c1e6:	230d      	movs	r3, #13
 800c1e8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 800c1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3738      	adds	r7, #56	; 0x38
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	2004ce48 	.word	0x2004ce48
 800c1f8:	2004cdb0 	.word	0x2004cdb0
 800c1fc:	0800bf41 	.word	0x0800bf41

0800c200 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08c      	sub	sp, #48	; 0x30
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c208:	f3ef 8310 	mrs	r3, PRIMASK
 800c20c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c20e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c210:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c212:	b672      	cpsid	i
    return(int_posture);
 800c214:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c216:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10a      	bne.n	800c23a <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	1c5a      	adds	r2, r3, #1
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	609a      	str	r2, [r3, #8]
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	f383 8810 	msr	PRIMASK, r3
}
 800c238:	e033      	b.n	800c2a2 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	3b01      	subs	r3, #1
 800c244:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d103      	bne.n	800c254 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	60da      	str	r2, [r3, #12]
 800c252:	e00e      	b.n	800c272 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c258:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a3a      	ldr	r2, [r7, #32]
 800c25e:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c264:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	6a3a      	ldr	r2, [r7, #32]
 800c270:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c276:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	2200      	movs	r2, #0
 800c27c:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c280:	2200      	movs	r2, #0
 800c282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c286:	4b09      	ldr	r3, [pc, #36]	; (800c2ac <_tx_semaphore_put+0xac>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3301      	adds	r3, #1
 800c28c:	4a07      	ldr	r2, [pc, #28]	; (800c2ac <_tx_semaphore_put+0xac>)
 800c28e:	6013      	str	r3, [r2, #0]
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f383 8810 	msr	PRIMASK, r3
}
 800c29a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c29c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c29e:	f000 f9bf 	bl	800c620 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3730      	adds	r7, #48	; 0x30
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	2004ce48 	.word	0x2004ce48

0800c2b0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b092      	sub	sp, #72	; 0x48
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
 800c2bc:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800c2be:	2300      	movs	r3, #0
 800c2c0:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800c2c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2c4:	21ef      	movs	r1, #239	; 0xef
 800c2c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c2c8:	f01a f92b 	bl	8026522 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800c2cc:	22b0      	movs	r2, #176	; 0xb0
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f01a f926 	bl	8026522 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2ec:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2f2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2f8:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c306:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c30c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2220      	movs	r2, #32
 800c312:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c318:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800c31a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c31c:	3b01      	subs	r3, #1
 800c31e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c320:	4413      	add	r3, r2
 800c322:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c328:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800c32a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c32c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c32e:	429a      	cmp	r2, r3
 800c330:	d007      	beq.n	800c342 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2200      	movs	r2, #0
 800c336:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c340:	e006      	b.n	800c350 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c346:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c34c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2203      	movs	r2, #3
 800c354:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	4a48      	ldr	r2, [pc, #288]	; (800c47c <_tx_thread_create+0x1cc>)
 800c35a:	655a      	str	r2, [r3, #84]	; 0x54
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800c362:	4947      	ldr	r1, [pc, #284]	; (800c480 <_tx_thread_create+0x1d0>)
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f7f4 f827 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c36a:	f3ef 8310 	mrs	r3, PRIMASK
 800c36e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c372:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c374:	b672      	cpsid	i
    return(int_posture);
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800c378:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	4a41      	ldr	r2, [pc, #260]	; (800c484 <_tx_thread_create+0x1d4>)
 800c37e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800c380:	4b41      	ldr	r3, [pc, #260]	; (800c488 <_tx_thread_create+0x1d8>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10b      	bne.n	800c3a0 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800c388:	4a40      	ldr	r2, [pc, #256]	; (800c48c <_tx_thread_create+0x1dc>)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800c39e:	e016      	b.n	800c3ce <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800c3a0:	4b3a      	ldr	r3, [pc, #232]	; (800c48c <_tx_thread_create+0x1dc>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800c3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ac:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800c3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800c3ce:	4b2e      	ldr	r3, [pc, #184]	; (800c488 <_tx_thread_create+0x1d8>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	4a2c      	ldr	r2, [pc, #176]	; (800c488 <_tx_thread_create+0x1d8>)
 800c3d6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c3d8:	4b2d      	ldr	r3, [pc, #180]	; (800c490 <_tx_thread_create+0x1e0>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	4a2c      	ldr	r2, [pc, #176]	; (800c490 <_tx_thread_create+0x1e0>)
 800c3e0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800c3e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d129      	bne.n	800c43c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c3e8:	f3ef 8305 	mrs	r3, IPSR
 800c3ec:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800c3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800c3f0:	4b28      	ldr	r3, [pc, #160]	; (800c494 <_tx_thread_create+0x1e4>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c3fa:	d30d      	bcc.n	800c418 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800c3fc:	4b26      	ldr	r3, [pc, #152]	; (800c498 <_tx_thread_create+0x1e8>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800c402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c404:	2b00      	cmp	r3, #0
 800c406:	d009      	beq.n	800c41c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800c408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c40c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800c40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c414:	63da      	str	r2, [r3, #60]	; 0x3c
 800c416:	e001      	b.n	800c41c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800c418:	2300      	movs	r3, #0
 800c41a:	647b      	str	r3, [r7, #68]	; 0x44
 800c41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c420:	6a3b      	ldr	r3, [r7, #32]
 800c422:	f383 8810 	msr	PRIMASK, r3
}
 800c426:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f000 f8f9 	bl	800c620 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800c42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c430:	2b00      	cmp	r3, #0
 800c432:	d01e      	beq.n	800c472 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800c434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c438:	63da      	str	r2, [r3, #60]	; 0x3c
 800c43a:	e01a      	b.n	800c472 <_tx_thread_create+0x1c2>
 800c43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	f383 8810 	msr	PRIMASK, r3
}
 800c446:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c448:	f3ef 8310 	mrs	r3, PRIMASK
 800c44c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c44e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c450:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c452:	b672      	cpsid	i
    return(int_posture);
 800c454:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800c456:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800c458:	4b0d      	ldr	r3, [pc, #52]	; (800c490 <_tx_thread_create+0x1e0>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	4a0c      	ldr	r2, [pc, #48]	; (800c490 <_tx_thread_create+0x1e0>)
 800c460:	6013      	str	r3, [r2, #0]
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	f383 8810 	msr	PRIMASK, r3
}
 800c46c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c46e:	f000 f89d 	bl	800c5ac <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3748      	adds	r7, #72	; 0x48
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	0800caf5 	.word	0x0800caf5
 800c480:	0800c515 	.word	0x0800c515
 800c484:	54485244 	.word	0x54485244
 800c488:	2004cdbc 	.word	0x2004cdbc
 800c48c:	2004cdb8 	.word	0x2004cdb8
 800c490:	2004ce48 	.word	0x2004ce48
 800c494:	20025814 	.word	0x20025814
 800c498:	2004cdb4 	.word	0x2004cdb4

0800c49c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800c4a0:	4b12      	ldr	r3, [pc, #72]	; (800c4ec <_tx_thread_initialize+0x50>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800c4a6:	4b12      	ldr	r3, [pc, #72]	; (800c4f0 <_tx_thread_initialize+0x54>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]
 800c4ac:	4b11      	ldr	r3, [pc, #68]	; (800c4f4 <_tx_thread_initialize+0x58>)
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c4b2:	4b11      	ldr	r3, [pc, #68]	; (800c4f8 <_tx_thread_initialize+0x5c>)
 800c4b4:	2220      	movs	r2, #32
 800c4b6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800c4b8:	2280      	movs	r2, #128	; 0x80
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	480f      	ldr	r0, [pc, #60]	; (800c4fc <_tx_thread_initialize+0x60>)
 800c4be:	f01a f830 	bl	8026522 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800c4c2:	4b0f      	ldr	r3, [pc, #60]	; (800c500 <_tx_thread_initialize+0x64>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800c4c8:	4b0e      	ldr	r3, [pc, #56]	; (800c504 <_tx_thread_initialize+0x68>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800c4ce:	4b0e      	ldr	r3, [pc, #56]	; (800c508 <_tx_thread_initialize+0x6c>)
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <_tx_thread_initialize+0x70>)
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800c4da:	4b0d      	ldr	r3, [pc, #52]	; (800c510 <_tx_thread_initialize+0x74>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800c4e2:	4a0b      	ldr	r2, [pc, #44]	; (800c510 <_tx_thread_initialize+0x74>)
 800c4e4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800c4e6:	bf00      	nop
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	2004cdb0 	.word	0x2004cdb0
 800c4f0:	2004cdb4 	.word	0x2004cdb4
 800c4f4:	2004cdc0 	.word	0x2004cdc0
 800c4f8:	2004cdc4 	.word	0x2004cdc4
 800c4fc:	2004cdc8 	.word	0x2004cdc8
 800c500:	2004cdb8 	.word	0x2004cdb8
 800c504:	2004cdbc 	.word	0x2004cdbc
 800c508:	2004ce48 	.word	0x2004ce48
 800c50c:	2004ce4c 	.word	0x2004ce4c
 800c510:	2004ce50 	.word	0x2004ce50

0800c514 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c51a:	4b21      	ldr	r3, [pc, #132]	; (800c5a0 <_tx_thread_shell_entry+0x8c>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c524:	69fa      	ldr	r2, [r7, #28]
 800c526:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c528:	4610      	mov	r0, r2
 800c52a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800c52c:	4b1d      	ldr	r3, [pc, #116]	; (800c5a4 <_tx_thread_shell_entry+0x90>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d003      	beq.n	800c53c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800c534:	4b1b      	ldr	r3, [pc, #108]	; (800c5a4 <_tx_thread_shell_entry+0x90>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	69f8      	ldr	r0, [r7, #28]
 800c53a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c53c:	f3ef 8310 	mrs	r3, PRIMASK
 800c540:	607b      	str	r3, [r7, #4]
    return(posture);
 800c542:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c544:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c546:	b672      	cpsid	i
    return(int_posture);
 800c548:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800c54a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	2201      	movs	r2, #1
 800c550:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	2201      	movs	r2, #1
 800c556:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	2200      	movs	r2, #0
 800c55c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c55e:	4b12      	ldr	r3, [pc, #72]	; (800c5a8 <_tx_thread_shell_entry+0x94>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3301      	adds	r3, #1
 800c564:	4a10      	ldr	r2, [pc, #64]	; (800c5a8 <_tx_thread_shell_entry+0x94>)
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	f383 8810 	msr	PRIMASK, r3
}
 800c572:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800c574:	f3ef 8314 	mrs	r3, CONTROL
 800c578:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800c57a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800c57c:	617b      	str	r3, [r7, #20]
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f023 0304 	bic.w	r3, r3, #4
 800c584:	617b      	str	r3, [r7, #20]
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	f383 8814 	msr	CONTROL, r3
}
 800c590:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800c592:	69f8      	ldr	r0, [r7, #28]
 800c594:	f000 f944 	bl	800c820 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800c598:	bf00      	nop
 800c59a:	3720      	adds	r7, #32
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	2004cdb0 	.word	0x2004cdb0
 800c5a4:	2004ce4c 	.word	0x2004ce4c
 800c5a8:	2004ce48 	.word	0x2004ce48

0800c5ac <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b089      	sub	sp, #36	; 0x24
 800c5b0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c5b2:	4b17      	ldr	r3, [pc, #92]	; (800c610 <_tx_thread_system_preempt_check+0x64>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d121      	bne.n	800c602 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800c5be:	4b15      	ldr	r3, [pc, #84]	; (800c614 <_tx_thread_system_preempt_check+0x68>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800c5c4:	4b14      	ldr	r3, [pc, #80]	; (800c618 <_tx_thread_system_preempt_check+0x6c>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800c5ca:	69ba      	ldr	r2, [r7, #24]
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d017      	beq.n	800c602 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c5d2:	4b12      	ldr	r3, [pc, #72]	; (800c61c <_tx_thread_system_preempt_check+0x70>)
 800c5d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c5da:	f3ef 8305 	mrs	r3, IPSR
 800c5de:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c5e0:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10c      	bne.n	800c600 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c5ea:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800c5ee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c5f0:	b662      	cpsie	i
}
 800c5f2:	bf00      	nop
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f383 8810 	msr	PRIMASK, r3
}
 800c5fe:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800c600:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800c602:	bf00      	nop
 800c604:	3724      	adds	r7, #36	; 0x24
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	2004ce48 	.word	0x2004ce48
 800c614:	2004cdb0 	.word	0x2004cdb0
 800c618:	2004cdb4 	.word	0x2004cdb4
 800c61c:	e000ed04 	.word	0xe000ed04

0800c620 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b096      	sub	sp, #88	; 0x58
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c628:	f3ef 8310 	mrs	r3, PRIMASK
 800c62c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800c62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800c630:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800c632:	b672      	cpsid	i
    return(int_posture);
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800c636:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d005      	beq.n	800c64c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	334c      	adds	r3, #76	; 0x4c
 800c644:	4618      	mov	r0, r3
 800c646:	f000 fb91 	bl	800cd6c <_tx_timer_system_deactivate>
 800c64a:	e002      	b.n	800c652 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c652:	4b6c      	ldr	r3, [pc, #432]	; (800c804 <_tx_thread_system_resume+0x1e4>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	3b01      	subs	r3, #1
 800c658:	4a6a      	ldr	r2, [pc, #424]	; (800c804 <_tx_thread_system_resume+0x1e4>)
 800c65a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c660:	2b00      	cmp	r3, #0
 800c662:	f040 8083 	bne.w	800c76c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	f000 8097 	beq.w	800c79e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c674:	2b00      	cmp	r3, #0
 800c676:	d172      	bne.n	800c75e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c682:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800c684:	4a60      	ldr	r2, [pc, #384]	; (800c808 <_tx_thread_system_resume+0x1e8>)
 800c686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c68c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800c68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c690:	2b00      	cmp	r3, #0
 800c692:	d154      	bne.n	800c73e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800c694:	495c      	ldr	r1, [pc, #368]	; (800c808 <_tx_thread_system_resume+0x1e8>)
 800c696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b2:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800c6b4:	4b55      	ldr	r3, [pc, #340]	; (800c80c <_tx_thread_system_resume+0x1ec>)
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	4a53      	ldr	r2, [pc, #332]	; (800c80c <_tx_thread_system_resume+0x1ec>)
 800c6be:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800c6c0:	4b53      	ldr	r3, [pc, #332]	; (800c810 <_tx_thread_system_resume+0x1f0>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d269      	bcs.n	800c79e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800c6ca:	4a51      	ldr	r2, [pc, #324]	; (800c810 <_tx_thread_system_resume+0x1f0>)
 800c6cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6ce:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800c6d0:	4b50      	ldr	r3, [pc, #320]	; (800c814 <_tx_thread_system_resume+0x1f4>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800c6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d103      	bne.n	800c6e4 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800c6dc:	4a4d      	ldr	r2, [pc, #308]	; (800c814 <_tx_thread_system_resume+0x1f4>)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6013      	str	r3, [r2, #0]
 800c6e2:	e05c      	b.n	800c79e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800c6e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d257      	bcs.n	800c79e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800c6ee:	4a49      	ldr	r2, [pc, #292]	; (800c814 <_tx_thread_system_resume+0x1f4>)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6013      	str	r3, [r2, #0]
 800c6f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	f383 8810 	msr	PRIMASK, r3
}
 800c6fe:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c700:	4b40      	ldr	r3, [pc, #256]	; (800c804 <_tx_thread_system_resume+0x1e4>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800c706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d174      	bne.n	800c7f6 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c70c:	4b42      	ldr	r3, [pc, #264]	; (800c818 <_tx_thread_system_resume+0x1f8>)
 800c70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c712:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c714:	f3ef 8305 	mrs	r3, IPSR
 800c718:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10c      	bne.n	800c73a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c720:	f3ef 8310 	mrs	r3, PRIMASK
 800c724:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800c728:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c72a:	b662      	cpsie	i
}
 800c72c:	bf00      	nop
 800c72e:	6a3b      	ldr	r3, [r7, #32]
 800c730:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	f383 8810 	msr	PRIMASK, r3
}
 800c738:	bf00      	nop
}
 800c73a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800c73c:	e05b      	b.n	800c7f6 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800c73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c742:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800c744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800c74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c754:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c75a:	621a      	str	r2, [r3, #32]
 800c75c:	e01f      	b.n	800c79e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2203      	movs	r2, #3
 800c768:	631a      	str	r2, [r3, #48]	; 0x30
 800c76a:	e018      	b.n	800c79e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c770:	2b01      	cmp	r3, #1
 800c772:	d014      	beq.n	800c79e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c778:	2b02      	cmp	r3, #2
 800c77a:	d010      	beq.n	800c79e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c780:	2b00      	cmp	r3, #0
 800c782:	d106      	bne.n	800c792 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	631a      	str	r2, [r3, #48]	; 0x30
 800c790:	e005      	b.n	800c79e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2203      	movs	r2, #3
 800c79c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c79e:	4b1f      	ldr	r3, [pc, #124]	; (800c81c <_tx_thread_system_resume+0x1fc>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7a6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	f383 8810 	msr	PRIMASK, r3
}
 800c7ae:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c7b0:	4b18      	ldr	r3, [pc, #96]	; (800c814 <_tx_thread_system_resume+0x1f4>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d020      	beq.n	800c7fc <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c7ba:	4b12      	ldr	r3, [pc, #72]	; (800c804 <_tx_thread_system_resume+0x1e4>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800c7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d11a      	bne.n	800c7fc <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c7c6:	4b14      	ldr	r3, [pc, #80]	; (800c818 <_tx_thread_system_resume+0x1f8>)
 800c7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7cc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c7ce:	f3ef 8305 	mrs	r3, IPSR
 800c7d2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c7d4:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10f      	bne.n	800c7fa <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c7da:	f3ef 8310 	mrs	r3, PRIMASK
 800c7de:	613b      	str	r3, [r7, #16]
    return(posture);
 800c7e0:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800c7e2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c7e4:	b662      	cpsie	i
}
 800c7e6:	bf00      	nop
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	f383 8810 	msr	PRIMASK, r3
}
 800c7f2:	bf00      	nop
}
 800c7f4:	e001      	b.n	800c7fa <_tx_thread_system_resume+0x1da>
                                return;
 800c7f6:	bf00      	nop
 800c7f8:	e000      	b.n	800c7fc <_tx_thread_system_resume+0x1dc>
 800c7fa:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800c7fc:	3758      	adds	r7, #88	; 0x58
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	2004ce48 	.word	0x2004ce48
 800c808:	2004cdc8 	.word	0x2004cdc8
 800c80c:	2004cdc0 	.word	0x2004cdc0
 800c810:	2004cdc4 	.word	0x2004cdc4
 800c814:	2004cdb4 	.word	0x2004cdb4
 800c818:	e000ed04 	.word	0xe000ed04
 800c81c:	2004cdb0 	.word	0x2004cdb0

0800c820 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b09e      	sub	sp, #120	; 0x78
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c828:	4b81      	ldr	r3, [pc, #516]	; (800ca30 <_tx_thread_system_suspend+0x210>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c82e:	f3ef 8310 	mrs	r3, PRIMASK
 800c832:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800c834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800c836:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800c838:	b672      	cpsid	i
    return(int_posture);
 800c83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c83c:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c842:	429a      	cmp	r2, r3
 800c844:	d112      	bne.n	800c86c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c84a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800c84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d008      	beq.n	800c864 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800c852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c858:	d004      	beq.n	800c864 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	334c      	adds	r3, #76	; 0x4c
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 fa22 	bl	800cca8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	69db      	ldr	r3, [r3, #28]
 800c868:	4a72      	ldr	r2, [pc, #456]	; (800ca34 <_tx_thread_system_suspend+0x214>)
 800c86a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c86c:	4b72      	ldr	r3, [pc, #456]	; (800ca38 <_tx_thread_system_suspend+0x218>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3b01      	subs	r3, #1
 800c872:	4a71      	ldr	r2, [pc, #452]	; (800ca38 <_tx_thread_system_suspend+0x218>)
 800c874:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	f040 80a6 	bne.w	800c9cc <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6a1b      	ldr	r3, [r3, #32]
 800c890:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800c892:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	429a      	cmp	r2, r3
 800c898:	d015      	beq.n	800c8c6 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800c8a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8a4:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800c8a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c8aa:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800c8ac:	4a63      	ldr	r2, [pc, #396]	; (800ca3c <_tx_thread_system_suspend+0x21c>)
 800c8ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d157      	bne.n	800c96a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800c8ba:	4960      	ldr	r1, [pc, #384]	; (800ca3c <_tx_thread_system_suspend+0x21c>)
 800c8bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c8c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c8c4:	e051      	b.n	800c96a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800c8c6:	4a5d      	ldr	r2, [pc, #372]	; (800ca3c <_tx_thread_system_suspend+0x21c>)
 800c8c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d8:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800c8da:	4b59      	ldr	r3, [pc, #356]	; (800ca40 <_tx_thread_system_suspend+0x220>)
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8e0:	43db      	mvns	r3, r3
 800c8e2:	4013      	ands	r3, r2
 800c8e4:	4a56      	ldr	r2, [pc, #344]	; (800ca40 <_tx_thread_system_suspend+0x220>)
 800c8e6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800c8ec:	4b54      	ldr	r3, [pc, #336]	; (800ca40 <_tx_thread_system_suspend+0x220>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800c8f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d12b      	bne.n	800c950 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c8f8:	4b52      	ldr	r3, [pc, #328]	; (800ca44 <_tx_thread_system_suspend+0x224>)
 800c8fa:	2220      	movs	r2, #32
 800c8fc:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800c8fe:	4b52      	ldr	r3, [pc, #328]	; (800ca48 <_tx_thread_system_suspend+0x228>)
 800c900:	2200      	movs	r2, #0
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c906:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c90a:	f383 8810 	msr	PRIMASK, r3
}
 800c90e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c910:	4b49      	ldr	r3, [pc, #292]	; (800ca38 <_tx_thread_system_suspend+0x218>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800c916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f040 8081 	bne.w	800ca20 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c91e:	4b4b      	ldr	r3, [pc, #300]	; (800ca4c <_tx_thread_system_suspend+0x22c>)
 800c920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c924:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c926:	f3ef 8305 	mrs	r3, IPSR
 800c92a:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800c92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10c      	bne.n	800c94c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c932:	f3ef 8310 	mrs	r3, PRIMASK
 800c936:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800c938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800c93a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c93c:	b662      	cpsie	i
}
 800c93e:	bf00      	nop
 800c940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c942:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c946:	f383 8810 	msr	PRIMASK, r3
}
 800c94a:	bf00      	nop
}
 800c94c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800c94e:	e067      	b.n	800ca20 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800c950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c952:	fa93 f3a3 	rbit	r3, r3
 800c956:	65bb      	str	r3, [r7, #88]	; 0x58
 800c958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c95a:	fab3 f383 	clz	r3, r3
 800c95e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800c960:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c964:	4413      	add	r3, r2
 800c966:	4a37      	ldr	r2, [pc, #220]	; (800ca44 <_tx_thread_system_suspend+0x224>)
 800c968:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800c96a:	4b37      	ldr	r3, [pc, #220]	; (800ca48 <_tx_thread_system_suspend+0x228>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	429a      	cmp	r2, r3
 800c972:	d12b      	bne.n	800c9cc <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c974:	4b33      	ldr	r3, [pc, #204]	; (800ca44 <_tx_thread_system_suspend+0x224>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a30      	ldr	r2, [pc, #192]	; (800ca3c <_tx_thread_system_suspend+0x21c>)
 800c97a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c97e:	4a32      	ldr	r2, [pc, #200]	; (800ca48 <_tx_thread_system_suspend+0x228>)
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c984:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	f383 8810 	msr	PRIMASK, r3
}
 800c98c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c98e:	4b2a      	ldr	r3, [pc, #168]	; (800ca38 <_tx_thread_system_suspend+0x218>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800c994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c996:	2b00      	cmp	r3, #0
 800c998:	d144      	bne.n	800ca24 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c99a:	4b2c      	ldr	r3, [pc, #176]	; (800ca4c <_tx_thread_system_suspend+0x22c>)
 800c99c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9a0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c9a2:	f3ef 8305 	mrs	r3, IPSR
 800c9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10c      	bne.n	800c9c8 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c9b2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800c9b6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c9b8:	b662      	cpsie	i
}
 800c9ba:	bf00      	nop
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	f383 8810 	msr	PRIMASK, r3
}
 800c9c6:	bf00      	nop
}
 800c9c8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800c9ca:	e02b      	b.n	800ca24 <_tx_thread_system_suspend+0x204>
 800c9cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9ce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	f383 8810 	msr	PRIMASK, r3
}
 800c9d6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c9d8:	4b1b      	ldr	r3, [pc, #108]	; (800ca48 <_tx_thread_system_suspend+0x228>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d022      	beq.n	800ca28 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c9e2:	4b15      	ldr	r3, [pc, #84]	; (800ca38 <_tx_thread_system_suspend+0x218>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800c9e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d11c      	bne.n	800ca28 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c9ee:	4b17      	ldr	r3, [pc, #92]	; (800ca4c <_tx_thread_system_suspend+0x22c>)
 800c9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c9f6:	f3ef 8305 	mrs	r3, IPSR
 800c9fa:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c9fc:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10c      	bne.n	800ca1c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca02:	f3ef 8310 	mrs	r3, PRIMASK
 800ca06:	617b      	str	r3, [r7, #20]
    return(posture);
 800ca08:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800ca0a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800ca0c:	b662      	cpsie	i
}
 800ca0e:	bf00      	nop
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f383 8810 	msr	PRIMASK, r3
}
 800ca1a:	bf00      	nop
}
 800ca1c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800ca1e:	e003      	b.n	800ca28 <_tx_thread_system_suspend+0x208>
                return;
 800ca20:	bf00      	nop
 800ca22:	e002      	b.n	800ca2a <_tx_thread_system_suspend+0x20a>
            return;
 800ca24:	bf00      	nop
 800ca26:	e000      	b.n	800ca2a <_tx_thread_system_suspend+0x20a>
    return;
 800ca28:	bf00      	nop
}
 800ca2a:	3778      	adds	r7, #120	; 0x78
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	2004cdb0 	.word	0x2004cdb0
 800ca34:	2004d3b4 	.word	0x2004d3b4
 800ca38:	2004ce48 	.word	0x2004ce48
 800ca3c:	2004cdc8 	.word	0x2004cdc8
 800ca40:	2004cdc0 	.word	0x2004cdc0
 800ca44:	2004cdc4 	.word	0x2004cdc4
 800ca48:	2004cdb4 	.word	0x2004cdb4
 800ca4c:	e000ed04 	.word	0xe000ed04

0800ca50 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b087      	sub	sp, #28
 800ca54:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ca56:	4b21      	ldr	r3, [pc, #132]	; (800cadc <_tx_thread_time_slice+0x8c>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ca60:	60fb      	str	r3, [r7, #12]
    return(posture);
 800ca62:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800ca64:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca66:	b672      	cpsid	i
    return(int_posture);
 800ca68:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800ca6a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800ca6c:	4b1c      	ldr	r3, [pc, #112]	; (800cae0 <_tx_thread_time_slice+0x90>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d024      	beq.n	800cac2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d120      	bne.n	800cac2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	69da      	ldr	r2, [r3, #28]
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	699b      	ldr	r3, [r3, #24]
 800ca8c:	4a15      	ldr	r2, [pc, #84]	; (800cae4 <_tx_thread_time_slice+0x94>)
 800ca8e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	697a      	ldr	r2, [r7, #20]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d013      	beq.n	800cac2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d10d      	bne.n	800cac2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	6a12      	ldr	r2, [r2, #32]
 800caae:	490e      	ldr	r1, [pc, #56]	; (800cae8 <_tx_thread_time_slice+0x98>)
 800cab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800cab4:	4b0d      	ldr	r3, [pc, #52]	; (800caec <_tx_thread_time_slice+0x9c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a0b      	ldr	r2, [pc, #44]	; (800cae8 <_tx_thread_time_slice+0x98>)
 800caba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cabe:	4a0c      	ldr	r2, [pc, #48]	; (800caf0 <_tx_thread_time_slice+0xa0>)
 800cac0:	6013      	str	r3, [r2, #0]
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f383 8810 	msr	PRIMASK, r3
}
 800cacc:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800cace:	bf00      	nop
 800cad0:	371c      	adds	r7, #28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	2004cdb0 	.word	0x2004cdb0
 800cae0:	2004ce58 	.word	0x2004ce58
 800cae4:	2004d3b4 	.word	0x2004d3b4
 800cae8:	2004cdc8 	.word	0x2004cdc8
 800caec:	2004cdc4 	.word	0x2004cdc4
 800caf0:	2004cdb4 	.word	0x2004cdb4

0800caf4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b08a      	sub	sp, #40	; 0x28
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb00:	f3ef 8310 	mrs	r3, PRIMASK
 800cb04:	617b      	str	r3, [r7, #20]
    return(posture);
 800cb06:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800cb08:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb0a:	b672      	cpsid	i
    return(int_posture);
 800cb0c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800cb0e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb14:	2b04      	cmp	r3, #4
 800cb16:	d10e      	bne.n	800cb36 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800cb18:	4b13      	ldr	r3, [pc, #76]	; (800cb68 <_tx_thread_timeout+0x74>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	4a12      	ldr	r2, [pc, #72]	; (800cb68 <_tx_thread_timeout+0x74>)
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	6a3b      	ldr	r3, [r7, #32]
 800cb24:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f383 8810 	msr	PRIMASK, r3
}
 800cb2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800cb2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb30:	f7ff fd76 	bl	800c620 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800cb34:	e013      	b.n	800cb5e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb3a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cb42:	61bb      	str	r3, [r7, #24]
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	f383 8810 	msr	PRIMASK, r3
}
 800cb4e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d003      	beq.n	800cb5e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	69b9      	ldr	r1, [r7, #24]
 800cb5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb5c:	4798      	blx	r3
}
 800cb5e:	bf00      	nop
 800cb60:	3728      	adds	r7, #40	; 0x28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	2004ce48 	.word	0x2004ce48

0800cb6c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb72:	f3ef 8310 	mrs	r3, PRIMASK
 800cb76:	607b      	str	r3, [r7, #4]
    return(posture);
 800cb78:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800cb7a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb7c:	b672      	cpsid	i
    return(int_posture);
 800cb7e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800cb80:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800cb82:	4b09      	ldr	r3, [pc, #36]	; (800cba8 <_tx_timer_expiration_process+0x3c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	3301      	adds	r3, #1
 800cb88:	4a07      	ldr	r2, [pc, #28]	; (800cba8 <_tx_timer_expiration_process+0x3c>)
 800cb8a:	6013      	str	r3, [r2, #0]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	f383 8810 	msr	PRIMASK, r3
}
 800cb96:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800cb98:	4804      	ldr	r0, [pc, #16]	; (800cbac <_tx_timer_expiration_process+0x40>)
 800cb9a:	f7ff fd41 	bl	800c620 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800cb9e:	bf00      	nop
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	2004ce48 	.word	0x2004ce48
 800cbac:	2004cef8 	.word	0x2004cef8

0800cbb0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800cbb0:	b590      	push	{r4, r7, lr}
 800cbb2:	b089      	sub	sp, #36	; 0x24
 800cbb4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800cbb6:	4b28      	ldr	r3, [pc, #160]	; (800cc58 <_tx_timer_initialize+0xa8>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800cbbc:	4b27      	ldr	r3, [pc, #156]	; (800cc5c <_tx_timer_initialize+0xac>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800cbc2:	4b27      	ldr	r3, [pc, #156]	; (800cc60 <_tx_timer_initialize+0xb0>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800cbc8:	4b26      	ldr	r3, [pc, #152]	; (800cc64 <_tx_timer_initialize+0xb4>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800cbce:	4b26      	ldr	r3, [pc, #152]	; (800cc68 <_tx_timer_initialize+0xb8>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800cbd4:	2280      	movs	r2, #128	; 0x80
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	4824      	ldr	r0, [pc, #144]	; (800cc6c <_tx_timer_initialize+0xbc>)
 800cbda:	f019 fca2 	bl	8026522 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800cbde:	4b24      	ldr	r3, [pc, #144]	; (800cc70 <_tx_timer_initialize+0xc0>)
 800cbe0:	4a22      	ldr	r2, [pc, #136]	; (800cc6c <_tx_timer_initialize+0xbc>)
 800cbe2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800cbe4:	4b23      	ldr	r3, [pc, #140]	; (800cc74 <_tx_timer_initialize+0xc4>)
 800cbe6:	4a21      	ldr	r2, [pc, #132]	; (800cc6c <_tx_timer_initialize+0xbc>)
 800cbe8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800cbea:	4b23      	ldr	r3, [pc, #140]	; (800cc78 <_tx_timer_initialize+0xc8>)
 800cbec:	4a23      	ldr	r2, [pc, #140]	; (800cc7c <_tx_timer_initialize+0xcc>)
 800cbee:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800cbf0:	4b21      	ldr	r3, [pc, #132]	; (800cc78 <_tx_timer_initialize+0xc8>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	4a20      	ldr	r2, [pc, #128]	; (800cc78 <_tx_timer_initialize+0xc8>)
 800cbf8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800cbfa:	4b21      	ldr	r3, [pc, #132]	; (800cc80 <_tx_timer_initialize+0xd0>)
 800cbfc:	4a21      	ldr	r2, [pc, #132]	; (800cc84 <_tx_timer_initialize+0xd4>)
 800cbfe:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800cc00:	4b21      	ldr	r3, [pc, #132]	; (800cc88 <_tx_timer_initialize+0xd8>)
 800cc02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc06:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800cc08:	4b20      	ldr	r3, [pc, #128]	; (800cc8c <_tx_timer_initialize+0xdc>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800cc0e:	4b1c      	ldr	r3, [pc, #112]	; (800cc80 <_tx_timer_initialize+0xd0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4a1d      	ldr	r2, [pc, #116]	; (800cc88 <_tx_timer_initialize+0xd8>)
 800cc14:	6812      	ldr	r2, [r2, #0]
 800cc16:	491d      	ldr	r1, [pc, #116]	; (800cc8c <_tx_timer_initialize+0xdc>)
 800cc18:	6809      	ldr	r1, [r1, #0]
 800cc1a:	481c      	ldr	r0, [pc, #112]	; (800cc8c <_tx_timer_initialize+0xdc>)
 800cc1c:	6800      	ldr	r0, [r0, #0]
 800cc1e:	2400      	movs	r4, #0
 800cc20:	9405      	str	r4, [sp, #20]
 800cc22:	2400      	movs	r4, #0
 800cc24:	9404      	str	r4, [sp, #16]
 800cc26:	9003      	str	r0, [sp, #12]
 800cc28:	9102      	str	r1, [sp, #8]
 800cc2a:	9201      	str	r2, [sp, #4]
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	4b18      	ldr	r3, [pc, #96]	; (800cc90 <_tx_timer_initialize+0xe0>)
 800cc30:	4a18      	ldr	r2, [pc, #96]	; (800cc94 <_tx_timer_initialize+0xe4>)
 800cc32:	4919      	ldr	r1, [pc, #100]	; (800cc98 <_tx_timer_initialize+0xe8>)
 800cc34:	4819      	ldr	r0, [pc, #100]	; (800cc9c <_tx_timer_initialize+0xec>)
 800cc36:	f7ff fb3b 	bl	800c2b0 <_tx_thread_create>
 800cc3a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1e5      	bne.n	800cc0e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800cc42:	4b17      	ldr	r3, [pc, #92]	; (800cca0 <_tx_timer_initialize+0xf0>)
 800cc44:	2200      	movs	r2, #0
 800cc46:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800cc48:	4b16      	ldr	r3, [pc, #88]	; (800cca4 <_tx_timer_initialize+0xf4>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800cc4e:	bf00      	nop
 800cc50:	370c      	adds	r7, #12
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd90      	pop	{r4, r7, pc}
 800cc56:	bf00      	nop
 800cc58:	2004ce54 	.word	0x2004ce54
 800cc5c:	2004d3b4 	.word	0x2004d3b4
 800cc60:	2004ce58 	.word	0x2004ce58
 800cc64:	2004cee8 	.word	0x2004cee8
 800cc68:	2004cef4 	.word	0x2004cef4
 800cc6c:	2004ce5c 	.word	0x2004ce5c
 800cc70:	2004cedc 	.word	0x2004cedc
 800cc74:	2004cee4 	.word	0x2004cee4
 800cc78:	2004cee0 	.word	0x2004cee0
 800cc7c:	2004ced8 	.word	0x2004ced8
 800cc80:	2004cfa8 	.word	0x2004cfa8
 800cc84:	2004cfb4 	.word	0x2004cfb4
 800cc88:	2004cfac 	.word	0x2004cfac
 800cc8c:	2004cfb0 	.word	0x2004cfb0
 800cc90:	4154494d 	.word	0x4154494d
 800cc94:	0800cddd 	.word	0x0800cddd
 800cc98:	080275d4 	.word	0x080275d4
 800cc9c:	2004cef8 	.word	0x2004cef8
 800cca0:	2004ceec 	.word	0x2004ceec
 800cca4:	2004cef0 	.word	0x2004cef0

0800cca8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b089      	sub	sp, #36	; 0x24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d04a      	beq.n	800cd52 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc2:	d046      	beq.n	800cd52 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d142      	bne.n	800cd52 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	2b20      	cmp	r3, #32
 800ccd0:	d902      	bls.n	800ccd8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800ccd2:	231f      	movs	r3, #31
 800ccd4:	61bb      	str	r3, [r7, #24]
 800ccd6:	e002      	b.n	800ccde <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800ccde:	4b20      	ldr	r3, [pc, #128]	; (800cd60 <_tx_timer_system_activate+0xb8>)
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4413      	add	r3, r2
 800cce8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800ccea:	4b1e      	ldr	r3, [pc, #120]	; (800cd64 <_tx_timer_system_activate+0xbc>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	69fa      	ldr	r2, [r7, #28]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d30b      	bcc.n	800cd0c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800ccf4:	4b1b      	ldr	r3, [pc, #108]	; (800cd64 <_tx_timer_system_activate+0xbc>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	69fa      	ldr	r2, [r7, #28]
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	109b      	asrs	r3, r3, #2
 800ccfe:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800cd00:	4b19      	ldr	r3, [pc, #100]	; (800cd68 <_tx_timer_system_activate+0xc0>)
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4413      	add	r3, r2
 800cd0a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d109      	bne.n	800cd28 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	e011      	b.n	800cd4c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	695b      	ldr	r3, [r3, #20]
 800cd32:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	69fa      	ldr	r2, [r7, #28]
 800cd50:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800cd52:	bf00      	nop
 800cd54:	3724      	adds	r7, #36	; 0x24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	2004cee4 	.word	0x2004cee4
 800cd64:	2004cee0 	.word	0x2004cee0
 800cd68:	2004cedc 	.word	0x2004cedc

0800cd6c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b087      	sub	sp, #28
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d026      	beq.n	800cdce <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d108      	bne.n	800cda0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d117      	bne.n	800cdc8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]
 800cd9e:	e013      	b.n	800cdc8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	695b      	ldr	r3, [r3, #20]
 800cda4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d105      	bne.n	800cdc8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	697a      	ldr	r2, [r7, #20]
 800cdc0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	693a      	ldr	r2, [r7, #16]
 800cdc6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	619a      	str	r2, [r3, #24]
    }
}
 800cdce:	bf00      	nop
 800cdd0:	371c      	adds	r7, #28
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
	...

0800cddc <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b098      	sub	sp, #96	; 0x60
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800cde4:	2300      	movs	r3, #0
 800cde6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4a73      	ldr	r2, [pc, #460]	; (800cfb8 <_tx_timer_thread_entry+0x1dc>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	f040 80de 	bne.w	800cfae <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdf2:	f3ef 8310 	mrs	r3, PRIMASK
 800cdf6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800cdf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800cdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800cdfc:	b672      	cpsid	i
    return(int_posture);
 800cdfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800ce00:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800ce02:	4b6e      	ldr	r3, [pc, #440]	; (800cfbc <_tx_timer_thread_entry+0x1e0>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d003      	beq.n	800ce18 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f107 020c 	add.w	r2, r7, #12
 800ce16:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800ce18:	4b68      	ldr	r3, [pc, #416]	; (800cfbc <_tx_timer_thread_entry+0x1e0>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800ce20:	4b66      	ldr	r3, [pc, #408]	; (800cfbc <_tx_timer_thread_entry+0x1e0>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3304      	adds	r3, #4
 800ce26:	4a65      	ldr	r2, [pc, #404]	; (800cfbc <_tx_timer_thread_entry+0x1e0>)
 800ce28:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800ce2a:	4b64      	ldr	r3, [pc, #400]	; (800cfbc <_tx_timer_thread_entry+0x1e0>)
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	4b64      	ldr	r3, [pc, #400]	; (800cfc0 <_tx_timer_thread_entry+0x1e4>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d103      	bne.n	800ce3e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800ce36:	4b63      	ldr	r3, [pc, #396]	; (800cfc4 <_tx_timer_thread_entry+0x1e8>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a60      	ldr	r2, [pc, #384]	; (800cfbc <_tx_timer_thread_entry+0x1e0>)
 800ce3c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800ce3e:	4b62      	ldr	r3, [pc, #392]	; (800cfc8 <_tx_timer_thread_entry+0x1ec>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce46:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4a:	f383 8810 	msr	PRIMASK, r3
}
 800ce4e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce50:	f3ef 8310 	mrs	r3, PRIMASK
 800ce54:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800ce58:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce5a:	b672      	cpsid	i
    return(int_posture);
 800ce5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800ce5e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800ce60:	e07f      	b.n	800cf62 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800ce70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ce72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d102      	bne.n	800ce7e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	60fb      	str	r3, [r7, #12]
 800ce7c:	e00e      	b.n	800ce9c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800ce7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ce84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce88:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ce8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce8e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800ce90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce92:	f107 020c 	add.w	r2, r7, #12
 800ce96:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800ce98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce9a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ce9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2b20      	cmp	r3, #32
 800cea2:	d911      	bls.n	800cec8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800cea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800ceac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceae:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ceb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceb6:	f107 0208 	add.w	r2, r7, #8
 800ceba:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800cebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cebe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cec0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800cec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cec4:	60bb      	str	r3, [r7, #8]
 800cec6:	e01a      	b.n	800cefe <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800cec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceca:	689b      	ldr	r3, [r3, #8]
 800cecc:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800cece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ced4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceda:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800cedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d009      	beq.n	800cef8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800cee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cee6:	f107 0208 	add.w	r2, r7, #8
 800ceea:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800ceec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cef0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800cef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cef4:	60bb      	str	r3, [r7, #8]
 800cef6:	e002      	b.n	800cefe <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800cef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cefa:	2200      	movs	r2, #0
 800cefc:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800cefe:	4a33      	ldr	r2, [pc, #204]	; (800cfcc <_tx_timer_thread_entry+0x1f0>)
 800cf00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf02:	6013      	str	r3, [r2, #0]
 800cf04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf06:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	f383 8810 	msr	PRIMASK, r3
}
 800cf0e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800cf10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d002      	beq.n	800cf1c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800cf16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cf1a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf1c:	f3ef 8310 	mrs	r3, PRIMASK
 800cf20:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800cf24:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf26:	b672      	cpsid	i
    return(int_posture);
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800cf2a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800cf2c:	4b27      	ldr	r3, [pc, #156]	; (800cfcc <_tx_timer_thread_entry+0x1f0>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d105      	bne.n	800cf46 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800cf3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800cf40:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cf42:	f7ff feb1 	bl	800cca8 <_tx_timer_system_activate>
 800cf46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf48:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	f383 8810 	msr	PRIMASK, r3
}
 800cf50:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf52:	f3ef 8310 	mrs	r3, PRIMASK
 800cf56:	623b      	str	r3, [r7, #32]
    return(posture);
 800cf58:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cf5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf5c:	b672      	cpsid	i
    return(int_posture);
 800cf5e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800cf60:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f47f af7c 	bne.w	800ce62 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800cf6a:	4b17      	ldr	r3, [pc, #92]	; (800cfc8 <_tx_timer_thread_entry+0x1ec>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d116      	bne.n	800cfa0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800cf72:	4b17      	ldr	r3, [pc, #92]	; (800cfd0 <_tx_timer_thread_entry+0x1f4>)
 800cf74:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cf76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf78:	2203      	movs	r2, #3
 800cf7a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cf7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf7e:	2201      	movs	r2, #1
 800cf80:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800cf82:	4b14      	ldr	r3, [pc, #80]	; (800cfd4 <_tx_timer_thread_entry+0x1f8>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	3301      	adds	r3, #1
 800cf88:	4a12      	ldr	r2, [pc, #72]	; (800cfd4 <_tx_timer_thread_entry+0x1f8>)
 800cf8a:	6013      	str	r3, [r2, #0]
 800cf8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf8e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	f383 8810 	msr	PRIMASK, r3
}
 800cf96:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800cf98:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cf9a:	f7ff fc41 	bl	800c820 <_tx_thread_system_suspend>
 800cf9e:	e728      	b.n	800cdf2 <_tx_timer_thread_entry+0x16>
 800cfa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfa2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	f383 8810 	msr	PRIMASK, r3
}
 800cfaa:	bf00      	nop
            TX_DISABLE
 800cfac:	e721      	b.n	800cdf2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800cfae:	bf00      	nop
 800cfb0:	3760      	adds	r7, #96	; 0x60
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	4154494d 	.word	0x4154494d
 800cfbc:	2004cee4 	.word	0x2004cee4
 800cfc0:	2004cee0 	.word	0x2004cee0
 800cfc4:	2004cedc 	.word	0x2004cedc
 800cfc8:	2004cee8 	.word	0x2004cee8
 800cfcc:	2004cef4 	.word	0x2004cef4
 800cfd0:	2004cef8 	.word	0x2004cef8
 800cfd4:	2004ce48 	.word	0x2004ce48

0800cfd8 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08a      	sub	sp, #40	; 0x28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d102      	bne.n	800cff6 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cff0:	2302      	movs	r3, #2
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
 800cff4:	e029      	b.n	800d04a <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a2d      	ldr	r2, [pc, #180]	; (800d0b0 <_txe_byte_allocate+0xd8>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d002      	beq.n	800d006 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d000:	2302      	movs	r3, #2
 800d002:	627b      	str	r3, [r7, #36]	; 0x24
 800d004:	e021      	b.n	800d04a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d102      	bne.n	800d012 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800d00c:	2303      	movs	r3, #3
 800d00e:	627b      	str	r3, [r7, #36]	; 0x24
 800d010:	e01b      	b.n	800d04a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d102      	bne.n	800d01e <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800d018:	2305      	movs	r3, #5
 800d01a:	627b      	str	r3, [r7, #36]	; 0x24
 800d01c:	e015      	b.n	800d04a <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	69db      	ldr	r3, [r3, #28]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	429a      	cmp	r2, r3
 800d026:	d902      	bls.n	800d02e <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800d028:	2305      	movs	r3, #5
 800d02a:	627b      	str	r3, [r7, #36]	; 0x24
 800d02c:	e00d      	b.n	800d04a <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00a      	beq.n	800d04a <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d034:	f3ef 8305 	mrs	r3, IPSR
 800d038:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d03a:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d03c:	4b1d      	ldr	r3, [pc, #116]	; (800d0b4 <_txe_byte_allocate+0xdc>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4313      	orrs	r3, r2
 800d042:	2b00      	cmp	r3, #0
 800d044:	d001      	beq.n	800d04a <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d046:	2304      	movs	r3, #4
 800d048:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d108      	bne.n	800d062 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d050:	4b19      	ldr	r3, [pc, #100]	; (800d0b8 <_txe_byte_allocate+0xe0>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	4a18      	ldr	r2, [pc, #96]	; (800d0bc <_txe_byte_allocate+0xe4>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d101      	bne.n	800d062 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d05e:	2313      	movs	r3, #19
 800d060:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d064:	2b00      	cmp	r3, #0
 800d066:	d114      	bne.n	800d092 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d068:	f3ef 8305 	mrs	r3, IPSR
 800d06c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d06e:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d070:	4b10      	ldr	r3, [pc, #64]	; (800d0b4 <_txe_byte_allocate+0xdc>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4313      	orrs	r3, r2
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00b      	beq.n	800d092 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d07a:	f3ef 8305 	mrs	r3, IPSR
 800d07e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d080:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d082:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <_txe_byte_allocate+0xdc>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4313      	orrs	r3, r2
 800d088:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d08c:	d201      	bcs.n	800d092 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d08e:	2313      	movs	r3, #19
 800d090:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d094:	2b00      	cmp	r3, #0
 800d096:	d106      	bne.n	800d0a6 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	68b9      	ldr	r1, [r7, #8]
 800d09e:	68f8      	ldr	r0, [r7, #12]
 800d0a0:	f7fe f80e 	bl	800b0c0 <_tx_byte_allocate>
 800d0a4:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3728      	adds	r7, #40	; 0x28
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	42595445 	.word	0x42595445
 800d0b4:	20025814 	.word	0x20025814
 800d0b8:	2004cdb0 	.word	0x2004cdb0
 800d0bc:	2004cef8 	.word	0x2004cef8

0800d0c0 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b092      	sub	sp, #72	; 0x48
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
 800d0cc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d102      	bne.n	800d0de <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d0d8:	2302      	movs	r3, #2
 800d0da:	647b      	str	r3, [r7, #68]	; 0x44
 800d0dc:	e075      	b.n	800d1ca <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800d0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0e0:	2b34      	cmp	r3, #52	; 0x34
 800d0e2:	d002      	beq.n	800d0ea <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d0e4:	2302      	movs	r3, #2
 800d0e6:	647b      	str	r3, [r7, #68]	; 0x44
 800d0e8:	e06f      	b.n	800d1ca <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d0f2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0f4:	b672      	cpsid	i
    return(int_posture);
 800d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d0f8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d0fa:	4b3b      	ldr	r3, [pc, #236]	; (800d1e8 <_txe_byte_pool_create+0x128>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3301      	adds	r3, #1
 800d100:	4a39      	ldr	r2, [pc, #228]	; (800d1e8 <_txe_byte_pool_create+0x128>)
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d106:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10a:	f383 8810 	msr	PRIMASK, r3
}
 800d10e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800d110:	4b36      	ldr	r3, [pc, #216]	; (800d1ec <_txe_byte_pool_create+0x12c>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800d116:	2300      	movs	r3, #0
 800d118:	643b      	str	r3, [r7, #64]	; 0x40
 800d11a:	e009      	b.n	800d130 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d120:	429a      	cmp	r2, r3
 800d122:	d00b      	beq.n	800d13c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800d124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d128:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800d12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d12c:	3301      	adds	r3, #1
 800d12e:	643b      	str	r3, [r7, #64]	; 0x40
 800d130:	4b2f      	ldr	r3, [pc, #188]	; (800d1f0 <_txe_byte_pool_create+0x130>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d136:	429a      	cmp	r2, r3
 800d138:	d3f0      	bcc.n	800d11c <_txe_byte_pool_create+0x5c>
 800d13a:	e000      	b.n	800d13e <_txe_byte_pool_create+0x7e>
                break;
 800d13c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d13e:	f3ef 8310 	mrs	r3, PRIMASK
 800d142:	623b      	str	r3, [r7, #32]
    return(posture);
 800d144:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d146:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d148:	b672      	cpsid	i
    return(int_posture);
 800d14a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d14c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d14e:	4b26      	ldr	r3, [pc, #152]	; (800d1e8 <_txe_byte_pool_create+0x128>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3b01      	subs	r3, #1
 800d154:	4a24      	ldr	r2, [pc, #144]	; (800d1e8 <_txe_byte_pool_create+0x128>)
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15e:	f383 8810 	msr	PRIMASK, r3
}
 800d162:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d164:	f7ff fa22 	bl	800c5ac <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d102      	bne.n	800d176 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800d170:	2302      	movs	r3, #2
 800d172:	647b      	str	r3, [r7, #68]	; 0x44
 800d174:	e029      	b.n	800d1ca <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d102      	bne.n	800d182 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800d17c:	2303      	movs	r3, #3
 800d17e:	647b      	str	r3, [r7, #68]	; 0x44
 800d180:	e023      	b.n	800d1ca <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b63      	cmp	r3, #99	; 0x63
 800d186:	d802      	bhi.n	800d18e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800d188:	2305      	movs	r3, #5
 800d18a:	647b      	str	r3, [r7, #68]	; 0x44
 800d18c:	e01d      	b.n	800d1ca <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d18e:	4b19      	ldr	r3, [pc, #100]	; (800d1f4 <_txe_byte_pool_create+0x134>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800d194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d196:	4a18      	ldr	r2, [pc, #96]	; (800d1f8 <_txe_byte_pool_create+0x138>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d101      	bne.n	800d1a0 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d19c:	2313      	movs	r3, #19
 800d19e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1a0:	f3ef 8305 	mrs	r3, IPSR
 800d1a4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d1a6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d1a8:	4b14      	ldr	r3, [pc, #80]	; (800d1fc <_txe_byte_pool_create+0x13c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00b      	beq.n	800d1ca <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1b2:	f3ef 8305 	mrs	r3, IPSR
 800d1b6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d1b8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d1ba:	4b10      	ldr	r3, [pc, #64]	; (800d1fc <_txe_byte_pool_create+0x13c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d1c4:	d201      	bcs.n	800d1ca <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d1c6:	2313      	movs	r3, #19
 800d1c8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d1ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d106      	bne.n	800d1de <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	68b9      	ldr	r1, [r7, #8]
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f7fe f8b4 	bl	800b344 <_tx_byte_pool_create>
 800d1dc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800d1de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3748      	adds	r7, #72	; 0x48
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	2004ce48 	.word	0x2004ce48
 800d1ec:	2004cda0 	.word	0x2004cda0
 800d1f0:	2004cda4 	.word	0x2004cda4
 800d1f4:	2004cdb0 	.word	0x2004cdb0
 800d1f8:	2004cef8 	.word	0x2004cef8
 800d1fc:	20025814 	.word	0x20025814

0800d200 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b094      	sub	sp, #80	; 0x50
 800d204:	af02      	add	r7, sp, #8
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	607a      	str	r2, [r7, #4]
 800d20c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d20e:	2300      	movs	r3, #0
 800d210:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d102      	bne.n	800d21e <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d218:	2309      	movs	r3, #9
 800d21a:	647b      	str	r3, [r7, #68]	; 0x44
 800d21c:	e083      	b.n	800d326 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800d21e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d220:	2b38      	cmp	r3, #56	; 0x38
 800d222:	d002      	beq.n	800d22a <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d224:	2309      	movs	r3, #9
 800d226:	647b      	str	r3, [r7, #68]	; 0x44
 800d228:	e07d      	b.n	800d326 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d22a:	f3ef 8310 	mrs	r3, PRIMASK
 800d22e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d232:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d234:	b672      	cpsid	i
    return(int_posture);
 800d236:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d238:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d23a:	4b43      	ldr	r3, [pc, #268]	; (800d348 <_txe_queue_create+0x148>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	3301      	adds	r3, #1
 800d240:	4a41      	ldr	r2, [pc, #260]	; (800d348 <_txe_queue_create+0x148>)
 800d242:	6013      	str	r3, [r2, #0]
 800d244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d246:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24a:	f383 8810 	msr	PRIMASK, r3
}
 800d24e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800d250:	4b3e      	ldr	r3, [pc, #248]	; (800d34c <_txe_queue_create+0x14c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800d256:	2300      	movs	r3, #0
 800d258:	643b      	str	r3, [r7, #64]	; 0x40
 800d25a:	e009      	b.n	800d270 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d260:	429a      	cmp	r2, r3
 800d262:	d00b      	beq.n	800d27c <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800d264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d268:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800d26a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d26c:	3301      	adds	r3, #1
 800d26e:	643b      	str	r3, [r7, #64]	; 0x40
 800d270:	4b37      	ldr	r3, [pc, #220]	; (800d350 <_txe_queue_create+0x150>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d276:	429a      	cmp	r2, r3
 800d278:	d3f0      	bcc.n	800d25c <_txe_queue_create+0x5c>
 800d27a:	e000      	b.n	800d27e <_txe_queue_create+0x7e>
                break;
 800d27c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d27e:	f3ef 8310 	mrs	r3, PRIMASK
 800d282:	623b      	str	r3, [r7, #32]
    return(posture);
 800d284:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d286:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d288:	b672      	cpsid	i
    return(int_posture);
 800d28a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d28c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d28e:	4b2e      	ldr	r3, [pc, #184]	; (800d348 <_txe_queue_create+0x148>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3b01      	subs	r3, #1
 800d294:	4a2c      	ldr	r2, [pc, #176]	; (800d348 <_txe_queue_create+0x148>)
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29e:	f383 8810 	msr	PRIMASK, r3
}
 800d2a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d2a4:	f7ff f982 	bl	800c5ac <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d102      	bne.n	800d2b6 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800d2b0:	2309      	movs	r3, #9
 800d2b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d2b4:	e037      	b.n	800d326 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d102      	bne.n	800d2c2 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	647b      	str	r3, [r7, #68]	; 0x44
 800d2c0:	e031      	b.n	800d326 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d102      	bne.n	800d2ce <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800d2c8:	2305      	movs	r3, #5
 800d2ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d2cc:	e02b      	b.n	800d326 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b10      	cmp	r3, #16
 800d2d2:	d902      	bls.n	800d2da <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800d2d4:	2305      	movs	r3, #5
 800d2d6:	647b      	str	r3, [r7, #68]	; 0x44
 800d2d8:	e025      	b.n	800d326 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800d2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2dc:	089b      	lsrs	r3, r3, #2
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d902      	bls.n	800d2ea <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800d2e4:	2305      	movs	r3, #5
 800d2e6:	647b      	str	r3, [r7, #68]	; 0x44
 800d2e8:	e01d      	b.n	800d326 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d2ea:	4b1a      	ldr	r3, [pc, #104]	; (800d354 <_txe_queue_create+0x154>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800d2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f2:	4a19      	ldr	r2, [pc, #100]	; (800d358 <_txe_queue_create+0x158>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d101      	bne.n	800d2fc <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d2f8:	2313      	movs	r3, #19
 800d2fa:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2fc:	f3ef 8305 	mrs	r3, IPSR
 800d300:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d302:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d304:	4b15      	ldr	r3, [pc, #84]	; (800d35c <_txe_queue_create+0x15c>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4313      	orrs	r3, r2
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00b      	beq.n	800d326 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d30e:	f3ef 8305 	mrs	r3, IPSR
 800d312:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d314:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d316:	4b11      	ldr	r3, [pc, #68]	; (800d35c <_txe_queue_create+0x15c>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d320:	d201      	bcs.n	800d326 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d322:	2313      	movs	r3, #19
 800d324:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d108      	bne.n	800d33e <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800d32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	68b9      	ldr	r1, [r7, #8]
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f7fe fa9a 	bl	800b870 <_tx_queue_create>
 800d33c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800d33e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d340:	4618      	mov	r0, r3
 800d342:	3748      	adds	r7, #72	; 0x48
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	2004ce48 	.word	0x2004ce48
 800d34c:	2004cd80 	.word	0x2004cd80
 800d350:	2004cd84 	.word	0x2004cd84
 800d354:	2004cdb0 	.word	0x2004cdb0
 800d358:	2004cef8 	.word	0x2004cef8
 800d35c:	20025814 	.word	0x20025814

0800d360 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b088      	sub	sp, #32
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d36c:	2300      	movs	r3, #0
 800d36e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d102      	bne.n	800d37c <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d376:	2309      	movs	r3, #9
 800d378:	61fb      	str	r3, [r7, #28]
 800d37a:	e025      	b.n	800d3c8 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a18      	ldr	r2, [pc, #96]	; (800d3e4 <_txe_queue_receive+0x84>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d002      	beq.n	800d38c <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d386:	2309      	movs	r3, #9
 800d388:	61fb      	str	r3, [r7, #28]
 800d38a:	e01d      	b.n	800d3c8 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d102      	bne.n	800d398 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800d392:	2303      	movs	r3, #3
 800d394:	61fb      	str	r3, [r7, #28]
 800d396:	e017      	b.n	800d3c8 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d014      	beq.n	800d3c8 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d39e:	f3ef 8305 	mrs	r3, IPSR
 800d3a2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d3a4:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d3a6:	4b10      	ldr	r3, [pc, #64]	; (800d3e8 <_txe_queue_receive+0x88>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d3b0:	2304      	movs	r3, #4
 800d3b2:	61fb      	str	r3, [r7, #28]
 800d3b4:	e008      	b.n	800d3c8 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800d3b6:	4b0d      	ldr	r3, [pc, #52]	; (800d3ec <_txe_queue_receive+0x8c>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	4a0c      	ldr	r2, [pc, #48]	; (800d3f0 <_txe_queue_receive+0x90>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d101      	bne.n	800d3c8 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800d3c4:	2304      	movs	r3, #4
 800d3c6:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d105      	bne.n	800d3da <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	68b9      	ldr	r1, [r7, #8]
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f7fe fac0 	bl	800b958 <_tx_queue_receive>
 800d3d8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800d3da:	69fb      	ldr	r3, [r7, #28]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3720      	adds	r7, #32
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	51554555 	.word	0x51554555
 800d3e8:	20025814 	.word	0x20025814
 800d3ec:	2004cdb0 	.word	0x2004cdb0
 800d3f0:	2004cef8 	.word	0x2004cef8

0800d3f4 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b088      	sub	sp, #32
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d400:	2300      	movs	r3, #0
 800d402:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d102      	bne.n	800d410 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d40a:	2309      	movs	r3, #9
 800d40c:	61fb      	str	r3, [r7, #28]
 800d40e:	e025      	b.n	800d45c <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a18      	ldr	r2, [pc, #96]	; (800d478 <_txe_queue_send+0x84>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d002      	beq.n	800d420 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d41a:	2309      	movs	r3, #9
 800d41c:	61fb      	str	r3, [r7, #28]
 800d41e:	e01d      	b.n	800d45c <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d102      	bne.n	800d42c <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800d426:	2303      	movs	r3, #3
 800d428:	61fb      	str	r3, [r7, #28]
 800d42a:	e017      	b.n	800d45c <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d014      	beq.n	800d45c <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d432:	f3ef 8305 	mrs	r3, IPSR
 800d436:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d438:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d43a:	4b10      	ldr	r3, [pc, #64]	; (800d47c <_txe_queue_send+0x88>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4313      	orrs	r3, r2
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d444:	2304      	movs	r3, #4
 800d446:	61fb      	str	r3, [r7, #28]
 800d448:	e008      	b.n	800d45c <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800d44a:	4b0d      	ldr	r3, [pc, #52]	; (800d480 <_txe_queue_send+0x8c>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	4a0c      	ldr	r2, [pc, #48]	; (800d484 <_txe_queue_send+0x90>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d101      	bne.n	800d45c <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800d458:	2304      	movs	r3, #4
 800d45a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d105      	bne.n	800d46e <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	68b9      	ldr	r1, [r7, #8]
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f7fe fc3e 	bl	800bce8 <_tx_queue_send>
 800d46c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800d46e:	69fb      	ldr	r3, [r7, #28]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3720      	adds	r7, #32
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	51554555 	.word	0x51554555
 800d47c:	20025814 	.word	0x20025814
 800d480:	2004cdb0 	.word	0x2004cdb0
 800d484:	2004cef8 	.word	0x2004cef8

0800d488 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b092      	sub	sp, #72	; 0x48
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
 800d494:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d496:	2300      	movs	r3, #0
 800d498:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d102      	bne.n	800d4a6 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d4a0:	230c      	movs	r3, #12
 800d4a2:	647b      	str	r3, [r7, #68]	; 0x44
 800d4a4:	e054      	b.n	800d550 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2b1c      	cmp	r3, #28
 800d4aa:	d002      	beq.n	800d4b2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d4ac:	230c      	movs	r3, #12
 800d4ae:	647b      	str	r3, [r7, #68]	; 0x44
 800d4b0:	e04e      	b.n	800d550 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d4b2:	f3ef 8310 	mrs	r3, PRIMASK
 800d4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d4ba:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d4bc:	b672      	cpsid	i
    return(int_posture);
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d4c0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d4c2:	4b36      	ldr	r3, [pc, #216]	; (800d59c <_txe_semaphore_create+0x114>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	4a34      	ldr	r2, [pc, #208]	; (800d59c <_txe_semaphore_create+0x114>)
 800d4ca:	6013      	str	r3, [r2, #0]
 800d4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ce:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d2:	f383 8810 	msr	PRIMASK, r3
}
 800d4d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800d4d8:	4b31      	ldr	r3, [pc, #196]	; (800d5a0 <_txe_semaphore_create+0x118>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800d4de:	2300      	movs	r3, #0
 800d4e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d4e2:	e009      	b.n	800d4f8 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d00b      	beq.n	800d504 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800d4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ee:	695b      	ldr	r3, [r3, #20]
 800d4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800d4f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	643b      	str	r3, [r7, #64]	; 0x40
 800d4f8:	4b2a      	ldr	r3, [pc, #168]	; (800d5a4 <_txe_semaphore_create+0x11c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d3f0      	bcc.n	800d4e4 <_txe_semaphore_create+0x5c>
 800d502:	e000      	b.n	800d506 <_txe_semaphore_create+0x7e>
                break;
 800d504:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d506:	f3ef 8310 	mrs	r3, PRIMASK
 800d50a:	623b      	str	r3, [r7, #32]
    return(posture);
 800d50c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d50e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d510:	b672      	cpsid	i
    return(int_posture);
 800d512:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d514:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d516:	4b21      	ldr	r3, [pc, #132]	; (800d59c <_txe_semaphore_create+0x114>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	3b01      	subs	r3, #1
 800d51c:	4a1f      	ldr	r2, [pc, #124]	; (800d59c <_txe_semaphore_create+0x114>)
 800d51e:	6013      	str	r3, [r2, #0]
 800d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d522:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	f383 8810 	msr	PRIMASK, r3
}
 800d52a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d52c:	f7ff f83e 	bl	800c5ac <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d534:	429a      	cmp	r2, r3
 800d536:	d102      	bne.n	800d53e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800d538:	230c      	movs	r3, #12
 800d53a:	647b      	str	r3, [r7, #68]	; 0x44
 800d53c:	e008      	b.n	800d550 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d53e:	4b1a      	ldr	r3, [pc, #104]	; (800d5a8 <_txe_semaphore_create+0x120>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800d544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d546:	4a19      	ldr	r2, [pc, #100]	; (800d5ac <_txe_semaphore_create+0x124>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d101      	bne.n	800d550 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d54c:	2313      	movs	r3, #19
 800d54e:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d552:	2b00      	cmp	r3, #0
 800d554:	d114      	bne.n	800d580 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d556:	f3ef 8305 	mrs	r3, IPSR
 800d55a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d55c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d55e:	4b14      	ldr	r3, [pc, #80]	; (800d5b0 <_txe_semaphore_create+0x128>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4313      	orrs	r3, r2
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00b      	beq.n	800d580 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d568:	f3ef 8305 	mrs	r3, IPSR
 800d56c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d56e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d570:	4b0f      	ldr	r3, [pc, #60]	; (800d5b0 <_txe_semaphore_create+0x128>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4313      	orrs	r3, r2
 800d576:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d57a:	d201      	bcs.n	800d580 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d57c:	2313      	movs	r3, #19
 800d57e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d582:	2b00      	cmp	r3, #0
 800d584:	d105      	bne.n	800d592 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	68b9      	ldr	r1, [r7, #8]
 800d58a:	68f8      	ldr	r0, [r7, #12]
 800d58c:	f7fe fd54 	bl	800c038 <_tx_semaphore_create>
 800d590:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800d592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d594:	4618      	mov	r0, r3
 800d596:	3748      	adds	r7, #72	; 0x48
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	2004ce48 	.word	0x2004ce48
 800d5a0:	2004cd78 	.word	0x2004cd78
 800d5a4:	2004cd7c 	.word	0x2004cd7c
 800d5a8:	2004cdb0 	.word	0x2004cdb0
 800d5ac:	2004cef8 	.word	0x2004cef8
 800d5b0:	20025814 	.word	0x20025814

0800d5b4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b086      	sub	sp, #24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d102      	bne.n	800d5ce <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d5c8:	230c      	movs	r3, #12
 800d5ca:	617b      	str	r3, [r7, #20]
 800d5cc:	e01f      	b.n	800d60e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a15      	ldr	r2, [pc, #84]	; (800d628 <_txe_semaphore_get+0x74>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d002      	beq.n	800d5de <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d5d8:	230c      	movs	r3, #12
 800d5da:	617b      	str	r3, [r7, #20]
 800d5dc:	e017      	b.n	800d60e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d014      	beq.n	800d60e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d5e4:	f3ef 8305 	mrs	r3, IPSR
 800d5e8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d5ea:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d5ec:	4b0f      	ldr	r3, [pc, #60]	; (800d62c <_txe_semaphore_get+0x78>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d002      	beq.n	800d5fc <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d5f6:	2304      	movs	r3, #4
 800d5f8:	617b      	str	r3, [r7, #20]
 800d5fa:	e008      	b.n	800d60e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800d5fc:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <_txe_semaphore_get+0x7c>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	4a0b      	ldr	r2, [pc, #44]	; (800d634 <_txe_semaphore_get+0x80>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d101      	bne.n	800d60e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800d60a:	2304      	movs	r3, #4
 800d60c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d104      	bne.n	800d61e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800d614:	6839      	ldr	r1, [r7, #0]
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7fe fd60 	bl	800c0dc <_tx_semaphore_get>
 800d61c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d61e:	697b      	ldr	r3, [r7, #20]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3718      	adds	r7, #24
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	53454d41 	.word	0x53454d41
 800d62c:	20025814 	.word	0x20025814
 800d630:	2004cdb0 	.word	0x2004cdb0
 800d634:	2004cef8 	.word	0x2004cef8

0800d638 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d102      	bne.n	800d64c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d646:	230c      	movs	r3, #12
 800d648:	60fb      	str	r3, [r7, #12]
 800d64a:	e00b      	b.n	800d664 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a07      	ldr	r2, [pc, #28]	; (800d670 <_txe_semaphore_put+0x38>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d002      	beq.n	800d65c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d656:	230c      	movs	r3, #12
 800d658:	60fb      	str	r3, [r7, #12]
 800d65a:	e003      	b.n	800d664 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7fe fdcf 	bl	800c200 <_tx_semaphore_put>
 800d662:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d664:	68fb      	ldr	r3, [r7, #12]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	53454d41 	.word	0x53454d41

0800d674 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b09a      	sub	sp, #104	; 0x68
 800d678:	af06      	add	r7, sp, #24
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	607a      	str	r2, [r7, #4]
 800d680:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d682:	2300      	movs	r3, #0
 800d684:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d68c:	230e      	movs	r3, #14
 800d68e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d690:	e0bb      	b.n	800d80a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800d692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d694:	2bb0      	cmp	r3, #176	; 0xb0
 800d696:	d002      	beq.n	800d69e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d698:	230e      	movs	r3, #14
 800d69a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d69c:	e0b5      	b.n	800d80a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d69e:	f3ef 8310 	mrs	r3, PRIMASK
 800d6a2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d6a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d6a8:	b672      	cpsid	i
    return(int_posture);
 800d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d6ac:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d6ae:	4b64      	ldr	r3, [pc, #400]	; (800d840 <_txe_thread_create+0x1cc>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	4a62      	ldr	r2, [pc, #392]	; (800d840 <_txe_thread_create+0x1cc>)
 800d6b6:	6013      	str	r3, [r2, #0]
 800d6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6be:	f383 8810 	msr	PRIMASK, r3
}
 800d6c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800d6c8:	4b5e      	ldr	r3, [pc, #376]	; (800d844 <_txe_thread_create+0x1d0>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d6ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6d0:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800d6d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6d8:	4413      	add	r3, r2
 800d6da:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6de:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	647b      	str	r3, [r7, #68]	; 0x44
 800d6e4:	e02b      	b.n	800d73e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800d6e6:	68fa      	ldr	r2, [r7, #12]
 800d6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d101      	bne.n	800d6f2 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800d6f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d028      	beq.n	800d74a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800d6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d308      	bcc.n	800d714 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800d702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d708:	429a      	cmp	r2, r3
 800d70a:	d203      	bcs.n	800d714 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d70c:	2300      	movs	r3, #0
 800d70e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d710:	2301      	movs	r3, #1
 800d712:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800d714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d308      	bcc.n	800d730 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800d71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d724:	429a      	cmp	r2, r3
 800d726:	d203      	bcs.n	800d730 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d728:	2300      	movs	r3, #0
 800d72a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d72c:	2301      	movs	r3, #1
 800d72e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800d730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d736:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d73a:	3301      	adds	r3, #1
 800d73c:	647b      	str	r3, [r7, #68]	; 0x44
 800d73e:	4b42      	ldr	r3, [pc, #264]	; (800d848 <_txe_thread_create+0x1d4>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d744:	429a      	cmp	r2, r3
 800d746:	d3ce      	bcc.n	800d6e6 <_txe_thread_create+0x72>
 800d748:	e000      	b.n	800d74c <_txe_thread_create+0xd8>
                break;
 800d74a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d74c:	f3ef 8310 	mrs	r3, PRIMASK
 800d750:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d752:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d754:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d756:	b672      	cpsid	i
    return(int_posture);
 800d758:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d75a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d75c:	4b38      	ldr	r3, [pc, #224]	; (800d840 <_txe_thread_create+0x1cc>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3b01      	subs	r3, #1
 800d762:	4a37      	ldr	r2, [pc, #220]	; (800d840 <_txe_thread_create+0x1cc>)
 800d764:	6013      	str	r3, [r2, #0]
 800d766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d768:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d76a:	6a3b      	ldr	r3, [r7, #32]
 800d76c:	f383 8810 	msr	PRIMASK, r3
}
 800d770:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d772:	f7fe ff1b 	bl	800c5ac <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d102      	bne.n	800d784 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800d77e:	230e      	movs	r3, #14
 800d780:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d782:	e042      	b.n	800d80a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800d784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d786:	2b00      	cmp	r3, #0
 800d788:	d102      	bne.n	800d790 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d78a:	2303      	movs	r3, #3
 800d78c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d78e:	e03c      	b.n	800d80a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d102      	bne.n	800d79c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d796:	2303      	movs	r3, #3
 800d798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d79a:	e036      	b.n	800d80a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800d79c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d79e:	2bc7      	cmp	r3, #199	; 0xc7
 800d7a0:	d802      	bhi.n	800d7a8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800d7a2:	2305      	movs	r3, #5
 800d7a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7a6:	e030      	b.n	800d80a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800d7a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7aa:	2b1f      	cmp	r3, #31
 800d7ac:	d902      	bls.n	800d7b4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800d7ae:	230f      	movs	r3, #15
 800d7b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7b2:	e02a      	b.n	800d80a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800d7b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d7b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d902      	bls.n	800d7c2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800d7bc:	2318      	movs	r3, #24
 800d7be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7c0:	e023      	b.n	800d80a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800d7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d902      	bls.n	800d7ce <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800d7c8:	2310      	movs	r3, #16
 800d7ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7cc:	e01d      	b.n	800d80a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800d7ce:	4b1f      	ldr	r3, [pc, #124]	; (800d84c <_txe_thread_create+0x1d8>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	4a1e      	ldr	r2, [pc, #120]	; (800d850 <_txe_thread_create+0x1dc>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d101      	bne.n	800d7e0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d7dc:	2313      	movs	r3, #19
 800d7de:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7e0:	f3ef 8305 	mrs	r3, IPSR
 800d7e4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d7e6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d7e8:	4b1a      	ldr	r3, [pc, #104]	; (800d854 <_txe_thread_create+0x1e0>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00b      	beq.n	800d80a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7f2:	f3ef 8305 	mrs	r3, IPSR
 800d7f6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d7f8:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d7fa:	4b16      	ldr	r3, [pc, #88]	; (800d854 <_txe_thread_create+0x1e0>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4313      	orrs	r3, r2
 800d800:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d804:	d201      	bcs.n	800d80a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d806:	2313      	movs	r3, #19
 800d808:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d112      	bne.n	800d836 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800d810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d812:	9305      	str	r3, [sp, #20]
 800d814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d816:	9304      	str	r3, [sp, #16]
 800d818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d81a:	9303      	str	r3, [sp, #12]
 800d81c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d81e:	9302      	str	r3, [sp, #8]
 800d820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d822:	9301      	str	r3, [sp, #4]
 800d824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	68b9      	ldr	r1, [r7, #8]
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f7fe fd3e 	bl	800c2b0 <_tx_thread_create>
 800d834:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800d836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3750      	adds	r7, #80	; 0x50
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	2004ce48 	.word	0x2004ce48
 800d844:	2004cdb8 	.word	0x2004cdb8
 800d848:	2004cdbc 	.word	0x2004cdbc
 800d84c:	2004cdb0 	.word	0x2004cdb0
 800d850:	2004cef8 	.word	0x2004cef8
 800d854:	20025814 	.word	0x20025814

0800d858 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800d85c:	f005 fc88 	bl	8013170 <touchgfx_components_init>
  touchgfx_init();
 800d860:	f005 fc5c 	bl	801311c <touchgfx_init>
}
 800d864:	bf00      	nop
 800d866:	bd80      	pop	{r7, pc}

0800d868 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b08c      	sub	sp, #48	; 0x30
 800d86c:	af08      	add	r7, sp, #32
 800d86e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800d870:	2300      	movs	r3, #0
 800d872:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 800d874:	2300      	movs	r3, #0
 800d876:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 800d878:	f107 0108 	add.w	r1, r7, #8
 800d87c:	2300      	movs	r3, #0
 800d87e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f7ff fba8 	bl	800cfd8 <_txe_byte_allocate>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d002      	beq.n	800d894 <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 800d88e:	2302      	movs	r3, #2
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	e019      	b.n	800d8c8 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	22b0      	movs	r2, #176	; 0xb0
 800d898:	9206      	str	r2, [sp, #24]
 800d89a:	2201      	movs	r2, #1
 800d89c:	9205      	str	r2, [sp, #20]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	9204      	str	r2, [sp, #16]
 800d8a2:	2205      	movs	r2, #5
 800d8a4:	9203      	str	r2, [sp, #12]
 800d8a6:	2205      	movs	r2, #5
 800d8a8:	9202      	str	r2, [sp, #8]
 800d8aa:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800d8ae:	9201      	str	r2, [sp, #4]
 800d8b0:	9300      	str	r3, [sp, #0]
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	4a07      	ldr	r2, [pc, #28]	; (800d8d4 <MX_TouchGFX_Init+0x6c>)
 800d8b6:	4908      	ldr	r1, [pc, #32]	; (800d8d8 <MX_TouchGFX_Init+0x70>)
 800d8b8:	4808      	ldr	r0, [pc, #32]	; (800d8dc <MX_TouchGFX_Init+0x74>)
 800d8ba:	f7ff fedb 	bl	800d674 <_txe_thread_create>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 800d8c4:	230e      	movs	r3, #14
 800d8c6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	0800d8e1 	.word	0x0800d8e1
 800d8d8:	080275e8 	.word	0x080275e8
 800d8dc:	2004d3b8 	.word	0x2004d3b8

0800d8e0 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800d8e8:	f005 fc4a 	bl	8013180 <touchgfx_taskEntry>
}
 800d8ec:	bf00      	nop
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
    {
 800d8fc:	4a04      	ldr	r2, [pc, #16]	; (800d910 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	601a      	str	r2, [r3, #0]
    }
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	4618      	mov	r0, r3
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr
 800d910:	08028700 	.word	0x08028700

0800d914 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
    }
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff ffe9 	bl	800d8f4 <_ZN8touchgfx12FontProviderD1Ev>
 800d922:	2104      	movs	r1, #4
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f018 fd45 	bl	80263b4 <_ZdlPvj>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4618      	mov	r0, r3
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	460b      	mov	r3, r1
 800d93e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d940:	887b      	ldrh	r3, [r7, #2]
 800d942:	2b02      	cmp	r3, #2
 800d944:	d010      	beq.n	800d968 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800d946:	2b02      	cmp	r3, #2
 800d948:	dc13      	bgt.n	800d972 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d002      	beq.n	800d954 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d005      	beq.n	800d95e <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800d952:	e00e      	b.n	800d972 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d954:	f003 fd0c 	bl	8011370 <_ZN17TypedTextDatabase8getFontsEv>
 800d958:	4603      	mov	r3, r0
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	e00a      	b.n	800d974 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d95e:	f003 fd07 	bl	8011370 <_ZN17TypedTextDatabase8getFontsEv>
 800d962:	4603      	mov	r3, r0
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	e005      	b.n	800d974 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d968:	f003 fd02 	bl	8011370 <_ZN17TypedTextDatabase8getFontsEv>
 800d96c:	4603      	mov	r3, r0
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	e000      	b.n	800d974 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800d972:	2300      	movs	r3, #0
    }
}
 800d974:	4618      	mov	r0, r3
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	4a05      	ldr	r2, [pc, #20]	; (800d99c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	601a      	str	r2, [r3, #0]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7ff ffb1 	bl	800d8f4 <_ZN8touchgfx12FontProviderD1Ev>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4618      	mov	r0, r3
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	080286ec 	.word	0x080286ec

0800d9a0 <_ZN23ApplicationFontProviderD0Ev>:
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff ffe7 	bl	800d97c <_ZN23ApplicationFontProviderD1Ev>
 800d9ae:	2104      	movs	r1, #4
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f018 fcff 	bl	80263b4 <_ZdlPvj>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
    {
 800d9c8:	4a04      	ldr	r2, [pc, #16]	; (800d9dc <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	601a      	str	r2, [r3, #0]
    }
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr
 800d9dc:	08028b58 	.word	0x08028b58

0800d9e0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
    }
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7ff ffe9 	bl	800d9c0 <_ZN8touchgfx4FontD1Ev>
 800d9ee:	2110      	movs	r1, #16
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f018 fcdf 	bl	80263b4 <_ZdlPvj>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800da00:	b590      	push	{r4, r7, lr}
 800da02:	b087      	sub	sp, #28
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	460b      	mov	r3, r1
 800da0a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800da0c:	887b      	ldrh	r3, [r7, #2]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d101      	bne.n	800da16 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800da12:	2300      	movs	r3, #0
 800da14:	e010      	b.n	800da38 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800da16:	2300      	movs	r3, #0
 800da18:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800da1a:	2300      	movs	r3, #0
 800da1c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	3308      	adds	r3, #8
 800da24:	681c      	ldr	r4, [r3, #0]
 800da26:	f107 030f 	add.w	r3, r7, #15
 800da2a:	f107 0210 	add.w	r2, r7, #16
 800da2e:	8879      	ldrh	r1, [r7, #2]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	47a0      	blx	r4
 800da34:	6178      	str	r0, [r7, #20]
        return glyph;
 800da36:	697b      	ldr	r3, [r7, #20]
    }
 800da38:	4618      	mov	r0, r3
 800da3a:	371c      	adds	r7, #28
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd90      	pop	{r4, r7, pc}

0800da40 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	895b      	ldrh	r3, [r3, #10]
    }
 800da4c:	4618      	mov	r0, r3
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	899b      	ldrh	r3, [r3, #12]
    }
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	889b      	ldrh	r3, [r3, #4]
    }
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	889a      	ldrh	r2, [r3, #4]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	799b      	ldrb	r3, [r3, #6]
 800da98:	b29b      	uxth	r3, r3
 800da9a:	4413      	add	r3, r2
 800da9c:	b29b      	uxth	r3, r3
    }
 800da9e:	4618      	mov	r0, r3
 800daa0:	370c      	adds	r7, #12
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr

0800daaa <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800daaa:	b480      	push	{r7}
 800daac:	b083      	sub	sp, #12
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	79db      	ldrb	r3, [r3, #7]
 800dab6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800daba:	b2db      	uxtb	r3, r3
    }
 800dabc:	4618      	mov	r0, r3
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	79db      	ldrb	r3, [r3, #7]
 800dad4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800dad8:	b2db      	uxtb	r3, r3
    }
 800dada:	4618      	mov	r0, r3
 800dadc:	370c      	adds	r7, #12
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
	...

0800dae8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	4a05      	ldr	r2, [pc, #20]	; (800db08 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	601a      	str	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7ff ff61 	bl	800d9c0 <_ZN8touchgfx4FontD1Ev>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4618      	mov	r0, r3
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	08029704 	.word	0x08029704

0800db0c <_ZN8touchgfx9ConstFontD0Ev>:
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f7ff ffe7 	bl	800dae8 <_ZN8touchgfx9ConstFontD1Ev>
 800db1a:	2118      	movs	r1, #24
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f018 fc49 	bl	80263b4 <_ZdlPvj>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4618      	mov	r0, r3
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	4a05      	ldr	r2, [pc, #20]	; (800db4c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7ff ffd3 	bl	800dae8 <_ZN8touchgfx9ConstFontD1Ev>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4618      	mov	r0, r3
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	08028714 	.word	0x08028714

0800db50 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7ff ffe7 	bl	800db2c <_ZN8touchgfx13GeneratedFontD1Ev>
 800db5e:	2128      	movs	r1, #40	; 0x28
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f018 fc27 	bl	80263b4 <_ZdlPvj>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4618      	mov	r0, r3
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6a1b      	ldr	r3, [r3, #32]
    }
 800db7c:	4618      	mov	r0, r3
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800db94:	4618      	mov	r0, r3
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b08c      	sub	sp, #48	; 0x30
 800dba4:	af08      	add	r7, sp, #32
 800dba6:	60f8      	str	r0, [r7, #12]
 800dba8:	60b9      	str	r1, [r7, #8]
 800dbaa:	4611      	mov	r1, r2
 800dbac:	461a      	mov	r2, r3
 800dbae:	460b      	mov	r3, r1
 800dbb0:	80fb      	strh	r3, [r7, #6]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	88b9      	ldrh	r1, [r7, #4]
 800dbba:	88fa      	ldrh	r2, [r7, #6]
 800dbbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dbbe:	9306      	str	r3, [sp, #24]
 800dbc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dbc2:	9305      	str	r3, [sp, #20]
 800dbc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dbc8:	9304      	str	r3, [sp, #16]
 800dbca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dbce:	9303      	str	r3, [sp, #12]
 800dbd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dbd4:	9302      	str	r3, [sp, #8]
 800dbd6:	7f3b      	ldrb	r3, [r7, #28]
 800dbd8:	9301      	str	r3, [sp, #4]
 800dbda:	7e3b      	ldrb	r3, [r7, #24]
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	460b      	mov	r3, r1
 800dbe0:	68b9      	ldr	r1, [r7, #8]
 800dbe2:	f00a ff23 	bl	8018a2c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800dbe6:	4a0a      	ldr	r2, [pc, #40]	; (800dc10 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	601a      	str	r2, [r3, #0]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbf0:	619a      	str	r2, [r3, #24]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbf6:	61da      	str	r2, [r3, #28]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbfc:	621a      	str	r2, [r3, #32]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc02:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	4618      	mov	r0, r3
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	08028714 	.word	0x08028714

0800dc14 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	699b      	ldr	r3, [r3, #24]
 800dc22:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	889b      	ldrh	r3, [r3, #4]
 800dc28:	0adb      	lsrs	r3, r3, #11
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	4413      	add	r3, r2
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4413      	add	r3, r2
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3714      	adds	r7, #20
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr

0800dc46 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800dc46:	b480      	push	{r7}
 800dc48:	b089      	sub	sp, #36	; 0x24
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	60f8      	str	r0, [r7, #12]
 800dc4e:	460b      	mov	r3, r1
 800dc50:	607a      	str	r2, [r7, #4]
 800dc52:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d003      	beq.n	800dc62 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	7b1b      	ldrb	r3, [r3, #12]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d101      	bne.n	800dc66 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800dc62:	2300      	movs	r3, #0
 800dc64:	e030      	b.n	800dcc8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	69da      	ldr	r2, [r3, #28]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	7b5b      	ldrb	r3, [r3, #13]
 800dc72:	021b      	lsls	r3, r3, #8
 800dc74:	b21b      	sxth	r3, r3
 800dc76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc7a:	b219      	sxth	r1, r3
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	7adb      	ldrb	r3, [r3, #11]
 800dc80:	b21b      	sxth	r3, r3
 800dc82:	430b      	orrs	r3, r1
 800dc84:	b21b      	sxth	r3, r3
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4413      	add	r3, r2
 800dc8c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	7b1b      	ldrb	r3, [r3, #12]
 800dc92:	837b      	strh	r3, [r7, #26]
 800dc94:	8b7b      	ldrh	r3, [r7, #26]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d015      	beq.n	800dcc6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	881b      	ldrh	r3, [r3, #0]
 800dc9e:	897a      	ldrh	r2, [r7, #10]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d103      	bne.n	800dcac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dcaa:	e00d      	b.n	800dcc8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	881b      	ldrh	r3, [r3, #0]
 800dcb0:	897a      	ldrh	r2, [r7, #10]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d306      	bcc.n	800dcc4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dcb6:	8b7b      	ldrh	r3, [r7, #26]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	837b      	strh	r3, [r7, #26]
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	61fb      	str	r3, [r7, #28]
 800dcc2:	e7e7      	b.n	800dc94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800dcc4:	bf00      	nop
        }
    }
    return 0;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3724      	adds	r7, #36	; 0x24
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	4801      	ldr	r0, [pc, #4]	; (800dce0 <__tcf_0+0xc>)
 800dcda:	f7ff ff27 	bl	800db2c <_ZN8touchgfx13GeneratedFontD1Ev>
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	2004d468 	.word	0x2004d468

0800dce4 <_Z23getFont_verdana_10_4bppv>:
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b08c      	sub	sp, #48	; 0x30
 800dce8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dcea:	4b1f      	ldr	r3, [pc, #124]	; (800dd68 <_Z23getFont_verdana_10_4bppv+0x84>)
 800dcec:	e8d3 3f8f 	ldab	r3, [r3]
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	f003 0301 	and.w	r3, r3, #1
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	bf0c      	ite	eq
 800dcfa:	2301      	moveq	r3, #1
 800dcfc:	2300      	movne	r3, #0
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d02c      	beq.n	800dd5e <_Z23getFont_verdana_10_4bppv+0x7a>
 800dd04:	4818      	ldr	r0, [pc, #96]	; (800dd68 <_Z23getFont_verdana_10_4bppv+0x84>)
 800dd06:	f018 fb57 	bl	80263b8 <__cxa_guard_acquire>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	bf14      	ite	ne
 800dd10:	2301      	movne	r3, #1
 800dd12:	2300      	moveq	r3, #0
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d021      	beq.n	800dd5e <_Z23getFont_verdana_10_4bppv+0x7a>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	930a      	str	r3, [sp, #40]	; 0x28
 800dd1e:	2300      	movs	r3, #0
 800dd20:	9309      	str	r3, [sp, #36]	; 0x24
 800dd22:	2300      	movs	r3, #0
 800dd24:	9308      	str	r3, [sp, #32]
 800dd26:	233f      	movs	r3, #63	; 0x3f
 800dd28:	9307      	str	r3, [sp, #28]
 800dd2a:	4b10      	ldr	r3, [pc, #64]	; (800dd6c <_Z23getFont_verdana_10_4bppv+0x88>)
 800dd2c:	9306      	str	r3, [sp, #24]
 800dd2e:	4b10      	ldr	r3, [pc, #64]	; (800dd70 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dd30:	9305      	str	r3, [sp, #20]
 800dd32:	2300      	movs	r3, #0
 800dd34:	9304      	str	r3, [sp, #16]
 800dd36:	2300      	movs	r3, #0
 800dd38:	9303      	str	r3, [sp, #12]
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	9302      	str	r3, [sp, #8]
 800dd3e:	2304      	movs	r3, #4
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	2300      	movs	r3, #0
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	230a      	movs	r3, #10
 800dd48:	2201      	movs	r2, #1
 800dd4a:	490a      	ldr	r1, [pc, #40]	; (800dd74 <_Z23getFont_verdana_10_4bppv+0x90>)
 800dd4c:	480a      	ldr	r0, [pc, #40]	; (800dd78 <_Z23getFont_verdana_10_4bppv+0x94>)
 800dd4e:	f7ff ff27 	bl	800dba0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dd52:	480a      	ldr	r0, [pc, #40]	; (800dd7c <_Z23getFont_verdana_10_4bppv+0x98>)
 800dd54:	f018 fb78 	bl	8026448 <atexit>
 800dd58:	4803      	ldr	r0, [pc, #12]	; (800dd68 <_Z23getFont_verdana_10_4bppv+0x84>)
 800dd5a:	f018 fb39 	bl	80263d0 <__cxa_guard_release>
    return verdana_10_4bpp;
 800dd5e:	4b06      	ldr	r3, [pc, #24]	; (800dd78 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	2004d490 	.word	0x2004d490
 800dd6c:	08029ccc 	.word	0x08029ccc
 800dd70:	08029cd8 	.word	0x08029cd8
 800dd74:	08029c9c 	.word	0x08029c9c
 800dd78:	2004d468 	.word	0x2004d468
 800dd7c:	0800dcd5 	.word	0x0800dcd5

0800dd80 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800dd80:	b580      	push	{r7, lr}
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	4801      	ldr	r0, [pc, #4]	; (800dd8c <__tcf_0+0xc>)
 800dd86:	f7ff fed1 	bl	800db2c <_ZN8touchgfx13GeneratedFontD1Ev>
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	2004d494 	.word	0x2004d494

0800dd90 <_Z23getFont_verdana_20_4bppv>:
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b08c      	sub	sp, #48	; 0x30
 800dd94:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800dd96:	4b1f      	ldr	r3, [pc, #124]	; (800de14 <_Z23getFont_verdana_20_4bppv+0x84>)
 800dd98:	e8d3 3f8f 	ldab	r3, [r3]
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	f003 0301 	and.w	r3, r3, #1
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	bf0c      	ite	eq
 800dda6:	2301      	moveq	r3, #1
 800dda8:	2300      	movne	r3, #0
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d02c      	beq.n	800de0a <_Z23getFont_verdana_20_4bppv+0x7a>
 800ddb0:	4818      	ldr	r0, [pc, #96]	; (800de14 <_Z23getFont_verdana_20_4bppv+0x84>)
 800ddb2:	f018 fb01 	bl	80263b8 <__cxa_guard_acquire>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	bf14      	ite	ne
 800ddbc:	2301      	movne	r3, #1
 800ddbe:	2300      	moveq	r3, #0
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d021      	beq.n	800de0a <_Z23getFont_verdana_20_4bppv+0x7a>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	930a      	str	r3, [sp, #40]	; 0x28
 800ddca:	2300      	movs	r3, #0
 800ddcc:	9309      	str	r3, [sp, #36]	; 0x24
 800ddce:	2300      	movs	r3, #0
 800ddd0:	9308      	str	r3, [sp, #32]
 800ddd2:	233f      	movs	r3, #63	; 0x3f
 800ddd4:	9307      	str	r3, [sp, #28]
 800ddd6:	4b10      	ldr	r3, [pc, #64]	; (800de18 <_Z23getFont_verdana_20_4bppv+0x88>)
 800ddd8:	9306      	str	r3, [sp, #24]
 800ddda:	4b10      	ldr	r3, [pc, #64]	; (800de1c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800dddc:	9305      	str	r3, [sp, #20]
 800ddde:	2300      	movs	r3, #0
 800dde0:	9304      	str	r3, [sp, #16]
 800dde2:	2300      	movs	r3, #0
 800dde4:	9303      	str	r3, [sp, #12]
 800dde6:	2301      	movs	r3, #1
 800dde8:	9302      	str	r3, [sp, #8]
 800ddea:	2304      	movs	r3, #4
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	2314      	movs	r3, #20
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	490a      	ldr	r1, [pc, #40]	; (800de20 <_Z23getFont_verdana_20_4bppv+0x90>)
 800ddf8:	480a      	ldr	r0, [pc, #40]	; (800de24 <_Z23getFont_verdana_20_4bppv+0x94>)
 800ddfa:	f7ff fed1 	bl	800dba0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800ddfe:	480a      	ldr	r0, [pc, #40]	; (800de28 <_Z23getFont_verdana_20_4bppv+0x98>)
 800de00:	f018 fb22 	bl	8026448 <atexit>
 800de04:	4803      	ldr	r0, [pc, #12]	; (800de14 <_Z23getFont_verdana_20_4bppv+0x84>)
 800de06:	f018 fae3 	bl	80263d0 <__cxa_guard_release>
    return verdana_20_4bpp;
 800de0a:	4b06      	ldr	r3, [pc, #24]	; (800de24 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	2004d4bc 	.word	0x2004d4bc
 800de18:	08029cd0 	.word	0x08029cd0
 800de1c:	08029cdc 	.word	0x08029cdc
 800de20:	08029cac 	.word	0x08029cac
 800de24:	2004d494 	.word	0x2004d494
 800de28:	0800dd81 	.word	0x0800dd81

0800de2c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800de2c:	b580      	push	{r7, lr}
 800de2e:	af00      	add	r7, sp, #0
 800de30:	4801      	ldr	r0, [pc, #4]	; (800de38 <__tcf_0+0xc>)
 800de32:	f7ff fe7b 	bl	800db2c <_ZN8touchgfx13GeneratedFontD1Ev>
 800de36:	bd80      	pop	{r7, pc}
 800de38:	2004d4c0 	.word	0x2004d4c0

0800de3c <_Z23getFont_verdana_40_4bppv>:
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b08c      	sub	sp, #48	; 0x30
 800de40:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800de42:	4b1f      	ldr	r3, [pc, #124]	; (800dec0 <_Z23getFont_verdana_40_4bppv+0x84>)
 800de44:	e8d3 3f8f 	ldab	r3, [r3]
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	f003 0301 	and.w	r3, r3, #1
 800de4e:	2b00      	cmp	r3, #0
 800de50:	bf0c      	ite	eq
 800de52:	2301      	moveq	r3, #1
 800de54:	2300      	movne	r3, #0
 800de56:	b2db      	uxtb	r3, r3
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d02c      	beq.n	800deb6 <_Z23getFont_verdana_40_4bppv+0x7a>
 800de5c:	4818      	ldr	r0, [pc, #96]	; (800dec0 <_Z23getFont_verdana_40_4bppv+0x84>)
 800de5e:	f018 faab 	bl	80263b8 <__cxa_guard_acquire>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	bf14      	ite	ne
 800de68:	2301      	movne	r3, #1
 800de6a:	2300      	moveq	r3, #0
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d021      	beq.n	800deb6 <_Z23getFont_verdana_40_4bppv+0x7a>
 800de72:	2300      	movs	r3, #0
 800de74:	930a      	str	r3, [sp, #40]	; 0x28
 800de76:	2300      	movs	r3, #0
 800de78:	9309      	str	r3, [sp, #36]	; 0x24
 800de7a:	2300      	movs	r3, #0
 800de7c:	9308      	str	r3, [sp, #32]
 800de7e:	233f      	movs	r3, #63	; 0x3f
 800de80:	9307      	str	r3, [sp, #28]
 800de82:	4b10      	ldr	r3, [pc, #64]	; (800dec4 <_Z23getFont_verdana_40_4bppv+0x88>)
 800de84:	9306      	str	r3, [sp, #24]
 800de86:	4b10      	ldr	r3, [pc, #64]	; (800dec8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800de88:	9305      	str	r3, [sp, #20]
 800de8a:	2300      	movs	r3, #0
 800de8c:	9304      	str	r3, [sp, #16]
 800de8e:	2300      	movs	r3, #0
 800de90:	9303      	str	r3, [sp, #12]
 800de92:	2301      	movs	r3, #1
 800de94:	9302      	str	r3, [sp, #8]
 800de96:	2304      	movs	r3, #4
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	2300      	movs	r3, #0
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	2328      	movs	r3, #40	; 0x28
 800dea0:	2201      	movs	r2, #1
 800dea2:	490a      	ldr	r1, [pc, #40]	; (800decc <_Z23getFont_verdana_40_4bppv+0x90>)
 800dea4:	480a      	ldr	r0, [pc, #40]	; (800ded0 <_Z23getFont_verdana_40_4bppv+0x94>)
 800dea6:	f7ff fe7b 	bl	800dba0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800deaa:	480a      	ldr	r0, [pc, #40]	; (800ded4 <_Z23getFont_verdana_40_4bppv+0x98>)
 800deac:	f018 facc 	bl	8026448 <atexit>
 800deb0:	4803      	ldr	r0, [pc, #12]	; (800dec0 <_Z23getFont_verdana_40_4bppv+0x84>)
 800deb2:	f018 fa8d 	bl	80263d0 <__cxa_guard_release>
    return verdana_40_4bpp;
 800deb6:	4b06      	ldr	r3, [pc, #24]	; (800ded0 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800deb8:	4618      	mov	r0, r3
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	2004d4e8 	.word	0x2004d4e8
 800dec4:	08029cd4 	.word	0x08029cd4
 800dec8:	08029ce0 	.word	0x08029ce0
 800decc:	08029cbc 	.word	0x08029cbc
 800ded0:	2004d4c0 	.word	0x2004d4c0
 800ded4:	0800de2d 	.word	0x0800de2d

0800ded8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	4618      	mov	r0, r3
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	4608      	mov	r0, r1
 800defa:	4611      	mov	r1, r2
 800defc:	461a      	mov	r2, r3
 800defe:	4603      	mov	r3, r0
 800df00:	817b      	strh	r3, [r7, #10]
 800df02:	460b      	mov	r3, r1
 800df04:	813b      	strh	r3, [r7, #8]
 800df06:	4613      	mov	r3, r2
 800df08:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	897a      	ldrh	r2, [r7, #10]
 800df0e:	801a      	strh	r2, [r3, #0]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	893a      	ldrh	r2, [r7, #8]
 800df14:	805a      	strh	r2, [r3, #2]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	88fa      	ldrh	r2, [r7, #6]
 800df1a:	809a      	strh	r2, [r3, #4]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	8b3a      	ldrh	r2, [r7, #24]
 800df20:	80da      	strh	r2, [r3, #6]
    {
    }
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	4618      	mov	r0, r3
 800df26:	3714      	adds	r7, #20
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800df3a:	bf00      	nop
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800df46:	b480      	push	{r7}
 800df48:	b083      	sub	sp, #12
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800df50:	bf00      	nop
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800df66:	bf00      	nop
 800df68:	370c      	adds	r7, #12
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr

0800df72 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800df72:	b480      	push	{r7}
 800df74:	b083      	sub	sp, #12
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
 800df7a:	460b      	mov	r3, r1
 800df7c:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800df7e:	bf00      	nop
 800df80:	370c      	adds	r7, #12
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800df8a:	b480      	push	{r7}
 800df8c:	b083      	sub	sp, #12
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
    {
    }
 800df92:	bf00      	nop
 800df94:	370c      	adds	r7, #12
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr

0800df9e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800df9e:	b480      	push	{r7}
 800dfa0:	b083      	sub	sp, #12
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
    {
    }
 800dfa6:	bf00      	nop
 800dfa8:	370c      	adds	r7, #12
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
	...

0800dfb4 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
    {
 800dfbc:	4a04      	ldr	r2, [pc, #16]	; (800dfd0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	601a      	str	r2, [r3, #0]
    }
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr
 800dfd0:	08028964 	.word	0x08028964

0800dfd4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
    }
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f7ff ffe9 	bl	800dfb4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800dfe2:	2104      	movs	r1, #4
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f018 f9e5 	bl	80263b4 <_ZdlPvj>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	4618      	mov	r0, r3
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
    {
    }
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	460b      	mov	r3, r1
 800e012:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800e014:	bf00      	nop
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	683a      	ldr	r2, [r7, #0]
 800e02e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e032:	6810      	ldr	r0, [r2, #0]
 800e034:	6851      	ldr	r1, [r2, #4]
 800e036:	c303      	stmia	r3!, {r0, r1}
    }
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
    {
 800e04c:	4a04      	ldr	r2, [pc, #16]	; (800e060 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	601a      	str	r2, [r3, #0]
    }
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	0802894c 	.word	0x0802894c

0800e064 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
    }
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7ff ffe9 	bl	800e044 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e072:	2104      	movs	r1, #4
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f018 f99d 	bl	80263b4 <_ZdlPvj>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4618      	mov	r0, r3
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
    {
 800e08c:	4a04      	ldr	r2, [pc, #16]	; (800e0a0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	601a      	str	r2, [r3, #0]
    }
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4618      	mov	r0, r3
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	0802969c 	.word	0x0802969c

0800e0a4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
    }
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7ff ffe9 	bl	800e084 <_ZN8touchgfx8DrawableD1Ev>
 800e0b2:	2128      	movs	r1, #40	; 0x28
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f018 f97d 	bl	80263b4 <_ZdlPvj>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3708      	adds	r7, #8
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d005      	beq.n	800e0e2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	3314      	adds	r3, #20
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	4798      	blx	r3
        }
    }
 800e0e2:	bf00      	nop
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800e0ea:	b480      	push	{r7}
 800e0ec:	b083      	sub	sp, #12
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e0f2:	2300      	movs	r3, #0
    }
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	4608      	mov	r0, r1
 800e10a:	4611      	mov	r1, r2
 800e10c:	461a      	mov	r2, r3
 800e10e:	4603      	mov	r3, r0
 800e110:	817b      	strh	r3, [r7, #10]
 800e112:	460b      	mov	r3, r1
 800e114:	813b      	strh	r3, [r7, #8]
 800e116:	4613      	mov	r3, r2
 800e118:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e11a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e11e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e122:	4619      	mov	r1, r3
 800e124:	68f8      	ldr	r0, [r7, #12]
 800e126:	f000 f837 	bl	800e198 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800e12a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e12e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e132:	4619      	mov	r1, r3
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f000 f88b 	bl	800e250 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800e13a:	bf00      	nop
 800e13c:	3710      	adds	r7, #16
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800e142:	b480      	push	{r7}
 800e144:	b083      	sub	sp, #12
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800e150:	4618      	mov	r0, r3
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	887a      	ldrh	r2, [r7, #2]
 800e16c:	809a      	strh	r2, [r3, #4]
    }
 800e16e:	bf00      	nop
 800e170:	370c      	adds	r7, #12
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800e17a:	b480      	push	{r7}
 800e17c:	b083      	sub	sp, #12
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	460b      	mov	r3, r1
 800e184:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	887a      	ldrh	r2, [r7, #2]
 800e18a:	80da      	strh	r2, [r3, #6]
    }
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	807b      	strh	r3, [r7, #2]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	3330      	adds	r3, #48	; 0x30
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e1b4:	4611      	mov	r1, r2
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	4798      	blx	r3
        setY(y);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3334      	adds	r3, #52	; 0x34
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e1c6:	4611      	mov	r1, r2
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	4798      	blx	r3
    }
 800e1cc:	bf00      	nop
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	460b      	mov	r3, r1
 800e1de:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	887a      	ldrh	r2, [r7, #2]
 800e1e4:	811a      	strh	r2, [r3, #8]
    }
 800e1e6:	bf00      	nop
 800e1e8:	370c      	adds	r7, #12
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr

0800e1f2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800e1f2:	b480      	push	{r7}
 800e1f4:	b083      	sub	sp, #12
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	887a      	ldrh	r2, [r7, #2]
 800e202:	815a      	strh	r2, [r3, #10]
    }
 800e204:	bf00      	nop
 800e206:	370c      	adds	r7, #12
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
    {
    }
 800e218:	bf00      	nop
 800e21a:	370c      	adds	r7, #12
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e22e:	bf00      	nop
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e23a:	b480      	push	{r7}
 800e23c:	b083      	sub	sp, #12
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e244:	bf00      	nop
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr

0800e250 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	460b      	mov	r3, r1
 800e25a:	807b      	strh	r3, [r7, #2]
 800e25c:	4613      	mov	r3, r2
 800e25e:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	3338      	adds	r3, #56	; 0x38
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e26c:	4611      	mov	r1, r2
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	4798      	blx	r3
        setHeight(height);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	333c      	adds	r3, #60	; 0x3c
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e27e:	4611      	mov	r1, r2
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	4798      	blx	r3
    }
 800e284:	bf00      	nop
 800e286:	3708      	adds	r7, #8
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e296:	bf00      	nop
 800e298:	370c      	adds	r7, #12
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800e2a2:	b480      	push	{r7}
 800e2a4:	b083      	sub	sp, #12
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
    {
    }
 800e2aa:	bf00      	nop
 800e2ac:	370c      	adds	r7, #12
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr

0800e2b6 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e2b6:	b480      	push	{r7}
 800e2b8:	b083      	sub	sp, #12
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800e2de:	4618      	mov	r0, r3
 800e2e0:	370c      	adds	r7, #12
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr

0800e2ea <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b082      	sub	sp, #8
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	807b      	strh	r3, [r7, #2]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	3354      	adds	r3, #84	; 0x54
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	8879      	ldrh	r1, [r7, #2]
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e30a:	b292      	uxth	r2, r2
 800e30c:	1a8a      	subs	r2, r1, r2
 800e30e:	b292      	uxth	r2, r2
 800e310:	b210      	sxth	r0, r2
 800e312:	8839      	ldrh	r1, [r7, #0]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e31a:	b292      	uxth	r2, r2
 800e31c:	1a8a      	subs	r2, r1, r2
 800e31e:	b292      	uxth	r2, r2
 800e320:	b212      	sxth	r2, r2
 800e322:	4601      	mov	r1, r0
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	4798      	blx	r3
    }
 800e328:	bf00      	nop
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e33e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e346:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e34e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800e350:	bf00      	nop
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f7ff ffe1 	bl	800e330 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	601a      	str	r2, [r3, #0]
    }
 800e37c:	bf00      	nop
 800e37e:	3710      	adds	r7, #16
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800e384:	b480      	push	{r7}
 800e386:	af00      	add	r7, sp, #0
    {
        return instance;
 800e388:	4b03      	ldr	r3, [pc, #12]	; (800e398 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800e38a:	681b      	ldr	r3, [r3, #0]
    }
 800e38c:	4618      	mov	r0, r3
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	2004f6c8 	.word	0x2004f6c8

0800e39c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800e39c:	b480      	push	{r7}
 800e39e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800e3a0:	4b0b      	ldr	r3, [pc, #44]	; (800e3d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d008      	beq.n	800e3be <_ZN8touchgfx3HAL3lcdEv+0x22>
 800e3ac:	4b08      	ldr	r3, [pc, #32]	; (800e3d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d003      	beq.n	800e3be <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800e3b6:	4b06      	ldr	r3, [pc, #24]	; (800e3d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3bc:	e002      	b.n	800e3c4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800e3be:	4b04      	ldr	r3, [pc, #16]	; (800e3d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	689b      	ldr	r3, [r3, #8]
    }
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	2004f6c8 	.word	0x2004f6c8

0800e3d4 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800e3dc:	4a07      	ldr	r2, [pc, #28]	; (800e3fc <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	601a      	str	r2, [r3, #0]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	605a      	str	r2, [r3, #4]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	721a      	strb	r2, [r3, #8]
    {
    }
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	08028928 	.word	0x08028928

0800e400 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
    {
 800e408:	4a04      	ldr	r2, [pc, #16]	; (800e41c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	601a      	str	r2, [r3, #0]
    }
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	4618      	mov	r0, r3
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr
 800e41c:	08028928 	.word	0x08028928

0800e420 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
    }
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7ff ffe9 	bl	800e400 <_ZN8touchgfx10TransitionD1Ev>
 800e42e:	210c      	movs	r1, #12
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f017 ffbf 	bl	80263b4 <_ZdlPvj>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800e440:	b480      	push	{r7}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
    {
    }
 800e448:	bf00      	nop
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
    {
    }
 800e45c:	bf00      	nop
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
    {
    }
 800e470:	bf00      	nop
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800e484:	f009 fa66 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 800e488:	4603      	mov	r3, r0
 800e48a:	4618      	mov	r0, r3
 800e48c:	f009 fe2e 	bl	80180ec <_ZN8touchgfx11Application10invalidateEv>
    }
 800e490:	bf00      	nop
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	605a      	str	r2, [r3, #4]
    }
 800e4a8:	bf00      	nop
 800e4aa:	370c      	adds	r7, #12
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b082      	sub	sp, #8
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	4a05      	ldr	r2, [pc, #20]	; (800e4d4 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	601a      	str	r2, [r3, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7ff fd75 	bl	800dfb4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	08029650 	.word	0x08029650

0800e4d8 <_ZN8touchgfx11ApplicationD0Ev>:
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff ffe7 	bl	800e4b4 <_ZN8touchgfx11ApplicationD1Ev>
 800e4e6:	f44f 719c 	mov.w	r1, #312	; 0x138
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f017 ff62 	bl	80263b4 <_ZdlPvj>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3708      	adds	r7, #8
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
	...

0800e4fc <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	4618      	mov	r0, r3
 800e508:	f009 fa6c 	bl	80179e4 <_ZN8touchgfx11ApplicationC1Ev>
 800e50c:	4a09      	ldr	r2, [pc, #36]	; (800e534 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	601a      	str	r2, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4a04      	ldr	r2, [pc, #16]	; (800e538 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e526:	6013      	str	r3, [r2, #0]
    }
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4618      	mov	r0, r3
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	080288dc 	.word	0x080288dc
 800e538:	2004f71c 	.word	0x2004f71c

0800e53c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 f804 	bl	800e552 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e54a:	bf00      	nop
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e552:	b580      	push	{r7, lr}
 800e554:	b082      	sub	sp, #8
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00f      	beq.n	800e584 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	330c      	adds	r3, #12
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4610      	mov	r0, r2
 800e578:	4798      	blx	r3
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d001      	beq.n	800e584 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e580:	2301      	movs	r3, #1
 800e582:	e000      	b.n	800e586 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e584:	2300      	movs	r3, #0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00e      	beq.n	800e5a8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	3308      	adds	r3, #8
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4610      	mov	r0, r2
 800e59e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800e5a8:	bf00      	nop
 800e5aa:	3708      	adds	r7, #8
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	601a      	str	r2, [r3, #0]
    }
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	4a05      	ldr	r2, [pc, #20]	; (800e5ec <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	601a      	str	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7ff ff69 	bl	800e4b4 <_ZN8touchgfx11ApplicationD1Ev>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3708      	adds	r7, #8
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	080288dc 	.word	0x080288dc

0800e5f0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7ff ffe7 	bl	800e5cc <_ZN8touchgfx14MVPApplicationD1Ev>
 800e5fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f017 fed6 	bl	80263b4 <_ZdlPvj>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4618      	mov	r0, r3
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
	...

0800e614 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	4a08      	ldr	r2, [pc, #32]	; (800e640 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	601a      	str	r2, [r3, #0]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e628:	4618      	mov	r0, r3
 800e62a:	f001 f88d 	bl	800f748 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4618      	mov	r0, r3
 800e632:	f7ff ffcb 	bl	800e5cc <_ZN8touchgfx14MVPApplicationD1Ev>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4618      	mov	r0, r3
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	08028878 	.word	0x08028878

0800e644 <_ZN23FrontendApplicationBaseD0Ev>:
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7ff ffe1 	bl	800e614 <_ZN23FrontendApplicationBaseD1Ev>
 800e652:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f017 feac 	bl	80263b4 <_ZdlPvj>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4618      	mov	r0, r3
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800e666:	b580      	push	{r7, lr}
 800e668:	b082      	sub	sp, #8
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 f9c2 	bl	800e9f8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800e674:	bf00      	nop
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	721a      	strb	r2, [r3, #8]
    }
 800e68a:	bf00      	nop
 800e68c:	370c      	adds	r7, #12
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
	...

0800e698 <_ZN8touchgfx15BlockTransitionC1Ev>:
    /**
     * Initializes a new instance of the BlockTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    BlockTransition()
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
        : Transition(),
          animationCounter(0)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7ff fe96 	bl	800e3d4 <_ZN8touchgfx10TransitionC1Ev>
 800e6a8:	4a20      	ldr	r2, [pc, #128]	; (800e72c <_ZN8touchgfx15BlockTransitionC1Ev+0x94>)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	601a      	str	r2, [r3, #0]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	741a      	strb	r2, [r3, #16]
    {
        // 8x6 blocks, with 8 blocks on the longest edge
        if (HAL::DISPLAY_WIDTH > HAL::DISPLAY_HEIGHT)
 800e6b4:	4b1e      	ldr	r3, [pc, #120]	; (800e730 <_ZN8touchgfx15BlockTransitionC1Ev+0x98>)
 800e6b6:	881a      	ldrh	r2, [r3, #0]
 800e6b8:	4b1e      	ldr	r3, [pc, #120]	; (800e734 <_ZN8touchgfx15BlockTransitionC1Ev+0x9c>)
 800e6ba:	881b      	ldrh	r3, [r3, #0]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d918      	bls.n	800e6f2 <_ZN8touchgfx15BlockTransitionC1Ev+0x5a>
        {
            blockWidth = (HAL::DISPLAY_WIDTH + 7) / 8;
 800e6c0:	4b1b      	ldr	r3, [pc, #108]	; (800e730 <_ZN8touchgfx15BlockTransitionC1Ev+0x98>)
 800e6c2:	881b      	ldrh	r3, [r3, #0]
 800e6c4:	3307      	adds	r3, #7
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	da00      	bge.n	800e6cc <_ZN8touchgfx15BlockTransitionC1Ev+0x34>
 800e6ca:	3307      	adds	r3, #7
 800e6cc:	10db      	asrs	r3, r3, #3
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	815a      	strh	r2, [r3, #10]
            blockHeight = (HAL::DISPLAY_HEIGHT + 5) / 6;
 800e6d4:	4b17      	ldr	r3, [pc, #92]	; (800e734 <_ZN8touchgfx15BlockTransitionC1Ev+0x9c>)
 800e6d6:	881b      	ldrh	r3, [r3, #0]
 800e6d8:	3305      	adds	r3, #5
 800e6da:	4a17      	ldr	r2, [pc, #92]	; (800e738 <_ZN8touchgfx15BlockTransitionC1Ev+0xa0>)
 800e6dc:	fb82 1203 	smull	r1, r2, r2, r3
 800e6e0:	17db      	asrs	r3, r3, #31
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	819a      	strh	r2, [r3, #12]
            blocksHorizontal = 8;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2208      	movs	r2, #8
 800e6ee:	81da      	strh	r2, [r3, #14]
 800e6f0:	e017      	b.n	800e722 <_ZN8touchgfx15BlockTransitionC1Ev+0x8a>
        }
        else
        {
            blockWidth = (HAL::DISPLAY_WIDTH + 5) / 6;
 800e6f2:	4b0f      	ldr	r3, [pc, #60]	; (800e730 <_ZN8touchgfx15BlockTransitionC1Ev+0x98>)
 800e6f4:	881b      	ldrh	r3, [r3, #0]
 800e6f6:	3305      	adds	r3, #5
 800e6f8:	4a0f      	ldr	r2, [pc, #60]	; (800e738 <_ZN8touchgfx15BlockTransitionC1Ev+0xa0>)
 800e6fa:	fb82 1203 	smull	r1, r2, r2, r3
 800e6fe:	17db      	asrs	r3, r3, #31
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	b29a      	uxth	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	815a      	strh	r2, [r3, #10]
            blockHeight = (HAL::DISPLAY_HEIGHT + 7) / 8;
 800e708:	4b0a      	ldr	r3, [pc, #40]	; (800e734 <_ZN8touchgfx15BlockTransitionC1Ev+0x9c>)
 800e70a:	881b      	ldrh	r3, [r3, #0]
 800e70c:	3307      	adds	r3, #7
 800e70e:	2b00      	cmp	r3, #0
 800e710:	da00      	bge.n	800e714 <_ZN8touchgfx15BlockTransitionC1Ev+0x7c>
 800e712:	3307      	adds	r3, #7
 800e714:	10db      	asrs	r3, r3, #3
 800e716:	b29a      	uxth	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	819a      	strh	r2, [r3, #12]
            blocksHorizontal = 6;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2206      	movs	r2, #6
 800e720:	81da      	strh	r2, [r3, #14]
        }
    }
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4618      	mov	r0, r3
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	08028830 	.word	0x08028830
 800e730:	2004f6bc 	.word	0x2004f6bc
 800e734:	2004f6be 	.word	0x2004f6be
 800e738:	2aaaaaab 	.word	0x2aaaaaab

0800e73c <_ZN8touchgfx15BlockTransition15handleTickEventEv>:
    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates two blocks in every frame, for a total of 24
     * frames.
     */
    virtual void handleTickEvent()
 800e73c:	b590      	push	{r4, r7, lr}
 800e73e:	b0bb      	sub	sp, #236	; 0xec
 800e740:	af02      	add	r7, sp, #8
 800e742:	6078      	str	r0, [r7, #4]
    {
        const int blocks = 48;
 800e744:	2330      	movs	r3, #48	; 0x30
 800e746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        // "Random" sequence of blocks to invalidate
        const int indeces[blocks] = { 20, 11, 47, 14, 10, 0, 18, 28, 13, 6, 2, 41,
 800e74a:	4a42      	ldr	r2, [pc, #264]	; (800e854 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x118>)
 800e74c:	f107 0310 	add.w	r3, r7, #16
 800e750:	4611      	mov	r1, r2
 800e752:	22c0      	movs	r2, #192	; 0xc0
 800e754:	4618      	mov	r0, r3
 800e756:	f017 fed7 	bl	8026508 <memcpy>
                                      44, 5, 3, 17, 36, 46, 26, 15, 29, 39, 25, 12,
                                      19, 24, 7, 38, 37, 30, 9, 43, 4, 31, 22, 23,
                                      35, 16, 32, 42, 8, 1, 40, 33, 21, 27, 34, 45 };

        Transition::handleTickEvent();
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7ff fe6f 	bl	800e440 <_ZN8touchgfx10Transition15handleTickEventEv>

        if (animationCounter == 0 && HAL::USE_DOUBLE_BUFFERING)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	7c1b      	ldrb	r3, [r3, #16]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d109      	bne.n	800e77e <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x42>
 800e76a:	4b3b      	ldr	r3, [pc, #236]	; (800e858 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x11c>)
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d005      	beq.n	800e77e <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x42>
        {
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800e772:	f009 f8ef 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 800e776:	4603      	mov	r3, r0
 800e778:	4618      	mov	r0, r3
 800e77a:	f009 f8fd 	bl	8017978 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }

        if (animationCounter < blocks)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	7c1b      	ldrb	r3, [r3, #16]
 800e782:	2b2f      	cmp	r3, #47	; 0x2f
 800e784:	d85f      	bhi.n	800e846 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x10a>
        {
            int blocks_per_tick = 2;
 800e786:	2302      	movs	r3, #2
 800e788:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            while (blocks_per_tick-- > 0 && animationCounter < blocks)
 800e78c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e790:	1e5a      	subs	r2, r3, #1
 800e792:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e796:	2b00      	cmp	r3, #0
 800e798:	dd05      	ble.n	800e7a6 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x6a>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	7c1b      	ldrb	r3, [r3, #16]
 800e79e:	2b2f      	cmp	r3, #47	; 0x2f
 800e7a0:	d801      	bhi.n	800e7a6 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x6a>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e000      	b.n	800e7a8 <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x6c>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d04f      	beq.n	800e84c <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x110>
            {
                // Invalidate next block in sequence
                const int index = indeces[animationCounter];
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	7c1b      	ldrb	r3, [r3, #16]
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	33e0      	adds	r3, #224	; 0xe0
 800e7b4:	443b      	add	r3, r7
 800e7b6:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 800e7ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

                const int16_t x = (index % blocksHorizontal) * blockWidth;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	89db      	ldrh	r3, [r3, #14]
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e7c8:	fb93 f1f2 	sdiv	r1, r3, r2
 800e7cc:	fb01 f202 	mul.w	r2, r1, r2
 800e7d0:	1a9b      	subs	r3, r3, r2
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	895b      	ldrh	r3, [r3, #10]
 800e7d8:	fb12 f303 	smulbb	r3, r2, r3
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
                const int16_t y = (index / blocksHorizontal) * blockHeight;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	89db      	ldrh	r3, [r3, #14]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e7ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	899b      	ldrh	r3, [r3, #12]
 800e7f6:	fb12 f303 	smulbb	r3, r2, r3
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0

                Rect invRect(x, y, blockWidth, blockHeight);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	895b      	ldrh	r3, [r3, #10]
 800e804:	b21c      	sxth	r4, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	899b      	ldrh	r3, [r3, #12]
 800e80a:	b21b      	sxth	r3, r3
 800e80c:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	; 0xd0
 800e810:	f9b7 10d2 	ldrsh.w	r1, [r7, #210]	; 0xd2
 800e814:	f107 0008 	add.w	r0, r7, #8
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	4623      	mov	r3, r4
 800e81c:	f7ff fb68 	bl	800def0 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(invRect);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	4618      	mov	r0, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	3310      	adds	r3, #16
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f107 0208 	add.w	r2, r7, #8
 800e834:	4611      	mov	r1, r2
 800e836:	4798      	blx	r3
                animationCounter++;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	7c1b      	ldrb	r3, [r3, #16]
 800e83c:	3301      	adds	r3, #1
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	741a      	strb	r2, [r3, #16]
            while (blocks_per_tick-- > 0 && animationCounter < blocks)
 800e844:	e7a2      	b.n	800e78c <_ZN8touchgfx15BlockTransition15handleTickEventEv+0x50>
            }
        }
        else
        {
            done = true;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2201      	movs	r2, #1
 800e84a:	721a      	strb	r2, [r3, #8]
        }
    }
 800e84c:	bf00      	nop
 800e84e:	37e4      	adds	r7, #228	; 0xe4
 800e850:	46bd      	mov	sp, r7
 800e852:	bd90      	pop	{r4, r7, pc}
 800e854:	080275f4 	.word	0x080275f4
 800e858:	2004f6c6 	.word	0x2004f6c6

0800e85c <_ZN8touchgfx15BlockTransition8tearDownEv>:

    virtual void tearDown()
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
    {
    }
 800e864:	bf00      	nop
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <_ZN8touchgfx15BlockTransition4initEv>:

    virtual void init()
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7ff fdf4 	bl	800e468 <_ZN8touchgfx10Transition4initEv>
    }
 800e880:	bf00      	nop
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <_ZN8touchgfx15BlockTransition10invalidateEv>:

    /**
     * Block transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
    {
    }
 800e890:	bf00      	nop
 800e892:	370c      	adds	r7, #12
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	607b      	str	r3, [r7, #4]
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	817b      	strh	r3, [r7, #10]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7ff fd00 	bl	800e2b6 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d008      	beq.n	800e8ce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7ff fd06 	bl	800e2d0 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d001      	beq.n	800e8ce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	e000      	b.n	800e8d0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	601a      	str	r2, [r3, #0]
        }
    }
 800e8da:	bf00      	nop
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800e8e2:	b480      	push	{r7}
 800e8e4:	b083      	sub	sp, #12
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	683a      	ldr	r2, [r7, #0]
 800e8f0:	605a      	str	r2, [r3, #4]
    }
 800e8f2:	bf00      	nop
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
	...

0800e900 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	4a05      	ldr	r2, [pc, #20]	; (800e920 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4618      	mov	r0, r3
 800e912:	f7ff fbb7 	bl	800e084 <_ZN8touchgfx8DrawableD1Ev>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4618      	mov	r0, r3
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	080287c8 	.word	0x080287c8

0800e924 <_ZN8touchgfx6WidgetD0Ev>:
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f7ff ffe7 	bl	800e900 <_ZN8touchgfx6WidgetD1Ev>
 800e932:	2128      	movs	r1, #40	; 0x28
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f017 fd3d 	bl	80263b4 <_ZdlPvj>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4618      	mov	r0, r3
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	4618      	mov	r0, r3
 800e954:	f7ff fdd2 	bl	800e4fc <_ZN8touchgfx14MVPApplicationC1Ev>
 800e958:	4a12      	ldr	r2, [pc, #72]	; (800e9a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	601a      	str	r2, [r3, #0]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e964:	4618      	mov	r0, r3
 800e966:	f000 f929 	bl	800ebbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	68ba      	ldr	r2, [r7, #8]
 800e976:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800e97a:	f7ff fd03 	bl	800e384 <_ZN8touchgfx3HAL11getInstanceEv>
 800e97e:	4603      	mov	r3, r0
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	3208      	adds	r2, #8
 800e984:	6812      	ldr	r2, [r2, #0]
 800e986:	2101      	movs	r1, #1
 800e988:	4618      	mov	r0, r3
 800e98a:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e98c:	f7ff fd06 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 800e990:	4603      	mov	r3, r0
 800e992:	4618      	mov	r0, r3
 800e994:	f010 fb03 	bl	801ef9e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	4618      	mov	r0, r3
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	08028878 	.word	0x08028878

0800e9a8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	370c      	adds	r7, #12
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr

0800e9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	683a      	ldr	r2, [r7, #0]
 800e9ce:	4611      	mov	r1, r2
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff ffe9 	bl	800e9a8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	685a      	ldr	r2, [r3, #4]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	605a      	str	r2, [r3, #4]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	683a      	ldr	r2, [r7, #0]
 800e9e2:	3308      	adds	r3, #8
 800e9e4:	3208      	adds	r2, #8
 800e9e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9ea:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800e9f8:	b590      	push	{r4, r7, lr}
 800e9fa:	b089      	sub	sp, #36	; 0x24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ea06:	4b10      	ldr	r3, [pc, #64]	; (800ea48 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800ea08:	61bb      	str	r3, [r7, #24]
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	61fb      	str	r3, [r7, #28]
 800ea0e:	f107 0008 	add.w	r0, r7, #8
 800ea12:	f107 0318 	add.w	r3, r7, #24
 800ea16:	cb0c      	ldmia	r3, {r2, r3}
 800ea18:	6879      	ldr	r1, [r7, #4]
 800ea1a:	f000 f8eb 	bl	800ebf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ea1e:	f107 0308 	add.w	r3, r7, #8
 800ea22:	4619      	mov	r1, r3
 800ea24:	4620      	mov	r0, r4
 800ea26:	f7ff ffcb 	bl	800e9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ea2a:	f107 0308 	add.w	r3, r7, #8
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f000 fe8a 	bl	800f748 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ea40:	bf00      	nop
 800ea42:	3724      	adds	r7, #36	; 0x24
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd90      	pop	{r4, r7, pc}
 800ea48:	0800ea4d 	.word	0x0800ea4d

0800ea4c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af02      	add	r7, sp, #8
 800ea52:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ea60:	461a      	mov	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ea68:	9300      	str	r3, [sp, #0]
 800ea6a:	4b04      	ldr	r3, [pc, #16]	; (800ea7c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800ea6c:	4804      	ldr	r0, [pc, #16]	; (800ea80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800ea6e:	f000 f8f3 	bl	800ec58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ea72:	bf00      	nop
 800ea74:	3708      	adds	r7, #8
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	2004f710 	.word	0x2004f710
 800ea80:	2004f70c 	.word	0x2004f70c

0800ea84 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionSouth()
{
 800ea84:	b590      	push	{r4, r7, lr}
 800ea86:	b089      	sub	sp, #36	; 0x24
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionSouthImpl);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ea92:	4b10      	ldr	r3, [pc, #64]	; (800ead4 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv+0x50>)
 800ea94:	61bb      	str	r3, [r7, #24]
 800ea96:	2300      	movs	r3, #0
 800ea98:	61fb      	str	r3, [r7, #28]
 800ea9a:	f107 0008 	add.w	r0, r7, #8
 800ea9e:	f107 0318 	add.w	r3, r7, #24
 800eaa2:	cb0c      	ldmia	r3, {r2, r3}
 800eaa4:	6879      	ldr	r1, [r7, #4]
 800eaa6:	f000 f8a5 	bl	800ebf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800eaaa:	f107 0308 	add.w	r3, r7, #8
 800eaae:	4619      	mov	r1, r3
 800eab0:	4620      	mov	r0, r4
 800eab2:	f7ff ff85 	bl	800e9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800eab6:	f107 0308 	add.w	r3, r7, #8
 800eaba:	4618      	mov	r0, r3
 800eabc:	f000 fe44 	bl	800f748 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800eacc:	bf00      	nop
 800eace:	3724      	adds	r7, #36	; 0x24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd90      	pop	{r4, r7, pc}
 800ead4:	0800ead9 	.word	0x0800ead9

0800ead8 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionSouthImpl()
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af02      	add	r7, sp, #8
 800eade:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800eaec:	461a      	mov	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	4b04      	ldr	r3, [pc, #16]	; (800eb08 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv+0x30>)
 800eaf8:	4804      	ldr	r0, [pc, #16]	; (800eb0c <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv+0x34>)
 800eafa:	f000 f9cb 	bl	800ee94 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800eafe:	bf00      	nop
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	2004f710 	.word	0x2004f710
 800eb0c:	2004f70c 	.word	0x2004f70c

0800eb10 <_ZN23FrontendApplicationBase32gotoScreen2ScreenBlockTransitionEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenBlockTransition()
{
 800eb10:	b590      	push	{r4, r7, lr}
 800eb12:	b089      	sub	sp, #36	; 0x24
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenBlockTransitionImpl);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800eb1e:	4b10      	ldr	r3, [pc, #64]	; (800eb60 <_ZN23FrontendApplicationBase32gotoScreen2ScreenBlockTransitionEv+0x50>)
 800eb20:	61bb      	str	r3, [r7, #24]
 800eb22:	2300      	movs	r3, #0
 800eb24:	61fb      	str	r3, [r7, #28]
 800eb26:	f107 0008 	add.w	r0, r7, #8
 800eb2a:	f107 0318 	add.w	r3, r7, #24
 800eb2e:	cb0c      	ldmia	r3, {r2, r3}
 800eb30:	6879      	ldr	r1, [r7, #4]
 800eb32:	f000 f85f 	bl	800ebf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800eb36:	f107 0308 	add.w	r3, r7, #8
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f7ff ff3f 	bl	800e9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800eb42:	f107 0308 	add.w	r3, r7, #8
 800eb46:	4618      	mov	r0, r3
 800eb48:	f000 fdfe 	bl	800f748 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800eb58:	bf00      	nop
 800eb5a:	3724      	adds	r7, #36	; 0x24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd90      	pop	{r4, r7, pc}
 800eb60:	0800eb65 	.word	0x0800eb65

0800eb64 <_ZN23FrontendApplicationBase36gotoScreen2ScreenBlockTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenBlockTransitionImpl()
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af02      	add	r7, sp, #8
 800eb6a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800eb78:	461a      	mov	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800eb80:	9300      	str	r3, [sp, #0]
 800eb82:	4b04      	ldr	r3, [pc, #16]	; (800eb94 <_ZN23FrontendApplicationBase36gotoScreen2ScreenBlockTransitionImplEv+0x30>)
 800eb84:	4804      	ldr	r0, [pc, #16]	; (800eb98 <_ZN23FrontendApplicationBase36gotoScreen2ScreenBlockTransitionImplEv+0x34>)
 800eb86:	f000 faa3 	bl	800f0d0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800eb8a:	bf00      	nop
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	2004f710 	.word	0x2004f710
 800eb98:	2004f70c 	.word	0x2004f70c

0800eb9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	4a04      	ldr	r2, [pc, #16]	; (800ebb8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	601a      	str	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4618      	mov	r0, r3
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr
 800ebb8:	0802894c 	.word	0x0802894c

0800ebbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7ff ffe8 	bl	800eb9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ebcc:	4a08      	ldr	r2, [pc, #32]	; (800ebf0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	601a      	str	r2, [r3, #0]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	605a      	str	r2, [r3, #4]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	609a      	str	r2, [r3, #8]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	60da      	str	r2, [r3, #12]
    {
    }
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3708      	adds	r7, #8
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	080288c4 	.word	0x080288c4

0800ebf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	4639      	mov	r1, r7
 800ec00:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7ff ffc8 	bl	800eb9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ec0c:	4a08      	ldr	r2, [pc, #32]	; (800ec30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	601a      	str	r2, [r3, #0]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	605a      	str	r2, [r3, #4]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	3308      	adds	r3, #8
 800ec1c:	463a      	mov	r2, r7
 800ec1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec22:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	080288c4 	.word	0x080288c4

0800ec34 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7ff fbc8 	bl	800e3d4 <_ZN8touchgfx10TransitionC1Ev>
 800ec44:	4a03      	ldr	r2, [pc, #12]	; (800ec54 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	08028854 	.word	0x08028854

0800ec58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ec58:	b590      	push	{r4, r7, lr}
 800ec5a:	b08f      	sub	sp, #60	; 0x3c
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	60b9      	str	r1, [r7, #8]
 800ec62:	607a      	str	r2, [r7, #4]
 800ec64:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	689a      	ldr	r2, [r3, #8]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	3320      	adds	r3, #32
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4610      	mov	r0, r2
 800ec76:	4798      	blx	r3
 800ec78:	4603      	mov	r3, r0
 800ec7a:	f241 023b 	movw	r2, #4155	; 0x103b
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d805      	bhi.n	800ec8e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ec82:	4b7f      	ldr	r3, [pc, #508]	; (800ee80 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ec84:	4a7f      	ldr	r2, [pc, #508]	; (800ee84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ec86:	21a3      	movs	r1, #163	; 0xa3
 800ec88:	487f      	ldr	r0, [pc, #508]	; (800ee88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ec8a:	f017 fbbf 	bl	802640c <__assert_func>
 800ec8e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685a      	ldr	r2, [r3, #4]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	3320      	adds	r3, #32
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4610      	mov	r0, r2
 800eca0:	4798      	blx	r3
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b0f      	cmp	r3, #15
 800eca6:	d805      	bhi.n	800ecb4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800eca8:	4b78      	ldr	r3, [pc, #480]	; (800ee8c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800ecaa:	4a76      	ldr	r2, [pc, #472]	; (800ee84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ecac:	21a4      	movs	r1, #164	; 0xa4
 800ecae:	4876      	ldr	r0, [pc, #472]	; (800ee88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ecb0:	f017 fbac 	bl	802640c <__assert_func>
 800ecb4:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	68da      	ldr	r2, [r3, #12]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	3320      	adds	r3, #32
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4610      	mov	r0, r2
 800ecc6:	4798      	blx	r3
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b0b      	cmp	r3, #11
 800eccc:	d805      	bhi.n	800ecda <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800ecce:	4b70      	ldr	r3, [pc, #448]	; (800ee90 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800ecd0:	4a6c      	ldr	r2, [pc, #432]	; (800ee84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ecd2:	21a5      	movs	r1, #165	; 0xa5
 800ecd4:	486c      	ldr	r0, [pc, #432]	; (800ee88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ecd6:	f017 fb99 	bl	802640c <__assert_func>
 800ecda:	bf00      	nop
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	62bb      	str	r3, [r7, #40]	; 0x28
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	627b      	str	r3, [r7, #36]	; 0x24
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800ece8:	f008 fe34 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 800ecec:	4603      	mov	r3, r0
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f008 fe36 	bl	8017960 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800ecf4:	6a3b      	ldr	r3, [r7, #32]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d008      	beq.n	800ed0e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800ecfc:	6a3b      	ldr	r3, [r7, #32]
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	6a3b      	ldr	r3, [r7, #32]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	330c      	adds	r3, #12
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4610      	mov	r0, r2
 800ed0c:	4798      	blx	r3
    if (*currentTrans)
 800ed0e:	6a3b      	ldr	r3, [r7, #32]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d007      	beq.n	800ed26 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800ed16:	6a3b      	ldr	r3, [r7, #32]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	6a3b      	ldr	r3, [r7, #32]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4610      	mov	r0, r2
 800ed24:	4798      	blx	r3
    if (*currentScreen)
 800ed26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d008      	beq.n	800ed40 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800ed2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	3314      	adds	r3, #20
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	4798      	blx	r3
    if (*currentPresenter)
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d008      	beq.n	800ed5a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800ed48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	3304      	adds	r3, #4
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4610      	mov	r0, r2
 800ed58:	4798      	blx	r3
    if (*currentScreen)
 800ed5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d007      	beq.n	800ed72 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800ed62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4610      	mov	r0, r2
 800ed70:	4798      	blx	r3
    if (*currentPresenter)
 800ed72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d008      	beq.n	800ed8c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	3308      	adds	r3, #8
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4610      	mov	r0, r2
 800ed8a:	4798      	blx	r3
}
 800ed8c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	68db      	ldr	r3, [r3, #12]
 800ed92:	2100      	movs	r1, #0
 800ed94:	4618      	mov	r0, r3
 800ed96:	f000 fab5 	bl	800f304 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	200c      	movs	r0, #12
 800eda0:	f7ff f89a 	bl	800ded8 <_ZnwjPv>
 800eda4:	4604      	mov	r4, r0
 800eda6:	4620      	mov	r0, r4
 800eda8:	f7ff ff44 	bl	800ec34 <_ZN8touchgfx12NoTransitionC1Ev>
 800edac:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	2100      	movs	r1, #0
 800edb4:	4618      	mov	r0, r3
 800edb6:	f000 fab8 	bl	800f32a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800edba:	4603      	mov	r3, r0
 800edbc:	4619      	mov	r1, r3
 800edbe:	f241 003c 	movw	r0, #4156	; 0x103c
 800edc2:	f7ff f889 	bl	800ded8 <_ZnwjPv>
 800edc6:	4604      	mov	r4, r0
 800edc8:	4620      	mov	r0, r4
 800edca:	f002 fc6d 	bl	80116a8 <_ZN11Screen1ViewC1Ev>
 800edce:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	2100      	movs	r1, #0
 800edd6:	4618      	mov	r0, r3
 800edd8:	f000 faba 	bl	800f350 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800eddc:	4603      	mov	r3, r0
 800edde:	4619      	mov	r1, r3
 800ede0:	2010      	movs	r0, #16
 800ede2:	f7ff f879 	bl	800ded8 <_ZnwjPv>
 800ede6:	4604      	mov	r4, r0
 800ede8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800edea:	4620      	mov	r0, r4
 800edec:	f002 fc04 	bl	80115f8 <_ZN16Screen1PresenterC1ER11Screen1View>
 800edf0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edf6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edfc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee02:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ee04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d002      	beq.n	800ee10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800ee0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0c:	3304      	adds	r3, #4
 800ee0e:	e000      	b.n	800ee12 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800ee10:	2300      	movs	r3, #0
 800ee12:	4619      	mov	r1, r3
 800ee14:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ee16:	f7ff fbcb 	bl	800e5b0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ee1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1c:	3304      	adds	r3, #4
 800ee1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7ff fd5e 	bl	800e8e2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ee26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 faa3 	bl	800f376 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800ee30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee32:	61fb      	str	r3, [r7, #28]
 800ee34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee36:	61bb      	str	r3, [r7, #24]
 800ee38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee3a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	330c      	adds	r3, #12
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	69f8      	ldr	r0, [r7, #28]
 800ee46:	4798      	blx	r3
    newPresenter->activate();
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	69b8      	ldr	r0, [r7, #24]
 800ee50:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ee52:	6979      	ldr	r1, [r7, #20]
 800ee54:	69f8      	ldr	r0, [r7, #28]
 800ee56:	f00a fa09 	bl	801926c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	3310      	adds	r3, #16
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	6978      	ldr	r0, [r7, #20]
 800ee64:	4798      	blx	r3
    newTransition->invalidate();
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	3314      	adds	r3, #20
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	6978      	ldr	r0, [r7, #20]
 800ee70:	4798      	blx	r3
}
 800ee72:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800ee74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	373c      	adds	r7, #60	; 0x3c
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd90      	pop	{r4, r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	080276b4 	.word	0x080276b4
 800ee84:	08027744 	.word	0x08027744
 800ee88:	08027848 	.word	0x08027848
 800ee8c:	0802788c 	.word	0x0802788c
 800ee90:	08027930 	.word	0x08027930

0800ee94 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ee94:	b590      	push	{r4, r7, lr}
 800ee96:	b08f      	sub	sp, #60	; 0x3c
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
 800eea0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	689a      	ldr	r2, [r3, #8]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	689b      	ldr	r3, [r3, #8]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	3320      	adds	r3, #32
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4610      	mov	r0, r2
 800eeb2:	4798      	blx	r3
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	f241 023b 	movw	r2, #4155	; 0x103b
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d805      	bhi.n	800eeca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800eebe:	4b7f      	ldr	r3, [pc, #508]	; (800f0bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800eec0:	4a7f      	ldr	r2, [pc, #508]	; (800f0c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800eec2:	21a3      	movs	r1, #163	; 0xa3
 800eec4:	487f      	ldr	r0, [pc, #508]	; (800f0c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800eec6:	f017 faa1 	bl	802640c <__assert_func>
 800eeca:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	685a      	ldr	r2, [r3, #4]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	3320      	adds	r3, #32
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4610      	mov	r0, r2
 800eedc:	4798      	blx	r3
 800eede:	4603      	mov	r3, r0
 800eee0:	2b0f      	cmp	r3, #15
 800eee2:	d805      	bhi.n	800eef0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800eee4:	4b78      	ldr	r3, [pc, #480]	; (800f0c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800eee6:	4a76      	ldr	r2, [pc, #472]	; (800f0c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800eee8:	21a4      	movs	r1, #164	; 0xa4
 800eeea:	4876      	ldr	r0, [pc, #472]	; (800f0c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800eeec:	f017 fa8e 	bl	802640c <__assert_func>
 800eef0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	68da      	ldr	r2, [r3, #12]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	3320      	adds	r3, #32
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4610      	mov	r0, r2
 800ef02:	4798      	blx	r3
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b53      	cmp	r3, #83	; 0x53
 800ef08:	d805      	bhi.n	800ef16 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800ef0a:	4b70      	ldr	r3, [pc, #448]	; (800f0cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800ef0c:	4a6c      	ldr	r2, [pc, #432]	; (800f0c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ef0e:	21a5      	movs	r1, #165	; 0xa5
 800ef10:	486c      	ldr	r0, [pc, #432]	; (800f0c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ef12:	f017 fa7b 	bl	802640c <__assert_func>
 800ef16:	bf00      	nop
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800ef24:	f008 fd16 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f008 fd18 	bl	8017960 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800ef30:	6a3b      	ldr	r3, [r7, #32]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d008      	beq.n	800ef4a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800ef38:	6a3b      	ldr	r3, [r7, #32]
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	6a3b      	ldr	r3, [r7, #32]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	330c      	adds	r3, #12
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4610      	mov	r0, r2
 800ef48:	4798      	blx	r3
    if (*currentTrans)
 800ef4a:	6a3b      	ldr	r3, [r7, #32]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d007      	beq.n	800ef62 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800ef52:	6a3b      	ldr	r3, [r7, #32]
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	6a3b      	ldr	r3, [r7, #32]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4610      	mov	r0, r2
 800ef60:	4798      	blx	r3
    if (*currentScreen)
 800ef62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d008      	beq.n	800ef7c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800ef6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	3314      	adds	r3, #20
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4610      	mov	r0, r2
 800ef7a:	4798      	blx	r3
    if (*currentPresenter)
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d008      	beq.n	800ef96 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800ef84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	3304      	adds	r3, #4
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4610      	mov	r0, r2
 800ef94:	4798      	blx	r3
    if (*currentScreen)
 800ef96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d007      	beq.n	800efae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800ef9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4610      	mov	r0, r2
 800efac:	4798      	blx	r3
    if (*currentPresenter)
 800efae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d008      	beq.n	800efc8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800efb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	3308      	adds	r3, #8
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4610      	mov	r0, r2
 800efc6:	4798      	blx	r3
}
 800efc8:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	2100      	movs	r1, #0
 800efd0:	4618      	mov	r0, r3
 800efd2:	f000 f9de 	bl	800f392 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>
 800efd6:	4603      	mov	r3, r0
 800efd8:	4619      	mov	r1, r3
 800efda:	2054      	movs	r0, #84	; 0x54
 800efdc:	f7fe ff7c 	bl	800ded8 <_ZnwjPv>
 800efe0:	4604      	mov	r4, r0
 800efe2:	2114      	movs	r1, #20
 800efe4:	4620      	mov	r0, r4
 800efe6:	f000 fa2b 	bl	800f440 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>
 800efea:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	2100      	movs	r1, #0
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 f999 	bl	800f32a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800eff8:	4603      	mov	r3, r0
 800effa:	4619      	mov	r1, r3
 800effc:	f241 003c 	movw	r0, #4156	; 0x103c
 800f000:	f7fe ff6a 	bl	800ded8 <_ZnwjPv>
 800f004:	4604      	mov	r4, r0
 800f006:	4620      	mov	r0, r4
 800f008:	f002 fb4e 	bl	80116a8 <_ZN11Screen1ViewC1Ev>
 800f00c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	2100      	movs	r1, #0
 800f014:	4618      	mov	r0, r3
 800f016:	f000 f99b 	bl	800f350 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800f01a:	4603      	mov	r3, r0
 800f01c:	4619      	mov	r1, r3
 800f01e:	2010      	movs	r0, #16
 800f020:	f7fe ff5a 	bl	800ded8 <_ZnwjPv>
 800f024:	4604      	mov	r4, r0
 800f026:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f028:	4620      	mov	r0, r4
 800f02a:	f002 fae5 	bl	80115f8 <_ZN16Screen1PresenterC1ER11Screen1View>
 800f02e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f034:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f03a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f040:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f044:	2b00      	cmp	r3, #0
 800f046:	d002      	beq.n	800f04e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	3304      	adds	r3, #4
 800f04c:	e000      	b.n	800f050 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 800f04e:	2300      	movs	r3, #0
 800f050:	4619      	mov	r1, r3
 800f052:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f054:	f7ff faac 	bl	800e5b0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	3304      	adds	r3, #4
 800f05c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f05e:	4618      	mov	r0, r3
 800f060:	f7ff fc3f 	bl	800e8e2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f068:	4618      	mov	r0, r3
 800f06a:	f000 f984 	bl	800f376 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800f06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f070:	61fb      	str	r3, [r7, #28]
 800f072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f074:	61bb      	str	r3, [r7, #24]
 800f076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f078:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	330c      	adds	r3, #12
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	69f8      	ldr	r0, [r7, #28]
 800f084:	4798      	blx	r3
    newPresenter->activate();
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	69b8      	ldr	r0, [r7, #24]
 800f08e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f090:	6979      	ldr	r1, [r7, #20]
 800f092:	69f8      	ldr	r0, [r7, #28]
 800f094:	f00a f8ea 	bl	801926c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3310      	adds	r3, #16
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6978      	ldr	r0, [r7, #20]
 800f0a2:	4798      	blx	r3
    newTransition->invalidate();
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	3314      	adds	r3, #20
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	6978      	ldr	r0, [r7, #20]
 800f0ae:	4798      	blx	r3
}
 800f0b0:	bf00      	nop
    return newPresenter;
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	373c      	adds	r7, #60	; 0x3c
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd90      	pop	{r4, r7, pc}
 800f0bc:	080276b4 	.word	0x080276b4
 800f0c0:	080279d4 	.word	0x080279d4
 800f0c4:	08027848 	.word	0x08027848
 800f0c8:	0802788c 	.word	0x0802788c
 800f0cc:	08027930 	.word	0x08027930

0800f0d0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f0d0:	b590      	push	{r4, r7, lr}
 800f0d2:	b08f      	sub	sp, #60	; 0x3c
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]
 800f0dc:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	689a      	ldr	r2, [r3, #8]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	3320      	adds	r3, #32
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4610      	mov	r0, r2
 800f0ee:	4798      	blx	r3
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	2b97      	cmp	r3, #151	; 0x97
 800f0f4:	d805      	bhi.n	800f102 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800f0f6:	4b7e      	ldr	r3, [pc, #504]	; (800f2f0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800f0f8:	4a7e      	ldr	r2, [pc, #504]	; (800f2f4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800f0fa:	21a3      	movs	r1, #163	; 0xa3
 800f0fc:	487e      	ldr	r0, [pc, #504]	; (800f2f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800f0fe:	f017 f985 	bl	802640c <__assert_func>
 800f102:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	685a      	ldr	r2, [r3, #4]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	3320      	adds	r3, #32
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4610      	mov	r0, r2
 800f114:	4798      	blx	r3
 800f116:	4603      	mov	r3, r0
 800f118:	2b0f      	cmp	r3, #15
 800f11a:	d805      	bhi.n	800f128 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800f11c:	4b77      	ldr	r3, [pc, #476]	; (800f2fc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f11e:	4a75      	ldr	r2, [pc, #468]	; (800f2f4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800f120:	21a4      	movs	r1, #164	; 0xa4
 800f122:	4875      	ldr	r0, [pc, #468]	; (800f2f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800f124:	f017 f972 	bl	802640c <__assert_func>
 800f128:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	68da      	ldr	r2, [r3, #12]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	68db      	ldr	r3, [r3, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	3320      	adds	r3, #32
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4610      	mov	r0, r2
 800f13a:	4798      	blx	r3
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b13      	cmp	r3, #19
 800f140:	d805      	bhi.n	800f14e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800f142:	4b6f      	ldr	r3, [pc, #444]	; (800f300 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f144:	4a6b      	ldr	r2, [pc, #428]	; (800f2f4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800f146:	21a5      	movs	r1, #165	; 0xa5
 800f148:	486b      	ldr	r0, [pc, #428]	; (800f2f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800f14a:	f017 f95f 	bl	802640c <__assert_func>
 800f14e:	bf00      	nop
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	62bb      	str	r3, [r7, #40]	; 0x28
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	627b      	str	r3, [r7, #36]	; 0x24
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f15c:	f008 fbfa 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 800f160:	4603      	mov	r3, r0
 800f162:	4618      	mov	r0, r3
 800f164:	f008 fbfc 	bl	8017960 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f168:	6a3b      	ldr	r3, [r7, #32]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d008      	beq.n	800f182 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	6a3b      	ldr	r3, [r7, #32]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	330c      	adds	r3, #12
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4610      	mov	r0, r2
 800f180:	4798      	blx	r3
    if (*currentTrans)
 800f182:	6a3b      	ldr	r3, [r7, #32]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d007      	beq.n	800f19a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800f18a:	6a3b      	ldr	r3, [r7, #32]
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	6a3b      	ldr	r3, [r7, #32]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4610      	mov	r0, r2
 800f198:	4798      	blx	r3
    if (*currentScreen)
 800f19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d008      	beq.n	800f1b4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 800f1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	3314      	adds	r3, #20
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4610      	mov	r0, r2
 800f1b2:	4798      	blx	r3
    if (*currentPresenter)
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d008      	beq.n	800f1ce <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	3304      	adds	r3, #4
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4610      	mov	r0, r2
 800f1cc:	4798      	blx	r3
    if (*currentScreen)
 800f1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d007      	beq.n	800f1e6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800f1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	4610      	mov	r0, r2
 800f1e4:	4798      	blx	r3
    if (*currentPresenter)
 800f1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d008      	beq.n	800f200 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800f1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	3308      	adds	r3, #8
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	4798      	blx	r3
}
 800f200:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	2100      	movs	r1, #0
 800f208:	4618      	mov	r0, r3
 800f20a:	f000 f97d 	bl	800f508 <_ZN8touchgfx17AbstractPartition2atINS_15BlockTransitionEEERT_t>
 800f20e:	4603      	mov	r3, r0
 800f210:	4619      	mov	r1, r3
 800f212:	2014      	movs	r0, #20
 800f214:	f7fe fe60 	bl	800ded8 <_ZnwjPv>
 800f218:	4604      	mov	r4, r0
 800f21a:	4620      	mov	r0, r4
 800f21c:	f7ff fa3c 	bl	800e698 <_ZN8touchgfx15BlockTransitionC1Ev>
 800f220:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	2100      	movs	r1, #0
 800f228:	4618      	mov	r0, r3
 800f22a:	f000 f980 	bl	800f52e <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800f22e:	4603      	mov	r3, r0
 800f230:	4619      	mov	r1, r3
 800f232:	2098      	movs	r0, #152	; 0x98
 800f234:	f7fe fe50 	bl	800ded8 <_ZnwjPv>
 800f238:	4604      	mov	r4, r0
 800f23a:	4620      	mov	r0, r4
 800f23c:	f002 fae8 	bl	8011810 <_ZN11Screen2ViewC1Ev>
 800f240:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	2100      	movs	r1, #0
 800f248:	4618      	mov	r0, r3
 800f24a:	f000 f983 	bl	800f554 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 800f24e:	4603      	mov	r3, r0
 800f250:	4619      	mov	r1, r3
 800f252:	2010      	movs	r0, #16
 800f254:	f7fe fe40 	bl	800ded8 <_ZnwjPv>
 800f258:	4604      	mov	r4, r0
 800f25a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f25c:	4620      	mov	r0, r4
 800f25e:	f002 fa81 	bl	8011764 <_ZN16Screen2PresenterC1ER11Screen2View>
 800f262:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f268:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f26e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f274:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d002      	beq.n	800f282 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27e:	3304      	adds	r3, #4
 800f280:	e000      	b.n	800f284 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15BlockTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800f282:	2300      	movs	r3, #0
 800f284:	4619      	mov	r1, r3
 800f286:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f288:	f7ff f992 	bl	800e5b0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	3304      	adds	r3, #4
 800f290:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff fb25 	bl	800e8e2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 f96c 	bl	800f57a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	61fb      	str	r3, [r7, #28]
 800f2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a8:	61bb      	str	r3, [r7, #24]
 800f2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ac:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	330c      	adds	r3, #12
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	69f8      	ldr	r0, [r7, #28]
 800f2b8:	4798      	blx	r3
    newPresenter->activate();
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	69b8      	ldr	r0, [r7, #24]
 800f2c2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f2c4:	6979      	ldr	r1, [r7, #20]
 800f2c6:	69f8      	ldr	r0, [r7, #28]
 800f2c8:	f009 ffd0 	bl	801926c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	3310      	adds	r3, #16
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	6978      	ldr	r0, [r7, #20]
 800f2d6:	4798      	blx	r3
    newTransition->invalidate();
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	3314      	adds	r3, #20
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	6978      	ldr	r0, [r7, #20]
 800f2e2:	4798      	blx	r3
}
 800f2e4:	bf00      	nop
    return newPresenter;
 800f2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	373c      	adds	r7, #60	; 0x3c
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd90      	pop	{r4, r7, pc}
 800f2f0:	080276b4 	.word	0x080276b4
 800f2f4:	08027aec 	.word	0x08027aec
 800f2f8:	08027848 	.word	0x08027848
 800f2fc:	0802788c 	.word	0x0802788c
 800f300:	08027930 	.word	0x08027930

0800f304 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	460b      	mov	r3, r1
 800f30e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	3324      	adds	r3, #36	; 0x24
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	887a      	ldrh	r2, [r7, #2]
 800f31a:	4611      	mov	r1, r2
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	4798      	blx	r3
 800f320:	4603      	mov	r3, r0
    }
 800f322:	4618      	mov	r0, r3
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b082      	sub	sp, #8
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
 800f332:	460b      	mov	r3, r1
 800f334:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	3324      	adds	r3, #36	; 0x24
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	887a      	ldrh	r2, [r7, #2]
 800f340:	4611      	mov	r1, r2
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	4798      	blx	r3
 800f346:	4603      	mov	r3, r0
    }
 800f348:	4618      	mov	r0, r3
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	460b      	mov	r3, r1
 800f35a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	3324      	adds	r3, #36	; 0x24
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	887a      	ldrh	r2, [r7, #2]
 800f366:	4611      	mov	r1, r2
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	4798      	blx	r3
 800f36c:	4603      	mov	r3, r0
    }
 800f36e:	4618      	mov	r0, r3
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800f376:	b480      	push	{r7}
 800f378:	b083      	sub	sp, #12
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	683a      	ldr	r2, [r7, #0]
 800f384:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f386:	bf00      	nop
 800f388:	370c      	adds	r7, #12
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 800f392:	b580      	push	{r7, lr}
 800f394:	b082      	sub	sp, #8
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
 800f39a:	460b      	mov	r3, r1
 800f39c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	3324      	adds	r3, #36	; 0x24
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	887a      	ldrh	r2, [r7, #2]
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	4798      	blx	r3
 800f3ae:	4603      	mov	r3, r0
    }
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3708      	adds	r7, #8
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	4a05      	ldr	r2, [pc, #20]	; (800f3d8 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7ff fa99 	bl	800e900 <_ZN8touchgfx6WidgetD1Ev>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3708      	adds	r7, #8
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	080294a4 	.word	0x080294a4

0800f3dc <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7ff ffe7 	bl	800f3b8 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800f3ea:	212c      	movs	r1, #44	; 0x2c
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f016 ffe1 	bl	80263b4 <_ZdlPvj>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3708      	adds	r7, #8
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	4a05      	ldr	r2, [pc, #20]	; (800f41c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev+0x20>)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	601a      	str	r2, [r3, #0]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f000 f90b 	bl	800f628 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	4618      	mov	r0, r3
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	08028798 	.word	0x08028798

0800f420 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED0Ev>:
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f7ff ffe7 	bl	800f3fc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 800f42e:	2110      	movs	r1, #16
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f016 ffbf 	bl	80263b4 <_ZdlPvj>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4618      	mov	r0, r3
 800f43a:	3708      	adds	r7, #8
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800f440:	b590      	push	{r4, r7, lr}
 800f442:	b087      	sub	sp, #28
 800f444:	af02      	add	r7, sp, #8
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	460b      	mov	r3, r1
 800f44a:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fe ffc0 	bl	800e3d4 <_ZN8touchgfx10TransitionC1Ev>
 800f454:	4a27      	ldr	r2, [pc, #156]	; (800f4f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xb4>)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	601a      	str	r2, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	330c      	adds	r3, #12
 800f45e:	4618      	mov	r0, r3
 800f460:	f006 fa76 	bl	8015950 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	639a      	str	r2, [r3, #56]	; 0x38
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800f474:	4a20      	ldr	r2, [pc, #128]	; (800f4f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xb8>)
 800f476:	f107 0308 	add.w	r3, r7, #8
 800f47a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f47e:	e883 0003 	stmia.w	r3, {r0, r1}
 800f482:	f107 0308 	add.w	r3, r7, #8
 800f486:	cb0c      	ldmia	r3, {r2, r3}
 800f488:	6879      	ldr	r1, [r7, #4]
 800f48a:	4620      	mov	r0, r4
 800f48c:	f000 f8ac 	bl	800f5e8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	78fa      	ldrb	r2, [r7, #3]
 800f494:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800f4a8:	4b14      	ldr	r3, [pc, #80]	; (800f4fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xbc>)
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d01c      	beq.n	800f4ea <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xaa>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f103 000c 	add.w	r0, r3, #12
 800f4b6:	4b12      	ldr	r3, [pc, #72]	; (800f500 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc0>)
 800f4b8:	881b      	ldrh	r3, [r3, #0]
 800f4ba:	b21a      	sxth	r2, r3
 800f4bc:	4b11      	ldr	r3, [pc, #68]	; (800f504 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc4>)
 800f4be:	881b      	ldrh	r3, [r3, #0]
 800f4c0:	b21b      	sxth	r3, r3
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	2100      	movs	r1, #0
 800f4ca:	f7fe fe19 	bl	800e100 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	330c      	adds	r3, #12
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f006 f9bf 	bl	8015856 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
                break;
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
                break;
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800f4d8:	4b0a      	ldr	r3, [pc, #40]	; (800f504 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc4>)
 800f4da:	881b      	ldrh	r3, [r3, #0]
 800f4dc:	425b      	negs	r3, r3
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	b21a      	sxth	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 800f4e8:	bf00      	nop
            }
        }
    }
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3714      	adds	r7, #20
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd90      	pop	{r4, r7, pc}
 800f4f4:	0802876c 	.word	0x0802876c
 800f4f8:	08027bf4 	.word	0x08027bf4
 800f4fc:	2004f6c7 	.word	0x2004f6c7
 800f500:	2004f6bc 	.word	0x2004f6bc
 800f504:	2004f6be 	.word	0x2004f6be

0800f508 <_ZN8touchgfx17AbstractPartition2atINS_15BlockTransitionEEERT_t>:
    T& at(const uint16_t index)
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	460b      	mov	r3, r1
 800f512:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	3324      	adds	r3, #36	; 0x24
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	887a      	ldrh	r2, [r7, #2]
 800f51e:	4611      	mov	r1, r2
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	4798      	blx	r3
 800f524:	4603      	mov	r3, r0
    }
 800f526:	4618      	mov	r0, r3
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800f52e:	b580      	push	{r7, lr}
 800f530:	b082      	sub	sp, #8
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
 800f536:	460b      	mov	r3, r1
 800f538:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	3324      	adds	r3, #36	; 0x24
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	887a      	ldrh	r2, [r7, #2]
 800f544:	4611      	mov	r1, r2
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	4798      	blx	r3
 800f54a:	4603      	mov	r3, r0
    }
 800f54c:	4618      	mov	r0, r3
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	460b      	mov	r3, r1
 800f55e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	3324      	adds	r3, #36	; 0x24
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	887a      	ldrh	r2, [r7, #2]
 800f56a:	4611      	mov	r1, r2
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	4798      	blx	r3
 800f570:	4603      	mov	r3, r0
    }
 800f572:	4618      	mov	r0, r3
 800f574:	3708      	adds	r7, #8
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800f57a:	b480      	push	{r7}
 800f57c:	b083      	sub	sp, #12
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
 800f582:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	683a      	ldr	r2, [r7, #0]
 800f588:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f58a:	bf00      	nop
 800f58c:	370c      	adds	r7, #12
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr

0800f596 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800f596:	b580      	push	{r7, lr}
 800f598:	b082      	sub	sp, #8
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5a4:	683a      	ldr	r2, [r7, #0]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d00a      	beq.n	800f5c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2a>
        case WEST:
            d.moveRelative(calculatedValue, 0);
            break;
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	3354      	adds	r3, #84	; 0x54
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	6838      	ldr	r0, [r7, #0]
 800f5bc:	4798      	blx	r3
            break;
 800f5be:	e000      	b.n	800f5c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 800f5c0:	bf00      	nop
        }
    }
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	4a04      	ldr	r2, [pc, #16]	; (800f5e4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	601a      	str	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr
 800f5e4:	080287b0 	.word	0x080287b0

0800f5e8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	4639      	mov	r1, r7
 800f5f4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7ff ffe4 	bl	800f5c8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800f600:	4a08      	ldr	r2, [pc, #32]	; (800f624 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	601a      	str	r2, [r3, #0]
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	68ba      	ldr	r2, [r7, #8]
 800f60a:	605a      	str	r2, [r3, #4]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	3308      	adds	r3, #8
 800f610:	463a      	mov	r2, r7
 800f612:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f616:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	4618      	mov	r0, r3
 800f61e:	3710      	adds	r7, #16
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	08028798 	.word	0x08028798

0800f628 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
    }
 800f630:	4a04      	ldr	r2, [pc, #16]	; (800f644 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	601a      	str	r2, [r3, #0]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	4618      	mov	r0, r3
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr
 800f644:	080287b0 	.word	0x080287b0

0800f648 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
    }
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f7ff ffe9 	bl	800f628 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800f656:	2104      	movs	r1, #4
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f016 feab 	bl	80263b4 <_ZdlPvj>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4618      	mov	r0, r3
 800f662:	3708      	adds	r7, #8
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>:
class SlideTransition : public Transition
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	4a0a      	ldr	r2, [pc, #40]	; (800f69c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev+0x34>)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	601a      	str	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	333c      	adds	r3, #60	; 0x3c
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7ff febe 	bl	800f3fc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	330c      	adds	r3, #12
 800f684:	4618      	mov	r0, r3
 800f686:	f7ff fe97 	bl	800f3b8 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7fe feb7 	bl	800e400 <_ZN8touchgfx10TransitionD1Ev>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4618      	mov	r0, r3
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	0802876c 	.word	0x0802876c

0800f6a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED0Ev>:
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f7ff ffdd 	bl	800f668 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>
 800f6ae:	2154      	movs	r1, #84	; 0x54
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f016 fe7f 	bl	80263b4 <_ZdlPvj>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3708      	adds	r7, #8
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <_ZN8touchgfx15BlockTransitionD1Ev>:
class BlockTransition : public Transition
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	4a05      	ldr	r2, [pc, #20]	; (800f6e0 <_ZN8touchgfx15BlockTransitionD1Ev+0x20>)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	601a      	str	r2, [r3, #0]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fe fe95 	bl	800e400 <_ZN8touchgfx10TransitionD1Ev>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3708      	adds	r7, #8
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	08028830 	.word	0x08028830

0800f6e4 <_ZN8touchgfx15BlockTransitionD0Ev>:
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f7ff ffe7 	bl	800f6c0 <_ZN8touchgfx15BlockTransitionD1Ev>
 800f6f2:	2114      	movs	r1, #20
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f016 fe5d 	bl	80263b4 <_ZdlPvj>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <_ZN8touchgfx12NoTransitionD1Ev>:
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	4a05      	ldr	r2, [pc, #20]	; (800f724 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe fe73 	bl	800e400 <_ZN8touchgfx10TransitionD1Ev>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4618      	mov	r0, r3
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	08028854 	.word	0x08028854

0800f728 <_ZN8touchgfx12NoTransitionD0Ev>:
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7ff ffe7 	bl	800f704 <_ZN8touchgfx12NoTransitionD1Ev>
 800f736:	210c      	movs	r1, #12
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f016 fe3b 	bl	80263b4 <_ZdlPvj>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	4a05      	ldr	r2, [pc, #20]	; (800f768 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	601a      	str	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fe fc73 	bl	800e044 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4618      	mov	r0, r3
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	080288c4 	.word	0x080288c4

0800f76c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f7ff ffe7 	bl	800f748 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f77a:	2110      	movs	r1, #16
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f016 fe19 	bl	80263b4 <_ZdlPvj>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4618      	mov	r0, r3
 800f786:	3708      	adds	r7, #8
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800f794:	4b40      	ldr	r3, [pc, #256]	; (800f898 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x10c>)
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	f083 0301 	eor.w	r3, r3, #1
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d003      	beq.n	800f7aa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1e>
            done = true;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	721a      	strb	r2, [r3, #8]
            return;
 800f7a8:	e073      	b.n	800f892 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7fe fe47 	bl	800e440 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	b2da      	uxtb	r2, r3
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d82f      	bhi.n	800f832 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f7d8:	b298      	uxth	r0, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	f009 fd45 	bl	8019278 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	f003 0301 	and.w	r3, r3, #1
 800f804:	b29b      	uxth	r3, r3
 800f806:	2b00      	cmp	r3, #0
 800f808:	d01b      	beq.n	800f842 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800f810:	b29b      	uxth	r3, r3
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800f818:	2a00      	cmp	r2, #0
 800f81a:	dd01      	ble.n	800f820 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x94>
 800f81c:	2201      	movs	r2, #1
 800f81e:	e001      	b.n	800f824 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x98>
 800f820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f824:	4413      	add	r3, r2
 800f826:	b29b      	uxth	r3, r3
 800f828:	b21a      	sxth	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800f830:	e007      	b.n	800f842 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb6>
            done = true;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2201      	movs	r2, #1
 800f836:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2200      	movs	r2, #0
 800f83c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 800f840:	e027      	b.n	800f892 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getY();
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	330c      	adds	r3, #12
 800f846:	4618      	mov	r0, r3
 800f848:	f7fe fc7b 	bl	800e142 <_ZNK8touchgfx8Drawable4getYEv>
 800f84c:	4603      	mov	r3, r0
 800f84e:	4619      	mov	r1, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800f856:	b29a      	uxth	r2, r3
 800f858:	b28b      	uxth	r3, r1
 800f85a:	1ad3      	subs	r3, r2, r3
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	b21a      	sxth	r2, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(0, calculatedValue);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f103 000c 	add.w	r0, r3, #12
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800f872:	461a      	mov	r2, r3
 800f874:	2100      	movs	r1, #0
 800f876:	f009 f8ad 	bl	80189d4 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800f87a:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6858      	ldr	r0, [r3, #4]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	337c      	adds	r3, #124	; 0x7c
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	323c      	adds	r2, #60	; 0x3c
 800f88e:	4611      	mov	r1, r2
 800f890:	4798      	blx	r3
    }
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	2004f6c7 	.word	0x2004f6c7

0800f89c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv>:
    virtual void tearDown()
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800f8a4:	4b0b      	ldr	r3, [pc, #44]	; (800f8d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x38>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00e      	beq.n	800f8ca <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x2e>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00a      	beq.n	800f8ca <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6858      	ldr	r0, [r3, #4]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	3364      	adds	r3, #100	; 0x64
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	320c      	adds	r2, #12
 800f8c6:	4611      	mov	r1, r2
 800f8c8:	4798      	blx	r3
    }
 800f8ca:	bf00      	nop
 800f8cc:	3708      	adds	r7, #8
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	2004f6c7 	.word	0x2004f6c7

0800f8d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv>:
    virtual void init()
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b088      	sub	sp, #32
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800f8e0:	4b1a      	ldr	r3, [pc, #104]	; (800f94c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x74>)
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d02d      	beq.n	800f944 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x6c>
            Transition::init();
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fe fdbc 	bl	800e468 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800f8f0:	4a17      	ldr	r2, [pc, #92]	; (800f950 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x78>)
 800f8f2:	f107 0318 	add.w	r3, r7, #24
 800f8f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8fa:	e883 0003 	stmia.w	r3, {r0, r1}
 800f8fe:	f107 0008 	add.w	r0, r7, #8
 800f902:	f107 0318 	add.w	r3, r7, #24
 800f906:	cb0c      	ldmia	r3, {r2, r3}
 800f908:	6879      	ldr	r1, [r7, #4]
 800f90a:	f7ff fe6d 	bl	800f5e8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	685a      	ldr	r2, [r3, #4]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	337c      	adds	r3, #124	; 0x7c
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f107 0108 	add.w	r1, r7, #8
 800f920:	4610      	mov	r0, r2
 800f922:	4798      	blx	r3
            screenContainer->add(snapshot);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6858      	ldr	r0, [r3, #4]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	3360      	adds	r3, #96	; 0x60
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	320c      	adds	r2, #12
 800f936:	4611      	mov	r1, r2
 800f938:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800f93a:	f107 0308 	add.w	r3, r7, #8
 800f93e:	4618      	mov	r0, r3
 800f940:	f7ff fd5c 	bl	800f3fc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
    }
 800f944:	bf00      	nop
 800f946:	3720      	adds	r7, #32
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	2004f6c7 	.word	0x2004f6c7
 800f950:	08027bfc 	.word	0x08027bfc

0800f954 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	6039      	str	r1, [r7, #0]
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	3354      	adds	r3, #84	; 0x54
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a05      	ldr	r2, [pc, #20]	; (800f97c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x28>)
 800f968:	8812      	ldrh	r2, [r2, #0]
 800f96a:	b212      	sxth	r2, r2
 800f96c:	2100      	movs	r1, #0
 800f96e:	6838      	ldr	r0, [r7, #0]
 800f970:	4798      	blx	r3
            break;
 800f972:	bf00      	nop
    }
 800f974:	bf00      	nop
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	2004f6be 	.word	0x2004f6be

0800f980 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	68d2      	ldr	r2, [r2, #12]
 800f992:	1052      	asrs	r2, r2, #1
 800f994:	1898      	adds	r0, r3, r2
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	f003 0301 	and.w	r3, r3, #1
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d102      	bne.n	800f9a8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x28>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	e00a      	b.n	800f9be <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	68d2      	ldr	r2, [r2, #12]
 800f9b0:	1052      	asrs	r2, r2, #1
 800f9b2:	4413      	add	r3, r2
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	6892      	ldr	r2, [r2, #8]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	6839      	ldr	r1, [r7, #0]
 800f9c0:	4798      	blx	r3
    }
 800f9c2:	bf00      	nop
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800f9ca:	b480      	push	{r7}
 800f9cc:	b083      	sub	sp, #12
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d010      	beq.n	800f9fc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	689b      	ldr	r3, [r3, #8]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d107      	bne.n	800f9f2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d101      	bne.n	800f9f2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e000      	b.n	800f9f4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d001      	beq.n	800f9fc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	e000      	b.n	800f9fe <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x34>
 800f9fc:	2300      	movs	r3, #0
    }
 800f9fe:	4618      	mov	r0, r3
 800fa00:	370c      	adds	r7, #12
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800fa0a:	b580      	push	{r7, lr}
 800fa0c:	b082      	sub	sp, #8
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	68d2      	ldr	r2, [r2, #12]
 800fa1a:	1052      	asrs	r2, r2, #1
 800fa1c:	1899      	adds	r1, r3, r2
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d102      	bne.n	800fa30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	689b      	ldr	r3, [r3, #8]
 800fa2e:	e00a      	b.n	800fa46 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	687a      	ldr	r2, [r7, #4]
 800fa36:	68d2      	ldr	r2, [r2, #12]
 800fa38:	1052      	asrs	r2, r2, #1
 800fa3a:	4413      	add	r3, r2
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	6892      	ldr	r2, [r2, #8]
 800fa42:	4413      	add	r3, r2
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4608      	mov	r0, r1
 800fa48:	4798      	blx	r3
    }
 800fa4a:	bf00      	nop
 800fa4c:	3708      	adds	r7, #8
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800fa52:	b480      	push	{r7}
 800fa54:	b083      	sub	sp, #12
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d010      	beq.n	800fa84 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	689b      	ldr	r3, [r3, #8]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d107      	bne.n	800fa7a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	f003 0301 	and.w	r3, r3, #1
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d101      	bne.n	800fa7a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800fa76:	2301      	movs	r3, #1
 800fa78:	e000      	b.n	800fa7c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d001      	beq.n	800fa84 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800fa80:	2301      	movs	r3, #1
 800fa82:	e000      	b.n	800fa86 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800fa84:	2300      	movs	r3, #0
    }
 800fa86:	4618      	mov	r0, r3
 800fa88:	370c      	adds	r7, #12
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr

0800fa92 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800fa92:	b480      	push	{r7}
 800fa94:	b083      	sub	sp, #12
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
        : color(0)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	601a      	str	r2, [r3, #0]
    }
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4618      	mov	r0, r3
 800faa4:	370c      	adds	r7, #12
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr

0800faae <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800faae:	b480      	push	{r7}
 800fab0:	b083      	sub	sp, #12
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
 800fab6:	6039      	str	r1, [r7, #0]
        : color(col)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	683a      	ldr	r2, [r7, #0]
 800fabc:	601a      	str	r2, [r3, #0]
    }
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr

0800facc <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800facc:	b480      	push	{r7}
 800face:	b083      	sub	sp, #12
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
        return color;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
    }
 800fad8:	4618      	mov	r0, r3
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <_ZN8touchgfx4RectC1Ev>:
    Rect()
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2200      	movs	r2, #0
 800faf0:	801a      	strh	r2, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	805a      	strh	r2, [r3, #2]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	809a      	strh	r2, [r3, #4]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	80da      	strh	r2, [r3, #6]
    }
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4618      	mov	r0, r3
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr
	...

0800fb14 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
          visible(true)
 800fb1c:	4a14      	ldr	r2, [pc, #80]	; (800fb70 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	601a      	str	r2, [r3, #0]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	3304      	adds	r3, #4
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7ff ffdc 	bl	800fae4 <_ZN8touchgfx4RectC1Ev>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	330c      	adds	r3, #12
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7ff ffd7 	bl	800fae4 <_ZN8touchgfx4RectC1Ev>
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	615a      	str	r2, [r3, #20]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	619a      	str	r2, [r3, #24]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	61da      	str	r2, [r3, #28]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	841a      	strh	r2, [r3, #32]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	845a      	strh	r2, [r3, #34]	; 0x22
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2200      	movs	r2, #0
 800fb58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2201      	movs	r2, #1
 800fb60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4618      	mov	r0, r3
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	0802969c 	.word	0x0802969c

0800fb74 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800fb80:	4618      	mov	r0, r3
 800fb82:	370c      	adds	r7, #12
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr

0800fb8c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
    {
 800fb94:	4a06      	ldr	r2, [pc, #24]	; (800fbb0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	601a      	str	r2, [r3, #0]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	3304      	adds	r3, #4
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f000 ff96 	bl	8010ad0 <_ZN8touchgfx9ContainerD1Ev>
    }
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	4618      	mov	r0, r3
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	08029798 	.word	0x08029798

0800fbb4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b082      	sub	sp, #8
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
    }
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f7ff ffe5 	bl	800fb8c <_ZN8touchgfx6ScreenD1Ev>
 800fbc2:	213c      	movs	r1, #60	; 0x3c
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f016 fbf5 	bl	80263b4 <_ZdlPvj>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3708      	adds	r7, #8
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
    {
    }
 800fbdc:	bf00      	nop
 800fbde:	370c      	adds	r7, #12
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr

0800fbe8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
    {
    }
 800fbf0:	bf00      	nop
 800fbf2:	370c      	adds	r7, #12
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
    {
    }
 800fc04:	bf00      	nop
 800fc06:	370c      	adds	r7, #12
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr

0800fc10 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
    {
    }
 800fc18:	bf00      	nop
 800fc1a:	370c      	adds	r7, #12
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800fc30:	bf00      	nop
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	3304      	adds	r3, #4
 800fc4a:	6839      	ldr	r1, [r7, #0]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f003 fdb7 	bl	80137c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800fc52:	bf00      	nop
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
	...

0800fc5c <_ZN8touchgfx6WidgetC1Ev>:
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7ff ff54 	bl	800fb14 <_ZN8touchgfx8DrawableC1Ev>
 800fc6c:	4a03      	ldr	r2, [pc, #12]	; (800fc7c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	601a      	str	r2, [r3, #0]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4618      	mov	r0, r3
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	080287c8 	.word	0x080287c8

0800fc80 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	2326      	movs	r3, #38	; 0x26
 800fc8e:	461a      	mov	r2, r3
 800fc90:	2100      	movs	r1, #0
 800fc92:	f016 fc46 	bl	8026522 <memset>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7ff ffdf 	bl	800fc5c <_ZN8touchgfx6WidgetC1Ev>
 800fc9e:	4a09      	ldr	r2, [pc, #36]	; (800fcc4 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	601a      	str	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	22ff      	movs	r2, #255	; 0xff
 800fca8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	3328      	adds	r3, #40	; 0x28
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7ff fefb 	bl	800faae <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	08029514 	.word	0x08029514

0800fcc8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	683a      	ldr	r2, [r7, #0]
 800fcd6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fcd8:	bf00      	nop
 800fcda:	370c      	adds	r7, #12
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr

0800fce4 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800fcec:	4a06      	ldr	r2, [pc, #24]	; (800fd08 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	601a      	str	r2, [r3, #0]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	809a      	strh	r2, [r3, #4]
    {
    }
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	370c      	adds	r7, #12
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	08028abc 	.word	0x08028abc

0800fd0c <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
    {
 800fd14:	4a04      	ldr	r2, [pc, #16]	; (800fd28 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	601a      	str	r2, [r3, #0]
    }
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	370c      	adds	r7, #12
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr
 800fd28:	08028abc 	.word	0x08028abc

0800fd2c <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
    }
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7ff ffe9 	bl	800fd0c <_ZN8touchgfx15AbstractPainterD1Ev>
 800fd3a:	2108      	movs	r1, #8
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f016 fb39 	bl	80263b4 <_ZdlPvj>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	4618      	mov	r0, r3
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800fd54:	2300      	movs	r3, #0
    }
 800fd56:	4618      	mov	r0, r3
 800fd58:	370c      	adds	r7, #12
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr

0800fd62 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800fd62:	b480      	push	{r7}
 800fd64:	b083      	sub	sp, #12
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]
 800fd6a:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	809a      	strh	r2, [r3, #4]
        return true;
 800fd76:	2301      	movs	r3, #1
    }
 800fd78:	4618      	mov	r0, r3
 800fd7a:	370c      	adds	r7, #12
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
    {
        return;
 800fd8c:	bf00      	nop
    }
 800fd8e:	370c      	adds	r7, #12
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
     */
    class Q5
    {
    public:
        /** Initializes a new instance of the Q5 class. */
        Q5()
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
            : v(0)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	601a      	str	r2, [r3, #0]
        {
        }
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	370c      	adds	r7, #12
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800fdb4:	b480      	push	{r7}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
            : v(i)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	683a      	ldr	r2, [r7, #0]
 800fdc2:	601a      	str	r2, [r3, #0]
        {
        }
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	370c      	adds	r7, #12
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr

0800fdd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800fdd2:	b480      	push	{r7}
 800fdd4:	b083      	sub	sp, #12
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
        {
            return v;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
        }
 800fdde:	4618      	mov	r0, r3
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr

0800fdea <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q10 format.
         *
         * @param  i int pre-formattet in Q10 format.
         */
        explicit Q10(int i)
 800fdea:	b480      	push	{r7}
 800fdec:	b083      	sub	sp, #12
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
 800fdf2:	6039      	str	r1, [r7, #0]
            : v(i)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	683a      	ldr	r2, [r7, #0]
 800fdf8:	601a      	str	r2, [r3, #0]
        {
        }
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr

0800fe08 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	683a      	ldr	r2, [r7, #0]
 800fe16:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fe18:	bf00      	nop
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	78fa      	ldrb	r2, [r7, #3]
 800fe34:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800fe38:	bf00      	nop
 800fe3a:	370c      	adds	r7, #12
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr

0800fe44 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 800fe52:	4618      	mov	r0, r3
 800fe54:	370c      	adds	r7, #12
 800fe56:	46bd      	mov	sp, r7
 800fe58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5c:	4770      	bx	lr

0800fe5e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 800fe5e:	b580      	push	{r7, lr}
 800fe60:	b082      	sub	sp, #8
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
 800fe66:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff fe3b 	bl	800fae4 <_ZN8touchgfx4RectC1Ev>
    }
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
	...

0800fe78 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
    {
 800fe82:	4a08      	ldr	r2, [pc, #32]	; (800fea4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	601a      	str	r2, [r3, #0]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	3304      	adds	r3, #4
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7ff fe00 	bl	800fa92 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800fe92:	6839      	ldr	r1, [r7, #0]
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 f827 	bl	800fee8 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	08028aa8 	.word	0x08028aa8

0800fea8 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
    {
 800feb0:	4a04      	ldr	r2, [pc, #16]	; (800fec4 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	601a      	str	r2, [r3, #0]
    }
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	370c      	adds	r7, #12
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr
 800fec4:	08028aa8 	.word	0x08028aa8

0800fec8 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
    }
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f7ff ffe9 	bl	800fea8 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800fed6:	2108      	movs	r1, #8
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f016 fa6b 	bl	80263b4 <_ZdlPvj>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4618      	mov	r0, r3
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	683a      	ldr	r2, [r7, #0]
 800fef6:	605a      	str	r2, [r3, #4]
    }
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7ff fee8 	bl	800fce4 <_ZN8touchgfx15AbstractPainterC1Ev>
 800ff14:	4a26      	ldr	r2, [pc, #152]	; (800ffb0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800ff1e:	f7fe fa3d 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 800ff22:	4603      	mov	r3, r0
 800ff24:	681a      	ldr	r2, [r3, #0]
 800ff26:	322c      	adds	r2, #44	; 0x2c
 800ff28:	6812      	ldr	r2, [r2, #0]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	4790      	blx	r2
 800ff2e:	4603      	mov	r3, r0
 800ff30:	461a      	mov	r2, r3
 800ff32:	7bfb      	ldrb	r3, [r7, #15]
 800ff34:	4293      	cmp	r3, r2
 800ff36:	bf0c      	ite	eq
 800ff38:	2301      	moveq	r3, #1
 800ff3a:	2300      	movne	r3, #0
 800ff3c:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800ff3e:	f7fe fa21 	bl	800e384 <_ZN8touchgfx3HAL11getInstanceEv>
 800ff42:	4603      	mov	r3, r0
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7ff fe15 	bl	800fb74 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	bf14      	ite	ne
 800ff50:	2301      	movne	r3, #1
 800ff52:	2300      	moveq	r3, #0
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d01b      	beq.n	800ff92 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800ff5a:	f7fe fa13 	bl	800e384 <_ZN8touchgfx3HAL11getInstanceEv>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7ff fe07 	bl	800fb74 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800ff66:	4603      	mov	r3, r0
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	322c      	adds	r2, #44	; 0x2c
 800ff6c:	6812      	ldr	r2, [r2, #0]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	4790      	blx	r2
 800ff72:	4603      	mov	r3, r0
 800ff74:	461a      	mov	r2, r3
 800ff76:	7bfb      	ldrb	r3, [r7, #15]
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	bf0c      	ite	eq
 800ff7c:	2301      	moveq	r3, #1
 800ff7e:	2300      	movne	r3, #0
 800ff80:	b2da      	uxtb	r2, r3
 800ff82:	7bbb      	ldrb	r3, [r7, #14]
 800ff84:	4313      	orrs	r3, r2
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	bf14      	ite	ne
 800ff8c:	2301      	movne	r3, #1
 800ff8e:	2300      	moveq	r3, #0
 800ff90:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800ff92:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d105      	bne.n	800ffa4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 800ff98:	4b06      	ldr	r3, [pc, #24]	; (800ffb4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 800ff9a:	4a07      	ldr	r2, [pc, #28]	; (800ffb8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 800ff9c:	212c      	movs	r1, #44	; 0x2c
 800ff9e:	4807      	ldr	r0, [pc, #28]	; (800ffbc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 800ffa0:	f016 fa34 	bl	802640c <__assert_func>
 800ffa4:	bf00      	nop
    }
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3710      	adds	r7, #16
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	08028a88 	.word	0x08028a88
 800ffb4:	08027c04 	.word	0x08027c04
 800ffb8:	08027c64 	.word	0x08027c64
 800ffbc:	08027ca0 	.word	0x08027ca0

0800ffc0 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	4a05      	ldr	r2, [pc, #20]	; (800ffe0 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	601a      	str	r2, [r3, #0]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff fe9b 	bl	800fd0c <_ZN8touchgfx15AbstractPainterD1Ev>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	08028a88 	.word	0x08028a88

0800ffe4 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7ff ffe7 	bl	800ffc0 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800fff2:	2108      	movs	r1, #8
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f016 f9dd 	bl	80263b4 <_ZdlPvj>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4618      	mov	r0, r3
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff ff77 	bl	800ff04 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	3308      	adds	r3, #8
 801001a:	6839      	ldr	r1, [r7, #0]
 801001c:	4618      	mov	r0, r3
 801001e:	f7ff ff2b 	bl	800fe78 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 8010022:	4a05      	ldr	r2, [pc, #20]	; (8010038 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	601a      	str	r2, [r3, #0]
 8010028:	4a04      	ldr	r2, [pc, #16]	; (801003c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	609a      	str	r2, [r3, #8]
    {
    }
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	08029220 	.word	0x08029220
 801003c:	08029244 	.word	0x08029244

08010040 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 8010040:	b590      	push	{r4, r7, lr}
 8010042:	b085      	sub	sp, #20
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	3308      	adds	r3, #8
 801004e:	6839      	ldr	r1, [r7, #0]
 8010050:	4618      	mov	r0, r3
 8010052:	f7ff ff49 	bl	800fee8 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 801005c:	f107 030c 	add.w	r3, r7, #12
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff fd33 	bl	800facc <_ZNK8touchgfx9colortypecvmEv>
 8010066:	4603      	mov	r3, r0
 8010068:	0a1b      	lsrs	r3, r3, #8
 801006a:	b29b      	uxth	r3, r3
 801006c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010070:	f023 0307 	bic.w	r3, r3, #7
 8010074:	b29c      	uxth	r4, r3
 8010076:	f107 030c 	add.w	r3, r7, #12
 801007a:	4618      	mov	r0, r3
 801007c:	f7ff fd26 	bl	800facc <_ZNK8touchgfx9colortypecvmEv>
 8010080:	4603      	mov	r3, r0
 8010082:	095b      	lsrs	r3, r3, #5
 8010084:	b29b      	uxth	r3, r3
 8010086:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801008a:	b29b      	uxth	r3, r3
 801008c:	4323      	orrs	r3, r4
 801008e:	b29c      	uxth	r4, r3
 8010090:	f107 030c 	add.w	r3, r7, #12
 8010094:	4618      	mov	r0, r3
 8010096:	f7ff fd19 	bl	800facc <_ZNK8touchgfx9colortypecvmEv>
 801009a:	4603      	mov	r3, r0
 801009c:	08db      	lsrs	r3, r3, #3
 801009e:	b29b      	uxth	r3, r3
 80100a0:	f003 031f 	and.w	r3, r3, #31
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	4323      	orrs	r3, r4
 80100a8:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	821a      	strh	r2, [r3, #16]
    }
 80100ae:	bf00      	nop
 80100b0:	3714      	adds	r7, #20
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd90      	pop	{r4, r7, pc}

080100b6 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 80100b6:	f1a0 0008 	sub.w	r0, r0, #8
 80100ba:	e7c1      	b.n	8010040 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

080100bc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	4a05      	ldr	r2, [pc, #20]	; (80100dc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	601a      	str	r2, [r3, #0]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7ff fd5d 	bl	800fb8c <_ZN8touchgfx6ScreenD1Ev>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	4618      	mov	r0, r3
 80100d6:	3708      	adds	r7, #8
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	08028a54 	.word	0x08028a54

080100e0 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7ff ffe7 	bl	80100bc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80100ee:	2140      	movs	r1, #64	; 0x40
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f016 f95f 	bl	80263b4 <_ZdlPvj>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4618      	mov	r0, r3
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	4a1b      	ldr	r2, [pc, #108]	; (8010178 <_ZN15Screen1ViewBaseD1Ev+0x78>)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	601a      	str	r2, [r3, #0]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010114:	4618      	mov	r0, r3
 8010116:	f000 fd41 	bl	8010b9c <_ZN8touchgfx13PainterRGB565D1Ev>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010120:	4618      	mov	r0, r3
 8010122:	f000 fcb3 	bl	8010a8c <_ZN8touchgfx5ShapeILt4EED1Ev>
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801012c:	4618      	mov	r0, r3
 801012e:	f000 fd35 	bl	8010b9c <_ZN8touchgfx13PainterRGB565D1Ev>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	33f4      	adds	r3, #244	; 0xf4
 8010136:	4618      	mov	r0, r3
 8010138:	f000 fca8 	bl	8010a8c <_ZN8touchgfx5ShapeILt4EED1Ev>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	33e0      	adds	r3, #224	; 0xe0
 8010140:	4618      	mov	r0, r3
 8010142:	f000 fd2b 	bl	8010b9c <_ZN8touchgfx13PainterRGB565D1Ev>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	3398      	adds	r3, #152	; 0x98
 801014a:	4618      	mov	r0, r3
 801014c:	f000 fd04 	bl	8010b58 <_ZN8touchgfx6CircleD1Ev>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	336c      	adds	r3, #108	; 0x6c
 8010154:	4618      	mov	r0, r3
 8010156:	f000 fcdd 	bl	8010b14 <_ZN8touchgfx3BoxD1Ev>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	3340      	adds	r3, #64	; 0x40
 801015e:	4618      	mov	r0, r3
 8010160:	f000 fcd8 	bl	8010b14 <_ZN8touchgfx3BoxD1Ev>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4618      	mov	r0, r3
 8010168:	f7ff ffa8 	bl	80100bc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4618      	mov	r0, r3
 8010170:	3708      	adds	r7, #8
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop
 8010178:	0802898c 	.word	0x0802898c

0801017c <_ZN15Screen1ViewBaseD0Ev>:
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f7ff ffbb 	bl	8010100 <_ZN15Screen1ViewBaseD1Ev>
 801018a:	f241 013c 	movw	r1, #4156	; 0x103c
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f016 f910 	bl	80263b4 <_ZdlPvj>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	4618      	mov	r0, r3
 8010198:	3708      	adds	r7, #8
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 801019e:	b580      	push	{r7, lr}
 80101a0:	b082      	sub	sp, #8
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80101a6:	f007 fbd5 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 80101aa:	4603      	mov	r3, r0
    }
 80101ac:	4618      	mov	r0, r3
 80101ae:	3708      	adds	r7, #8
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	4a05      	ldr	r2, [pc, #20]	; (80101d4 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	601a      	str	r2, [r3, #0]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7fe fb9b 	bl	800e900 <_ZN8touchgfx6WidgetD1Ev>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	4618      	mov	r0, r3
 80101ce:	3708      	adds	r7, #8
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	0802942c 	.word	0x0802942c

080101d8 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f7ff ffe7 	bl	80101b4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80101e6:	212c      	movs	r1, #44	; 0x2c
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f016 f8e3 	bl	80263b4 <_ZdlPvj>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4618      	mov	r0, r3
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <_ZN8touchgfx13AbstractShapeD1Ev>:
 * around 0,0. The shapes points (corners) are calculated with regards to scaling and
 * rotation to allow for faster redrawing. Care must be taken to call
 * updateAbstractShapeCache() after updating the shape, the scale of the shape or the
 * rotation of the shape.
 */
class AbstractShape : public CanvasWidget
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	4a05      	ldr	r2, [pc, #20]	; (8010218 <_ZN8touchgfx13AbstractShapeD1Ev+0x20>)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	601a      	str	r2, [r3, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4618      	mov	r0, r3
 801020a:	f7ff ffd3 	bl	80101b4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4618      	mov	r0, r3
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	08029320 	.word	0x08029320

0801021c <_ZN8touchgfx13AbstractShapeD0Ev>:
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f7ff ffe7 	bl	80101f8 <_ZN8touchgfx13AbstractShapeD1Ev>
 801022a:	2148      	movs	r1, #72	; 0x48
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f016 f8c1 	bl	80263b4 <_ZdlPvj>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4618      	mov	r0, r3
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <_ZN8touchgfx5ShapeILt4EEC1Ev>:
 * scaled, rotated and moved freely. Example uses could be the hands of a clock.
 *
 * @see AbstractShape
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 801023c:	b5b0      	push	{r4, r5, r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	4618      	mov	r0, r3
 8010248:	f004 fcb6 	bl	8014bb8 <_ZN8touchgfx13AbstractShapeC1Ev>
 801024c:	4a1b      	ldr	r2, [pc, #108]	; (80102bc <_ZN8touchgfx5ShapeILt4EEC1Ev+0x80>)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	601a      	str	r2, [r3, #0]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	3348      	adds	r3, #72	; 0x48
 8010256:	2403      	movs	r4, #3
 8010258:	461d      	mov	r5, r3
 801025a:	2c00      	cmp	r4, #0
 801025c:	db05      	blt.n	801026a <_ZN8touchgfx5ShapeILt4EEC1Ev+0x2e>
 801025e:	4628      	mov	r0, r5
 8010260:	f7ff fd9a 	bl	800fd98 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8010264:	3504      	adds	r5, #4
 8010266:	3c01      	subs	r4, #1
 8010268:	e7f7      	b.n	801025a <_ZN8touchgfx5ShapeILt4EEC1Ev+0x1e>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	3358      	adds	r3, #88	; 0x58
 801026e:	2403      	movs	r4, #3
 8010270:	461d      	mov	r5, r3
 8010272:	2c00      	cmp	r4, #0
 8010274:	db05      	blt.n	8010282 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x46>
 8010276:	4628      	mov	r0, r5
 8010278:	f7ff fd8e 	bl	800fd98 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 801027c:	3504      	adds	r5, #4
 801027e:	3c01      	subs	r4, #1
 8010280:	e7f7      	b.n	8010272 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x36>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	3368      	adds	r3, #104	; 0x68
 8010286:	2403      	movs	r4, #3
 8010288:	461d      	mov	r5, r3
 801028a:	2c00      	cmp	r4, #0
 801028c:	db05      	blt.n	801029a <_ZN8touchgfx5ShapeILt4EEC1Ev+0x5e>
 801028e:	4628      	mov	r0, r5
 8010290:	f7ff fd82 	bl	800fd98 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8010294:	3504      	adds	r5, #4
 8010296:	3c01      	subs	r4, #1
 8010298:	e7f7      	b.n	801028a <_ZN8touchgfx5ShapeILt4EEC1Ev+0x4e>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	3378      	adds	r3, #120	; 0x78
 801029e:	2403      	movs	r4, #3
 80102a0:	461d      	mov	r5, r3
 80102a2:	2c00      	cmp	r4, #0
 80102a4:	db05      	blt.n	80102b2 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x76>
 80102a6:	4628      	mov	r0, r5
 80102a8:	f7ff fd76 	bl	800fd98 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 80102ac:	3504      	adds	r5, #4
 80102ae:	3c01      	subs	r4, #1
 80102b0:	e7f7      	b.n	80102a2 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x66>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bdb0      	pop	{r4, r5, r7, pc}
 80102bc:	080289c0 	.word	0x080289c0

080102c0 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase()
 80102c0:	b5b0      	push	{r4, r5, r7, lr}
 80102c2:	b0a0      	sub	sp, #128	; 0x80
 80102c4:	af02      	add	r7, sp, #8
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4618      	mov	r0, r3
 80102cc:	f000 fa6a 	bl	80107a4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80102d0:	4ae1      	ldr	r2, [pc, #900]	; (8010658 <_ZN15Screen1ViewBaseC1Ev+0x398>)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	601a      	str	r2, [r3, #0]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	3340      	adds	r3, #64	; 0x40
 80102da:	4618      	mov	r0, r3
 80102dc:	f7ff fcd0 	bl	800fc80 <_ZN8touchgfx3BoxC1Ev>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	336c      	adds	r3, #108	; 0x6c
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7ff fccb 	bl	800fc80 <_ZN8touchgfx3BoxC1Ev>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	3398      	adds	r3, #152	; 0x98
 80102ee:	4618      	mov	r0, r3
 80102f0:	f004 fd80 	bl	8014df4 <_ZN8touchgfx6CircleC1Ev>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80102fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80102fe:	2100      	movs	r1, #0
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff fbd4 	bl	800faae <_ZN8touchgfx9colortypeC1Em>
 8010306:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010308:	4620      	mov	r0, r4
 801030a:	f7ff fe7b 	bl	8010004 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	33f4      	adds	r3, #244	; 0xf4
 8010312:	4618      	mov	r0, r3
 8010314:	f7ff ff92 	bl	801023c <_ZN8touchgfx5ShapeILt4EEC1Ev>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 801031e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010322:	2100      	movs	r1, #0
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff fbc2 	bl	800faae <_ZN8touchgfx9colortypeC1Em>
 801032a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801032c:	4620      	mov	r0, r4
 801032e:	f7ff fe69 	bl	8010004 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010338:	4618      	mov	r0, r3
 801033a:	f7ff ff7f 	bl	801023c <_ZN8touchgfx5ShapeILt4EEC1Ev>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010344:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010348:	2100      	movs	r1, #0
 801034a:	4618      	mov	r0, r3
 801034c:	f7ff fbaf 	bl	800faae <_ZN8touchgfx9colortypeC1Em>
 8010350:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010352:	4620      	mov	r0, r4
 8010354:	f7ff fe56 	bl	8010004 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801035e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8010362:	4618      	mov	r0, r3
 8010364:	f006 fa4a 	bl	80167fc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 240, 320);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801036e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010372:	9300      	str	r3, [sp, #0]
 8010374:	23f0      	movs	r3, #240	; 0xf0
 8010376:	2200      	movs	r2, #0
 8010378:	2100      	movs	r1, #0
 801037a:	f7fd fec1 	bl	800e100 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010384:	2300      	movs	r3, #0
 8010386:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 801038a:	2300      	movs	r3, #0
 801038c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8010390:	2300      	movs	r3, #0
 8010392:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8010396:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801039a:	041b      	lsls	r3, r3, #16
 801039c:	461a      	mov	r2, r3
 801039e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80103a2:	021b      	lsls	r3, r3, #8
 80103a4:	431a      	orrs	r2, r3
 80103a6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80103aa:	4313      	orrs	r3, r2
 80103ac:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80103b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80103b4:	4611      	mov	r1, r2
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7ff fb79 	bl	800faae <_ZN8touchgfx9colortypeC1Em>
 80103bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103be:	4619      	mov	r1, r3
 80103c0:	4620      	mov	r0, r4
 80103c2:	f7ff fc81 	bl	800fcc8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 240, 320);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80103cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	23f0      	movs	r3, #240	; 0xf0
 80103d4:	2200      	movs	r2, #0
 80103d6:	2100      	movs	r1, #0
 80103d8:	f7fd fe92 	bl	800e100 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80103e2:	23ff      	movs	r3, #255	; 0xff
 80103e4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80103e8:	23ff      	movs	r3, #255	; 0xff
 80103ea:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80103ee:	23ff      	movs	r3, #255	; 0xff
 80103f0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 80103f4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80103f8:	041b      	lsls	r3, r3, #16
 80103fa:	461a      	mov	r2, r3
 80103fc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8010400:	021b      	lsls	r3, r3, #8
 8010402:	431a      	orrs	r2, r3
 8010404:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8010408:	4313      	orrs	r3, r2
 801040a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801040e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010412:	4611      	mov	r1, r2
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff fb4a 	bl	800faae <_ZN8touchgfx9colortypeC1Em>
 801041a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801041c:	4619      	mov	r1, r3
 801041e:	4620      	mov	r0, r4
 8010420:	f7ff fc52 	bl	800fcc8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    circle1.setPosition(80, 120, 80, 80);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f103 0098 	add.w	r0, r3, #152	; 0x98
 801042a:	2350      	movs	r3, #80	; 0x50
 801042c:	9300      	str	r3, [sp, #0]
 801042e:	2350      	movs	r3, #80	; 0x50
 8010430:	2278      	movs	r2, #120	; 0x78
 8010432:	2150      	movs	r1, #80	; 0x50
 8010434:	f7fd fe64 	bl	800e100 <_ZN8touchgfx8Drawable11setPositionEssss>
    circle1.setCenter(40, 40);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	3398      	adds	r3, #152	; 0x98
 801043c:	2228      	movs	r2, #40	; 0x28
 801043e:	2128      	movs	r1, #40	; 0x28
 8010440:	4618      	mov	r0, r3
 8010442:	f000 f962 	bl	801070a <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circle1.setRadius(40);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	3398      	adds	r3, #152	; 0x98
 801044a:	2128      	movs	r1, #40	; 0x28
 801044c:	4618      	mov	r0, r3
 801044e:	f000 f9bf 	bl	80107d0 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circle1.setLineWidth(0);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	3398      	adds	r3, #152	; 0x98
 8010456:	2100      	movs	r1, #0
 8010458:	4618      	mov	r0, r3
 801045a:	f000 f9d0 	bl	80107fe <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circle1.setArc(0, 360);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	3398      	adds	r3, #152	; 0x98
 8010462:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010466:	2100      	movs	r1, #0
 8010468:	4618      	mov	r0, r3
 801046a:	f000 f974 	bl	8010756 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circle1Painter.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8010474:	2300      	movs	r3, #0
 8010476:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 801047a:	23ff      	movs	r3, #255	; 0xff
 801047c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8010480:	2300      	movs	r3, #0
 8010482:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010486:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 801048a:	041b      	lsls	r3, r3, #16
 801048c:	461a      	mov	r2, r3
 801048e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8010492:	021b      	lsls	r3, r3, #8
 8010494:	431a      	orrs	r2, r3
 8010496:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801049a:	4313      	orrs	r3, r2
 801049c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80104a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80104a4:	4611      	mov	r1, r2
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7ff fb01 	bl	800faae <_ZN8touchgfx9colortypeC1Em>
 80104ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104ae:	4619      	mov	r1, r3
 80104b0:	4620      	mov	r0, r4
 80104b2:	f7ff fdc5 	bl	8010040 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    circle1.setPainter(circle1Painter);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	33e0      	adds	r3, #224	; 0xe0
 80104c0:	4619      	mov	r1, r3
 80104c2:	4610      	mov	r0, r2
 80104c4:	f7ff fca0 	bl	800fe08 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    circle1.setAlpha(162);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	3398      	adds	r3, #152	; 0x98
 80104cc:	21a2      	movs	r1, #162	; 0xa2
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7ff fca8 	bl	800fe24 <_ZN8touchgfx12CanvasWidget8setAlphaEh>

    shape1.setPosition(80, 40, 80, 80);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80104da:	2350      	movs	r3, #80	; 0x50
 80104dc:	9300      	str	r3, [sp, #0]
 80104de:	2350      	movs	r3, #80	; 0x50
 80104e0:	2228      	movs	r2, #40	; 0x28
 80104e2:	2150      	movs	r1, #80	; 0x50
 80104e4:	f7fd fe0c 	bl	800e100 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape1.setAlpha(95);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	33f4      	adds	r3, #244	; 0xf4
 80104ec:	215f      	movs	r1, #95	; 0x5f
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7ff fc98 	bl	800fe24 <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    shape1.setOrigin(0.0f, 0.0f);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	33f4      	adds	r3, #244	; 0xf4
 80104f8:	eddf 0a58 	vldr	s1, [pc, #352]	; 801065c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 80104fc:	ed9f 0a57 	vldr	s0, [pc, #348]	; 801065c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 8010500:	4618      	mov	r0, r3
 8010502:	f000 f993 	bl	801082c <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape1.setScale(1.0f, 1.0f);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	33f4      	adds	r3, #244	; 0xf4
 801050a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801050e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010512:	4618      	mov	r0, r3
 8010514:	f000 f9ea 	bl	80108ec <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape1.setAngle(0.0f);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	33f4      	adds	r3, #244	; 0xf4
 801051c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 801065c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 8010520:	4618      	mov	r0, r3
 8010522:	f000 fa27 	bl	8010974 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 801052c:	23ff      	movs	r3, #255	; 0xff
 801052e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8010532:	2300      	movs	r3, #0
 8010534:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8010538:	2300      	movs	r3, #0
 801053a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 801053e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8010542:	041b      	lsls	r3, r3, #16
 8010544:	461a      	mov	r2, r3
 8010546:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801054a:	021b      	lsls	r3, r3, #8
 801054c:	431a      	orrs	r2, r3
 801054e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8010552:	4313      	orrs	r3, r2
 8010554:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010558:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801055c:	4611      	mov	r1, r2
 801055e:	4618      	mov	r0, r3
 8010560:	f7ff faa5 	bl	800faae <_ZN8touchgfx9colortypeC1Em>
 8010564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010566:	4619      	mov	r1, r3
 8010568:	4620      	mov	r0, r4
 801056a:	f7ff fd69 	bl	8010040 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    shape1.setPainter(shape1Painter);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801057a:	4619      	mov	r1, r3
 801057c:	4610      	mov	r0, r2
 801057e:	f7ff fc43 	bl	800fe08 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 8010582:	4b37      	ldr	r3, [pc, #220]	; (8010660 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 8010584:	f107 0408 	add.w	r4, r7, #8
 8010588:	461d      	mov	r5, r3
 801058a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801058c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801058e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010592:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape1.setShape(shape1Points);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	33f4      	adds	r3, #244	; 0xf4
 801059a:	f107 0208 	add.w	r2, r7, #8
 801059e:	4611      	mov	r1, r2
 80105a0:	4618      	mov	r0, r3
 80105a2:	f000 fa1f 	bl	80109e4 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    shape2.setPosition(80, 200, 80, 80);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 80105ac:	2350      	movs	r3, #80	; 0x50
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	2350      	movs	r3, #80	; 0x50
 80105b2:	22c8      	movs	r2, #200	; 0xc8
 80105b4:	2150      	movs	r1, #80	; 0x50
 80105b6:	f7fd fda3 	bl	800e100 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape2.setOrigin(0.0f, 0.0f);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80105c0:	eddf 0a26 	vldr	s1, [pc, #152]	; 801065c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 80105c4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 801065c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 80105c8:	4618      	mov	r0, r3
 80105ca:	f000 f92f 	bl	801082c <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape2.setScale(1.0f, 1.0f);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80105d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80105d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80105dc:	4618      	mov	r0, r3
 80105de:	f000 f985 	bl	80108ec <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape2.setAngle(0.0f);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80105e8:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 801065c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 80105ec:	4618      	mov	r0, r3
 80105ee:	f000 f9c1 	bl	8010974 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape2Painter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 255));
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f503 7406 	add.w	r4, r3, #536	; 0x218
 80105f8:	2300      	movs	r3, #0
 80105fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80105fe:	2300      	movs	r3, #0
 8010600:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8010604:	23ff      	movs	r3, #255	; 0xff
 8010606:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 801060a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801060e:	041b      	lsls	r3, r3, #16
 8010610:	461a      	mov	r2, r3
 8010612:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010616:	021b      	lsls	r3, r3, #8
 8010618:	431a      	orrs	r2, r3
 801061a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 801061e:	4313      	orrs	r3, r2
 8010620:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010624:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010628:	4611      	mov	r1, r2
 801062a:	4618      	mov	r0, r3
 801062c:	f7ff fa3f 	bl	800faae <_ZN8touchgfx9colortypeC1Em>
 8010630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010632:	4619      	mov	r1, r3
 8010634:	4620      	mov	r0, r4
 8010636:	f7ff fd03 	bl	8010040 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    shape2.setPainter(shape2Painter);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010646:	4619      	mov	r1, r3
 8010648:	4610      	mov	r0, r2
 801064a:	f7ff fbdd 	bl	800fe08 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape2Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 801064e:	4b04      	ldr	r3, [pc, #16]	; (8010660 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 8010650:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8010654:	e006      	b.n	8010664 <_ZN15Screen1ViewBaseC1Ev+0x3a4>
 8010656:	bf00      	nop
 8010658:	0802898c 	.word	0x0802898c
 801065c:	00000000 	.word	0x00000000
 8010660:	08027d00 	.word	0x08027d00
 8010664:	461d      	mov	r5, r3
 8010666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801066a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801066e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape2.setShape(shape2Points);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010678:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801067c:	4611      	mov	r1, r2
 801067e:	4618      	mov	r0, r3
 8010680:	f000 f9b0 	bl	80109e4 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    add(__background);
 8010684:	687a      	ldr	r2, [r7, #4]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	3340      	adds	r3, #64	; 0x40
 801068a:	4619      	mov	r1, r3
 801068c:	4610      	mov	r0, r2
 801068e:	f7ff fad5 	bl	800fc3c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8010692:	687a      	ldr	r2, [r7, #4]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	336c      	adds	r3, #108	; 0x6c
 8010698:	4619      	mov	r1, r3
 801069a:	4610      	mov	r0, r2
 801069c:	f7ff face 	bl	800fc3c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circle1);
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	3398      	adds	r3, #152	; 0x98
 80106a6:	4619      	mov	r1, r3
 80106a8:	4610      	mov	r0, r2
 80106aa:	f7ff fac7 	bl	800fc3c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape1);
 80106ae:	687a      	ldr	r2, [r7, #4]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	33f4      	adds	r3, #244	; 0xf4
 80106b4:	4619      	mov	r1, r3
 80106b6:	4610      	mov	r0, r2
 80106b8:	f7ff fac0 	bl	800fc3c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape2);
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80106c4:	4619      	mov	r1, r3
 80106c6:	4610      	mov	r0, r2
 80106c8:	f7ff fab8 	bl	800fc3c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4618      	mov	r0, r3
 80106d0:	3778      	adds	r7, #120	; 0x78
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bdb0      	pop	{r4, r5, r7, pc}
 80106d6:	bf00      	nop

080106d8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]

}
 80106e0:	bf00      	nop
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <_ZN15Screen1ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen1ViewBase::afterTransition()
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
    //Screen1to2
    //When screen transition ends change screen to Screen2
    //Go to Screen2 with block transition
    application().gotoScreen2ScreenBlockTransition();
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f7ff fd52 	bl	801019e <_ZN15Screen1ViewBase11applicationEv>
 80106fa:	4603      	mov	r3, r0
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fe fa07 	bl	800eb10 <_ZN23FrontendApplicationBase32gotoScreen2ScreenBlockTransitionEv>
}
 8010702:	bf00      	nop
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 801070a:	b580      	push	{r7, lr}
 801070c:	b088      	sub	sp, #32
 801070e:	af00      	add	r7, sp, #0
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	60b9      	str	r1, [r7, #8]
 8010714:	607a      	str	r2, [r7, #4]
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	015a      	lsls	r2, r3, #5
 801071e:	f107 0314 	add.w	r3, r7, #20
 8010722:	4611      	mov	r1, r2
 8010724:	4618      	mov	r0, r3
 8010726:	f7ff fb45 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5(x);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	62da      	str	r2, [r3, #44]	; 0x2c
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	61fb      	str	r3, [r7, #28]
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	015a      	lsls	r2, r3, #5
 801073a:	f107 0310 	add.w	r3, r7, #16
 801073e:	4611      	mov	r1, r2
 8010740:	4618      	mov	r0, r3
 8010742:	f7ff fb37 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5(y);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801074e:	bf00      	nop
 8010750:	3720      	adds	r7, #32
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     *
     * @note    The area containing the Circle is not invalidated.
     * @note    Angles are given in degrees, so a full circle is 360.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 8010756:	b580      	push	{r7, lr}
 8010758:	b088      	sub	sp, #32
 801075a:	af00      	add	r7, sp, #0
 801075c:	60f8      	str	r0, [r7, #12]
 801075e:	60b9      	str	r1, [r7, #8]
 8010760:	607a      	str	r2, [r7, #4]
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	61bb      	str	r3, [r7, #24]
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	015a      	lsls	r2, r3, #5
 801076a:	f107 0314 	add.w	r3, r7, #20
 801076e:	4611      	mov	r1, r2
 8010770:	4618      	mov	r0, r3
 8010772:	f7ff fb1f 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	639a      	str	r2, [r3, #56]	; 0x38
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	61fb      	str	r3, [r7, #28]
 8010782:	69fb      	ldr	r3, [r7, #28]
 8010784:	015a      	lsls	r2, r3, #5
 8010786:	f107 0310 	add.w	r3, r7, #16
 801078a:	4611      	mov	r1, r2
 801078c:	4618      	mov	r0, r3
 801078e:	f7ff fb11 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801079a:	bf00      	nop
 801079c:	3720      	adds	r7, #32
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
	...

080107a4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4618      	mov	r0, r3
 80107b0:	f008 fbb0 	bl	8018f14 <_ZN8touchgfx6ScreenC1Ev>
 80107b4:	4a05      	ldr	r2, [pc, #20]	; (80107cc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2200      	movs	r2, #0
 80107be:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4618      	mov	r0, r3
 80107c4:	3708      	adds	r7, #8
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	08028a54 	.word	0x08028a54

080107d0 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	60fb      	str	r3, [r7, #12]
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	015a      	lsls	r2, r3, #5
 80107e2:	f107 0308 	add.w	r3, r7, #8
 80107e6:	4611      	mov	r1, r2
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7ff fae3 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5(r);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80107f6:	bf00      	nop
 80107f8:	3710      	adds	r7, #16
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 80107fe:	b580      	push	{r7, lr}
 8010800:	b084      	sub	sp, #16
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
 8010806:	6039      	str	r1, [r7, #0]
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	60fb      	str	r3, [r7, #12]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	015a      	lsls	r2, r3, #5
 8010810:	f107 0308 	add.w	r3, r7, #8
 8010814:	4611      	mov	r1, r2
 8010816:	4618      	mov	r0, r3
 8010818:	f7ff facc 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8010824:	bf00      	nop
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>:
     * @see moveOrigin
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setOrigin(T x, T y)
 801082c:	b590      	push	{r4, r7, lr}
 801082e:	b08b      	sub	sp, #44	; 0x2c
 8010830:	af00      	add	r7, sp, #0
 8010832:	60f8      	str	r0, [r7, #12]
 8010834:	ed87 0a02 	vstr	s0, [r7, #8]
 8010838:	edc7 0a01 	vstr	s1, [r7, #4]
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	623b      	str	r3, [r7, #32]
 8010840:	edd7 7a08 	vldr	s15, [r7, #32]
 8010844:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80108e8 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 8010848:	ee67 7a87 	vmul.f32	s15, s15, s14
 801084c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010850:	f107 031c 	add.w	r3, r7, #28
 8010854:	ee17 1a90 	vmov	r1, s15
 8010858:	4618      	mov	r0, r3
 801085a:	f7ff faab 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801085e:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 8010860:	617b      	str	r3, [r7, #20]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	627b      	str	r3, [r7, #36]	; 0x24
 8010866:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801086a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80108e8 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 801086e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010876:	f107 0318 	add.w	r3, r7, #24
 801087a:	ee17 1a90 	vmov	r1, s15
 801087e:	4618      	mov	r0, r3
 8010880:	f7ff fa98 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010884:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 8010886:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	332c      	adds	r3, #44	; 0x2c
 801088c:	4618      	mov	r0, r3
 801088e:	f7ff faa0 	bl	800fdd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010892:	4604      	mov	r4, r0
 8010894:	f107 0314 	add.w	r3, r7, #20
 8010898:	4618      	mov	r0, r3
 801089a:	f7ff fa9a 	bl	800fdd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801089e:	4603      	mov	r3, r0
 80108a0:	429c      	cmp	r4, r3
 80108a2:	d10f      	bne.n	80108c4 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	3330      	adds	r3, #48	; 0x30
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7ff fa92 	bl	800fdd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80108ae:	4604      	mov	r4, r0
 80108b0:	f107 0310 	add.w	r3, r7, #16
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7ff fa8c 	bl	800fdd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80108ba:	4603      	mov	r3, r0
 80108bc:	429c      	cmp	r4, r3
 80108be:	d101      	bne.n	80108c4 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 80108c0:	2301      	movs	r3, #1
 80108c2:	e000      	b.n	80108c6 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x9a>
 80108c4:	2300      	movs	r3, #0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d109      	bne.n	80108de <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb2>
        {
            return;
        }

        dx = dxNew;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	697a      	ldr	r2, [r7, #20]
 80108ce:	62da      	str	r2, [r3, #44]	; 0x2c
        dy = dyNew;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	693a      	ldr	r2, [r7, #16]
 80108d4:	631a      	str	r2, [r3, #48]	; 0x30

        updateAbstractShapeCache();
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f004 f984 	bl	8014be4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 80108dc:	e000      	b.n	80108e0 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb4>
            return;
 80108de:	bf00      	nop
    }
 80108e0:	372c      	adds	r7, #44	; 0x2c
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd90      	pop	{r4, r7, pc}
 80108e6:	bf00      	nop
 80108e8:	42000000 	.word	0x42000000

080108ec <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>:
     * @see getScale, updateScale
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b088      	sub	sp, #32
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80108f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q10 toQ10(T value)
    {
        return Q10((int)(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 8010900:	edd7 7a06 	vldr	s15, [r7, #24]
 8010904:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8010970 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8010908:	ee67 7a87 	vmul.f32	s15, s15, s14
 801090c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8010970 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8010910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010918:	f107 0314 	add.w	r3, r7, #20
 801091c:	ee17 1a90 	vmov	r1, s15
 8010920:	4618      	mov	r0, r3
 8010922:	f7ff fa62 	bl	800fdea <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	461a      	mov	r2, r3
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	639a      	str	r2, [r3, #56]	; 0x38
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	61fb      	str	r3, [r7, #28]
 8010932:	edd7 7a07 	vldr	s15, [r7, #28]
 8010936:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8010970 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 801093a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801093e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010970 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8010942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801094a:	f107 0310 	add.w	r3, r7, #16
 801094e:	ee17 1a90 	vmov	r1, s15
 8010952:	4618      	mov	r0, r3
 8010954:	f7ff fa49 	bl	800fdea <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	461a      	mov	r2, r3
        yScale = CWRUtil::toQ10<T>(newYScale);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	63da      	str	r2, [r3, #60]	; 0x3c
        updateAbstractShapeCache();
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f004 f93f 	bl	8014be4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8010966:	bf00      	nop
 8010968:	3720      	adds	r7, #32
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	42000000 	.word	0x42000000

08010974 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>:
    void setAngle(T angle)
 8010974:	b590      	push	{r4, r7, lr}
 8010976:	b087      	sub	sp, #28
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	ed87 0a00 	vstr	s0, [r7]
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	617b      	str	r3, [r7, #20]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8010984:	edd7 7a05 	vldr	s15, [r7, #20]
 8010988:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80109e0 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x6c>
 801098c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010994:	f107 0310 	add.w	r3, r7, #16
 8010998:	ee17 1a90 	vmov	r1, s15
 801099c:	4618      	mov	r0, r3
 801099e:	f7ff fa09 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80109a2:	693b      	ldr	r3, [r7, #16]
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 80109a4:	60fb      	str	r3, [r7, #12]
        if (shapeAngle != angleQ5)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	3334      	adds	r3, #52	; 0x34
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7ff fa11 	bl	800fdd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80109b0:	4604      	mov	r4, r0
 80109b2:	f107 030c 	add.w	r3, r7, #12
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7ff fa0b 	bl	800fdd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80109bc:	4603      	mov	r3, r0
 80109be:	429c      	cmp	r4, r3
 80109c0:	bf14      	ite	ne
 80109c2:	2301      	movne	r3, #1
 80109c4:	2300      	moveq	r3, #0
 80109c6:	b2db      	uxtb	r3, r3
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d005      	beq.n	80109d8 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x64>
            shapeAngle = angleQ5;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	68fa      	ldr	r2, [r7, #12]
 80109d0:	635a      	str	r2, [r3, #52]	; 0x34
            updateAbstractShapeCache();
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f004 f906 	bl	8014be4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 80109d8:	bf00      	nop
 80109da:	371c      	adds	r7, #28
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd90      	pop	{r4, r7, pc}
 80109e0:	42000000 	.word	0x42000000

080109e4 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>:
    void setShape(const ShapePoint<T>* points)
 80109e4:	b5b0      	push	{r4, r5, r7, lr}
 80109e6:	b088      	sub	sp, #32
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
        int numPoints = getNumPoints();
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	3370      	adds	r3, #112	; 0x70
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	4798      	blx	r3
 80109fa:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 80109fc:	2300      	movs	r3, #0
 80109fe:	61fb      	str	r3, [r7, #28]
 8010a00:	69fa      	ldr	r2, [r7, #28]
 8010a02:	69bb      	ldr	r3, [r7, #24]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	da38      	bge.n	8010a7a <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x96>
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	3374      	adds	r3, #116	; 0x74
 8010a0e:	681c      	ldr	r4, [r3, #0]
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	00db      	lsls	r3, r3, #3
 8010a14:	683a      	ldr	r2, [r7, #0]
 8010a16:	4413      	add	r3, r2
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	613b      	str	r3, [r7, #16]
 8010a1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010a20:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8010a88 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 8010a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a2c:	f107 030c 	add.w	r3, r7, #12
 8010a30:	ee17 1a90 	vmov	r1, s15
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7ff f9bd 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	461d      	mov	r5, r3
 8010a3e:	69fb      	ldr	r3, [r7, #28]
 8010a40:	00db      	lsls	r3, r3, #3
 8010a42:	683a      	ldr	r2, [r7, #0]
 8010a44:	4413      	add	r3, r2
 8010a46:	685b      	ldr	r3, [r3, #4]
 8010a48:	617b      	str	r3, [r7, #20]
 8010a4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8010a4e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8010a88 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 8010a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a5a:	f107 0308 	add.w	r3, r7, #8
 8010a5e:	ee17 1a90 	vmov	r1, s15
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7ff f9a6 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	462a      	mov	r2, r5
 8010a6c:	69f9      	ldr	r1, [r7, #28]
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	3301      	adds	r3, #1
 8010a76:	61fb      	str	r3, [r7, #28]
 8010a78:	e7c2      	b.n	8010a00 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x1c>
        updateAbstractShapeCache();
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f004 f8b2 	bl	8014be4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8010a80:	bf00      	nop
 8010a82:	3720      	adds	r7, #32
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bdb0      	pop	{r4, r5, r7, pc}
 8010a88:	42000000 	.word	0x42000000

08010a8c <_ZN8touchgfx5ShapeILt4EED1Ev>:
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	4a05      	ldr	r2, [pc, #20]	; (8010aac <_ZN8touchgfx5ShapeILt4EED1Ev+0x20>)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7ff fbab 	bl	80101f8 <_ZN8touchgfx13AbstractShapeD1Ev>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	080289c0 	.word	0x080289c0

08010ab0 <_ZN8touchgfx5ShapeILt4EED0Ev>:
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff ffe7 	bl	8010a8c <_ZN8touchgfx5ShapeILt4EED1Ev>
 8010abe:	2188      	movs	r1, #136	; 0x88
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f015 fc77 	bl	80263b4 <_ZdlPvj>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3708      	adds	r7, #8
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	4a05      	ldr	r2, [pc, #20]	; (8010af0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	601a      	str	r2, [r3, #0]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7fd facf 	bl	800e084 <_ZN8touchgfx8DrawableD1Ev>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3708      	adds	r7, #8
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	08029038 	.word	0x08029038

08010af4 <_ZN8touchgfx9ContainerD0Ev>:
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f7ff ffe7 	bl	8010ad0 <_ZN8touchgfx9ContainerD1Ev>
 8010b02:	212c      	movs	r1, #44	; 0x2c
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f015 fc55 	bl	80263b4 <_ZdlPvj>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3708      	adds	r7, #8
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	4a05      	ldr	r2, [pc, #20]	; (8010b34 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	601a      	str	r2, [r3, #0]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7fd feeb 	bl	800e900 <_ZN8touchgfx6WidgetD1Ev>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3708      	adds	r7, #8
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}
 8010b34:	08029514 	.word	0x08029514

08010b38 <_ZN8touchgfx3BoxD0Ev>:
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7ff ffe7 	bl	8010b14 <_ZN8touchgfx3BoxD1Ev>
 8010b46:	212c      	movs	r1, #44	; 0x2c
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f015 fc33 	bl	80263b4 <_ZdlPvj>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4618      	mov	r0, r3
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	4a05      	ldr	r2, [pc, #20]	; (8010b78 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	601a      	str	r2, [r3, #0]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7ff fb23 	bl	80101b4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4618      	mov	r0, r3
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	080293b4 	.word	0x080293b4

08010b7c <_ZN8touchgfx6CircleD0Ev>:
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7ff ffe7 	bl	8010b58 <_ZN8touchgfx6CircleD1Ev>
 8010b8a:	2148      	movs	r1, #72	; 0x48
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f015 fc11 	bl	80263b4 <_ZdlPvj>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	4618      	mov	r0, r3
 8010b96:	3708      	adds	r7, #8
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	4a09      	ldr	r2, [pc, #36]	; (8010bcc <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	601a      	str	r2, [r3, #0]
 8010baa:	4a09      	ldr	r2, [pc, #36]	; (8010bd0 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	609a      	str	r2, [r3, #8]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	3308      	adds	r3, #8
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7ff f977 	bl	800fea8 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7ff f9ff 	bl	800ffc0 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3708      	adds	r7, #8
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	08029220 	.word	0x08029220
 8010bd0:	08029244 	.word	0x08029244

08010bd4 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8010bd4:	f1a0 0008 	sub.w	r0, r0, #8
 8010bd8:	e7e0      	b.n	8010b9c <_ZN8touchgfx13PainterRGB565D1Ev>
 8010bda:	bf00      	nop

08010bdc <_ZN8touchgfx13PainterRGB565D0Ev>:
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f7ff ffd9 	bl	8010b9c <_ZN8touchgfx13PainterRGB565D1Ev>
 8010bea:	2114      	movs	r1, #20
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f015 fbe1 	bl	80263b4 <_ZdlPvj>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8010bfc:	f1a0 0008 	sub.w	r0, r0, #8
 8010c00:	e7ec      	b.n	8010bdc <_ZN8touchgfx13PainterRGB565D0Ev>

08010c02 <_ZNK8touchgfx5ShapeILt4EE12getNumPointsEv>:
{
public:
    virtual int getNumPoints() const
 8010c02:	b480      	push	{r7}
 8010c04:	b083      	sub	sp, #12
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 8010c0a:	2304      	movs	r3, #4
    }
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	370c      	adds	r7, #12
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr

08010c18 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_>:

    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
 8010c24:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	db0e      	blt.n	8010c4a <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x32>
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	2b03      	cmp	r3, #3
 8010c30:	dc0b      	bgt.n	8010c4a <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x32>
        {
            xCorner[i] = x, yCorner[i] = y;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	68ba      	ldr	r2, [r7, #8]
 8010c36:	3212      	adds	r2, #18
 8010c38:	6879      	ldr	r1, [r7, #4]
 8010c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	68ba      	ldr	r2, [r7, #8]
 8010c42:	3216      	adds	r2, #22
 8010c44:	6839      	ldr	r1, [r7, #0]
 8010c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8010c4a:	bf00      	nop
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr

08010c56 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi>:

    virtual CWRUtil::Q5 getCornerX(int i) const
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b084      	sub	sp, #16
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
 8010c5e:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	db08      	blt.n	8010c78 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x22>
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	2b03      	cmp	r3, #3
 8010c6a:	dc05      	bgt.n	8010c78 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x22>
        {
            return xCorner[i];
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	683a      	ldr	r2, [r7, #0]
 8010c70:	3212      	adds	r2, #18
 8010c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c76:	e00b      	b.n	8010c90 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x3a>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	60fb      	str	r3, [r7, #12]
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	015a      	lsls	r2, r3, #5
 8010c80:	f107 0308 	add.w	r3, r7, #8
 8010c84:	4611      	mov	r1, r2
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7ff f894 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010c8c:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010c8e:	bf00      	nop
    }
 8010c90:	4618      	mov	r0, r3
 8010c92:	3710      	adds	r7, #16
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi>:

    virtual CWRUtil::Q5 getCornerY(int i) const
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	db08      	blt.n	8010cba <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x22>
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	2b03      	cmp	r3, #3
 8010cac:	dc05      	bgt.n	8010cba <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x22>
        {
            return yCorner[i];
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	683a      	ldr	r2, [r7, #0]
 8010cb2:	3216      	adds	r2, #22
 8010cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cb8:	e00b      	b.n	8010cd2 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x3a>
 8010cba:	2300      	movs	r3, #0
 8010cbc:	60fb      	str	r3, [r7, #12]
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	015a      	lsls	r2, r3, #5
 8010cc2:	f107 0308 	add.w	r3, r7, #8
 8010cc6:	4611      	mov	r1, r2
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7ff f873 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010cce:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010cd0:	bf00      	nop
    }
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3710      	adds	r7, #16
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}

08010cda <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_>:

protected:
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 8010cda:	b480      	push	{r7}
 8010cdc:	b085      	sub	sp, #20
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	60f8      	str	r0, [r7, #12]
 8010ce2:	60b9      	str	r1, [r7, #8]
 8010ce4:	607a      	str	r2, [r7, #4]
 8010ce6:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	db0e      	blt.n	8010d0c <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x32>
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	2b03      	cmp	r3, #3
 8010cf2:	dc0b      	bgt.n	8010d0c <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x32>
        {
            xCache[i] = x, yCache[i] = y;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	68ba      	ldr	r2, [r7, #8]
 8010cf8:	321a      	adds	r2, #26
 8010cfa:	6879      	ldr	r1, [r7, #4]
 8010cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	68ba      	ldr	r2, [r7, #8]
 8010d04:	321e      	adds	r2, #30
 8010d06:	6839      	ldr	r1, [r7, #0]
 8010d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8010d0c:	bf00      	nop
 8010d0e:	3714      	adds	r7, #20
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr

08010d18 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi>:

    virtual CWRUtil::Q5 getCacheX(int i) const
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	db08      	blt.n	8010d3a <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x22>
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	2b03      	cmp	r3, #3
 8010d2c:	dc05      	bgt.n	8010d3a <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x22>
        {
            return xCache[i];
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	683a      	ldr	r2, [r7, #0]
 8010d32:	321a      	adds	r2, #26
 8010d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d38:	e00b      	b.n	8010d52 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x3a>
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	60fb      	str	r3, [r7, #12]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	015a      	lsls	r2, r3, #5
 8010d42:	f107 0308 	add.w	r3, r7, #8
 8010d46:	4611      	mov	r1, r2
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ff f833 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010d4e:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010d50:	bf00      	nop
    }
 8010d52:	4618      	mov	r0, r3
 8010d54:	3710      	adds	r7, #16
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi>:

    virtual CWRUtil::Q5 getCacheY(int i) const
 8010d5a:	b580      	push	{r7, lr}
 8010d5c:	b084      	sub	sp, #16
 8010d5e:	af00      	add	r7, sp, #0
 8010d60:	6078      	str	r0, [r7, #4]
 8010d62:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	db08      	blt.n	8010d7c <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x22>
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	2b03      	cmp	r3, #3
 8010d6e:	dc05      	bgt.n	8010d7c <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x22>
        {
            return yCache[i];
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	683a      	ldr	r2, [r7, #0]
 8010d74:	321e      	adds	r2, #30
 8010d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d7a:	e00b      	b.n	8010d94 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x3a>
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	60fb      	str	r3, [r7, #12]
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	015a      	lsls	r2, r3, #5
 8010d84:	f107 0308 	add.w	r3, r7, #8
 8010d88:	4611      	mov	r1, r2
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7ff f812 	bl	800fdb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010d90:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010d92:	bf00      	nop
    }
 8010d94:	4618      	mov	r0, r3
 8010d96:	3710      	adds	r7, #16
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	460b      	mov	r3, r1
 8010da6:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	887a      	ldrh	r2, [r7, #2]
 8010dac:	801a      	strh	r2, [r3, #0]
    {
    }
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	4618      	mov	r0, r3
 8010db2:	370c      	adds	r7, #12
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	2326      	movs	r3, #38	; 0x26
 8010dcc:	461a      	mov	r2, r3
 8010dce:	2100      	movs	r1, #0
 8010dd0:	f015 fba7 	bl	8026522 <memset>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fe ff40 	bl	800fc5c <_ZN8touchgfx6WidgetC1Ev>
 8010ddc:	4a09      	ldr	r2, [pc, #36]	; (8010e04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	601a      	str	r2, [r3, #0]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	683a      	ldr	r2, [r7, #0]
 8010de6:	8812      	ldrh	r2, [r2, #0]
 8010de8:	84da      	strh	r2, [r3, #38]	; 0x26
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	22ff      	movs	r2, #255	; 0xff
 8010dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8010df2:	6839      	ldr	r1, [r7, #0]
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f004 fdff 	bl	80159f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	0802957c 	.word	0x0802957c

08010e08 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	4a05      	ldr	r2, [pc, #20]	; (8010e28 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe feb7 	bl	800fb8c <_ZN8touchgfx6ScreenD1Ev>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4618      	mov	r0, r3
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	08028b10 	.word	0x08028b10

08010e2c <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7ff ffe7 	bl	8010e08 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8010e3a:	2140      	movs	r1, #64	; 0x40
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f015 fab9 	bl	80263b4 <_ZdlPvj>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	4618      	mov	r0, r3
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	4a0a      	ldr	r2, [pc, #40]	; (8010e80 <_ZN15Screen2ViewBaseD1Ev+0x34>)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	601a      	str	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	336c      	adds	r3, #108	; 0x6c
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f000 f8d0 	bl	8011004 <_ZN8touchgfx5ImageD1Ev>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	3340      	adds	r3, #64	; 0x40
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7ff fe53 	bl	8010b14 <_ZN8touchgfx3BoxD1Ev>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7ff ffc9 	bl	8010e08 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	08028adc 	.word	0x08028adc

08010e84 <_ZN15Screen2ViewBaseD0Ev>:
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f7ff ffdd 	bl	8010e4c <_ZN15Screen2ViewBaseD1Ev>
 8010e92:	2198      	movs	r1, #152	; 0x98
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f015 fa8d 	bl	80263b4 <_ZdlPvj>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3708      	adds	r7, #8
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8010eac:	f006 fd52 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 8010eb0:	4603      	mov	r3, r0
    }
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3708      	adds	r7, #8
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
	...

08010ebc <_ZN15Screen2ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Screen2ViewBase::Screen2ViewBase()
 8010ebc:	b590      	push	{r4, r7, lr}
 8010ebe:	b089      	sub	sp, #36	; 0x24
 8010ec0:	af02      	add	r7, sp, #8
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f000 f886 	bl	8010fd8 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8010ecc:	4a34      	ldr	r2, [pc, #208]	; (8010fa0 <_ZN15Screen2ViewBaseC1Ev+0xe4>)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	601a      	str	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	3340      	adds	r3, #64	; 0x40
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fe fed2 	bl	800fc80 <_ZN8touchgfx3BoxC1Ev>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8010ee2:	f107 0308 	add.w	r3, r7, #8
 8010ee6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7ff ff56 	bl	8010d9c <_ZN8touchgfx6BitmapC1Et>
 8010ef0:	f107 0308 	add.w	r3, r7, #8
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f7ff ff60 	bl	8010dbc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{

    __background.setPosition(0, 0, 240, 320);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010f02:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010f06:	9300      	str	r3, [sp, #0]
 8010f08:	23f0      	movs	r3, #240	; 0xf0
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	2100      	movs	r1, #0
 8010f0e:	f7fd f8f7 	bl	800e100 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010f18:	2300      	movs	r3, #0
 8010f1a:	75fb      	strb	r3, [r7, #23]
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	75bb      	strb	r3, [r7, #22]
 8010f20:	2300      	movs	r3, #0
 8010f22:	757b      	strb	r3, [r7, #21]
 8010f24:	7dfb      	ldrb	r3, [r7, #23]
 8010f26:	041b      	lsls	r3, r3, #16
 8010f28:	461a      	mov	r2, r3
 8010f2a:	7dbb      	ldrb	r3, [r7, #22]
 8010f2c:	021b      	lsls	r3, r3, #8
 8010f2e:	431a      	orrs	r2, r3
 8010f30:	7d7b      	ldrb	r3, [r7, #21]
 8010f32:	4313      	orrs	r3, r2
 8010f34:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010f38:	f107 0310 	add.w	r3, r7, #16
 8010f3c:	4611      	mov	r1, r2
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fe fdb5 	bl	800faae <_ZN8touchgfx9colortypeC1Em>
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	4619      	mov	r1, r3
 8010f48:	4620      	mov	r0, r4
 8010f4a:	f7fe febd 	bl	800fcc8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	336c      	adds	r3, #108	; 0x6c
 8010f52:	2200      	movs	r2, #0
 8010f54:	2100      	movs	r1, #0
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7fd f91e 	bl	800e198 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_KUHMUH_VERTICAL_ID));
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8010f62:	f107 030c 	add.w	r3, r7, #12
 8010f66:	2100      	movs	r1, #0
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7ff ff17 	bl	8010d9c <_ZN8touchgfx6BitmapC1Et>
 8010f6e:	f107 030c 	add.w	r3, r7, #12
 8010f72:	4619      	mov	r1, r3
 8010f74:	4620      	mov	r0, r4
 8010f76:	f004 fd3f 	bl	80159f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	3340      	adds	r3, #64	; 0x40
 8010f80:	4619      	mov	r1, r3
 8010f82:	4610      	mov	r0, r2
 8010f84:	f7fe fe5a 	bl	800fc3c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	336c      	adds	r3, #108	; 0x6c
 8010f8e:	4619      	mov	r1, r3
 8010f90:	4610      	mov	r0, r2
 8010f92:	f7fe fe53 	bl	800fc3c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	371c      	adds	r7, #28
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd90      	pop	{r4, r7, pc}
 8010fa0:	08028adc 	.word	0x08028adc

08010fa4 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]

}
 8010fac:	bf00      	nop
 8010fae:	370c      	adds	r7, #12
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <_ZN15Screen2ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen2ViewBase::afterTransition()
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
    //Screen2to1
    //When screen transition ends change screen to Screen1
    //Go to Screen1 with screen transition towards South
    application().gotoScreen1ScreenSlideTransitionSouth();
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f7ff ff6f 	bl	8010ea4 <_ZN15Screen2ViewBase11applicationEv>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7fd fd5b 	bl	800ea84 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv>
}
 8010fce:	bf00      	nop
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
	...

08010fd8 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f007 ff96 	bl	8018f14 <_ZN8touchgfx6ScreenC1Ev>
 8010fe8:	4a05      	ldr	r2, [pc, #20]	; (8011000 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	601a      	str	r2, [r3, #0]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3708      	adds	r7, #8
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}
 8010ffe:	bf00      	nop
 8011000:	08028b10 	.word	0x08028b10

08011004 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	4a05      	ldr	r2, [pc, #20]	; (8011024 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	601a      	str	r2, [r3, #0]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4618      	mov	r0, r3
 8011016:	f7fd fc73 	bl	800e900 <_ZN8touchgfx6WidgetD1Ev>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4618      	mov	r0, r3
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	0802957c 	.word	0x0802957c

08011028 <_ZN8touchgfx5ImageD0Ev>:
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f7ff ffe7 	bl	8011004 <_ZN8touchgfx5ImageD1Ev>
 8011036:	212c      	movs	r1, #44	; 0x2c
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f015 f9bb 	bl	80263b4 <_ZdlPvj>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	4618      	mov	r0, r3
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0
    return bitmap_database;
 801104c:	4b02      	ldr	r3, [pc, #8]	; (8011058 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801104e:	4618      	mov	r0, r3
 8011050:	46bd      	mov	sp, r7
 8011052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011056:	4770      	bx	lr
 8011058:	08028b3c 	.word	0x08028b3c

0801105c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801105c:	b480      	push	{r7}
 801105e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8011060:	2301      	movs	r3, #1
}
 8011062:	4618      	mov	r0, r3
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr

0801106c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 801106c:	b480      	push	{r7}
 801106e:	b085      	sub	sp, #20
 8011070:	af00      	add	r7, sp, #0
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	460b      	mov	r3, r1
 8011076:	607a      	str	r2, [r7, #4]
 8011078:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 801107a:	2300      	movs	r3, #0
    }
 801107c:	4618      	mov	r0, r3
 801107e:	3714      	adds	r7, #20
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011090:	2300      	movs	r3, #0
    }
 8011092:	4618      	mov	r0, r3
 8011094:	370c      	adds	r7, #12
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr

0801109e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801109e:	b480      	push	{r7}
 80110a0:	b083      	sub	sp, #12
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80110a6:	2300      	movs	r3, #0
    }
 80110a8:	4618      	mov	r0, r3
 80110aa:	370c      	adds	r7, #12
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr

080110b4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80110b4:	b480      	push	{r7}
 80110b6:	b085      	sub	sp, #20
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	4613      	mov	r3, r2
 80110c0:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 80110c2:	4a07      	ldr	r2, [pc, #28]	; (80110e0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	6013      	str	r3, [r2, #0]
        fonts = f;
 80110c8:	4a06      	ldr	r2, [pc, #24]	; (80110e4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80110ce:	4a06      	ldr	r2, [pc, #24]	; (80110e8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80110d0:	88fb      	ldrh	r3, [r7, #6]
 80110d2:	8013      	strh	r3, [r2, #0]
    }
 80110d4:	bf00      	nop
 80110d6:	3714      	adds	r7, #20
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr
 80110e0:	2004f720 	.word	0x2004f720
 80110e4:	2004f728 	.word	0x2004f728
 80110e8:	2004f724 	.word	0x2004f724

080110ec <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80110ec:	b40e      	push	{r1, r2, r3}
 80110ee:	b580      	push	{r7, lr}
 80110f0:	b085      	sub	sp, #20
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80110f6:	f107 0320 	add.w	r3, r7, #32
 80110fa:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	69fa      	ldr	r2, [r7, #28]
 8011100:	2100      	movs	r1, #0
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f007 fac4 	bl	8018690 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011108:	4603      	mov	r3, r0
 801110a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 801110c:	89fb      	ldrh	r3, [r7, #14]
}
 801110e:	4618      	mov	r0, r3
 8011110:	3714      	adds	r7, #20
 8011112:	46bd      	mov	sp, r7
 8011114:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011118:	b003      	add	sp, #12
 801111a:	4770      	bx	lr

0801111c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801111c:	b40c      	push	{r2, r3}
 801111e:	b580      	push	{r7, lr}
 8011120:	b084      	sub	sp, #16
 8011122:	af00      	add	r7, sp, #0
 8011124:	6078      	str	r0, [r7, #4]
 8011126:	460b      	mov	r3, r1
 8011128:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 801112a:	f107 031c 	add.w	r3, r7, #28
 801112e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8011130:	78f9      	ldrb	r1, [r7, #3]
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	69ba      	ldr	r2, [r7, #24]
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f007 faaa 	bl	8018690 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 801113c:	4603      	mov	r3, r0
 801113e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011140:	89fb      	ldrh	r3, [r7, #14]
}
 8011142:	4618      	mov	r0, r3
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801114c:	b002      	add	sp, #8
 801114e:	4770      	bx	lr

08011150 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b08a      	sub	sp, #40	; 0x28
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	460b      	mov	r3, r1
 801115a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011160:	2b00      	cmp	r3, #0
 8011162:	d016      	beq.n	8011192 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	3322      	adds	r3, #34	; 0x22
 8011168:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116c:	8adb      	ldrh	r3, [r3, #22]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d105      	bne.n	801117e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8011172:	4b43      	ldr	r3, [pc, #268]	; (8011280 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011174:	4a43      	ldr	r2, [pc, #268]	; (8011284 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011176:	21c0      	movs	r1, #192	; 0xc0
 8011178:	4843      	ldr	r0, [pc, #268]	; (8011288 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801117a:	f015 f947 	bl	802640c <__assert_func>
            return buffer[pos];
 801117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011180:	8a9b      	ldrh	r3, [r3, #20]
 8011182:	461a      	mov	r2, r3
 8011184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011186:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d001      	beq.n	8011192 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801118e:	2301      	movs	r3, #1
 8011190:	e000      	b.n	8011194 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8011192:	2300      	movs	r3, #0
 8011194:	2b00      	cmp	r3, #0
 8011196:	d06a      	beq.n	801126e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f008 fd62 	bl	8019c62 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	3322      	adds	r3, #34	; 0x22
 80111a2:	623b      	str	r3, [r7, #32]
 80111a4:	2301      	movs	r3, #1
 80111a6:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80111a8:	6a3b      	ldr	r3, [r7, #32]
 80111aa:	8adb      	ldrh	r3, [r3, #22]
 80111ac:	8bfa      	ldrh	r2, [r7, #30]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d305      	bcc.n	80111be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80111b2:	4b36      	ldr	r3, [pc, #216]	; (801128c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80111b4:	4a36      	ldr	r2, [pc, #216]	; (8011290 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80111b6:	21c5      	movs	r1, #197	; 0xc5
 80111b8:	4833      	ldr	r0, [pc, #204]	; (8011288 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80111ba:	f015 f927 	bl	802640c <__assert_func>
            const uint16_t index = pos + offset;
 80111be:	6a3b      	ldr	r3, [r7, #32]
 80111c0:	8a9a      	ldrh	r2, [r3, #20]
 80111c2:	8bfb      	ldrh	r3, [r7, #30]
 80111c4:	4413      	add	r3, r2
 80111c6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80111c8:	8bbb      	ldrh	r3, [r7, #28]
 80111ca:	2b09      	cmp	r3, #9
 80111cc:	d801      	bhi.n	80111d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80111ce:	8bbb      	ldrh	r3, [r7, #28]
 80111d0:	e001      	b.n	80111d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80111d2:	8bbb      	ldrh	r3, [r7, #28]
 80111d4:	3b0a      	subs	r3, #10
 80111d6:	6a3a      	ldr	r2, [r7, #32]
 80111d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111dc:	f640 123f 	movw	r2, #2367	; 0x93f
 80111e0:	4293      	cmp	r3, r2
 80111e2:	bf0c      	ite	eq
 80111e4:	2301      	moveq	r3, #1
 80111e6:	2300      	movne	r3, #0
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d03f      	beq.n	801126e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	3322      	adds	r3, #34	; 0x22
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	3222      	adds	r2, #34	; 0x22
 80111f6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80111f8:	68ba      	ldr	r2, [r7, #8]
 80111fa:	8ad2      	ldrh	r2, [r2, #22]
 80111fc:	2a00      	cmp	r2, #0
 80111fe:	d105      	bne.n	801120c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8011200:	4b1f      	ldr	r3, [pc, #124]	; (8011280 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011202:	4a20      	ldr	r2, [pc, #128]	; (8011284 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011204:	21c0      	movs	r1, #192	; 0xc0
 8011206:	4820      	ldr	r0, [pc, #128]	; (8011288 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011208:	f015 f900 	bl	802640c <__assert_func>
            return buffer[pos];
 801120c:	68ba      	ldr	r2, [r7, #8]
 801120e:	8a92      	ldrh	r2, [r2, #20]
 8011210:	4611      	mov	r1, r2
 8011212:	68ba      	ldr	r2, [r7, #8]
 8011214:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011218:	613b      	str	r3, [r7, #16]
 801121a:	4613      	mov	r3, r2
 801121c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 801121e:	693b      	ldr	r3, [r7, #16]
 8011220:	8adb      	ldrh	r3, [r3, #22]
 8011222:	2b01      	cmp	r3, #1
 8011224:	d806      	bhi.n	8011234 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8011226:	4b1b      	ldr	r3, [pc, #108]	; (8011294 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011228:	4a1b      	ldr	r2, [pc, #108]	; (8011298 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 801122a:	f240 110d 	movw	r1, #269	; 0x10d
 801122e:	4816      	ldr	r0, [pc, #88]	; (8011288 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011230:	f015 f8ec 	bl	802640c <__assert_func>
            const uint16_t index = pos + 1;
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	8a9b      	ldrh	r3, [r3, #20]
 8011238:	3301      	adds	r3, #1
 801123a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 801123c:	89bb      	ldrh	r3, [r7, #12]
 801123e:	2b09      	cmp	r3, #9
 8011240:	d801      	bhi.n	8011246 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8011242:	89bb      	ldrh	r3, [r7, #12]
 8011244:	e000      	b.n	8011248 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8011246:	2300      	movs	r3, #0
 8011248:	693a      	ldr	r2, [r7, #16]
 801124a:	89f9      	ldrh	r1, [r7, #14]
 801124c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8011250:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	3322      	adds	r3, #34	; 0x22
 8011256:	61bb      	str	r3, [r7, #24]
 8011258:	f640 133f 	movw	r3, #2367	; 0x93f
 801125c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 801125e:	69bb      	ldr	r3, [r7, #24]
 8011260:	8a9b      	ldrh	r3, [r3, #20]
 8011262:	4619      	mov	r1, r3
 8011264:	69bb      	ldr	r3, [r7, #24]
 8011266:	8afa      	ldrh	r2, [r7, #22]
 8011268:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 801126c:	bf00      	nop
        }
    }
    return getNextChar();
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f008 fbfa 	bl	8019a68 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011274:	4603      	mov	r3, r0
}
 8011276:	4618      	mov	r0, r3
 8011278:	3728      	adds	r7, #40	; 0x28
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	08027d20 	.word	0x08027d20
 8011284:	08027d2c 	.word	0x08027d2c
 8011288:	08027dd8 	.word	0x08027dd8
 801128c:	08027e20 	.word	0x08027e20
 8011290:	08027e30 	.word	0x08027e30
 8011294:	08027f04 	.word	0x08027f04
 8011298:	08027f10 	.word	0x08027f10

0801129c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f008 fba6 	bl	80199f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80112aa:	bf00      	nop
 80112ac:	3708      	adds	r7, #8
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
	...

080112b4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80112b4:	b590      	push	{r4, r7, lr}
 80112b6:	b085      	sub	sp, #20
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	4603      	mov	r3, r0
 80112bc:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80112be:	2300      	movs	r3, #0
 80112c0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80112c2:	88fb      	ldrh	r3, [r7, #6]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d127      	bne.n	8011318 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80112c8:	88fb      	ldrh	r3, [r7, #6]
 80112ca:	4a1e      	ldr	r2, [pc, #120]	; (8011344 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80112cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d016      	beq.n	8011302 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80112d4:	88fb      	ldrh	r3, [r7, #6]
 80112d6:	4a1b      	ldr	r2, [pc, #108]	; (8011344 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80112d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112dc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	68ba      	ldr	r2, [r7, #8]
 80112e4:	4413      	add	r3, r2
 80112e6:	4a18      	ldr	r2, [pc, #96]	; (8011348 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80112e8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	68ba      	ldr	r2, [r7, #8]
 80112f0:	4413      	add	r3, r2
 80112f2:	4a16      	ldr	r2, [pc, #88]	; (801134c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80112f4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	689b      	ldr	r3, [r3, #8]
 80112fa:	68ba      	ldr	r2, [r7, #8]
 80112fc:	4413      	add	r3, r2
 80112fe:	60fb      	str	r3, [r7, #12]
 8011300:	e00a      	b.n	8011318 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011302:	4b11      	ldr	r3, [pc, #68]	; (8011348 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011304:	4a12      	ldr	r2, [pc, #72]	; (8011350 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011306:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011308:	4a12      	ldr	r2, [pc, #72]	; (8011354 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801130a:	4b10      	ldr	r3, [pc, #64]	; (801134c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801130c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 801130e:	88fb      	ldrh	r3, [r7, #6]
 8011310:	4a11      	ldr	r2, [pc, #68]	; (8011358 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8011312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011316:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00d      	beq.n	801133a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801131e:	4a0f      	ldr	r2, [pc, #60]	; (801135c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011320:	88fb      	ldrh	r3, [r7, #6]
 8011322:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011324:	f000 f824 	bl	8011370 <_ZN17TypedTextDatabase8getFontsEv>
 8011328:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801132a:	f000 f819 	bl	8011360 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801132e:	4603      	mov	r3, r0
 8011330:	461a      	mov	r2, r3
 8011332:	4621      	mov	r1, r4
 8011334:	68f8      	ldr	r0, [r7, #12]
 8011336:	f7ff febd 	bl	80110b4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801133a:	bf00      	nop
 801133c:	3714      	adds	r7, #20
 801133e:	46bd      	mov	sp, r7
 8011340:	bd90      	pop	{r4, r7, pc}
 8011342:	bf00      	nop
 8011344:	2004d4ec 	.word	0x2004d4ec
 8011348:	2004d4f4 	.word	0x2004d4f4
 801134c:	2004d4f8 	.word	0x2004d4f8
 8011350:	0804f4e8 	.word	0x0804f4e8
 8011354:	0804f4e4 	.word	0x0804f4e4
 8011358:	0804f4f0 	.word	0x0804f4f0
 801135c:	2004d4f0 	.word	0x2004d4f0

08011360 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011360:	b480      	push	{r7}
 8011362:	af00      	add	r7, sp, #0
    return 0;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr

08011370 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011370:	b480      	push	{r7}
 8011372:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011374:	4b02      	ldr	r3, [pc, #8]	; (8011380 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011376:	4618      	mov	r0, r3
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr
 8011380:	2004d4fc 	.word	0x2004d4fc

08011384 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b01      	cmp	r3, #1
 8011392:	d113      	bne.n	80113bc <_Z41__static_initialization_and_destruction_0ii+0x38>
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801139a:	4293      	cmp	r3, r2
 801139c:	d10e      	bne.n	80113bc <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801139e:	f7fc fcf7 	bl	800dd90 <_Z23getFont_verdana_20_4bppv>
 80113a2:	4603      	mov	r3, r0
};
 80113a4:	4a07      	ldr	r2, [pc, #28]	; (80113c4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80113a6:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80113a8:	f7fc fd48 	bl	800de3c <_Z23getFont_verdana_40_4bppv>
 80113ac:	4603      	mov	r3, r0
};
 80113ae:	4a05      	ldr	r2, [pc, #20]	; (80113c4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80113b0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80113b2:	f7fc fc97 	bl	800dce4 <_Z23getFont_verdana_10_4bppv>
 80113b6:	4603      	mov	r3, r0
};
 80113b8:	4a02      	ldr	r2, [pc, #8]	; (80113c4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80113ba:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80113bc:	bf00      	nop
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	2004d4fc 	.word	0x2004d4fc

080113c8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80113c8:	b580      	push	{r7, lr}
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80113d0:	2001      	movs	r0, #1
 80113d2:	f7ff ffd7 	bl	8011384 <_Z41__static_initialization_and_destruction_0ii>
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	4a05      	ldr	r2, [pc, #20]	; (80113f8 <_ZN19FrontendApplicationD1Ev+0x20>)
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	601a      	str	r2, [r3, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7fd f913 	bl	800e614 <_ZN23FrontendApplicationBaseD1Ev>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	4618      	mov	r0, r3
 80113f2:	3708      	adds	r7, #8
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	08028bac 	.word	0x08028bac

080113fc <_ZN19FrontendApplicationD0Ev>:
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f7ff ffe7 	bl	80113d8 <_ZN19FrontendApplicationD1Ev>
 801140a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f014 ffd0 	bl	80263b4 <_ZdlPvj>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4618      	mov	r0, r3
 8011418:	3708      	adds	r7, #8
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801141e:	b580      	push	{r7, lr}
 8011420:	b082      	sub	sp, #8
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 801142c:	4618      	mov	r0, r3
 801142e:	f000 f82d 	bl	801148c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	4618      	mov	r0, r3
 8011436:	f006 f945 	bl	80176c4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801143a:	bf00      	nop
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
	...

08011444 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	60b9      	str	r1, [r7, #8]
 801144e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	68b9      	ldr	r1, [r7, #8]
 8011456:	4618      	mov	r0, r3
 8011458:	f7fd fa74 	bl	800e944 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801145c:	4a03      	ldr	r2, [pc, #12]	; (801146c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	601a      	str	r2, [r3, #0]
{

}
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	4618      	mov	r0, r3
 8011466:	3710      	adds	r7, #16
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	08028bac 	.word	0x08028bac

08011470 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2200      	movs	r2, #0
 801147c:	601a      	str	r2, [r3, #0]
{

}
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	4618      	mov	r0, r3
 8011482:	370c      	adds	r7, #12
 8011484:	46bd      	mov	sp, r7
 8011486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148a:	4770      	bx	lr

0801148c <_ZN5Model4tickEv>:

void Model::tick()
{
 801148c:	b480      	push	{r7}
 801148e:	b083      	sub	sp, #12
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]

}
 8011494:	bf00      	nop
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
    {
    }
 80114a8:	bf00      	nop
 80114aa:	370c      	adds	r7, #12
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr

080114b4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80114b4:	b480      	push	{r7}
 80114b6:	b083      	sub	sp, #12
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
    {
    }
 80114bc:	bf00      	nop
 80114be:	370c      	adds	r7, #12
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr

080114c8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
    {
 80114d0:	4a04      	ldr	r2, [pc, #16]	; (80114e4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	601a      	str	r2, [r3, #0]
    }
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	4618      	mov	r0, r3
 80114da:	370c      	adds	r7, #12
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr
 80114e4:	08028c30 	.word	0x08028c30

080114e8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
    }
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7ff ffe9 	bl	80114c8 <_ZN8touchgfx9PresenterD1Ev>
 80114f6:	2104      	movs	r1, #4
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f014 ff5b 	bl	80263b4 <_ZdlPvj>
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	4618      	mov	r0, r3
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
    {
 8011510:	4a04      	ldr	r2, [pc, #16]	; (8011524 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	601a      	str	r2, [r3, #0]
    }
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	4618      	mov	r0, r3
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr
 8011524:	08028c30 	.word	0x08028c30

08011528 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011528:	b480      	push	{r7}
 801152a:	b083      	sub	sp, #12
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	4a06      	ldr	r2, [pc, #24]	; (801154c <_ZN13ModelListenerC1Ev+0x24>)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	601a      	str	r2, [r3, #0]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2200      	movs	r2, #0
 801153a:	605a      	str	r2, [r3, #4]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4618      	mov	r0, r3
 8011540:	370c      	adds	r7, #12
 8011542:	46bd      	mov	sp, r7
 8011544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011548:	4770      	bx	lr
 801154a:	bf00      	nop
 801154c:	08028c20 	.word	0x08028c20

08011550 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	4a04      	ldr	r2, [pc, #16]	; (801156c <_ZN13ModelListenerD1Ev+0x1c>)
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	601a      	str	r2, [r3, #0]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4618      	mov	r0, r3
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr
 801156c:	08028c20 	.word	0x08028c20

08011570 <_ZN13ModelListenerD0Ev>:
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f7ff ffe9 	bl	8011550 <_ZN13ModelListenerD1Ev>
 801157e:	2108      	movs	r1, #8
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f014 ff17 	bl	80263b4 <_ZdlPvj>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4618      	mov	r0, r3
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	4a09      	ldr	r2, [pc, #36]	; (80115c0 <_ZN16Screen1PresenterD1Ev+0x30>)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	601a      	str	r2, [r3, #0]
 801159e:	4a09      	ldr	r2, [pc, #36]	; (80115c4 <_ZN16Screen1PresenterD1Ev+0x34>)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	605a      	str	r2, [r3, #4]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	3304      	adds	r3, #4
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7ff ffd1 	bl	8011550 <_ZN13ModelListenerD1Ev>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7ff ff89 	bl	80114c8 <_ZN8touchgfx9PresenterD1Ev>
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4618      	mov	r0, r3
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	08028bf8 	.word	0x08028bf8
 80115c4:	08028c10 	.word	0x08028c10

080115c8 <_ZThn4_N16Screen1PresenterD1Ev>:
 80115c8:	f1a0 0004 	sub.w	r0, r0, #4
 80115cc:	e7e0      	b.n	8011590 <_ZN16Screen1PresenterD1Ev>
 80115ce:	bf00      	nop

080115d0 <_ZN16Screen1PresenterD0Ev>:
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b082      	sub	sp, #8
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f7ff ffd9 	bl	8011590 <_ZN16Screen1PresenterD1Ev>
 80115de:	2110      	movs	r1, #16
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f014 fee7 	bl	80263b4 <_ZdlPvj>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4618      	mov	r0, r3
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <_ZThn4_N16Screen1PresenterD0Ev>:
 80115f0:	f1a0 0004 	sub.w	r0, r0, #4
 80115f4:	e7ec      	b.n	80115d0 <_ZN16Screen1PresenterD0Ev>
	...

080115f8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
    : view(v)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4618      	mov	r0, r3
 8011606:	f7ff ff7f 	bl	8011508 <_ZN8touchgfx9PresenterC1Ev>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	3304      	adds	r3, #4
 801160e:	4618      	mov	r0, r3
 8011610:	f7ff ff8a 	bl	8011528 <_ZN13ModelListenerC1Ev>
 8011614:	4a06      	ldr	r2, [pc, #24]	; (8011630 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	601a      	str	r2, [r3, #0]
 801161a:	4a06      	ldr	r2, [pc, #24]	; (8011634 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	605a      	str	r2, [r3, #4]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	683a      	ldr	r2, [r7, #0]
 8011624:	60da      	str	r2, [r3, #12]
{

}
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4618      	mov	r0, r3
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	08028bf8 	.word	0x08028bf8
 8011634:	08028c10 	.word	0x08028c10

08011638 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8011638:	b480      	push	{r7}
 801163a:	b083      	sub	sp, #12
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]

}
 8011640:	bf00      	nop
 8011642:	370c      	adds	r7, #12
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr

0801164c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]

}
 8011654:	bf00      	nop
 8011656:	370c      	adds	r7, #12
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr

08011660 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	4a05      	ldr	r2, [pc, #20]	; (8011680 <_ZN11Screen1ViewD1Ev+0x20>)
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	601a      	str	r2, [r3, #0]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4618      	mov	r0, r3
 8011672:	f7fe fd45 	bl	8010100 <_ZN15Screen1ViewBaseD1Ev>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4618      	mov	r0, r3
 801167a:	3708      	adds	r7, #8
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	08028c48 	.word	0x08028c48

08011684 <_ZN11Screen1ViewD0Ev>:
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7ff ffe7 	bl	8011660 <_ZN11Screen1ViewD1Ev>
 8011692:	f241 013c 	movw	r1, #4156	; 0x103c
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f014 fe8c 	bl	80263b4 <_ZdlPvj>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	4618      	mov	r0, r3
 80116a0:	3708      	adds	r7, #8
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
	...

080116a8 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fe fe04 	bl	80102c0 <_ZN15Screen1ViewBaseC1Ev>
 80116b8:	4a03      	ldr	r2, [pc, #12]	; (80116c8 <_ZN11Screen1ViewC1Ev+0x20>)
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	601a      	str	r2, [r3, #0]
{

}
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4618      	mov	r0, r3
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	08028c48 	.word	0x08028c48

080116cc <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7fe fffe 	bl	80106d8 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80116dc:	bf00      	nop
 80116de:	3708      	adds	r7, #8
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fe fa84 	bl	800fbfc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80116f4:	bf00      	nop
 80116f6:	3708      	adds	r7, #8
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}

080116fc <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	4a09      	ldr	r2, [pc, #36]	; (801172c <_ZN16Screen2PresenterD1Ev+0x30>)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	601a      	str	r2, [r3, #0]
 801170a:	4a09      	ldr	r2, [pc, #36]	; (8011730 <_ZN16Screen2PresenterD1Ev+0x34>)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	605a      	str	r2, [r3, #4]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	3304      	adds	r3, #4
 8011714:	4618      	mov	r0, r3
 8011716:	f7ff ff1b 	bl	8011550 <_ZN13ModelListenerD1Ev>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	4618      	mov	r0, r3
 801171e:	f7ff fed3 	bl	80114c8 <_ZN8touchgfx9PresenterD1Ev>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	4618      	mov	r0, r3
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}
 801172c:	08028c7c 	.word	0x08028c7c
 8011730:	08028c94 	.word	0x08028c94

08011734 <_ZThn4_N16Screen2PresenterD1Ev>:
 8011734:	f1a0 0004 	sub.w	r0, r0, #4
 8011738:	e7e0      	b.n	80116fc <_ZN16Screen2PresenterD1Ev>
 801173a:	bf00      	nop

0801173c <_ZN16Screen2PresenterD0Ev>:
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f7ff ffd9 	bl	80116fc <_ZN16Screen2PresenterD1Ev>
 801174a:	2110      	movs	r1, #16
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f014 fe31 	bl	80263b4 <_ZdlPvj>
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4618      	mov	r0, r3
 8011756:	3708      	adds	r7, #8
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <_ZThn4_N16Screen2PresenterD0Ev>:
 801175c:	f1a0 0004 	sub.w	r0, r0, #4
 8011760:	e7ec      	b.n	801173c <_ZN16Screen2PresenterD0Ev>
	...

08011764 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
    : view(v)
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	4618      	mov	r0, r3
 8011772:	f7ff fec9 	bl	8011508 <_ZN8touchgfx9PresenterC1Ev>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	3304      	adds	r3, #4
 801177a:	4618      	mov	r0, r3
 801177c:	f7ff fed4 	bl	8011528 <_ZN13ModelListenerC1Ev>
 8011780:	4a06      	ldr	r2, [pc, #24]	; (801179c <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	601a      	str	r2, [r3, #0]
 8011786:	4a06      	ldr	r2, [pc, #24]	; (80117a0 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	605a      	str	r2, [r3, #4]
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	683a      	ldr	r2, [r7, #0]
 8011790:	60da      	str	r2, [r3, #12]
{

}
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4618      	mov	r0, r3
 8011796:	3708      	adds	r7, #8
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}
 801179c:	08028c7c 	.word	0x08028c7c
 80117a0:	08028c94 	.word	0x08028c94

080117a4 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 80117a4:	b480      	push	{r7}
 80117a6:	b083      	sub	sp, #12
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]

}
 80117ac:	bf00      	nop
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]

}
 80117c0:	bf00      	nop
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr

080117cc <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	4a05      	ldr	r2, [pc, #20]	; (80117ec <_ZN11Screen2ViewD1Ev+0x20>)
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	601a      	str	r2, [r3, #0]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4618      	mov	r0, r3
 80117de:	f7ff fb35 	bl	8010e4c <_ZN15Screen2ViewBaseD1Ev>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4618      	mov	r0, r3
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	08028ca4 	.word	0x08028ca4

080117f0 <_ZN11Screen2ViewD0Ev>:
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f7ff ffe7 	bl	80117cc <_ZN11Screen2ViewD1Ev>
 80117fe:	2198      	movs	r1, #152	; 0x98
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f014 fdd7 	bl	80263b4 <_ZdlPvj>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	4618      	mov	r0, r3
 801180a:	3708      	adds	r7, #8
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 8011810:	b580      	push	{r7, lr}
 8011812:	b082      	sub	sp, #8
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	4618      	mov	r0, r3
 801181c:	f7ff fb4e 	bl	8010ebc <_ZN15Screen2ViewBaseC1Ev>
 8011820:	4a03      	ldr	r2, [pc, #12]	; (8011830 <_ZN11Screen2ViewC1Ev+0x20>)
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	601a      	str	r2, [r3, #0]
{

}
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4618      	mov	r0, r3
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}
 8011830:	08028ca4 	.word	0x08028ca4

08011834 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b082      	sub	sp, #8
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	4618      	mov	r0, r3
 8011840:	f7ff fbb0 	bl	8010fa4 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8011844:	bf00      	nop
 8011846:	3708      	adds	r7, #8
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	4618      	mov	r0, r3
 8011858:	f7fe f9d0 	bl	800fbfc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801185c:	bf00      	nop
 801185e:	3708      	adds	r7, #8
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}

08011864 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8011864:	b480      	push	{r7}
 8011866:	b083      	sub	sp, #12
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
    {
 801186c:	4a04      	ldr	r2, [pc, #16]	; (8011880 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	601a      	str	r2, [r3, #0]
    }
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4618      	mov	r0, r3
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr
 8011880:	08028cf0 	.word	0x08028cf0

08011884 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8011884:	b580      	push	{r7, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
    }
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f7ff ffe9 	bl	8011864 <_ZN8touchgfx15TouchControllerD1Ev>
 8011892:	2104      	movs	r1, #4
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f014 fd8d 	bl	80263b4 <_ZdlPvj>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	4618      	mov	r0, r3
 801189e:	3708      	adds	r7, #8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80118ac:	bf00      	nop
 80118ae:	370c      	adds	r7, #12
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b085      	sub	sp, #20
 80118bc:	af00      	add	r7, sp, #0
 80118be:	60f8      	str	r0, [r7, #12]
 80118c0:	60b9      	str	r1, [r7, #8]
 80118c2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80118c4:	2300      	movs	r3, #0
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3714      	adds	r7, #20
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr
	...

080118d4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	4a05      	ldr	r2, [pc, #20]	; (80118f4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	601a      	str	r2, [r3, #0]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7ff ffbd 	bl	8011864 <_ZN8touchgfx15TouchControllerD1Ev>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	08028cd8 	.word	0x08028cd8

080118f8 <_ZN20STM32TouchControllerD0Ev>:
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7ff ffe7 	bl	80118d4 <_ZN20STM32TouchControllerD1Ev>
 8011906:	2104      	movs	r1, #4
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f014 fd53 	bl	80263b4 <_ZdlPvj>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4618      	mov	r0, r3
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011922:	79fb      	ldrb	r3, [r7, #7]
 8011924:	2b03      	cmp	r3, #3
 8011926:	d80c      	bhi.n	8011942 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8011928:	a201      	add	r2, pc, #4	; (adr r2, 8011930 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 801192a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801192e:	bf00      	nop
 8011930:	08011941 	.word	0x08011941
 8011934:	08011941 	.word	0x08011941
 8011938:	08011941 	.word	0x08011941
 801193c:	08011941 	.word	0x08011941
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8011940:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8011942:	bf00      	nop
 8011944:	370c      	adds	r7, #12
 8011946:	46bd      	mov	sp, r7
 8011948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194c:	4770      	bx	lr
 801194e:	bf00      	nop

08011950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8011950:	b480      	push	{r7}
 8011952:	b083      	sub	sp, #12
 8011954:	af00      	add	r7, sp, #0
 8011956:	4603      	mov	r3, r0
 8011958:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801195a:	79fb      	ldrb	r3, [r7, #7]
 801195c:	2b03      	cmp	r3, #3
 801195e:	d80c      	bhi.n	801197a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8011960:	a201      	add	r2, pc, #4	; (adr r2, 8011968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8011962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011966:	bf00      	nop
 8011968:	08011979 	.word	0x08011979
 801196c:	08011979 	.word	0x08011979
 8011970:	08011979 	.word	0x08011979
 8011974:	08011979 	.word	0x08011979
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8011978:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 801197a:	bf00      	nop
 801197c:	370c      	adds	r7, #12
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop

08011988 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	4603      	mov	r3, r0
 8011990:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011992:	79fb      	ldrb	r3, [r7, #7]
 8011994:	2b03      	cmp	r3, #3
 8011996:	d80c      	bhi.n	80119b2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8011998:	a201      	add	r2, pc, #4	; (adr r2, 80119a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 801199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801199e:	bf00      	nop
 80119a0:	080119b1 	.word	0x080119b1
 80119a4:	080119b1 	.word	0x080119b1
 80119a8:	080119b1 	.word	0x080119b1
 80119ac:	080119b1 	.word	0x080119b1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80119b0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80119b2:	bf00      	nop
 80119b4:	370c      	adds	r7, #12
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr
 80119be:	bf00      	nop

080119c0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80119c0:	b480      	push	{r7}
 80119c2:	b083      	sub	sp, #12
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
    {
 80119c8:	4a04      	ldr	r2, [pc, #16]	; (80119dc <_ZN8touchgfx3HALD1Ev+0x1c>)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	601a      	str	r2, [r3, #0]
    }
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	4618      	mov	r0, r3
 80119d2:	370c      	adds	r7, #12
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr
 80119dc:	080290d4 	.word	0x080290d4

080119e0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
    }
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f7ff ffe9 	bl	80119c0 <_ZN8touchgfx3HALD1Ev>
 80119ee:	217c      	movs	r1, #124	; 0x7c
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f014 fcdf 	bl	80263b4 <_ZdlPvj>
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	4618      	mov	r0, r3
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8011a00:	b480      	push	{r7}
 8011a02:	b083      	sub	sp, #12
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	460b      	mov	r3, r1
 8011a0a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	78fa      	ldrb	r2, [r7, #3]
 8011a10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2201      	movs	r2, #1
 8011a18:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8011a1c:	bf00      	nop
 8011a1e:	370c      	adds	r7, #12
 8011a20:	46bd      	mov	sp, r7
 8011a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a26:	4770      	bx	lr

08011a28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	460b      	mov	r3, r1
 8011a32:	807b      	strh	r3, [r7, #2]
 8011a34:	4613      	mov	r3, r2
 8011a36:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8011a38:	4b0c      	ldr	r3, [pc, #48]	; (8011a6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	887a      	ldrh	r2, [r7, #2]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d304      	bcc.n	8011a4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8011a42:	4b0b      	ldr	r3, [pc, #44]	; (8011a70 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8011a44:	881b      	ldrh	r3, [r3, #0]
 8011a46:	883a      	ldrh	r2, [r7, #0]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d205      	bcs.n	8011a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8011a4c:	4b09      	ldr	r3, [pc, #36]	; (8011a74 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8011a4e:	4a0a      	ldr	r2, [pc, #40]	; (8011a78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8011a50:	219e      	movs	r1, #158	; 0x9e
 8011a52:	480a      	ldr	r0, [pc, #40]	; (8011a7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8011a54:	f014 fcda 	bl	802640c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8011a58:	4a09      	ldr	r2, [pc, #36]	; (8011a80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8011a5a:	887b      	ldrh	r3, [r7, #2]
 8011a5c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8011a5e:	4a09      	ldr	r2, [pc, #36]	; (8011a84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8011a60:	883b      	ldrh	r3, [r7, #0]
 8011a62:	8013      	strh	r3, [r2, #0]
    }
 8011a64:	bf00      	nop
 8011a66:	3708      	adds	r7, #8
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}
 8011a6c:	2004f6bc 	.word	0x2004f6bc
 8011a70:	2004f6be 	.word	0x2004f6be
 8011a74:	08027fc4 	.word	0x08027fc4
 8011a78:	08028028 	.word	0x08028028
 8011a7c:	0802806c 	.word	0x0802806c
 8011a80:	2004f6c2 	.word	0x2004f6c2
 8011a84:	2004f6c4 	.word	0x2004f6c4

08011a88 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d009      	beq.n	8011aae <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	685a      	ldr	r2, [r3, #4]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4610      	mov	r0, r2
 8011aa8:	4798      	blx	r3
 8011aaa:	4603      	mov	r3, r0
 8011aac:	e000      	b.n	8011ab0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 8011aae:	2300      	movs	r3, #0
    }
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f002 fe99 	bl	80147f8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	33ac      	adds	r3, #172	; 0xac
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	4798      	blx	r3
    }
 8011ad2:	bf00      	nop
 8011ad4:	3708      	adds	r7, #8
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8011ada:	b480      	push	{r7}
 8011adc:	b083      	sub	sp, #12
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
 8011ae2:	6039      	str	r1, [r7, #0]
        return false;
 8011ae4:	2300      	movs	r3, #0
    }
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	370c      	adds	r7, #12
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr
	...

08011af4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	60f8      	str	r0, [r7, #12]
 8011afc:	60b9      	str	r1, [r7, #8]
 8011afe:	607a      	str	r2, [r7, #4]
 8011b00:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d106      	bne.n	8011b16 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8011b08:	4b0f      	ldr	r3, [pc, #60]	; (8011b48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8011b0a:	4a10      	ldr	r2, [pc, #64]	; (8011b4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8011b0c:	f240 21d2 	movw	r1, #722	; 0x2d2
 8011b10:	480f      	ldr	r0, [pc, #60]	; (8011b50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8011b12:	f014 fc7b 	bl	802640c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	68ba      	ldr	r2, [r7, #8]
 8011b1a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	bf14      	ite	ne
 8011b28:	2301      	movne	r3, #1
 8011b2a:	2300      	moveq	r3, #0
 8011b2c:	b2da      	uxtb	r2, r3
 8011b2e:	4b09      	ldr	r3, [pc, #36]	; (8011b54 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8011b30:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	338c      	adds	r3, #140	; 0x8c
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	6839      	ldr	r1, [r7, #0]
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	4798      	blx	r3
    }
 8011b40:	bf00      	nop
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	080280b0 	.word	0x080280b0
 8011b4c:	080280e8 	.word	0x080280e8
 8011b50:	0802806c 	.word	0x0802806c
 8011b54:	2004f6c6 	.word	0x2004f6c6

08011b58 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	683a      	ldr	r2, [r7, #0]
 8011b66:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	bf14      	ite	ne
 8011b6e:	2301      	movne	r3, #1
 8011b70:	2300      	moveq	r3, #0
 8011b72:	b2da      	uxtb	r2, r3
 8011b74:	4b03      	ldr	r3, [pc, #12]	; (8011b84 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8011b76:	701a      	strb	r2, [r3, #0]
    }
 8011b78:	bf00      	nop
 8011b7a:	370c      	adds	r7, #12
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr
 8011b84:	2004f6c7 	.word	0x2004f6c7

08011b88 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
        return 0;
 8011b90:	2300      	movs	r3, #0
    }
 8011b92:	4618      	mov	r0, r3
 8011b94:	370c      	adds	r7, #12
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr

08011b9e <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
 8011ba6:	460b      	mov	r3, r1
 8011ba8:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d004      	beq.n	8011bbc <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bb6:	887a      	ldrh	r2, [r7, #2]
 8011bb8:	4610      	mov	r0, r2
 8011bba:	4798      	blx	r3
    }
 8011bbc:	bf00      	nop
 8011bbe:	3708      	adds	r7, #8
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 8011bc4:	b480      	push	{r7}
 8011bc6:	b083      	sub	sp, #12
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 8011bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	370c      	adds	r7, #12
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr

08011bdc <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	685a      	ldr	r2, [r3, #4]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	3318      	adds	r3, #24
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	4610      	mov	r0, r2
 8011bf4:	4798      	blx	r3
 8011bf6:	4603      	mov	r3, r0
    }
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 8011c08:	4b0e      	ldr	r3, [pc, #56]	; (8011c44 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00c      	beq.n	8011c2a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	3330      	adds	r3, #48	; 0x30
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	4798      	blx	r3
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d101      	bne.n	8011c2a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8011c26:	2301      	movs	r3, #1
 8011c28:	e000      	b.n	8011c2c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d002      	beq.n	8011c36 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c34:	e001      	b.n	8011c3a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3708      	adds	r7, #8
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	2004f6c6 	.word	0x2004f6c6

08011c48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d011      	beq.n	8011c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8011c60:	4b14      	ldr	r3, [pc, #80]	; (8011cb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d11e      	bne.n	8011ca6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8011c68:	4b13      	ldr	r3, [pc, #76]	; (8011cb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011c6a:	881b      	ldrh	r3, [r3, #0]
 8011c6c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011c6e:	4b13      	ldr	r3, [pc, #76]	; (8011cbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011c70:	881a      	ldrh	r2, [r3, #0]
 8011c72:	4b11      	ldr	r3, [pc, #68]	; (8011cb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011c74:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8011c76:	4a11      	ldr	r2, [pc, #68]	; (8011cbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011c78:	89bb      	ldrh	r3, [r7, #12]
 8011c7a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8011c7c:	4b0d      	ldr	r3, [pc, #52]	; (8011cb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011c7e:	2201      	movs	r2, #1
 8011c80:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8011c82:	e010      	b.n	8011ca6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8011c84:	4b0b      	ldr	r3, [pc, #44]	; (8011cb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00c      	beq.n	8011ca6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8011c8c:	4b0a      	ldr	r3, [pc, #40]	; (8011cb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011c8e:	881b      	ldrh	r3, [r3, #0]
 8011c90:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011c92:	4b0a      	ldr	r3, [pc, #40]	; (8011cbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011c94:	881a      	ldrh	r2, [r3, #0]
 8011c96:	4b08      	ldr	r3, [pc, #32]	; (8011cb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011c98:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8011c9a:	4a08      	ldr	r2, [pc, #32]	; (8011cbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011c9c:	89fb      	ldrh	r3, [r7, #14]
 8011c9e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8011ca0:	4b04      	ldr	r3, [pc, #16]	; (8011cb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	701a      	strb	r2, [r3, #0]
    }
 8011ca6:	bf00      	nop
 8011ca8:	3714      	adds	r7, #20
 8011caa:	46bd      	mov	sp, r7
 8011cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb0:	4770      	bx	lr
 8011cb2:	bf00      	nop
 8011cb4:	2004f6c0 	.word	0x2004f6c0
 8011cb8:	2004f6be 	.word	0x2004f6be
 8011cbc:	2004f6bc 	.word	0x2004f6bc

08011cc0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8011cc0:	b480      	push	{r7}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
    {
    }
 8011cc8:	bf00      	nop
 8011cca:	370c      	adds	r7, #12
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr

08011cd4 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8011cd4:	b480      	push	{r7}
 8011cd6:	b083      	sub	sp, #12
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
    {
    }
 8011cdc:	bf00      	nop
 8011cde:	370c      	adds	r7, #12
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce6:	4770      	bx	lr

08011ce8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f001 fff8 	bl	8013ce8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8011cf8:	bf00      	nop
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	4a05      	ldr	r2, [pc, #20]	; (8011d20 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	601a      	str	r2, [r3, #0]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7ff fe55 	bl	80119c0 <_ZN8touchgfx3HALD1Ev>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	08028f2c 	.word	0x08028f2c

08011d24 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b082      	sub	sp, #8
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f7ff ffe7 	bl	8011d00 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011d32:	217c      	movs	r1, #124	; 0x7c
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f014 fb3d 	bl	80263b4 <_ZdlPvj>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	3708      	adds	r7, #8
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7ff ffca 	bl	8011ce8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011d54:	bf00      	nop
 8011d56:	3708      	adds	r7, #8
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b082      	sub	sp, #8
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	4618      	mov	r0, r3
 8011d68:	f001 fc50 	bl	801360c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8011d6c:	bf00      	nop
 8011d6e:	3708      	adds	r7, #8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b082      	sub	sp, #8
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f001 fcac 	bl	80136dc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011d84:	4603      	mov	r3, r0
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3708      	adds	r7, #8
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}

08011d8e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b082      	sub	sp, #8
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	6078      	str	r0, [r7, #4]
 8011d96:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6839      	ldr	r1, [r7, #0]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f001 fcab 	bl	80136f8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011da2:	bf00      	nop
 8011da4:	3708      	adds	r7, #8
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011daa:	b590      	push	{r4, r7, lr}
 8011dac:	b083      	sub	sp, #12
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
 8011db2:	6039      	str	r1, [r7, #0]
	ST7789V_setCursorPosition(rect.x, rect.y, rect.x+rect.width, rect.y+rect.height);
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dba:	b298      	uxth	r0, r3
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011dc2:	b299      	uxth	r1, r3
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dca:	b29a      	uxth	r2, r3
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	4413      	add	r3, r2
 8011dd6:	b29c      	uxth	r4, r3
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011dde:	b29a      	uxth	r2, r3
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	4413      	add	r3, r2
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	4622      	mov	r2, r4
 8011dee:	f7ee fd73 	bl	80008d8 <ST7789V_setCursorPosition>
	ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8011df2:	202c      	movs	r0, #44	; 0x2c
 8011df4:	f7ee fd2a 	bl	800084c <ST7789V_SEND_COMMAND>
	this -> copyFrameBufferBlockToLCD(rect);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	33d0      	adds	r3, #208	; 0xd0
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	6839      	ldr	r1, [r7, #0]
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	4798      	blx	r3
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6839      	ldr	r1, [r7, #0]
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f001 fc7f 	bl	801370e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 }
 8011e10:	bf00      	nop
 8011e12:	370c      	adds	r7, #12
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd90      	pop	{r4, r7, pc}

08011e18 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE>:

void TouchGFXHAL::copyFrameBufferBlockToLCD(const Rect& rect)
{
 8011e18:	b590      	push	{r4, r7, lr}
 8011e1a:	b087      	sub	sp, #28
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
	__IO uint16_t* ptr;
	uint32_t height;

	ST7789V_setCursorPosition(rect.x, rect.y, rect.x+rect.width, rect.y+rect.height);
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e28:	b298      	uxth	r0, r3
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e30:	b299      	uxth	r1, r3
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e38:	b29a      	uxth	r2, r3
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	4413      	add	r3, r2
 8011e44:	b29c      	uxth	r4, r3
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e4c:	b29a      	uxth	r2, r3
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	4413      	add	r3, r2
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	4622      	mov	r2, r4
 8011e5c:	f7ee fd3c 	bl	80008d8 <ST7789V_setCursorPosition>

	for(height = 0; height < rect.height; height++)
 8011e60:	2300      	movs	r3, #0
 8011e62:	617b      	str	r3, [r7, #20]
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	4293      	cmp	r3, r2
 8011e70:	d236      	bcs.n	8011ee0 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xc8>
	{
		ptr = getClientFrameBuffer() + rect.x + (height + rect.y) * HAL::DISPLAY_WIDTH;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	4618      	mov	r0, r3
 8011e76:	f7ff fec3 	bl	8011c00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011e7a:	4602      	mov	r2, r0
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e82:	4618      	mov	r0, r3
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	440b      	add	r3, r1
 8011e90:	4915      	ldr	r1, [pc, #84]	; (8011ee8 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xd0>)
 8011e92:	8809      	ldrh	r1, [r1, #0]
 8011e94:	fb01 f303 	mul.w	r3, r1, r3
 8011e98:	4403      	add	r3, r0
 8011e9a:	005b      	lsls	r3, r3, #1
 8011e9c:	4413      	add	r3, r2
 8011e9e:	60fb      	str	r3, [r7, #12]
		//LCD_IO_WriteMultipleData((uint16_t*)ptr, rect.width);
		//for (uint32_t i = 0; i < Size; i++)
		for (uint32_t i = 0; i < rect.width*rect.height; i++)
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	613b      	str	r3, [r7, #16]
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011eaa:	461a      	mov	r2, r3
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011eb2:	fb02 f303 	mul.w	r3, r2, r3
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	4293      	cmp	r3, r2
 8011ebc:	d20c      	bcs.n	8011ed8 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xc0>
		        {
		            //FMC_BANK1_WriteData(ptr[i]);
					ST7789V_SEND_DATA(ptr[i]);
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	005b      	lsls	r3, r3, #1
 8011ec2:	68fa      	ldr	r2, [r7, #12]
 8011ec4:	4413      	add	r3, r2
 8011ec6:	881b      	ldrh	r3, [r3, #0]
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7ee fcce 	bl	800086c <ST7789V_SEND_DATA>
		for (uint32_t i = 0; i < rect.width*rect.height; i++)
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	613b      	str	r3, [r7, #16]
 8011ed6:	e7e5      	b.n	8011ea4 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0x8c>
	for(height = 0; height < rect.height; height++)
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	3301      	adds	r3, #1
 8011edc:	617b      	str	r3, [r7, #20]
 8011ede:	e7c1      	b.n	8011e64 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0x4c>
		        }
	}
}
 8011ee0:	bf00      	nop
 8011ee2:	371c      	adds	r7, #28
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd90      	pop	{r4, r7, pc}
 8011ee8:	2004f6bc 	.word	0x2004f6bc

08011eec <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	607a      	str	r2, [r7, #4]
 8011ef8:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8011efa:	68f8      	ldr	r0, [r7, #12]
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	687a      	ldr	r2, [r7, #4]
 8011f00:	68b9      	ldr	r1, [r7, #8]
 8011f02:	f001 fc12 	bl	801372a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8011f06:	4603      	mov	r3, r0
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}

08011f10 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f001 fb98 	bl	8013650 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011f20:	bf00      	nop
 8011f22:	3708      	adds	r7, #8
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	4618      	mov	r0, r3
 8011f34:	f001 fb98 	bl	8013668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011f38:	bf00      	nop
 8011f3a:	3708      	adds	r7, #8
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f001 fb97 	bl	801367e <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011f50:	bf00      	nop
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	4618      	mov	r0, r3
 8011f64:	f001 fb96 	bl	8013694 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011f68:	bf00      	nop
 8011f6a:	3708      	adds	r7, #8
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}

08011f70 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b082      	sub	sp, #8
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f001 fb94 	bl	80136a8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8011f80:	4603      	mov	r3, r0
}
 8011f82:	4618      	mov	r0, r3
 8011f84:	3708      	adds	r7, #8
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b082      	sub	sp, #8
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	4618      	mov	r0, r3
 8011f96:	f001 fb94 	bl	80136c2 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8011f9a:	bf00      	nop
 8011f9c:	3708      	adds	r7, #8
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
	...

08011fa4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	4a05      	ldr	r2, [pc, #20]	; (8011fc4 <_ZN11TouchGFXHALD1Ev+0x20>)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	601a      	str	r2, [r3, #0]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7ff fea3 	bl	8011d00 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3708      	adds	r7, #8
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	08028d08 	.word	0x08028d08

08011fc8 <_ZN11TouchGFXHALD0Ev>:
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7ff ffe7 	bl	8011fa4 <_ZN11TouchGFXHALD1Ev>
 8011fd6:	217c      	movs	r1, #124	; 0x7c
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f014 f9eb 	bl	80263b4 <_ZdlPvj>
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3708      	adds	r7, #8
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b084      	sub	sp, #16
 8011fec:	af02      	add	r7, sp, #8
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8011fee:	2334      	movs	r3, #52	; 0x34
 8011ff0:	9300      	str	r3, [sp, #0]
 8011ff2:	2364      	movs	r3, #100	; 0x64
 8011ff4:	4a2b      	ldr	r2, [pc, #172]	; (80120a4 <_ZN8touchgfx10OSWrappers10initializeEv+0xbc>)
 8011ff6:	492c      	ldr	r1, [pc, #176]	; (80120a8 <_ZN8touchgfx10OSWrappers10initializeEv+0xc0>)
 8011ff8:	482c      	ldr	r0, [pc, #176]	; (80120ac <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 8011ffa:	f7fb f861 	bl	800d0c0 <_txe_byte_pool_create>
 8011ffe:	4603      	mov	r3, r0
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
 8012000:	2b00      	cmp	r3, #0
 8012002:	bf14      	ite	ne
 8012004:	2301      	movne	r3, #1
 8012006:	2300      	moveq	r3, #0
 8012008:	b2db      	uxtb	r3, r3
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 801200a:	2b00      	cmp	r3, #0
 801200c:	d005      	beq.n	801201a <_ZN8touchgfx10OSWrappers10initializeEv+0x32>
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 801200e:	4b28      	ldr	r3, [pc, #160]	; (80120b0 <_ZN8touchgfx10OSWrappers10initializeEv+0xc8>)
 8012010:	4a28      	ldr	r2, [pc, #160]	; (80120b4 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8012012:	2138      	movs	r1, #56	; 0x38
 8012014:	4828      	ldr	r0, [pc, #160]	; (80120b8 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8012016:	f014 f9f9 	bl	802640c <__assert_func>
    }

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 801201a:	1d39      	adds	r1, r7, #4
 801201c:	2300      	movs	r3, #0
 801201e:	2204      	movs	r2, #4
 8012020:	4822      	ldr	r0, [pc, #136]	; (80120ac <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 8012022:	f7fa ffd9 	bl	800cfd8 <_txe_byte_allocate>
 8012026:	4603      	mov	r3, r0
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8012028:	2b00      	cmp	r3, #0
 801202a:	bf14      	ite	ne
 801202c:	2301      	movne	r3, #1
 801202e:	2300      	moveq	r3, #0
 8012030:	b2db      	uxtb	r3, r3
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 8012032:	2b00      	cmp	r3, #0
 8012034:	d005      	beq.n	8012042 <_ZN8touchgfx10OSWrappers10initializeEv+0x5a>
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 8012036:	4b21      	ldr	r3, [pc, #132]	; (80120bc <_ZN8touchgfx10OSWrappers10initializeEv+0xd4>)
 8012038:	4a1e      	ldr	r2, [pc, #120]	; (80120b4 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 801203a:	213f      	movs	r1, #63	; 0x3f
 801203c:	481e      	ldr	r0, [pc, #120]	; (80120b8 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 801203e:	f014 f9e5 	bl	802640c <__assert_func>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2238      	movs	r2, #56	; 0x38
 8012046:	9201      	str	r2, [sp, #4]
 8012048:	2204      	movs	r2, #4
 801204a:	9200      	str	r2, [sp, #0]
 801204c:	2201      	movs	r2, #1
 801204e:	491c      	ldr	r1, [pc, #112]	; (80120c0 <_ZN8touchgfx10OSWrappers10initializeEv+0xd8>)
 8012050:	481c      	ldr	r0, [pc, #112]	; (80120c4 <_ZN8touchgfx10OSWrappers10initializeEv+0xdc>)
 8012052:	f7fb f8d5 	bl	800d200 <_txe_queue_create>
 8012056:	4603      	mov	r3, r0
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
 8012058:	2b00      	cmp	r3, #0
 801205a:	bf14      	ite	ne
 801205c:	2301      	movne	r3, #1
 801205e:	2300      	moveq	r3, #0
 8012060:	b2db      	uxtb	r3, r3
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 8012062:	2b00      	cmp	r3, #0
 8012064:	d005      	beq.n	8012072 <_ZN8touchgfx10OSWrappers10initializeEv+0x8a>
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 8012066:	4b18      	ldr	r3, [pc, #96]	; (80120c8 <_ZN8touchgfx10OSWrappers10initializeEv+0xe0>)
 8012068:	4a12      	ldr	r2, [pc, #72]	; (80120b4 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 801206a:	2146      	movs	r1, #70	; 0x46
 801206c:	4812      	ldr	r0, [pc, #72]	; (80120b8 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 801206e:	f014 f9cd 	bl	802640c <__assert_func>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 8012072:	231c      	movs	r3, #28
 8012074:	2201      	movs	r2, #1
 8012076:	4915      	ldr	r1, [pc, #84]	; (80120cc <_ZN8touchgfx10OSWrappers10initializeEv+0xe4>)
 8012078:	4815      	ldr	r0, [pc, #84]	; (80120d0 <_ZN8touchgfx10OSWrappers10initializeEv+0xe8>)
 801207a:	f7fb fa05 	bl	800d488 <_txe_semaphore_create>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	bf14      	ite	ne
 8012084:	2301      	movne	r3, #1
 8012086:	2300      	moveq	r3, #0
 8012088:	b2db      	uxtb	r3, r3
 801208a:	2b00      	cmp	r3, #0
 801208c:	d005      	beq.n	801209a <_ZN8touchgfx10OSWrappers10initializeEv+0xb2>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 801208e:	4b11      	ldr	r3, [pc, #68]	; (80120d4 <_ZN8touchgfx10OSWrappers10initializeEv+0xec>)
 8012090:	4a08      	ldr	r2, [pc, #32]	; (80120b4 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8012092:	214c      	movs	r1, #76	; 0x4c
 8012094:	4808      	ldr	r0, [pc, #32]	; (80120b8 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8012096:	f014 f9b9 	bl	802640c <__assert_func>
    }
}
 801209a:	bf00      	nop
 801209c:	3708      	adds	r7, #8
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	2004d508 	.word	0x2004d508
 80120a8:	08028138 	.word	0x08028138
 80120ac:	2004d56c 	.word	0x2004d56c
 80120b0:	0802814c 	.word	0x0802814c
 80120b4:	0802817c 	.word	0x0802817c
 80120b8:	080281ac 	.word	0x080281ac
 80120bc:	080281d8 	.word	0x080281d8
 80120c0:	08028218 	.word	0x08028218
 80120c4:	2004d5bc 	.word	0x2004d5bc
 80120c8:	0802822c 	.word	0x0802822c
 80120cc:	0802825c 	.word	0x0802825c
 80120d0:	2004d5a0 	.word	0x2004d5a0
 80120d4:	08028274 	.word	0x08028274

080120d8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 80120dc:	f04f 31ff 	mov.w	r1, #4294967295
 80120e0:	4809      	ldr	r0, [pc, #36]	; (8012108 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 80120e2:	f7fb fa67 	bl	800d5b4 <_txe_semaphore_get>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	bf14      	ite	ne
 80120ec:	2301      	movne	r3, #1
 80120ee:	2300      	moveq	r3, #0
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d005      	beq.n	8012102 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 80120f6:	4b05      	ldr	r3, [pc, #20]	; (801210c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 80120f8:	4a05      	ldr	r2, [pc, #20]	; (8012110 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 80120fa:	2157      	movs	r1, #87	; 0x57
 80120fc:	4805      	ldr	r0, [pc, #20]	; (8012114 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x3c>)
 80120fe:	f014 f985 	bl	802640c <__assert_func>
    }
}
 8012102:	bf00      	nop
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	2004d5a0 	.word	0x2004d5a0
 801210c:	080282a4 	.word	0x080282a4
 8012110:	080282d0 	.word	0x080282d0
 8012114:	080281ac 	.word	0x080281ac

08012118 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012118:	b580      	push	{r7, lr}
 801211a:	af00      	add	r7, sp, #0
    if (!frame_buffer_sem.tx_semaphore_count)
 801211c:	4b0b      	ldr	r3, [pc, #44]	; (801214c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 801211e:	689b      	ldr	r3, [r3, #8]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d110      	bne.n	8012146 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8012124:	4809      	ldr	r0, [pc, #36]	; (801214c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8012126:	f7fb fa87 	bl	800d638 <_txe_semaphore_put>
 801212a:	4603      	mov	r3, r0
 801212c:	2b00      	cmp	r3, #0
 801212e:	bf14      	ite	ne
 8012130:	2301      	movne	r3, #1
 8012132:	2300      	moveq	r3, #0
 8012134:	b2db      	uxtb	r3, r3
 8012136:	2b00      	cmp	r3, #0
 8012138:	d005      	beq.n	8012146 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 801213a:	4b05      	ldr	r3, [pc, #20]	; (8012150 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x38>)
 801213c:	4a05      	ldr	r2, [pc, #20]	; (8012154 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x3c>)
 801213e:	2164      	movs	r1, #100	; 0x64
 8012140:	4805      	ldr	r0, [pc, #20]	; (8012158 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x40>)
 8012142:	f014 f963 	bl	802640c <__assert_func>
        }
    }
}
 8012146:	bf00      	nop
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop
 801214c:	2004d5a0 	.word	0x2004d5a0
 8012150:	08028310 	.word	0x08028310
 8012154:	0802833c 	.word	0x0802833c
 8012158:	080281ac 	.word	0x080281ac

0801215c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 801215c:	b580      	push	{r7, lr}
 801215e:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8012160:	2100      	movs	r1, #0
 8012162:	4803      	ldr	r0, [pc, #12]	; (8012170 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012164:	f7fb fa26 	bl	800d5b4 <_txe_semaphore_get>
 8012168:	4603      	mov	r3, r0
 801216a:	2b00      	cmp	r3, #0
    {
        // Typically we should inform the requester about failing to get this semaphore
        // Maybe we should update the prototype of this method to return the result of the try
        // assert(0 && "Failed to get FrameBuffer Semaphore!");
    }
}
 801216c:	bf00      	nop
 801216e:	bd80      	pop	{r7, pc}
 8012170:	2004d5a0 	.word	0x2004d5a0

08012174 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801217a:	f3ef 8310 	mrs	r3, PRIMASK
 801217e:	60bb      	str	r3, [r7, #8]
    return(posture);
 8012180:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8012182:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012184:	b672      	cpsid	i
    return(int_posture);
 8012186:	687b      	ldr	r3, [r7, #4]
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
 8012188:	60fb      	str	r3, [r7, #12]
    _tx_thread_preempt_disable++;
 801218a:	4b15      	ldr	r3, [pc, #84]	; (80121e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	3301      	adds	r3, #1
 8012190:	4a13      	ldr	r2, [pc, #76]	; (80121e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8012192:	6013      	str	r3, [r2, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 8012194:	4b13      	ldr	r3, [pc, #76]	; (80121e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 8012196:	689b      	ldr	r3, [r3, #8]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d110      	bne.n	80121be <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 801219c:	4811      	ldr	r0, [pc, #68]	; (80121e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 801219e:	f7fb fa4b 	bl	800d638 <_txe_semaphore_put>
 80121a2:	4603      	mov	r3, r0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	bf14      	ite	ne
 80121a8:	2301      	movne	r3, #1
 80121aa:	2300      	moveq	r3, #0
 80121ac:	b2db      	uxtb	r3, r3
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d005      	beq.n	80121be <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 80121b2:	4b0d      	ldr	r3, [pc, #52]	; (80121e8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x74>)
 80121b4:	4a0d      	ldr	r2, [pc, #52]	; (80121ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x78>)
 80121b6:	218a      	movs	r1, #138	; 0x8a
 80121b8:	480d      	ldr	r0, [pc, #52]	; (80121f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x7c>)
 80121ba:	f014 f927 	bl	802640c <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 80121be:	4b08      	ldr	r3, [pc, #32]	; (80121e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	3b01      	subs	r3, #1
 80121c4:	4a06      	ldr	r2, [pc, #24]	; (80121e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 80121c6:	6013      	str	r3, [r2, #0]
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	f383 8810 	msr	PRIMASK, r3
}
 80121d2:	bf00      	nop
    TX_RESTORE;
    _tx_thread_system_preempt_check();
 80121d4:	f7fa f9ea 	bl	800c5ac <_tx_thread_system_preempt_check>
}
 80121d8:	bf00      	nop
 80121da:	3710      	adds	r7, #16
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}
 80121e0:	2004ce48 	.word	0x2004ce48
 80121e4:	2004d5a0 	.word	0x2004d5a0
 80121e8:	08028310 	.word	0x08028310
 80121ec:	0802837c 	.word	0x0802837c
 80121f0:	080281ac 	.word	0x080281ac

080121f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 80121fa:	4b0b      	ldr	r3, [pc, #44]	; (8012228 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 80121fc:	691b      	ldr	r3, [r3, #16]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d10e      	bne.n	8012220 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8012202:	2200      	movs	r2, #0
 8012204:	4909      	ldr	r1, [pc, #36]	; (801222c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x38>)
 8012206:	4808      	ldr	r0, [pc, #32]	; (8012228 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 8012208:	f7fb f8f4 	bl	800d3f4 <_txe_queue_send>
 801220c:	6078      	str	r0, [r7, #4]
        if (ret != TX_SUCCESS)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d005      	beq.n	8012220 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
        {
            assert(0 && "Failed to Signal Vsync!");
 8012214:	4b06      	ldr	r3, [pc, #24]	; (8012230 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x3c>)
 8012216:	4a07      	ldr	r2, [pc, #28]	; (8012234 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8012218:	21a6      	movs	r1, #166	; 0xa6
 801221a:	4807      	ldr	r0, [pc, #28]	; (8012238 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 801221c:	f014 f8f6 	bl	802640c <__assert_func>
        }
    }
}
 8012220:	bf00      	nop
 8012222:	3708      	adds	r7, #8
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	2004d5bc 	.word	0x2004d5bc
 801222c:	20025818 	.word	0x20025818
 8012230:	080283c0 	.word	0x080283c0
 8012234:	080283e0 	.word	0x080283e0
 8012238:	080281ac 	.word	0x080281ac

0801223c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8012242:	2200      	movs	r2, #0
 8012244:	490f      	ldr	r1, [pc, #60]	; (8012284 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 8012246:	4810      	ldr	r0, [pc, #64]	; (8012288 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 8012248:	f7fb f88a 	bl	800d360 <_txe_queue_receive>
 801224c:	6078      	str	r0, [r7, #4]

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d002      	beq.n	801225a <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b0a      	cmp	r3, #10
 8012258:	d106      	bne.n	8012268 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        // Then, wait for next VSYNC to occur.
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 801225a:	f04f 32ff 	mov.w	r2, #4294967295
 801225e:	4909      	ldr	r1, [pc, #36]	; (8012284 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 8012260:	4809      	ldr	r0, [pc, #36]	; (8012288 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 8012262:	f7fb f87d 	bl	800d360 <_txe_queue_receive>
 8012266:	6078      	str	r0, [r7, #4]
    }

    if (ret != TX_SUCCESS)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d005      	beq.n	801227a <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3e>
    {
        assert(0 && "Failed to Wait for Vsync!");
 801226e:	4b07      	ldr	r3, [pc, #28]	; (801228c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x50>)
 8012270:	4a07      	ldr	r2, [pc, #28]	; (8012290 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x54>)
 8012272:	21c9      	movs	r1, #201	; 0xc9
 8012274:	4807      	ldr	r0, [pc, #28]	; (8012294 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x58>)
 8012276:	f014 f8c9 	bl	802640c <__assert_func>
    }
}
 801227a:	bf00      	nop
 801227c:	3708      	adds	r7, #8
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	20025818 	.word	0x20025818
 8012288:	2004d5bc 	.word	0x2004d5bc
 801228c:	08028410 	.word	0x08028410
 8012290:	08028434 	.word	0x08028434
 8012294:	080281ac 	.word	0x080281ac

08012298 <__NVIC_DisableIRQ>:
{
 8012298:	b480      	push	{r7}
 801229a:	b083      	sub	sp, #12
 801229c:	af00      	add	r7, sp, #0
 801229e:	4603      	mov	r3, r0
 80122a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80122a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	db12      	blt.n	80122d0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80122aa:	79fb      	ldrb	r3, [r7, #7]
 80122ac:	f003 021f 	and.w	r2, r3, #31
 80122b0:	490a      	ldr	r1, [pc, #40]	; (80122dc <__NVIC_DisableIRQ+0x44>)
 80122b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80122b6:	095b      	lsrs	r3, r3, #5
 80122b8:	2001      	movs	r0, #1
 80122ba:	fa00 f202 	lsl.w	r2, r0, r2
 80122be:	3320      	adds	r3, #32
 80122c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80122c4:	f3bf 8f4f 	dsb	sy
}
 80122c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80122ca:	f3bf 8f6f 	isb	sy
}
 80122ce:	bf00      	nop
}
 80122d0:	bf00      	nop
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr
 80122dc:	e000e100 	.word	0xe000e100

080122e0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
    {
 80122e8:	4a04      	ldr	r2, [pc, #16]	; (80122fc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	601a      	str	r2, [r3, #0]
    }
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	4618      	mov	r0, r3
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr
 80122fc:	08028e34 	.word	0x08028e34

08012300 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
    }
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f7ff ffe9 	bl	80122e0 <_ZN8touchgfx9DMA_QueueD1Ev>
 801230e:	2104      	movs	r1, #4
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f014 f84f 	bl	80263b4 <_ZdlPvj>
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	4618      	mov	r0, r3
 801231a:	3708      	adds	r7, #8
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	3344      	adds	r3, #68	; 0x44
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	4798      	blx	r3
    }
 8012334:	bf00      	nop
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
    {
 8012344:	4a04      	ldr	r2, [pc, #16]	; (8012358 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	601a      	str	r2, [r3, #0]
    }
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	4618      	mov	r0, r3
 801234e:	370c      	adds	r7, #12
 8012350:	46bd      	mov	sp, r7
 8012352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012356:	4770      	bx	lr
 8012358:	080291ac 	.word	0x080291ac

0801235c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
    }
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f7ff ffe9 	bl	801233c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801236a:	210c      	movs	r1, #12
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f014 f821 	bl	80263b4 <_ZdlPvj>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	4618      	mov	r0, r3
 8012376:	3708      	adds	r7, #8
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801237c:	b480      	push	{r7}
 801237e:	b083      	sub	sp, #12
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8012386:	4a09      	ldr	r2, [pc, #36]	; (80123ac <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	601a      	str	r2, [r3, #0]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	683a      	ldr	r2, [r7, #0]
 8012390:	605a      	str	r2, [r3, #4]
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2200      	movs	r2, #0
 8012396:	721a      	strb	r2, [r3, #8]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2200      	movs	r2, #0
 801239c:	725a      	strb	r2, [r3, #9]
    {
    }
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4618      	mov	r0, r3
 80123a2:	370c      	adds	r7, #12
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr
 80123ac:	080291ac 	.word	0x080291ac

080123b0 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80123b0:	b480      	push	{r7}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80123b8:	2301      	movs	r3, #1
    }
 80123ba:	4618      	mov	r0, r3
 80123bc:	370c      	adds	r7, #12
 80123be:	46bd      	mov	sp, r7
 80123c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c4:	4770      	bx	lr

080123c6 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b082      	sub	sp, #8
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	3328      	adds	r3, #40	; 0x28
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	4610      	mov	r0, r2
 80123da:	4798      	blx	r3
    }
 80123dc:	bf00      	nop
 80123de:	3708      	adds	r7, #8
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b082      	sub	sp, #8
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	685a      	ldr	r2, [r3, #4]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	3314      	adds	r3, #20
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	4610      	mov	r0, r2
 80123fc:	4798      	blx	r3
    }
 80123fe:	bf00      	nop
 8012400:	3708      	adds	r7, #8
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}
	...

08012408 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8012408:	b580      	push	{r7, lr}
 801240a:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 801240c:	4b13      	ldr	r3, [pc, #76]	; (801245c <DMA2D_IRQHandler+0x54>)
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	f003 0302 	and.w	r3, r3, #2
 8012414:	2b00      	cmp	r3, #0
 8012416:	bf14      	ite	ne
 8012418:	2301      	movne	r3, #1
 801241a:	2300      	moveq	r3, #0
 801241c:	b2db      	uxtb	r3, r3
 801241e:	2b00      	cmp	r3, #0
 8012420:	d019      	beq.n	8012456 <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8012422:	4b0e      	ldr	r3, [pc, #56]	; (801245c <DMA2D_IRQHandler+0x54>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801242a:	2b00      	cmp	r3, #0
 801242c:	bf14      	ite	ne
 801242e:	2301      	movne	r3, #1
 8012430:	2300      	moveq	r3, #0
 8012432:	b2db      	uxtb	r3, r3
 8012434:	2b00      	cmp	r3, #0
 8012436:	d00e      	beq.n	8012456 <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8012438:	4b08      	ldr	r3, [pc, #32]	; (801245c <DMA2D_IRQHandler+0x54>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	4a07      	ldr	r2, [pc, #28]	; (801245c <DMA2D_IRQHandler+0x54>)
 801243e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012442:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8012444:	4b05      	ldr	r3, [pc, #20]	; (801245c <DMA2D_IRQHandler+0x54>)
 8012446:	2202      	movs	r2, #2
 8012448:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 801244a:	f7fb ff9b 	bl	800e384 <_ZN8touchgfx3HAL11getInstanceEv>
 801244e:	4603      	mov	r3, r0
 8012450:	4618      	mov	r0, r3
 8012452:	f7ff ffc7 	bl	80123e4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 8012456:	bf00      	nop
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	4002b000 	.word	0x4002b000

08012460 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	330c      	adds	r3, #12
 801246c:	4618      	mov	r0, r3
 801246e:	f7fd fb10 	bl	800fa92 <_ZN8touchgfx9colortypeC1Ev>
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	4618      	mov	r0, r3
 8012476:	3708      	adds	r7, #8
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 801247c:	b5b0      	push	{r4, r5, r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	330c      	adds	r3, #12
 801248a:	4619      	mov	r1, r3
 801248c:	4610      	mov	r0, r2
 801248e:	f7ff ff75 	bl	801237c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012492:	4a0e      	ldr	r2, [pc, #56]	; (80124cc <_ZN8STM32DMAC1Ev+0x50>)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	601a      	str	r2, [r3, #0]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f103 000c 	add.w	r0, r3, #12
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	3320      	adds	r3, #32
 80124a2:	2260      	movs	r2, #96	; 0x60
 80124a4:	4619      	mov	r1, r3
 80124a6:	f002 faf9 	bl	8014a9c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	3320      	adds	r3, #32
 80124ae:	245f      	movs	r4, #95	; 0x5f
 80124b0:	461d      	mov	r5, r3
 80124b2:	2c00      	cmp	r4, #0
 80124b4:	db05      	blt.n	80124c2 <_ZN8STM32DMAC1Ev+0x46>
 80124b6:	4628      	mov	r0, r5
 80124b8:	f7ff ffd2 	bl	8012460 <_ZN8touchgfx6BlitOpC1Ev>
 80124bc:	3524      	adds	r5, #36	; 0x24
 80124be:	3c01      	subs	r4, #1
 80124c0:	e7f7      	b.n	80124b2 <_ZN8STM32DMAC1Ev+0x36>
{
}
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4618      	mov	r0, r3
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bdb0      	pop	{r4, r5, r7, pc}
 80124cc:	08028de4 	.word	0x08028de4

080124d0 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	4a09      	ldr	r2, [pc, #36]	; (8012500 <_ZN8STM32DMAD1Ev+0x30>)
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80124de:	2076      	movs	r0, #118	; 0x76
 80124e0:	f7ff feda 	bl	8012298 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	330c      	adds	r3, #12
 80124e8:	4618      	mov	r0, r3
 80124ea:	f000 fb31 	bl	8012b50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7ff ff23 	bl	801233c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	4618      	mov	r0, r3
 80124fa:	3708      	adds	r7, #8
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	08028de4 	.word	0x08028de4

08012504 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
}
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f7ff ffdf 	bl	80124d0 <_ZN8STM32DMAD1Ev>
 8012512:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f013 ff4c 	bl	80263b4 <_ZdlPvj>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4618      	mov	r0, r3
 8012520:	3708      	adds	r7, #8
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
	...

08012528 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b084      	sub	sp, #16
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8012530:	4b13      	ldr	r3, [pc, #76]	; (8012580 <_ZN8STM32DMA10initializeEv+0x58>)
 8012532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012536:	4a12      	ldr	r2, [pc, #72]	; (8012580 <_ZN8STM32DMA10initializeEv+0x58>)
 8012538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801253c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8012540:	4b0f      	ldr	r3, [pc, #60]	; (8012580 <_ZN8STM32DMA10initializeEv+0x58>)
 8012542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801254a:	60fb      	str	r3, [r7, #12]
 801254c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 801254e:	4b0c      	ldr	r3, [pc, #48]	; (8012580 <_ZN8STM32DMA10initializeEv+0x58>)
 8012550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012552:	4a0b      	ldr	r2, [pc, #44]	; (8012580 <_ZN8STM32DMA10initializeEv+0x58>)
 8012554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012558:	6613      	str	r3, [r2, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 801255a:	4b09      	ldr	r3, [pc, #36]	; (8012580 <_ZN8STM32DMA10initializeEv+0x58>)
 801255c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801255e:	4a08      	ldr	r2, [pc, #32]	; (8012580 <_ZN8STM32DMA10initializeEv+0x58>)
 8012560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012564:	6613      	str	r3, [r2, #96]	; 0x60

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8012566:	2200      	movs	r2, #0
 8012568:	2105      	movs	r1, #5
 801256a:	2076      	movs	r0, #118	; 0x76
 801256c:	f7f0 fbf0 	bl	8002d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8012570:	2076      	movs	r0, #118	; 0x76
 8012572:	f7f0 fc07 	bl	8002d84 <HAL_NVIC_EnableIRQ>
}
 8012576:	bf00      	nop
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	46020c00 	.word	0x46020c00

08012584 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	460b      	mov	r3, r1
 801258e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012590:	2300      	movs	r3, #0
 8012592:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012594:	78fb      	ldrb	r3, [r7, #3]
 8012596:	2b0b      	cmp	r3, #11
 8012598:	d826      	bhi.n	80125e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801259a:	a201      	add	r2, pc, #4	; (adr r2, 80125a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125a0:	080125dd 	.word	0x080125dd
 80125a4:	080125d7 	.word	0x080125d7
 80125a8:	080125d1 	.word	0x080125d1
 80125ac:	080125e9 	.word	0x080125e9
 80125b0:	080125e9 	.word	0x080125e9
 80125b4:	080125e9 	.word	0x080125e9
 80125b8:	080125e9 	.word	0x080125e9
 80125bc:	080125e3 	.word	0x080125e3
 80125c0:	080125e3 	.word	0x080125e3
 80125c4:	080125e3 	.word	0x080125e3
 80125c8:	080125e3 	.word	0x080125e3
 80125cc:	080125e3 	.word	0x080125e3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80125d0:	2300      	movs	r3, #0
 80125d2:	60fb      	str	r3, [r7, #12]
        break;
 80125d4:	e00e      	b.n	80125f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80125d6:	2301      	movs	r3, #1
 80125d8:	60fb      	str	r3, [r7, #12]
        break;
 80125da:	e00b      	b.n	80125f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80125dc:	2302      	movs	r3, #2
 80125de:	60fb      	str	r3, [r7, #12]
        break;
 80125e0:	e008      	b.n	80125f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80125e2:	2305      	movs	r3, #5
 80125e4:	60fb      	str	r3, [r7, #12]
        break;
 80125e6:	e005      	b.n	80125f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80125e8:	4b05      	ldr	r3, [pc, #20]	; (8012600 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80125ea:	4a06      	ldr	r2, [pc, #24]	; (8012604 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80125ec:	216e      	movs	r1, #110	; 0x6e
 80125ee:	4806      	ldr	r0, [pc, #24]	; (8012608 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80125f0:	f013 ff0c 	bl	802640c <__assert_func>
        break;
    }

    return dma2dColorMode;
 80125f4:	68fb      	ldr	r3, [r7, #12]
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	08028468 	.word	0x08028468
 8012604:	08028484 	.word	0x08028484
 8012608:	080284d0 	.word	0x080284d0

0801260c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b084      	sub	sp, #16
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	460b      	mov	r3, r1
 8012616:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012618:	2300      	movs	r3, #0
 801261a:	60fb      	str	r3, [r7, #12]

    switch (format)
 801261c:	78fb      	ldrb	r3, [r7, #3]
 801261e:	2b0a      	cmp	r3, #10
 8012620:	d821      	bhi.n	8012666 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8012622:	a201      	add	r2, pc, #4	; (adr r2, 8012628 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012628:	08012661 	.word	0x08012661
 801262c:	0801265b 	.word	0x0801265b
 8012630:	08012655 	.word	0x08012655
 8012634:	08012667 	.word	0x08012667
 8012638:	08012667 	.word	0x08012667
 801263c:	08012667 	.word	0x08012667
 8012640:	08012667 	.word	0x08012667
 8012644:	0801265b 	.word	0x0801265b
 8012648:	0801265b 	.word	0x0801265b
 801264c:	0801265b 	.word	0x0801265b
 8012650:	0801265b 	.word	0x0801265b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012654:	2300      	movs	r3, #0
 8012656:	60fb      	str	r3, [r7, #12]
        break;
 8012658:	e00b      	b.n	8012672 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801265a:	2301      	movs	r3, #1
 801265c:	60fb      	str	r3, [r7, #12]
        break;
 801265e:	e008      	b.n	8012672 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8012660:	2302      	movs	r3, #2
 8012662:	60fb      	str	r3, [r7, #12]
        break;
 8012664:	e005      	b.n	8012672 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012666:	4b05      	ldr	r3, [pc, #20]	; (801267c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8012668:	4a05      	ldr	r2, [pc, #20]	; (8012680 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801266a:	218f      	movs	r1, #143	; 0x8f
 801266c:	4805      	ldr	r0, [pc, #20]	; (8012684 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801266e:	f013 fecd 	bl	802640c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012672:	68fb      	ldr	r3, [r7, #12]
}
 8012674:	4618      	mov	r0, r3
 8012676:	3710      	adds	r7, #16
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	08028468 	.word	0x08028468
 8012680:	080284fc 	.word	0x080284fc
 8012684:	080284d0 	.word	0x080284d0

08012688 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8012690:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8012694:	4618      	mov	r0, r3
 8012696:	370c      	adds	r7, #12
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80126a0:	b590      	push	{r4, r7, lr}
 80126a2:	b089      	sub	sp, #36	; 0x24
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	7f5b      	ldrb	r3, [r3, #29]
 80126ae:	4619      	mov	r1, r3
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f7ff ff67 	bl	8012584 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80126b6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	7f9b      	ldrb	r3, [r3, #30]
 80126bc:	4619      	mov	r1, r3
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f7ff ff60 	bl	8012584 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80126c4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	7f9b      	ldrb	r3, [r3, #30]
 80126ca:	4619      	mov	r1, r3
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f7ff ff9d 	bl	801260c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80126d2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	8b5b      	ldrh	r3, [r3, #26]
 80126d8:	461a      	mov	r2, r3
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	8a9b      	ldrh	r3, [r3, #20]
 80126de:	1ad2      	subs	r2, r2, r3
 80126e0:	4b95      	ldr	r3, [pc, #596]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80126e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	8b5b      	ldrh	r3, [r3, #26]
 80126e8:	461a      	mov	r2, r3
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	8a9b      	ldrh	r3, [r3, #20]
 80126ee:	1ad2      	subs	r2, r2, r3
 80126f0:	4b91      	ldr	r3, [pc, #580]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80126f2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	8b1b      	ldrh	r3, [r3, #24]
 80126f8:	461a      	mov	r2, r3
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	8a9b      	ldrh	r3, [r3, #20]
 80126fe:	1ad2      	subs	r2, r2, r3
 8012700:	4b8d      	ldr	r3, [pc, #564]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012702:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012704:	4a8c      	ldr	r2, [pc, #560]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	8adb      	ldrh	r3, [r3, #22]
 801270e:	461a      	mov	r2, r3
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	8a9b      	ldrh	r3, [r3, #20]
 8012714:	041b      	lsls	r3, r3, #16
 8012716:	431a      	orrs	r2, r3
 8012718:	4b87      	ldr	r3, [pc, #540]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801271a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	691a      	ldr	r2, [r3, #16]
 8012720:	4b85      	ldr	r3, [pc, #532]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012722:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	685a      	ldr	r2, [r3, #4]
 8012728:	4b83      	ldr	r3, [pc, #524]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801272a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012734:	d037      	beq.n	80127a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8012736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801273a:	f200 80e8 	bhi.w	801290e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 801273e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012742:	d014      	beq.n	801276e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8012744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012748:	f200 80e1 	bhi.w	801290e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 801274c:	2b80      	cmp	r3, #128	; 0x80
 801274e:	d05b      	beq.n	8012808 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8012750:	2b80      	cmp	r3, #128	; 0x80
 8012752:	f200 80dc 	bhi.w	801290e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8012756:	2b40      	cmp	r3, #64	; 0x40
 8012758:	f000 80c4 	beq.w	80128e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 801275c:	2b40      	cmp	r3, #64	; 0x40
 801275e:	f200 80d6 	bhi.w	801290e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8012762:	2b04      	cmp	r3, #4
 8012764:	d03b      	beq.n	80127de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8012766:	2b20      	cmp	r3, #32
 8012768:	f000 80bc 	beq.w	80128e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 801276c:	e0cf      	b.n	801290e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	7f1b      	ldrb	r3, [r3, #28]
 8012772:	061b      	lsls	r3, r3, #24
 8012774:	4a70      	ldr	r2, [pc, #448]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801277a:	f043 030a 	orr.w	r3, r3, #10
 801277e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	330c      	adds	r3, #12
 8012784:	4c6c      	ldr	r4, [pc, #432]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012786:	4618      	mov	r0, r3
 8012788:	f7fd f9a0 	bl	800facc <_ZNK8touchgfx9colortypecvmEv>
 801278c:	4603      	mov	r3, r0
 801278e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012790:	4a69      	ldr	r2, [pc, #420]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	691a      	ldr	r2, [r3, #16]
 801279a:	4b67      	ldr	r3, [pc, #412]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801279c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801279e:	4b66      	ldr	r3, [pc, #408]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80127a0:	4a66      	ldr	r2, [pc, #408]	; (801293c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80127a2:	601a      	str	r2, [r3, #0]
        break;
 80127a4:	e0d9      	b.n	801295a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	7f1b      	ldrb	r3, [r3, #28]
 80127aa:	061b      	lsls	r3, r3, #24
 80127ac:	4a62      	ldr	r2, [pc, #392]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80127ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80127b2:	f043 0309 	orr.w	r3, r3, #9
 80127b6:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	330c      	adds	r3, #12
 80127bc:	4c5e      	ldr	r4, [pc, #376]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80127be:	4618      	mov	r0, r3
 80127c0:	f7fd f984 	bl	800facc <_ZNK8touchgfx9colortypecvmEv>
 80127c4:	4603      	mov	r3, r0
 80127c6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80127c8:	4a5b      	ldr	r2, [pc, #364]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	691a      	ldr	r2, [r3, #16]
 80127d2:	4b59      	ldr	r3, [pc, #356]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80127d4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80127d6:	4b58      	ldr	r3, [pc, #352]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80127d8:	4a58      	ldr	r2, [pc, #352]	; (801293c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80127da:	601a      	str	r2, [r3, #0]
        break;
 80127dc:	e0bd      	b.n	801295a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	7f1b      	ldrb	r3, [r3, #28]
 80127e2:	061b      	lsls	r3, r3, #24
 80127e4:	461a      	mov	r2, r3
 80127e6:	69bb      	ldr	r3, [r7, #24]
 80127e8:	4313      	orrs	r3, r2
 80127ea:	4a53      	ldr	r2, [pc, #332]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80127ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80127f0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80127f2:	4a51      	ldr	r2, [pc, #324]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	691a      	ldr	r2, [r3, #16]
 80127fc:	4b4e      	ldr	r3, [pc, #312]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80127fe:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012800:	4b4d      	ldr	r3, [pc, #308]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012802:	4a4e      	ldr	r2, [pc, #312]	; (801293c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012804:	601a      	str	r2, [r3, #0]
        break;
 8012806:	e0a8      	b.n	801295a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8012808:	2301      	movs	r3, #1
 801280a:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	689b      	ldr	r3, [r3, #8]
 8012810:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	1d1a      	adds	r2, r3, #4
 8012816:	4b48      	ldr	r3, [pc, #288]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012818:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	7f1b      	ldrb	r3, [r3, #28]
 801281e:	061b      	lsls	r3, r3, #24
 8012820:	461a      	mov	r2, r3
 8012822:	69bb      	ldr	r3, [r7, #24]
 8012824:	4313      	orrs	r3, r2
 8012826:	4a44      	ldr	r2, [pc, #272]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801282c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801282e:	4a42      	ldr	r2, [pc, #264]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	691a      	ldr	r2, [r3, #16]
 8012838:	4b3f      	ldr	r3, [pc, #252]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801283a:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	881b      	ldrh	r3, [r3, #0]
 8012840:	b2db      	uxtb	r3, r3
 8012842:	2b00      	cmp	r3, #0
 8012844:	d002      	beq.n	801284c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 8012846:	2b01      	cmp	r3, #1
 8012848:	d00f      	beq.n	801286a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 801284a:	e024      	b.n	8012896 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 801284c:	4b3a      	ldr	r3, [pc, #232]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801284e:	69db      	ldr	r3, [r3, #28]
 8012850:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012854:	f023 0310 	bic.w	r3, r3, #16
 8012858:	68fa      	ldr	r2, [r7, #12]
 801285a:	8852      	ldrh	r2, [r2, #2]
 801285c:	3a01      	subs	r2, #1
 801285e:	0212      	lsls	r2, r2, #8
 8012860:	4611      	mov	r1, r2
 8012862:	4a35      	ldr	r2, [pc, #212]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012864:	430b      	orrs	r3, r1
 8012866:	61d3      	str	r3, [r2, #28]
                break;
 8012868:	e01c      	b.n	80128a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	7f1b      	ldrb	r3, [r3, #28]
 801286e:	2bff      	cmp	r3, #255	; 0xff
 8012870:	d101      	bne.n	8012876 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                    blend = false;
 8012872:	2300      	movs	r3, #0
 8012874:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012876:	4b30      	ldr	r3, [pc, #192]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012878:	69db      	ldr	r3, [r3, #28]
 801287a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801287e:	f023 0310 	bic.w	r3, r3, #16
 8012882:	68fa      	ldr	r2, [r7, #12]
 8012884:	8852      	ldrh	r2, [r2, #2]
 8012886:	3a01      	subs	r2, #1
 8012888:	0212      	lsls	r2, r2, #8
 801288a:	4313      	orrs	r3, r2
 801288c:	4a2a      	ldr	r2, [pc, #168]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801288e:	f043 0310 	orr.w	r3, r3, #16
 8012892:	61d3      	str	r3, [r2, #28]
                break;
 8012894:	e006      	b.n	80128a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8012896:	4b2a      	ldr	r3, [pc, #168]	; (8012940 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012898:	4a2a      	ldr	r2, [pc, #168]	; (8012944 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801289a:	f240 1119 	movw	r1, #281	; 0x119
 801289e:	482a      	ldr	r0, [pc, #168]	; (8012948 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80128a0:	f013 fdb4 	bl	802640c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80128a4:	4b24      	ldr	r3, [pc, #144]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80128a6:	69db      	ldr	r3, [r3, #28]
 80128a8:	4a23      	ldr	r2, [pc, #140]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80128aa:	f043 0320 	orr.w	r3, r3, #32
 80128ae:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80128b0:	4b21      	ldr	r3, [pc, #132]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80128b2:	69db      	ldr	r3, [r3, #28]
 80128b4:	f003 0320 	and.w	r3, r3, #32
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	bf14      	ite	ne
 80128bc:	2301      	movne	r3, #1
 80128be:	2300      	moveq	r3, #0
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d000      	beq.n	80128c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 80128c6:	e7f3      	b.n	80128b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80128c8:	4b1b      	ldr	r3, [pc, #108]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80128ca:	2210      	movs	r2, #16
 80128cc:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80128ce:	7ffb      	ldrb	r3, [r7, #31]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d003      	beq.n	80128dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80128d4:	4b18      	ldr	r3, [pc, #96]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80128d6:	4a19      	ldr	r2, [pc, #100]	; (801293c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80128d8:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 80128da:	e03e      	b.n	801295a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80128dc:	4b16      	ldr	r3, [pc, #88]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80128de:	4a1b      	ldr	r2, [pc, #108]	; (801294c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80128e0:	601a      	str	r2, [r3, #0]
        break;
 80128e2:	e03a      	b.n	801295a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	7f1b      	ldrb	r3, [r3, #28]
 80128e8:	061b      	lsls	r3, r3, #24
 80128ea:	461a      	mov	r2, r3
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	4313      	orrs	r3, r2
 80128f0:	4a11      	ldr	r2, [pc, #68]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80128f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80128f6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80128f8:	4a0f      	ldr	r2, [pc, #60]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	691a      	ldr	r2, [r3, #16]
 8012902:	4b0d      	ldr	r3, [pc, #52]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012904:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012906:	4b0c      	ldr	r3, [pc, #48]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012908:	4a0c      	ldr	r2, [pc, #48]	; (801293c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801290a:	601a      	str	r2, [r3, #0]
        break;
 801290c:	e025      	b.n	801295a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	7f1b      	ldrb	r3, [r3, #28]
 8012912:	061b      	lsls	r3, r3, #24
 8012914:	461a      	mov	r2, r3
 8012916:	69bb      	ldr	r3, [r7, #24]
 8012918:	4313      	orrs	r3, r2
 801291a:	4a07      	ldr	r2, [pc, #28]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801291c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012920:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	7f5a      	ldrb	r2, [r3, #29]
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	7f9b      	ldrb	r3, [r3, #30]
 801292a:	429a      	cmp	r2, r3
 801292c:	d010      	beq.n	8012950 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 801292e:	4b02      	ldr	r3, [pc, #8]	; (8012938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012930:	4a06      	ldr	r2, [pc, #24]	; (801294c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8012932:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8012934:	e010      	b.n	8012958 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8012936:	bf00      	nop
 8012938:	4002b000 	.word	0x4002b000
 801293c:	00020201 	.word	0x00020201
 8012940:	08028548 	.word	0x08028548
 8012944:	08028564 	.word	0x08028564
 8012948:	080284d0 	.word	0x080284d0
 801294c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8012950:	4b04      	ldr	r3, [pc, #16]	; (8012964 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8012952:	f240 2201 	movw	r2, #513	; 0x201
 8012956:	601a      	str	r2, [r3, #0]
        break;
 8012958:	bf00      	nop
    }
}
 801295a:	bf00      	nop
 801295c:	3724      	adds	r7, #36	; 0x24
 801295e:	46bd      	mov	sp, r7
 8012960:	bd90      	pop	{r4, r7, pc}
 8012962:	bf00      	nop
 8012964:	4002b000 	.word	0x4002b000

08012968 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8012968:	b590      	push	{r4, r7, lr}
 801296a:	b085      	sub	sp, #20
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	7f9b      	ldrb	r3, [r3, #30]
 8012976:	4619      	mov	r1, r3
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f7ff fe47 	bl	801260c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801297e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012980:	4a3b      	ldr	r2, [pc, #236]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	8adb      	ldrh	r3, [r3, #22]
 801298a:	461a      	mov	r2, r3
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	8a9b      	ldrh	r3, [r3, #20]
 8012990:	041b      	lsls	r3, r3, #16
 8012992:	431a      	orrs	r2, r3
 8012994:	4b36      	ldr	r3, [pc, #216]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012996:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	691a      	ldr	r2, [r3, #16]
 801299c:	4b34      	ldr	r3, [pc, #208]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801299e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	8b5b      	ldrh	r3, [r3, #26]
 80129a4:	461a      	mov	r2, r3
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	8a9b      	ldrh	r3, [r3, #20]
 80129aa:	1ad2      	subs	r2, r2, r3
 80129ac:	4b30      	ldr	r3, [pc, #192]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80129ae:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	2b08      	cmp	r3, #8
 80129b6:	d12f      	bne.n	8012a18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	8b5b      	ldrh	r3, [r3, #26]
 80129bc:	461a      	mov	r2, r3
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	8a9b      	ldrh	r3, [r3, #20]
 80129c2:	1ad2      	subs	r2, r2, r3
 80129c4:	4b2a      	ldr	r3, [pc, #168]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80129c6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	8b5b      	ldrh	r3, [r3, #26]
 80129cc:	461a      	mov	r2, r3
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	8a9b      	ldrh	r3, [r3, #20]
 80129d2:	1ad2      	subs	r2, r2, r3
 80129d4:	4b26      	ldr	r3, [pc, #152]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80129d6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80129d8:	4a25      	ldr	r2, [pc, #148]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	7f1b      	ldrb	r3, [r3, #28]
 80129e2:	061b      	lsls	r3, r3, #24
 80129e4:	4a22      	ldr	r2, [pc, #136]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80129e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80129ea:	f043 0309 	orr.w	r3, r3, #9
 80129ee:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	330c      	adds	r3, #12
 80129f4:	4c1e      	ldr	r4, [pc, #120]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fd f868 	bl	800facc <_ZNK8touchgfx9colortypecvmEv>
 80129fc:	4603      	mov	r3, r0
 80129fe:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	691a      	ldr	r2, [r3, #16]
 8012a04:	4b1a      	ldr	r3, [pc, #104]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012a06:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	691a      	ldr	r2, [r3, #16]
 8012a0c:	4b18      	ldr	r3, [pc, #96]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012a0e:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8012a10:	4b17      	ldr	r3, [pc, #92]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012a12:	4a18      	ldr	r2, [pc, #96]	; (8012a74 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8012a14:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8012a16:	e027      	b.n	8012a68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012a18:	4a15      	ldr	r2, [pc, #84]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8012a1e:	4b14      	ldr	r3, [pc, #80]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012a20:	2200      	movs	r2, #0
 8012a22:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	330c      	adds	r3, #12
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7fd f84f 	bl	800facc <_ZNK8touchgfx9colortypecvmEv>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	0a1b      	lsrs	r3, r3, #8
 8012a32:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	330c      	adds	r3, #12
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7fd f846 	bl	800facc <_ZNK8touchgfx9colortypecvmEv>
 8012a40:	4603      	mov	r3, r0
 8012a42:	095b      	lsrs	r3, r3, #5
 8012a44:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8012a48:	431c      	orrs	r4, r3
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	330c      	adds	r3, #12
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7fd f83c 	bl	800facc <_ZNK8touchgfx9colortypecvmEv>
 8012a54:	4603      	mov	r3, r0
 8012a56:	08db      	lsrs	r3, r3, #3
 8012a58:	f003 031f 	and.w	r3, r3, #31
 8012a5c:	4a04      	ldr	r2, [pc, #16]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012a5e:	4323      	orrs	r3, r4
 8012a60:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8012a62:	4b03      	ldr	r3, [pc, #12]	; (8012a70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012a64:	4a04      	ldr	r2, [pc, #16]	; (8012a78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8012a66:	601a      	str	r2, [r3, #0]
}
 8012a68:	bf00      	nop
 8012a6a:	3714      	adds	r7, #20
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd90      	pop	{r4, r7, pc}
 8012a70:	4002b000 	.word	0x4002b000
 8012a74:	00020201 	.word	0x00020201
 8012a78:	00030201 	.word	0x00030201

08012a7c <_ZN8touchgfx5paint6rgb5658tearDownEv>:
    * @fn void tearDown();
    *
    * @brief Waits until previous DMA drawing operation has finished
    */
    void tearDown()
    {
 8012a7c:	b480      	push	{r7}
 8012a7e:	af00      	add	r7, sp, #0
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012a80:	4b09      	ldr	r3, [pc, #36]	; (8012aa8 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	f003 0301 	and.w	r3, r3, #1
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	bf14      	ite	ne
 8012a8c:	2301      	movne	r3, #1
 8012a8e:	2300      	moveq	r3, #0
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d000      	beq.n	8012a98 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x1c>
 8012a96:	e7f3      	b.n	8012a80 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x4>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 8012a98:	4b03      	ldr	r3, [pc, #12]	; (8012aa8 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 8012a9a:	2223      	movs	r2, #35	; 0x23
 8012a9c:	609a      	str	r2, [r3, #8]
    }
 8012a9e:	bf00      	nop
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa6:	4770      	bx	lr
 8012aa8:	4002b000 	.word	0x4002b000

08012aac <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
    *
    * @brief Renders Canvas Widget chunks using DMA.
    * This functions will not generate an interrupt, and will not affect the DMA queue.
    */
    void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
    {
 8012aac:	b480      	push	{r7}
 8012aae:	b085      	sub	sp, #20
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	60f8      	str	r0, [r7, #12]
 8012ab4:	60b9      	str	r1, [r7, #8]
 8012ab6:	607a      	str	r2, [r7, #4]
 8012ab8:	70fb      	strb	r3, [r7, #3]
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012aba:	4b22      	ldr	r3, [pc, #136]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	f003 0301 	and.w	r3, r3, #1
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	bf14      	ite	ne
 8012ac6:	2301      	movne	r3, #1
 8012ac8:	2300      	moveq	r3, #0
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d000      	beq.n	8012ad2 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x26>
 8012ad0:	e7f3      	b.n	8012aba <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xe>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 8012ad2:	4b1c      	ldr	r3, [pc, #112]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012ad4:	2223      	movs	r2, #35	; 0x23
 8012ad6:	609a      	str	r2, [r3, #8]

        /* DMA2D OPFCCR register configuration */
        WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8012ad8:	4b1a      	ldr	r3, [pc, #104]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012ada:	2202      	movs	r2, #2
 8012adc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Configure DMA2D data size */
        WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	041b      	lsls	r3, r3, #16
 8012ae2:	4a18      	ldr	r2, [pc, #96]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012ae4:	f043 0301 	orr.w	r3, r3, #1
 8012ae8:	6453      	str	r3, [r2, #68]	; 0x44

        /* Configure DMA2D destination address */
        WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8012aea:	4a16      	ldr	r2, [pc, #88]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	63d3      	str	r3, [r2, #60]	; 0x3c

        if (alpha < 0xFF)
 8012af0:	78fb      	ldrb	r3, [r7, #3]
 8012af2:	2bff      	cmp	r3, #255	; 0xff
 8012af4:	d017      	beq.n	8012b26 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
        {
            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012af6:	4b13      	ldr	r3, [pc, #76]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012af8:	2202      	movs	r2, #2
 8012afa:	625a      	str	r2, [r3, #36]	; 0x24

            /* Write DMA2D FGPFCCR register */
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8012afc:	78fb      	ldrb	r3, [r7, #3]
 8012afe:	061b      	lsls	r3, r3, #24
 8012b00:	4a10      	ldr	r2, [pc, #64]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012b06:	f043 0309 	orr.w	r3, r3, #9
 8012b0a:	61d3      	str	r3, [r2, #28]

            /* DMA2D FGCOLR register configuration */
            WRITE_REG(DMA2D->FGCOLR, color);
 8012b0c:	4a0d      	ldr	r2, [pc, #52]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6213      	str	r3, [r2, #32]

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8012b12:	4a0c      	ldr	r2, [pc, #48]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	6153      	str	r3, [r2, #20]

            /* Configure DMA2D source address */
            WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8012b18:	4a0a      	ldr	r2, [pc, #40]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	60d3      	str	r3, [r2, #12]

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8012b1e:	4b09      	ldr	r3, [pc, #36]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012b20:	4a09      	ldr	r2, [pc, #36]	; (8012b48 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 8012b22:	601a      	str	r2, [r3, #0]
            WRITE_REG(DMA2D->OCOLR, color565);

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
        }
    }
 8012b24:	e008      	b.n	8012b38 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012b26:	4b07      	ldr	r3, [pc, #28]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012b28:	2202      	movs	r2, #2
 8012b2a:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->OCOLR, color565);
 8012b2c:	4a05      	ldr	r2, [pc, #20]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	6393      	str	r3, [r2, #56]	; 0x38
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8012b32:	4b04      	ldr	r3, [pc, #16]	; (8012b44 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012b34:	4a05      	ldr	r2, [pc, #20]	; (8012b4c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 8012b36:	601a      	str	r2, [r3, #0]
    }
 8012b38:	bf00      	nop
 8012b3a:	3714      	adds	r7, #20
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr
 8012b44:	4002b000 	.word	0x4002b000
 8012b48:	00020001 	.word	0x00020001
 8012b4c:	00030001 	.word	0x00030001

08012b50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	4a05      	ldr	r2, [pc, #20]	; (8012b70 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	601a      	str	r2, [r3, #0]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7ff fbbd 	bl	80122e0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	080291fc 	.word	0x080291fc

08012b74 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7ff ffe7 	bl	8012b50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012b82:	2114      	movs	r1, #20
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f013 fc15 	bl	80263b4 <_ZdlPvj>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3708      	adds	r7, #8
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8012b94:	b480      	push	{r7}
 8012b96:	b083      	sub	sp, #12
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8012b9c:	4a04      	ldr	r2, [pc, #16]	; (8012bb0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6013      	str	r3, [r2, #0]
    }
 8012ba2:	bf00      	nop
 8012ba4:	370c      	adds	r7, #12
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr
 8012bae:	bf00      	nop
 8012bb0:	2004f72c 	.word	0x2004f72c

08012bb4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8012bb4:	b480      	push	{r7}
 8012bb6:	b085      	sub	sp, #20
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	60f8      	str	r0, [r7, #12]
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	607a      	str	r2, [r7, #4]
 8012bc0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8012bc2:	4a0b      	ldr	r2, [pc, #44]	; (8012bf0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	601a      	str	r2, [r3, #0]
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	68ba      	ldr	r2, [r7, #8]
 8012bcc:	605a      	str	r2, [r3, #4]
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	609a      	str	r2, [r3, #8]
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	683a      	ldr	r2, [r7, #0]
 8012bd8:	60da      	str	r2, [r3, #12]
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	69ba      	ldr	r2, [r7, #24]
 8012bde:	611a      	str	r2, [r3, #16]
    {
    }
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	4618      	mov	r0, r3
 8012be4:	3714      	adds	r7, #20
 8012be6:	46bd      	mov	sp, r7
 8012be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bec:	4770      	bx	lr
 8012bee:	bf00      	nop
 8012bf0:	08028f1c 	.word	0x08028f1c

08012bf4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8012bf4:	b480      	push	{r7}
 8012bf6:	b083      	sub	sp, #12
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
    {
 8012bfc:	4a04      	ldr	r2, [pc, #16]	; (8012c10 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	601a      	str	r2, [r3, #0]
    }
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	4618      	mov	r0, r3
 8012c06:	370c      	adds	r7, #12
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr
 8012c10:	08028f1c 	.word	0x08028f1c

08012c14 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
    }
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f7ff ffe9 	bl	8012bf4 <_ZN8touchgfx7MVPHeapD1Ev>
 8012c22:	2114      	movs	r1, #20
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f013 fbc5 	bl	80263b4 <_ZdlPvj>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3708      	adds	r7, #8
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
    {
 8012c3c:	4a04      	ldr	r2, [pc, #16]	; (8012c50 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	601a      	str	r2, [r3, #0]
    }
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	4618      	mov	r0, r3
 8012c46:	370c      	adds	r7, #12
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr
 8012c50:	080295f8 	.word	0x080295f8

08012c54 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
    }
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7ff ffe9 	bl	8012c34 <_ZN8touchgfx3LCDD1Ev>
 8012c62:	2108      	movs	r1, #8
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f013 fba5 	bl	80263b4 <_ZdlPvj>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3708      	adds	r7, #8
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}

08012c74 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2200      	movs	r2, #0
 8012c80:	801a      	strh	r2, [r3, #0]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2200      	movs	r2, #0
 8012c86:	805a      	strh	r2, [r3, #2]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	809a      	strh	r2, [r3, #4]
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2200      	movs	r2, #0
 8012c92:	80da      	strh	r2, [r3, #6]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2200      	movs	r2, #0
 8012c98:	811a      	strh	r2, [r3, #8]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	815a      	strh	r2, [r3, #10]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	819a      	strh	r2, [r3, #12]
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	739a      	strb	r2, [r3, #14]
        {
        }
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	370c      	adds	r7, #12
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb8:	4770      	bx	lr

08012cba <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b082      	sub	sp, #8
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7ff ffd5 	bl	8012c74 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	611a      	str	r2, [r3, #16]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	829a      	strh	r2, [r3, #20]
    {
    }
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3708      	adds	r7, #8
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	60b9      	str	r1, [r7, #8]
 8012cea:	607a      	str	r2, [r7, #4]
 8012cec:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8012cee:	4a55      	ldr	r2, [pc, #340]	; (8012e44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	601a      	str	r2, [r3, #0]
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	68ba      	ldr	r2, [r7, #8]
 8012cf8:	605a      	str	r2, [r3, #4]
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	609a      	str	r2, [r3, #8]
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	683a      	ldr	r2, [r7, #0]
 8012d04:	60da      	str	r2, [r3, #12]
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	611a      	str	r2, [r3, #16]
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	615a      	str	r2, [r3, #20]
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	2200      	movs	r2, #0
 8012d16:	619a      	str	r2, [r3, #24]
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	331c      	adds	r3, #28
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7ff ffcc 	bl	8012cba <_ZN8touchgfx8GesturesC1Ev>
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	2200      	movs	r2, #0
 8012d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	639a      	str	r2, [r3, #56]	; 0x38
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	2200      	movs	r2, #0
 8012d34:	63da      	str	r2, [r3, #60]	; 0x3c
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	641a      	str	r2, [r3, #64]	; 0x40
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	645a      	str	r2, [r3, #68]	; 0x44
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	2200      	movs	r2, #0
 8012d46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	2200      	movs	r2, #0
 8012d56:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	2200      	movs	r2, #0
 8012d66:	64da      	str	r2, [r3, #76]	; 0x4c
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	3350      	adds	r3, #80	; 0x50
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7fc feb9 	bl	800fae4 <_ZN8touchgfx4RectC1Ev>
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2200      	movs	r2, #0
 8012d76:	659a      	str	r2, [r3, #88]	; 0x58
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	2200      	movs	r2, #0
 8012d82:	661a      	str	r2, [r3, #96]	; 0x60
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	2201      	movs	r2, #1
 8012d88:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2200      	movs	r2, #0
 8012d98:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	2201      	movs	r2, #1
 8012da0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	2200      	movs	r2, #0
 8012da8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	2200      	movs	r2, #0
 8012db0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	2200      	movs	r2, #0
 8012db8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	2200      	movs	r2, #0
 8012dd0:	671a      	str	r2, [r3, #112]	; 0x70
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2200      	movs	r2, #0
 8012de6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2201      	movs	r2, #1
 8012dee:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2201      	movs	r2, #1
 8012df6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8012dfa:	4a13      	ldr	r2, [pc, #76]	; (8012e48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8012e00:	4a12      	ldr	r2, [pc, #72]	; (8012e4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8012e02:	8b3b      	ldrh	r3, [r7, #24]
 8012e04:	8013      	strh	r3, [r2, #0]
 8012e06:	4b11      	ldr	r3, [pc, #68]	; (8012e4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8012e08:	881a      	ldrh	r2, [r3, #0]
 8012e0a:	4b11      	ldr	r3, [pc, #68]	; (8012e50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8012e0c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8012e0e:	4a11      	ldr	r2, [pc, #68]	; (8012e54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8012e10:	8bbb      	ldrh	r3, [r7, #28]
 8012e12:	8013      	strh	r3, [r2, #0]
 8012e14:	4b0f      	ldr	r3, [pc, #60]	; (8012e54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8012e16:	881a      	ldrh	r2, [r3, #0]
 8012e18:	4b0f      	ldr	r3, [pc, #60]	; (8012e58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8012e1a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8012e1c:	4b0f      	ldr	r3, [pc, #60]	; (8012e5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8012e1e:	2200      	movs	r2, #0
 8012e20:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8012e22:	8b3a      	ldrh	r2, [r7, #24]
 8012e24:	8bbb      	ldrh	r3, [r7, #28]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	bf34      	ite	cc
 8012e2a:	2301      	movcc	r3, #1
 8012e2c:	2300      	movcs	r3, #0
 8012e2e:	b2db      	uxtb	r3, r3
 8012e30:	461a      	mov	r2, r3
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3710      	adds	r7, #16
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	080290d4 	.word	0x080290d4
 8012e48:	2004f6c8 	.word	0x2004f6c8
 8012e4c:	2004f6bc 	.word	0x2004f6bc
 8012e50:	2004f6c2 	.word	0x2004f6c2
 8012e54:	2004f6be 	.word	0x2004f6be
 8012e58:	2004f6c4 	.word	0x2004f6c4
 8012e5c:	2004f6c0 	.word	0x2004f6c0

08012e60 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7fb fdc3 	bl	800e9f8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8012e72:	bf00      	nop
 8012e74:	3708      	adds	r7, #8
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
	...

08012e7c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b086      	sub	sp, #24
 8012e80:	af02      	add	r7, sp, #8
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	607a      	str	r2, [r7, #4]
 8012e88:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8012e8a:	68f8      	ldr	r0, [r7, #12]
 8012e8c:	69bb      	ldr	r3, [r7, #24]
 8012e8e:	9300      	str	r3, [sp, #0]
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	687a      	ldr	r2, [r7, #4]
 8012e94:	68b9      	ldr	r1, [r7, #8]
 8012e96:	f7ff fe8d 	bl	8012bb4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8012e9a:	4a04      	ldr	r2, [pc, #16]	; (8012eac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	601a      	str	r2, [r3, #0]
    {

    }
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3710      	adds	r7, #16
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	08028f08 	.word	0x08028f08

08012eb0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	4801      	ldr	r0, [pc, #4]	; (8012ebc <__tcf_0+0xc>)
 8012eb6:	f000 f96d 	bl	8013194 <_ZN12FrontendHeapD1Ev>
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	2004d5f4 	.word	0x2004d5f4

08012ec0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012ec4:	4b11      	ldr	r3, [pc, #68]	; (8012f0c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012ec6:	e8d3 3f8f 	ldab	r3, [r3]
 8012eca:	b2db      	uxtb	r3, r3
 8012ecc:	f003 0301 	and.w	r3, r3, #1
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	bf0c      	ite	eq
 8012ed4:	2301      	moveq	r3, #1
 8012ed6:	2300      	movne	r3, #0
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d013      	beq.n	8012f06 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8012ede:	480b      	ldr	r0, [pc, #44]	; (8012f0c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012ee0:	f013 fa6a 	bl	80263b8 <__cxa_guard_acquire>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	bf14      	ite	ne
 8012eea:	2301      	movne	r3, #1
 8012eec:	2300      	moveq	r3, #0
 8012eee:	b2db      	uxtb	r3, r3
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d008      	beq.n	8012f06 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8012ef4:	4806      	ldr	r0, [pc, #24]	; (8012f10 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8012ef6:	f000 f867 	bl	8012fc8 <_ZN12FrontendHeapC1Ev>
 8012efa:	4806      	ldr	r0, [pc, #24]	; (8012f14 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8012efc:	f013 faa4 	bl	8026448 <atexit>
 8012f00:	4802      	ldr	r0, [pc, #8]	; (8012f0c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012f02:	f013 fa65 	bl	80263d0 <__cxa_guard_release>
        return instance;
 8012f06:	4b02      	ldr	r3, [pc, #8]	; (8012f10 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8012f08:	4618      	mov	r0, r3
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	2004e81c 	.word	0x2004e81c
 8012f10:	2004d5f4 	.word	0x2004d5f4
 8012f14:	08012eb1 	.word	0x08012eb1

08012f18 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	4a05      	ldr	r2, [pc, #20]	; (8012f38 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	601a      	str	r2, [r3, #0]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7ff fe63 	bl	8012bf4 <_ZN8touchgfx7MVPHeapD1Ev>
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	4618      	mov	r0, r3
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	08028f08 	.word	0x08028f08

08012f3c <_ZN16FrontendHeapBaseD0Ev>:
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f7ff ffe7 	bl	8012f18 <_ZN16FrontendHeapBaseD1Ev>
 8012f4a:	2114      	movs	r1, #20
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f013 fa31 	bl	80263b4 <_ZdlPvj>
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	4618      	mov	r0, r3
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	4618      	mov	r0, r3
 8012f68:	f000 fc16 	bl	8013798 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012f6c:	4a03      	ldr	r2, [pc, #12]	; (8012f7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	601a      	str	r2, [r3, #0]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	4618      	mov	r0, r3
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	08028ed4 	.word	0x08028ed4

08012f80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f000 fc04 	bl	8013798 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012f90:	4a03      	ldr	r2, [pc, #12]	; (8012fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	601a      	str	r2, [r3, #0]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3708      	adds	r7, #8
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}
 8012fa0:	08028ea0 	.word	0x08028ea0

08012fa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b082      	sub	sp, #8
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f000 fbf2 	bl	8013798 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012fb4:	4a03      	ldr	r2, [pc, #12]	; (8012fc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	601a      	str	r2, [r3, #0]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	08028e6c 	.word	0x08028e6c

08012fc8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012fc8:	b590      	push	{r4, r7, lr}
 8012fca:	b085      	sub	sp, #20
 8012fcc:	af02      	add	r7, sp, #8
 8012fce:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f103 0114 	add.w	r1, r3, #20
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f503 5283 	add.w	r2, r3, #4192	; 0x1060
 8012fe4:	3210      	adds	r2, #16
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8012fec:	3310      	adds	r3, #16
                     app(model, *this)
 8012fee:	9300      	str	r3, [sp, #0]
 8012ff0:	4613      	mov	r3, r2
 8012ff2:	4622      	mov	r2, r4
 8012ff4:	f7ff ff42 	bl	8012e7c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8012ff8:	4a1a      	ldr	r2, [pc, #104]	; (8013064 <_ZN12FrontendHeapC1Ev+0x9c>)
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	601a      	str	r2, [r3, #0]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	3314      	adds	r3, #20
 8013002:	4618      	mov	r0, r3
 8013004:	f7ff ffaa 	bl	8012f5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	332c      	adds	r3, #44	; 0x2c
 801300c:	4618      	mov	r0, r3
 801300e:	f7ff ffb7 	bl	8012f80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8013018:	3310      	adds	r3, #16
 801301a:	4618      	mov	r0, r3
 801301c:	f7ff ffc2 	bl	8012fa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8013026:	330c      	adds	r3, #12
 8013028:	4618      	mov	r0, r3
 801302a:	f7fe fa21 	bl	8011470 <_ZN5ModelC1Ev>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8013034:	3310      	adds	r3, #16
 8013036:	687a      	ldr	r2, [r7, #4]
 8013038:	f502 5186 	add.w	r1, r2, #4288	; 0x10c0
 801303c:	310c      	adds	r1, #12
 801303e:	687a      	ldr	r2, [r7, #4]
 8013040:	4618      	mov	r0, r3
 8013042:	f7fe f9ff 	bl	8011444 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801304e:	3310      	adds	r3, #16
 8013050:	4619      	mov	r1, r3
 8013052:	4610      	mov	r0, r2
 8013054:	f7ff ff04 	bl	8012e60 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	4618      	mov	r0, r3
 801305c:	370c      	adds	r7, #12
 801305e:	46bd      	mov	sp, r7
 8013060:	bd90      	pop	{r4, r7, pc}
 8013062:	bf00      	nop
 8013064:	08028e58 	.word	0x08028e58

08013068 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8013068:	b580      	push	{r7, lr}
 801306a:	b086      	sub	sp, #24
 801306c:	af02      	add	r7, sp, #8
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	60b9      	str	r1, [r7, #8]
 8013072:	607a      	str	r2, [r7, #4]
 8013074:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	8bbb      	ldrh	r3, [r7, #28]
 801307a:	9301      	str	r3, [sp, #4]
 801307c:	8b3b      	ldrh	r3, [r7, #24]
 801307e:	9300      	str	r3, [sp, #0]
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	68b9      	ldr	r1, [r7, #8]
 8013086:	f7ff fe2b 	bl	8012ce0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801308a:	4a04      	ldr	r2, [pc, #16]	; (801309c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	601a      	str	r2, [r3, #0]
    }
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	4618      	mov	r0, r3
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}
 801309a:	bf00      	nop
 801309c:	08028f2c 	.word	0x08028f2c

080130a0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b086      	sub	sp, #24
 80130a4:	af02      	add	r7, sp, #8
 80130a6:	60f8      	str	r0, [r7, #12]
 80130a8:	60b9      	str	r1, [r7, #8]
 80130aa:	607a      	str	r2, [r7, #4]
 80130ac:	603b      	str	r3, [r7, #0]
 80130ae:	68f8      	ldr	r0, [r7, #12]
 80130b0:	8bbb      	ldrh	r3, [r7, #28]
 80130b2:	9301      	str	r3, [sp, #4]
 80130b4:	8b3b      	ldrh	r3, [r7, #24]
 80130b6:	9300      	str	r3, [sp, #0]
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	687a      	ldr	r2, [r7, #4]
 80130bc:	68b9      	ldr	r1, [r7, #8]
 80130be:	f7ff ffd3 	bl	8013068 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80130c2:	4a04      	ldr	r2, [pc, #16]	; (80130d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	601a      	str	r2, [r3, #0]
    }
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	4618      	mov	r0, r3
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	08028d08 	.word	0x08028d08

080130d8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	4a04      	ldr	r2, [pc, #16]	; (80130f4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	601a      	str	r2, [r3, #0]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	4618      	mov	r0, r3
 80130ea:	370c      	adds	r7, #12
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr
 80130f4:	08028cf0 	.word	0x08028cf0

080130f8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	4618      	mov	r0, r3
 8013104:	f7ff ffe8 	bl	80130d8 <_ZN8touchgfx15TouchControllerC1Ev>
 8013108:	4a03      	ldr	r2, [pc, #12]	; (8013118 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	601a      	str	r2, [r3, #0]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	4618      	mov	r0, r3
 8013112:	3708      	adds	r7, #8
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	08028cd8 	.word	0x08028cd8

0801311c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 801311c:	b590      	push	{r4, r7, lr}
 801311e:	b085      	sub	sp, #20
 8013120:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8013122:	f7fd ff91 	bl	8011048 <_ZN14BitmapDatabase11getInstanceEv>
 8013126:	4604      	mov	r4, r0
 8013128:	f7fd ff98 	bl	801105c <_ZN14BitmapDatabase15getInstanceSizeEv>
 801312c:	4603      	mov	r3, r0
 801312e:	4619      	mov	r1, r3
 8013130:	2300      	movs	r3, #0
 8013132:	9300      	str	r3, [sp, #0]
 8013134:	2300      	movs	r3, #0
 8013136:	2200      	movs	r2, #0
 8013138:	4620      	mov	r0, r4
 801313a:	f007 f867 	bl	801a20c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801313e:	4809      	ldr	r0, [pc, #36]	; (8013164 <touchgfx_init+0x48>)
 8013140:	f7ff fd28 	bl	8012b94 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8013144:	2000      	movs	r0, #0
 8013146:	f7fe f8b5 	bl	80112b4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801314a:	4807      	ldr	r0, [pc, #28]	; (8013168 <touchgfx_init+0x4c>)
 801314c:	f006 ffc6 	bl	801a0dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013150:	f7ff feb6 	bl	8012ec0 <_ZN12FrontendHeap11getInstanceEv>
 8013154:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8013156:	4805      	ldr	r0, [pc, #20]	; (801316c <touchgfx_init+0x50>)
 8013158:	f7fe fe00 	bl	8011d5c <_ZN11TouchGFXHAL10initializeEv>
}
 801315c:	bf00      	nop
 801315e:	370c      	adds	r7, #12
 8013160:	46bd      	mov	sp, r7
 8013162:	bd90      	pop	{r4, r7, pc}
 8013164:	2004f63c 	.word	0x2004f63c
 8013168:	2002581c 	.word	0x2002581c
 801316c:	2004f640 	.word	0x2004f640

08013170 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8013170:	b480      	push	{r7}
 8013172:	af00      	add	r7, sp, #0
}
 8013174:	bf00      	nop
 8013176:	46bd      	mov	sp, r7
 8013178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317c:	4770      	bx	lr
	...

08013180 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013180:	b580      	push	{r7, lr}
 8013182:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8013184:	4802      	ldr	r0, [pc, #8]	; (8013190 <touchgfx_taskEntry+0x10>)
 8013186:	f000 fe16 	bl	8013db6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 801318a:	bf00      	nop
 801318c:	bd80      	pop	{r7, pc}
 801318e:	bf00      	nop
 8013190:	2004f640 	.word	0x2004f640

08013194 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013194:	b580      	push	{r7, lr}
 8013196:	b082      	sub	sp, #8
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	4a11      	ldr	r2, [pc, #68]	; (80131e4 <_ZN12FrontendHeapD1Ev+0x50>)
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	601a      	str	r2, [r3, #0]
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80131a8:	3310      	adds	r3, #16
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fe f914 	bl	80113d8 <_ZN19FrontendApplicationD1Ev>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80131b6:	3310      	adds	r3, #16
 80131b8:	4618      	mov	r0, r3
 80131ba:	f000 f827 	bl	801320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	332c      	adds	r3, #44	; 0x2c
 80131c2:	4618      	mov	r0, r3
 80131c4:	f000 f844 	bl	8013250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	3314      	adds	r3, #20
 80131cc:	4618      	mov	r0, r3
 80131ce:	f000 f863 	bl	8013298 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7ff fe9f 	bl	8012f18 <_ZN16FrontendHeapBaseD1Ev>
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	4618      	mov	r0, r3
 80131de:	3708      	adds	r7, #8
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}
 80131e4:	08028e58 	.word	0x08028e58

080131e8 <_ZN12FrontendHeapD0Ev>:
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f7ff ffcf 	bl	8013194 <_ZN12FrontendHeapD1Ev>
 80131f6:	f241 2128 	movw	r1, #4648	; 0x1228
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f013 f8da 	bl	80263b4 <_ZdlPvj>
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	4618      	mov	r0, r3
 8013204:	3708      	adds	r7, #8
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
	...

0801320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	4a05      	ldr	r2, [pc, #20]	; (801322c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	601a      	str	r2, [r3, #0]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	4618      	mov	r0, r3
 801321e:	f000 fab9 	bl	8013794 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	4618      	mov	r0, r3
 8013226:	3708      	adds	r7, #8
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}
 801322c:	08028e6c 	.word	0x08028e6c

08013230 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f7ff ffe7 	bl	801320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801323e:	215c      	movs	r1, #92	; 0x5c
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f013 f8b7 	bl	80263b4 <_ZdlPvj>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	4618      	mov	r0, r3
 801324a:	3708      	adds	r7, #8
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	4a05      	ldr	r2, [pc, #20]	; (8013270 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	601a      	str	r2, [r3, #0]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	4618      	mov	r0, r3
 8013262:	f000 fa97 	bl	8013794 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	4618      	mov	r0, r3
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}
 8013270:	08028ea0 	.word	0x08028ea0

08013274 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013274:	b580      	push	{r7, lr}
 8013276:	b082      	sub	sp, #8
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f7ff ffe7 	bl	8013250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013282:	f241 0144 	movw	r1, #4164	; 0x1044
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f013 f894 	bl	80263b4 <_ZdlPvj>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	4618      	mov	r0, r3
 8013290:	3708      	adds	r7, #8
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
	...

08013298 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013298:	b580      	push	{r7, lr}
 801329a:	b082      	sub	sp, #8
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	4a05      	ldr	r2, [pc, #20]	; (80132b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	601a      	str	r2, [r3, #0]
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	4618      	mov	r0, r3
 80132aa:	f000 fa73 	bl	8013794 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	4618      	mov	r0, r3
 80132b2:	3708      	adds	r7, #8
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}
 80132b8:	08028ed4 	.word	0x08028ed4

080132bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80132bc:	b580      	push	{r7, lr}
 80132be:	b082      	sub	sp, #8
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f7ff ffe7 	bl	8013298 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80132ca:	2118      	movs	r1, #24
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f013 f871 	bl	80263b4 <_ZdlPvj>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	4618      	mov	r0, r3
 80132d6:	3708      	adds	r7, #8
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}

080132dc <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	4a05      	ldr	r2, [pc, #20]	; (80132fc <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	601a      	str	r2, [r3, #0]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7ff fca1 	bl	8012c34 <_ZN8touchgfx3LCDD1Ev>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	4618      	mov	r0, r3
 80132f6:	3708      	adds	r7, #8
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}
 80132fc:	080299fc 	.word	0x080299fc

08013300 <_ZN8touchgfx8LCD16bppD0Ev>:
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f7ff ffe7 	bl	80132dc <_ZN8touchgfx8LCD16bppD1Ev>
 801330e:	2178      	movs	r1, #120	; 0x78
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f013 f84f 	bl	80263b4 <_ZdlPvj>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	4618      	mov	r0, r3
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <_Z41__static_initialization_and_destruction_0ii>:
 8013320:	b580      	push	{r7, lr}
 8013322:	b084      	sub	sp, #16
 8013324:	af02      	add	r7, sp, #8
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	6039      	str	r1, [r7, #0]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	2b01      	cmp	r3, #1
 801332e:	d118      	bne.n	8013362 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013336:	4293      	cmp	r3, r2
 8013338:	d113      	bne.n	8013362 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 801333a:	4817      	ldr	r0, [pc, #92]	; (8013398 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801333c:	f7ff fedc 	bl	80130f8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8013340:	4816      	ldr	r0, [pc, #88]	; (801339c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013342:	f7ff f89b 	bl	801247c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8013346:	4816      	ldr	r0, [pc, #88]	; (80133a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013348:	f00a f860 	bl	801d40c <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 801334c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8013350:	9301      	str	r3, [sp, #4]
 8013352:	23f0      	movs	r3, #240	; 0xf0
 8013354:	9300      	str	r3, [sp, #0]
 8013356:	4b10      	ldr	r3, [pc, #64]	; (8013398 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8013358:	4a11      	ldr	r2, [pc, #68]	; (80133a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801335a:	4910      	ldr	r1, [pc, #64]	; (801339c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801335c:	4811      	ldr	r0, [pc, #68]	; (80133a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801335e:	f7ff fe9f 	bl	80130a0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d113      	bne.n	8013390 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801336e:	4293      	cmp	r3, r2
 8013370:	d10e      	bne.n	8013390 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8013372:	480c      	ldr	r0, [pc, #48]	; (80133a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013374:	f7fe fe16 	bl	8011fa4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013378:	480b      	ldr	r0, [pc, #44]	; (80133a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801337a:	f7fa faff 	bl	800d97c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 801337e:	4808      	ldr	r0, [pc, #32]	; (80133a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013380:	f7ff ffac 	bl	80132dc <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8013384:	4805      	ldr	r0, [pc, #20]	; (801339c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013386:	f7ff f8a3 	bl	80124d0 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801338a:	4803      	ldr	r0, [pc, #12]	; (8013398 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801338c:	f7fe faa2 	bl	80118d4 <_ZN20STM32TouchControllerD1Ev>
}
 8013390:	bf00      	nop
 8013392:	3708      	adds	r7, #8
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	2004e820 	.word	0x2004e820
 801339c:	2004e824 	.word	0x2004e824
 80133a0:	2004f5c4 	.word	0x2004f5c4
 80133a4:	2004f640 	.word	0x2004f640
 80133a8:	2002581c 	.word	0x2002581c

080133ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80133ac:	b480      	push	{r7}
 80133ae:	b083      	sub	sp, #12
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80133b4:	2301      	movs	r3, #1
    }
 80133b6:	4618      	mov	r0, r3
 80133b8:	370c      	adds	r7, #12
 80133ba:	46bd      	mov	sp, r7
 80133bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c0:	4770      	bx	lr

080133c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80133c2:	b480      	push	{r7}
 80133c4:	b083      	sub	sp, #12
 80133c6:	af00      	add	r7, sp, #0
 80133c8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80133ca:	2354      	movs	r3, #84	; 0x54
    }
 80133cc:	4618      	mov	r0, r3
 80133ce:	370c      	adds	r7, #12
 80133d0:	46bd      	mov	sp, r7
 80133d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d6:	4770      	bx	lr

080133d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	460b      	mov	r3, r1
 80133e2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80133e4:	887b      	ldrh	r3, [r7, #2]
 80133e6:	2254      	movs	r2, #84	; 0x54
 80133e8:	fb02 f303 	mul.w	r3, r2, r3
 80133ec:	3308      	adds	r3, #8
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	4413      	add	r3, r2
    }
 80133f2:	4618      	mov	r0, r3
 80133f4:	370c      	adds	r7, #12
 80133f6:	46bd      	mov	sp, r7
 80133f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fc:	4770      	bx	lr

080133fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80133fe:	b480      	push	{r7}
 8013400:	b083      	sub	sp, #12
 8013402:	af00      	add	r7, sp, #0
 8013404:	6078      	str	r0, [r7, #4]
 8013406:	460b      	mov	r3, r1
 8013408:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801340a:	887b      	ldrh	r3, [r7, #2]
 801340c:	2254      	movs	r2, #84	; 0x54
 801340e:	fb02 f303 	mul.w	r3, r2, r3
 8013412:	3308      	adds	r3, #8
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	4413      	add	r3, r2
    }
 8013418:	4618      	mov	r0, r3
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801342c:	2301      	movs	r3, #1
    }
 801342e:	4618      	mov	r0, r3
 8013430:	370c      	adds	r7, #12
 8013432:	46bd      	mov	sp, r7
 8013434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013438:	4770      	bx	lr

0801343a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801343a:	b480      	push	{r7}
 801343c:	b083      	sub	sp, #12
 801343e:	af00      	add	r7, sp, #0
 8013440:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013442:	f241 033c 	movw	r3, #4156	; 0x103c
    }
 8013446:	4618      	mov	r0, r3
 8013448:	370c      	adds	r7, #12
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr

08013452 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013452:	b480      	push	{r7}
 8013454:	b083      	sub	sp, #12
 8013456:	af00      	add	r7, sp, #0
 8013458:	6078      	str	r0, [r7, #4]
 801345a:	460b      	mov	r3, r1
 801345c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801345e:	887b      	ldrh	r3, [r7, #2]
 8013460:	f241 023c 	movw	r2, #4156	; 0x103c
 8013464:	fb02 f303 	mul.w	r3, r2, r3
 8013468:	3308      	adds	r3, #8
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	4413      	add	r3, r2
    }
 801346e:	4618      	mov	r0, r3
 8013470:	370c      	adds	r7, #12
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr

0801347a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801347a:	b480      	push	{r7}
 801347c:	b083      	sub	sp, #12
 801347e:	af00      	add	r7, sp, #0
 8013480:	6078      	str	r0, [r7, #4]
 8013482:	460b      	mov	r3, r1
 8013484:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013486:	887b      	ldrh	r3, [r7, #2]
 8013488:	f241 023c 	movw	r2, #4156	; 0x103c
 801348c:	fb02 f303 	mul.w	r3, r2, r3
 8013490:	3308      	adds	r3, #8
 8013492:	687a      	ldr	r2, [r7, #4]
 8013494:	4413      	add	r3, r2
    }
 8013496:	4618      	mov	r0, r3
 8013498:	370c      	adds	r7, #12
 801349a:	46bd      	mov	sp, r7
 801349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a0:	4770      	bx	lr

080134a2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80134a2:	b480      	push	{r7}
 80134a4:	b083      	sub	sp, #12
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80134aa:	2301      	movs	r3, #1
    }
 80134ac:	4618      	mov	r0, r3
 80134ae:	370c      	adds	r7, #12
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr

080134b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80134b8:	b480      	push	{r7}
 80134ba:	b083      	sub	sp, #12
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80134c0:	2310      	movs	r3, #16
    }
 80134c2:	4618      	mov	r0, r3
 80134c4:	370c      	adds	r7, #12
 80134c6:	46bd      	mov	sp, r7
 80134c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134cc:	4770      	bx	lr

080134ce <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80134ce:	b480      	push	{r7}
 80134d0:	b083      	sub	sp, #12
 80134d2:	af00      	add	r7, sp, #0
 80134d4:	6078      	str	r0, [r7, #4]
 80134d6:	460b      	mov	r3, r1
 80134d8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80134da:	887b      	ldrh	r3, [r7, #2]
 80134dc:	011b      	lsls	r3, r3, #4
 80134de:	3308      	adds	r3, #8
 80134e0:	687a      	ldr	r2, [r7, #4]
 80134e2:	4413      	add	r3, r2
    }
 80134e4:	4618      	mov	r0, r3
 80134e6:	370c      	adds	r7, #12
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr

080134f0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	460b      	mov	r3, r1
 80134fa:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80134fc:	887b      	ldrh	r3, [r7, #2]
 80134fe:	011b      	lsls	r3, r3, #4
 8013500:	3308      	adds	r3, #8
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	4413      	add	r3, r2
    }
 8013506:	4618      	mov	r0, r3
 8013508:	370c      	adds	r7, #12
 801350a:	46bd      	mov	sp, r7
 801350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013510:	4770      	bx	lr

08013512 <_GLOBAL__sub_I_touchgfx_init>:
 8013512:	b580      	push	{r7, lr}
 8013514:	af00      	add	r7, sp, #0
 8013516:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801351a:	2001      	movs	r0, #1
 801351c:	f7ff ff00 	bl	8013320 <_Z41__static_initialization_and_destruction_0ii>
 8013520:	bd80      	pop	{r7, pc}

08013522 <_GLOBAL__sub_D_touchgfx_init>:
 8013522:	b580      	push	{r7, lr}
 8013524:	af00      	add	r7, sp, #0
 8013526:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801352a:	2000      	movs	r0, #0
 801352c:	f7ff fef8 	bl	8013320 <_Z41__static_initialization_and_destruction_0ii>
 8013530:	bd80      	pop	{r7, pc}
	...

08013534 <__NVIC_EnableIRQ>:
{
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	4603      	mov	r3, r0
 801353c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013542:	2b00      	cmp	r3, #0
 8013544:	db0b      	blt.n	801355e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013546:	79fb      	ldrb	r3, [r7, #7]
 8013548:	f003 021f 	and.w	r2, r3, #31
 801354c:	4907      	ldr	r1, [pc, #28]	; (801356c <__NVIC_EnableIRQ+0x38>)
 801354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013552:	095b      	lsrs	r3, r3, #5
 8013554:	2001      	movs	r0, #1
 8013556:	fa00 f202 	lsl.w	r2, r0, r2
 801355a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801355e:	bf00      	nop
 8013560:	370c      	adds	r7, #12
 8013562:	46bd      	mov	sp, r7
 8013564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013568:	4770      	bx	lr
 801356a:	bf00      	nop
 801356c:	e000e100 	.word	0xe000e100

08013570 <__NVIC_DisableIRQ>:
{
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
 8013576:	4603      	mov	r3, r0
 8013578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801357e:	2b00      	cmp	r3, #0
 8013580:	db12      	blt.n	80135a8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013582:	79fb      	ldrb	r3, [r7, #7]
 8013584:	f003 021f 	and.w	r2, r3, #31
 8013588:	490a      	ldr	r1, [pc, #40]	; (80135b4 <__NVIC_DisableIRQ+0x44>)
 801358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801358e:	095b      	lsrs	r3, r3, #5
 8013590:	2001      	movs	r0, #1
 8013592:	fa00 f202 	lsl.w	r2, r0, r2
 8013596:	3320      	adds	r3, #32
 8013598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801359c:	f3bf 8f4f 	dsb	sy
}
 80135a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80135a2:	f3bf 8f6f 	isb	sy
}
 80135a6:	bf00      	nop
}
 80135a8:	bf00      	nop
 80135aa:	370c      	adds	r7, #12
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr
 80135b4:	e000e100 	.word	0xe000e100

080135b8 <__NVIC_SetPriority>:
{
 80135b8:	b480      	push	{r7}
 80135ba:	b083      	sub	sp, #12
 80135bc:	af00      	add	r7, sp, #0
 80135be:	4603      	mov	r3, r0
 80135c0:	6039      	str	r1, [r7, #0]
 80135c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80135c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	db0a      	blt.n	80135e2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	b2da      	uxtb	r2, r3
 80135d0:	490c      	ldr	r1, [pc, #48]	; (8013604 <__NVIC_SetPriority+0x4c>)
 80135d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135d6:	0112      	lsls	r2, r2, #4
 80135d8:	b2d2      	uxtb	r2, r2
 80135da:	440b      	add	r3, r1
 80135dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80135e0:	e00a      	b.n	80135f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	b2da      	uxtb	r2, r3
 80135e6:	4908      	ldr	r1, [pc, #32]	; (8013608 <__NVIC_SetPriority+0x50>)
 80135e8:	79fb      	ldrb	r3, [r7, #7]
 80135ea:	f003 030f 	and.w	r3, r3, #15
 80135ee:	3b04      	subs	r3, #4
 80135f0:	0112      	lsls	r2, r2, #4
 80135f2:	b2d2      	uxtb	r2, r2
 80135f4:	440b      	add	r3, r1
 80135f6:	761a      	strb	r2, [r3, #24]
}
 80135f8:	bf00      	nop
 80135fa:	370c      	adds	r7, #12
 80135fc:	46bd      	mov	sp, r7
 80135fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013602:	4770      	bx	lr
 8013604:	e000e100 	.word	0xe000e100
 8013608:	e000ed00 	.word	0xe000ed00

0801360c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 801360c:	b5b0      	push	{r4, r5, r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	4618      	mov	r0, r3
 8013618:	f000 fbbb 	bl	8013d92 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 801361c:	687d      	ldr	r5, [r7, #4]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	3364      	adds	r3, #100	; 0x64
 8013624:	681c      	ldr	r4, [r3, #0]
 8013626:	f004 f995 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 801362a:	4603      	mov	r3, r0
 801362c:	4619      	mov	r1, r3
 801362e:	4628      	mov	r0, r5
 8013630:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	3388      	adds	r3, #136	; 0x88
 801363a:	681c      	ldr	r4, [r3, #0]
 801363c:	2300      	movs	r3, #0
 801363e:	2200      	movs	r2, #0
 8013640:	4902      	ldr	r1, [pc, #8]	; (801364c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8013642:	47a0      	blx	r4
}
 8013644:	bf00      	nop
 8013646:	3708      	adds	r7, #8
 8013648:	46bd      	mov	sp, r7
 801364a:	bdb0      	pop	{r4, r5, r7, pc}
 801364c:	20025900 	.word	0x20025900

08013650 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013658:	2109      	movs	r1, #9
 801365a:	2076      	movs	r0, #118	; 0x76
 801365c:	f7ff ffac 	bl	80135b8 <__NVIC_SetPriority>
}
 8013660:	bf00      	nop
 8013662:	3708      	adds	r7, #8
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b082      	sub	sp, #8
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013670:	2076      	movs	r0, #118	; 0x76
 8013672:	f7ff ff5f 	bl	8013534 <__NVIC_EnableIRQ>
}
 8013676:	bf00      	nop
 8013678:	3708      	adds	r7, #8
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}

0801367e <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801367e:	b580      	push	{r7, lr}
 8013680:	b082      	sub	sp, #8
 8013682:	af00      	add	r7, sp, #0
 8013684:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013686:	2076      	movs	r0, #118	; 0x76
 8013688:	f7ff ff72 	bl	8013570 <__NVIC_DisableIRQ>
}
 801368c:	bf00      	nop
 801368e:	3708      	adds	r7, #8
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013694:	b480      	push	{r7}
 8013696:	b083      	sub	sp, #12
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
}
 801369c:	bf00      	nop
 801369e:	370c      	adds	r7, #12
 80136a0:	46bd      	mov	sp, r7
 80136a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a6:	4770      	bx	lr

080136a8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f000 fb54 	bl	8013d60 <_ZN8touchgfx3HAL10beginFrameEv>
 80136b8:	4603      	mov	r3, r0
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3708      	adds	r7, #8
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}

080136c2 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80136c2:	b580      	push	{r7, lr}
 80136c4:	b082      	sub	sp, #8
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	4618      	mov	r0, r3
 80136ce:	f000 fb53 	bl	8013d78 <_ZN8touchgfx3HAL8endFrameEv>
}
 80136d2:	bf00      	nop
 80136d4:	3708      	adds	r7, #8
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
	...

080136dc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80136dc:	b480      	push	{r7}
 80136de:	b083      	sub	sp, #12
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 80136e4:	4b03      	ldr	r3, [pc, #12]	; (80136f4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	370c      	adds	r7, #12
 80136ea:	46bd      	mov	sp, r7
 80136ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f0:	4770      	bx	lr
 80136f2:	bf00      	nop
 80136f4:	20025900 	.word	0x20025900

080136f8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80136f8:	b480      	push	{r7}
 80136fa:	b083      	sub	sp, #12
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8013702:	bf00      	nop
 8013704:	370c      	adds	r7, #12
 8013706:	46bd      	mov	sp, r7
 8013708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370c:	4770      	bx	lr

0801370e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801370e:	b580      	push	{r7, lr}
 8013710:	b082      	sub	sp, #8
 8013712:	af00      	add	r7, sp, #0
 8013714:	6078      	str	r0, [r7, #4]
 8013716:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6839      	ldr	r1, [r7, #0]
 801371c:	4618      	mov	r0, r3
 801371e:	f000 fae9 	bl	8013cf4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013722:	bf00      	nop
 8013724:	3708      	adds	r7, #8
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}

0801372a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801372a:	b580      	push	{r7, lr}
 801372c:	b084      	sub	sp, #16
 801372e:	af00      	add	r7, sp, #0
 8013730:	60f8      	str	r0, [r7, #12]
 8013732:	60b9      	str	r1, [r7, #8]
 8013734:	607a      	str	r2, [r7, #4]
 8013736:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8013738:	68f8      	ldr	r0, [r7, #12]
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	68b9      	ldr	r1, [r7, #8]
 8013740:	f000 fc41 	bl	8013fc6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013744:	4603      	mov	r3, r0
}
 8013746:	4618      	mov	r0, r3
 8013748:	3710      	adds	r7, #16
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}

0801374e <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801374e:	8880      	ldrh	r0, [r0, #4]
 8013750:	4770      	bx	lr

08013752 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013752:	b570      	push	{r4, r5, r6, lr}
 8013754:	6803      	ldr	r3, [r0, #0]
 8013756:	4605      	mov	r5, r0
 8013758:	460c      	mov	r4, r1
 801375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801375c:	2100      	movs	r1, #0
 801375e:	4798      	blx	r3
 8013760:	682b      	ldr	r3, [r5, #0]
 8013762:	4606      	mov	r6, r0
 8013764:	6a1b      	ldr	r3, [r3, #32]
 8013766:	4628      	mov	r0, r5
 8013768:	4798      	blx	r3
 801376a:	1ba4      	subs	r4, r4, r6
 801376c:	b2a4      	uxth	r4, r4
 801376e:	fbb4 f0f0 	udiv	r0, r4, r0
 8013772:	bd70      	pop	{r4, r5, r6, pc}

08013774 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013774:	2300      	movs	r3, #0
 8013776:	8083      	strh	r3, [r0, #4]
 8013778:	4770      	bx	lr

0801377a <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801377a:	b510      	push	{r4, lr}
 801377c:	4604      	mov	r4, r0
 801377e:	6803      	ldr	r3, [r0, #0]
 8013780:	8881      	ldrh	r1, [r0, #4]
 8013782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013784:	4798      	blx	r3
 8013786:	88a3      	ldrh	r3, [r4, #4]
 8013788:	3301      	adds	r3, #1
 801378a:	80a3      	strh	r3, [r4, #4]
 801378c:	bd10      	pop	{r4, pc}

0801378e <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801378e:	6803      	ldr	r3, [r0, #0]
 8013790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013792:	4718      	bx	r3

08013794 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013794:	4770      	bx	lr
	...

08013798 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013798:	4a02      	ldr	r2, [pc, #8]	; (80137a4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801379a:	6002      	str	r2, [r0, #0]
 801379c:	2200      	movs	r2, #0
 801379e:	8082      	strh	r2, [r0, #4]
 80137a0:	4770      	bx	lr
 80137a2:	bf00      	nop
 80137a4:	08029004 	.word	0x08029004

080137a8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80137a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80137aa:	4770      	bx	lr

080137ac <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80137ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80137ae:	2000      	movs	r0, #0
 80137b0:	b12b      	cbz	r3, 80137be <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80137b2:	b920      	cbnz	r0, 80137be <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80137b4:	1a5a      	subs	r2, r3, r1
 80137b6:	4250      	negs	r0, r2
 80137b8:	4150      	adcs	r0, r2
 80137ba:	699b      	ldr	r3, [r3, #24]
 80137bc:	e7f8      	b.n	80137b0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80137be:	4770      	bx	lr

080137c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80137c0:	2300      	movs	r3, #0
 80137c2:	6148      	str	r0, [r1, #20]
 80137c4:	618b      	str	r3, [r1, #24]
 80137c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80137c8:	b913      	cbnz	r3, 80137d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80137ca:	6281      	str	r1, [r0, #40]	; 0x28
 80137cc:	4770      	bx	lr
 80137ce:	4613      	mov	r3, r2
 80137d0:	699a      	ldr	r2, [r3, #24]
 80137d2:	2a00      	cmp	r2, #0
 80137d4:	d1fb      	bne.n	80137ce <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80137d6:	6199      	str	r1, [r3, #24]
 80137d8:	4770      	bx	lr

080137da <_ZN8touchgfx9Container9removeAllEv>:
 80137da:	2200      	movs	r2, #0
 80137dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80137de:	b123      	cbz	r3, 80137ea <_ZN8touchgfx9Container9removeAllEv+0x10>
 80137e0:	6999      	ldr	r1, [r3, #24]
 80137e2:	6281      	str	r1, [r0, #40]	; 0x28
 80137e4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80137e8:	e7f8      	b.n	80137dc <_ZN8touchgfx9Container9removeAllEv+0x2>
 80137ea:	4770      	bx	lr

080137ec <_ZN8touchgfx9Container6unlinkEv>:
 80137ec:	2300      	movs	r3, #0
 80137ee:	6283      	str	r3, [r0, #40]	; 0x28
 80137f0:	4770      	bx	lr

080137f2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80137f2:	2200      	movs	r2, #0
 80137f4:	8002      	strh	r2, [r0, #0]
 80137f6:	8042      	strh	r2, [r0, #2]
 80137f8:	8082      	strh	r2, [r0, #4]
 80137fa:	80c2      	strh	r2, [r0, #6]
 80137fc:	4770      	bx	lr

080137fe <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80137fe:	b570      	push	{r4, r5, r6, lr}
 8013800:	460d      	mov	r5, r1
 8013802:	4616      	mov	r6, r2
 8013804:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013806:	b13c      	cbz	r4, 8013818 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013808:	6823      	ldr	r3, [r4, #0]
 801380a:	4620      	mov	r0, r4
 801380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801380e:	4632      	mov	r2, r6
 8013810:	4629      	mov	r1, r5
 8013812:	4798      	blx	r3
 8013814:	69a4      	ldr	r4, [r4, #24]
 8013816:	e7f6      	b.n	8013806 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013818:	bd70      	pop	{r4, r5, r6, pc}

0801381a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801381a:	b538      	push	{r3, r4, r5, lr}
 801381c:	460d      	mov	r5, r1
 801381e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013820:	b134      	cbz	r4, 8013830 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013822:	682b      	ldr	r3, [r5, #0]
 8013824:	4621      	mov	r1, r4
 8013826:	689b      	ldr	r3, [r3, #8]
 8013828:	4628      	mov	r0, r5
 801382a:	4798      	blx	r3
 801382c:	69a4      	ldr	r4, [r4, #24]
 801382e:	e7f7      	b.n	8013820 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013830:	bd38      	pop	{r3, r4, r5, pc}

08013832 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8013832:	b510      	push	{r4, lr}
 8013834:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013836:	b12c      	cbz	r4, 8013844 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8013838:	6823      	ldr	r3, [r4, #0]
 801383a:	4620      	mov	r0, r4
 801383c:	699b      	ldr	r3, [r3, #24]
 801383e:	4798      	blx	r3
 8013840:	69a4      	ldr	r4, [r4, #24]
 8013842:	e7f8      	b.n	8013836 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8013844:	bd10      	pop	{r4, pc}

08013846 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013846:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013848:	b19b      	cbz	r3, 8013872 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801384a:	428b      	cmp	r3, r1
 801384c:	d109      	bne.n	8013862 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801384e:	2100      	movs	r1, #0
 8013850:	699a      	ldr	r2, [r3, #24]
 8013852:	6159      	str	r1, [r3, #20]
 8013854:	6282      	str	r2, [r0, #40]	; 0x28
 8013856:	b902      	cbnz	r2, 801385a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013858:	4770      	bx	lr
 801385a:	6199      	str	r1, [r3, #24]
 801385c:	4770      	bx	lr
 801385e:	4613      	mov	r3, r2
 8013860:	b13a      	cbz	r2, 8013872 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013862:	699a      	ldr	r2, [r3, #24]
 8013864:	428a      	cmp	r2, r1
 8013866:	d1fa      	bne.n	801385e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013868:	698a      	ldr	r2, [r1, #24]
 801386a:	619a      	str	r2, [r3, #24]
 801386c:	2300      	movs	r3, #0
 801386e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013872:	4770      	bx	lr

08013874 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013874:	b410      	push	{r4}
 8013876:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013878:	4604      	mov	r4, r0
 801387a:	b92b      	cbnz	r3, 8013888 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801387c:	6803      	ldr	r3, [r0, #0]
 801387e:	4611      	mov	r1, r2
 8013880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013886:	4718      	bx	r3
 8013888:	b941      	cbnz	r1, 801389c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801388a:	6193      	str	r3, [r2, #24]
 801388c:	6282      	str	r2, [r0, #40]	; 0x28
 801388e:	6154      	str	r4, [r2, #20]
 8013890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013894:	4770      	bx	lr
 8013896:	4603      	mov	r3, r0
 8013898:	2800      	cmp	r0, #0
 801389a:	d0f9      	beq.n	8013890 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801389c:	4299      	cmp	r1, r3
 801389e:	6998      	ldr	r0, [r3, #24]
 80138a0:	d1f9      	bne.n	8013896 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80138a2:	6190      	str	r0, [r2, #24]
 80138a4:	618a      	str	r2, [r1, #24]
 80138a6:	e7f2      	b.n	801388e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080138a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80138a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138ac:	461f      	mov	r7, r3
 80138ae:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80138b2:	460d      	mov	r5, r1
 80138b4:	4616      	mov	r6, r2
 80138b6:	b103      	cbz	r3, 80138ba <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80138b8:	6038      	str	r0, [r7, #0]
 80138ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80138bc:	b314      	cbz	r4, 8013904 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80138be:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80138c2:	b1eb      	cbz	r3, 8013900 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80138c4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80138c8:	428d      	cmp	r5, r1
 80138ca:	db19      	blt.n	8013900 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80138cc:	8923      	ldrh	r3, [r4, #8]
 80138ce:	b289      	uxth	r1, r1
 80138d0:	440b      	add	r3, r1
 80138d2:	b21b      	sxth	r3, r3
 80138d4:	429d      	cmp	r5, r3
 80138d6:	da13      	bge.n	8013900 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80138d8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80138dc:	4296      	cmp	r6, r2
 80138de:	db0f      	blt.n	8013900 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80138e0:	8963      	ldrh	r3, [r4, #10]
 80138e2:	b292      	uxth	r2, r2
 80138e4:	4413      	add	r3, r2
 80138e6:	b21b      	sxth	r3, r3
 80138e8:	429e      	cmp	r6, r3
 80138ea:	da09      	bge.n	8013900 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80138ec:	6823      	ldr	r3, [r4, #0]
 80138ee:	1ab2      	subs	r2, r6, r2
 80138f0:	1a69      	subs	r1, r5, r1
 80138f2:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80138f6:	b212      	sxth	r2, r2
 80138f8:	463b      	mov	r3, r7
 80138fa:	b209      	sxth	r1, r1
 80138fc:	4620      	mov	r0, r4
 80138fe:	47c0      	blx	r8
 8013900:	69a4      	ldr	r4, [r4, #24]
 8013902:	e7db      	b.n	80138bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013908 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801390c:	4c6c      	ldr	r4, [pc, #432]	; (8013ac0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 801390e:	b0a1      	sub	sp, #132	; 0x84
 8013910:	6824      	ldr	r4, [r4, #0]
 8013912:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013914:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8013918:	2400      	movs	r4, #0
 801391a:	802c      	strh	r4, [r5, #0]
 801391c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801391e:	4606      	mov	r6, r0
 8013920:	802c      	strh	r4, [r5, #0]
 8013922:	601c      	str	r4, [r3, #0]
 8013924:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013928:	9303      	str	r3, [sp, #12]
 801392a:	f7ff ffbd 	bl	80138a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801392e:	f1b9 0f03 	cmp.w	r9, #3
 8013932:	f340 80bf 	ble.w	8013ab4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8013936:	4631      	mov	r1, r6
 8013938:	a80c      	add	r0, sp, #48	; 0x30
 801393a:	f005 f865 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801393e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013942:	9306      	str	r3, [sp, #24]
 8013944:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013948:	9307      	str	r3, [sp, #28]
 801394a:	9b03      	ldr	r3, [sp, #12]
 801394c:	f8d3 a000 	ldr.w	sl, [r3]
 8013950:	f1ba 0f00 	cmp.w	sl, #0
 8013954:	f000 80b1 	beq.w	8013aba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8013958:	4651      	mov	r1, sl
 801395a:	a810      	add	r0, sp, #64	; 0x40
 801395c:	f005 f854 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013960:	2002      	movs	r0, #2
 8013962:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8013966:	9b01      	ldr	r3, [sp, #4]
 8013968:	fb91 f1f0 	sdiv	r1, r1, r0
 801396c:	9a06      	ldr	r2, [sp, #24]
 801396e:	189d      	adds	r5, r3, r2
 8013970:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8013974:	9a07      	ldr	r2, [sp, #28]
 8013976:	4419      	add	r1, r3
 8013978:	9b02      	ldr	r3, [sp, #8]
 801397a:	1a6d      	subs	r5, r5, r1
 801397c:	4413      	add	r3, r2
 801397e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8013982:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8013986:	fb92 f2f0 	sdiv	r2, r2, r0
 801398a:	440a      	add	r2, r1
 801398c:	1a9b      	subs	r3, r3, r2
 801398e:	435b      	muls	r3, r3
 8013990:	fb05 3505 	mla	r5, r5, r5, r3
 8013994:	4f4b      	ldr	r7, [pc, #300]	; (8013ac4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013996:	ac10      	add	r4, sp, #64	; 0x40
 8013998:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801399a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801399c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801399e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80139a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139a4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80139a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80139ac:	2303      	movs	r3, #3
 80139ae:	f1b9 0f0c 	cmp.w	r9, #12
 80139b2:	bfda      	itte	le
 80139b4:	f109 32ff 	addle.w	r2, r9, #4294967295
 80139b8:	fb92 f8f3 	sdivle	r8, r2, r3
 80139bc:	4698      	movgt	r8, r3
 80139be:	2400      	movs	r4, #0
 80139c0:	f8cd 9000 	str.w	r9, [sp]
 80139c4:	1c63      	adds	r3, r4, #1
 80139c6:	9308      	str	r3, [sp, #32]
 80139c8:	9b00      	ldr	r3, [sp, #0]
 80139ca:	f04f 0b00 	mov.w	fp, #0
 80139ce:	fb93 f3f8 	sdiv	r3, r3, r8
 80139d2:	f004 0401 	and.w	r4, r4, #1
 80139d6:	aa10      	add	r2, sp, #64	; 0x40
 80139d8:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80139dc:	b29b      	uxth	r3, r3
 80139de:	3404      	adds	r4, #4
 80139e0:	9304      	str	r3, [sp, #16]
 80139e2:	9a04      	ldr	r2, [sp, #16]
 80139e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80139e8:	fb13 f302 	smulbb	r3, r3, r2
 80139ec:	9a01      	ldr	r2, [sp, #4]
 80139ee:	b29b      	uxth	r3, r3
 80139f0:	1899      	adds	r1, r3, r2
 80139f2:	9305      	str	r3, [sp, #20]
 80139f4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80139f8:	b209      	sxth	r1, r1
 80139fa:	4299      	cmp	r1, r3
 80139fc:	db4d      	blt.n	8013a9a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80139fe:	8932      	ldrh	r2, [r6, #8]
 8013a00:	4413      	add	r3, r2
 8013a02:	b21b      	sxth	r3, r3
 8013a04:	4299      	cmp	r1, r3
 8013a06:	da48      	bge.n	8013a9a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013a08:	9b04      	ldr	r3, [sp, #16]
 8013a0a:	6827      	ldr	r7, [r4, #0]
 8013a0c:	fb17 f703 	smulbb	r7, r7, r3
 8013a10:	9b02      	ldr	r3, [sp, #8]
 8013a12:	b2bf      	uxth	r7, r7
 8013a14:	18fa      	adds	r2, r7, r3
 8013a16:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013a1a:	b212      	sxth	r2, r2
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	db3c      	blt.n	8013a9a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013a20:	8970      	ldrh	r0, [r6, #10]
 8013a22:	4403      	add	r3, r0
 8013a24:	b21b      	sxth	r3, r3
 8013a26:	429a      	cmp	r2, r3
 8013a28:	da37      	bge.n	8013a9a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	4630      	mov	r0, r6
 8013a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a30:	ab0b      	add	r3, sp, #44	; 0x2c
 8013a32:	f7ff ff39 	bl	80138a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013a36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a38:	b37a      	cbz	r2, 8013a9a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013a3a:	4552      	cmp	r2, sl
 8013a3c:	d02d      	beq.n	8013a9a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013a3e:	4611      	mov	r1, r2
 8013a40:	a80e      	add	r0, sp, #56	; 0x38
 8013a42:	9209      	str	r2, [sp, #36]	; 0x24
 8013a44:	f004 ffe0 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013a48:	f04f 0e02 	mov.w	lr, #2
 8013a4c:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8013a50:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8013a54:	fb91 f1fe 	sdiv	r1, r1, lr
 8013a58:	fb9c fcfe 	sdiv	ip, ip, lr
 8013a5c:	9a06      	ldr	r2, [sp, #24]
 8013a5e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8013a62:	9b01      	ldr	r3, [sp, #4]
 8013a64:	4401      	add	r1, r0
 8013a66:	4413      	add	r3, r2
 8013a68:	1a58      	subs	r0, r3, r1
 8013a6a:	9a07      	ldr	r2, [sp, #28]
 8013a6c:	9b02      	ldr	r3, [sp, #8]
 8013a6e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8013a72:	4413      	add	r3, r2
 8013a74:	448c      	add	ip, r1
 8013a76:	eba3 030c 	sub.w	r3, r3, ip
 8013a7a:	435b      	muls	r3, r3
 8013a7c:	fb00 3300 	mla	r3, r0, r0, r3
 8013a80:	42ab      	cmp	r3, r5
 8013a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a84:	d208      	bcs.n	8013a98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8013a86:	461d      	mov	r5, r3
 8013a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a8a:	9803      	ldr	r0, [sp, #12]
 8013a8c:	6001      	str	r1, [r0, #0]
 8013a8e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8013a90:	9805      	ldr	r0, [sp, #20]
 8013a92:	8008      	strh	r0, [r1, #0]
 8013a94:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013a96:	800f      	strh	r7, [r1, #0]
 8013a98:	4692      	mov	sl, r2
 8013a9a:	f10b 0b01 	add.w	fp, fp, #1
 8013a9e:	f1bb 0f04 	cmp.w	fp, #4
 8013aa2:	f104 0408 	add.w	r4, r4, #8
 8013aa6:	d19c      	bne.n	80139e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8013aa8:	9b00      	ldr	r3, [sp, #0]
 8013aaa:	9c08      	ldr	r4, [sp, #32]
 8013aac:	444b      	add	r3, r9
 8013aae:	4544      	cmp	r4, r8
 8013ab0:	9300      	str	r3, [sp, #0]
 8013ab2:	d187      	bne.n	80139c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8013ab4:	b021      	add	sp, #132	; 0x84
 8013ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aba:	f04f 35ff 	mov.w	r5, #4294967295
 8013abe:	e769      	b.n	8013994 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8013ac0:	2004f6c8 	.word	0x2004f6c8
 8013ac4:	080285a4 	.word	0x080285a4

08013ac8 <_ZN8touchgfx4RectaNERKS0_>:
 8013ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013acc:	f9b1 7000 	ldrsh.w	r7, [r1]
 8013ad0:	888c      	ldrh	r4, [r1, #4]
 8013ad2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013ad6:	443c      	add	r4, r7
 8013ad8:	b2a4      	uxth	r4, r4
 8013ada:	fa0f f884 	sxth.w	r8, r4
 8013ade:	45c1      	cmp	r9, r8
 8013ae0:	da2f      	bge.n	8013b42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013ae2:	8882      	ldrh	r2, [r0, #4]
 8013ae4:	444a      	add	r2, r9
 8013ae6:	b292      	uxth	r2, r2
 8013ae8:	fa0f fe82 	sxth.w	lr, r2
 8013aec:	4577      	cmp	r7, lr
 8013aee:	da28      	bge.n	8013b42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013af0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013af4:	88cb      	ldrh	r3, [r1, #6]
 8013af6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013afa:	442b      	add	r3, r5
 8013afc:	b21b      	sxth	r3, r3
 8013afe:	429e      	cmp	r6, r3
 8013b00:	da1f      	bge.n	8013b42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013b02:	88c3      	ldrh	r3, [r0, #6]
 8013b04:	4433      	add	r3, r6
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	fa0f fc83 	sxth.w	ip, r3
 8013b0c:	4565      	cmp	r5, ip
 8013b0e:	da18      	bge.n	8013b42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013b10:	454f      	cmp	r7, r9
 8013b12:	bfb8      	it	lt
 8013b14:	464f      	movlt	r7, r9
 8013b16:	42b5      	cmp	r5, r6
 8013b18:	bfb8      	it	lt
 8013b1a:	4635      	movlt	r5, r6
 8013b1c:	45f0      	cmp	r8, lr
 8013b1e:	bfd8      	it	le
 8013b20:	4622      	movle	r2, r4
 8013b22:	1bd2      	subs	r2, r2, r7
 8013b24:	8082      	strh	r2, [r0, #4]
 8013b26:	884a      	ldrh	r2, [r1, #2]
 8013b28:	88c9      	ldrh	r1, [r1, #6]
 8013b2a:	8007      	strh	r7, [r0, #0]
 8013b2c:	440a      	add	r2, r1
 8013b2e:	b292      	uxth	r2, r2
 8013b30:	b211      	sxth	r1, r2
 8013b32:	458c      	cmp	ip, r1
 8013b34:	bfa8      	it	ge
 8013b36:	4613      	movge	r3, r2
 8013b38:	1b5b      	subs	r3, r3, r5
 8013b3a:	80c3      	strh	r3, [r0, #6]
 8013b3c:	8045      	strh	r5, [r0, #2]
 8013b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b42:	2300      	movs	r3, #0
 8013b44:	8003      	strh	r3, [r0, #0]
 8013b46:	8043      	strh	r3, [r0, #2]
 8013b48:	8083      	strh	r3, [r0, #4]
 8013b4a:	80c3      	strh	r3, [r0, #6]
 8013b4c:	e7f7      	b.n	8013b3e <_ZN8touchgfx4RectaNERKS0_+0x76>

08013b4e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8013b4e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	dd06      	ble.n	8013b64 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8013b56:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	bfcc      	ite	gt
 8013b5e:	2000      	movgt	r0, #0
 8013b60:	2001      	movle	r0, #1
 8013b62:	4770      	bx	lr
 8013b64:	2001      	movs	r0, #1
 8013b66:	4770      	bx	lr

08013b68 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8013b68:	2300      	movs	r3, #0
 8013b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b6e:	4604      	mov	r4, r0
 8013b70:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013b72:	8003      	strh	r3, [r0, #0]
 8013b74:	8043      	strh	r3, [r0, #2]
 8013b76:	8083      	strh	r3, [r0, #4]
 8013b78:	80c3      	strh	r3, [r0, #6]
 8013b7a:	2d00      	cmp	r5, #0
 8013b7c:	d040      	beq.n	8013c00 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8013b7e:	1d28      	adds	r0, r5, #4
 8013b80:	f7ff ffe5 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013b84:	b988      	cbnz	r0, 8013baa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013b86:	4620      	mov	r0, r4
 8013b88:	f7ff ffe1 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013b8c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013b90:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013b94:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013b98:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8013b9c:	b138      	cbz	r0, 8013bae <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8013b9e:	8022      	strh	r2, [r4, #0]
 8013ba0:	8063      	strh	r3, [r4, #2]
 8013ba2:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013ba6:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013baa:	69ad      	ldr	r5, [r5, #24]
 8013bac:	e7e5      	b.n	8013b7a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8013bae:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013bb2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013bb6:	4290      	cmp	r0, r2
 8013bb8:	4607      	mov	r7, r0
 8013bba:	bfa8      	it	ge
 8013bbc:	4617      	movge	r7, r2
 8013bbe:	4299      	cmp	r1, r3
 8013bc0:	460e      	mov	r6, r1
 8013bc2:	bfa8      	it	ge
 8013bc4:	461e      	movge	r6, r3
 8013bc6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8013bca:	4472      	add	r2, lr
 8013bcc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8013bd0:	4440      	add	r0, r8
 8013bd2:	4471      	add	r1, lr
 8013bd4:	4463      	add	r3, ip
 8013bd6:	b200      	sxth	r0, r0
 8013bd8:	b212      	sxth	r2, r2
 8013bda:	b209      	sxth	r1, r1
 8013bdc:	b21b      	sxth	r3, r3
 8013bde:	4290      	cmp	r0, r2
 8013be0:	bfac      	ite	ge
 8013be2:	ebc7 0200 	rsbge	r2, r7, r0
 8013be6:	ebc7 0202 	rsblt	r2, r7, r2
 8013bea:	4299      	cmp	r1, r3
 8013bec:	bfac      	ite	ge
 8013bee:	ebc6 0301 	rsbge	r3, r6, r1
 8013bf2:	ebc6 0303 	rsblt	r3, r6, r3
 8013bf6:	8027      	strh	r7, [r4, #0]
 8013bf8:	8066      	strh	r6, [r4, #2]
 8013bfa:	80a2      	strh	r2, [r4, #4]
 8013bfc:	80e3      	strh	r3, [r4, #6]
 8013bfe:	e7d4      	b.n	8013baa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013c00:	4620      	mov	r0, r4
 8013c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c06 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8013c06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013c0a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013c0e:	b383      	cbz	r3, 8013c72 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013c10:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013c12:	b374      	cbz	r4, 8013c72 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013c14:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013c18:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8013c1c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013c20:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013c24:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013c28:	b303      	cbz	r3, 8013c6c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013c2a:	4668      	mov	r0, sp
 8013c2c:	1d21      	adds	r1, r4, #4
 8013c2e:	f8ad 5000 	strh.w	r5, [sp]
 8013c32:	f8ad 6002 	strh.w	r6, [sp, #2]
 8013c36:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013c3a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8013c3e:	f7ff ff43 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 8013c42:	4668      	mov	r0, sp
 8013c44:	f7ff ff83 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013c48:	b980      	cbnz	r0, 8013c6c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013c4a:	f8bd 3000 	ldrh.w	r3, [sp]
 8013c4e:	88a2      	ldrh	r2, [r4, #4]
 8013c50:	4669      	mov	r1, sp
 8013c52:	1a9b      	subs	r3, r3, r2
 8013c54:	f8ad 3000 	strh.w	r3, [sp]
 8013c58:	88e2      	ldrh	r2, [r4, #6]
 8013c5a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013c5e:	4620      	mov	r0, r4
 8013c60:	1a9b      	subs	r3, r3, r2
 8013c62:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013c66:	6823      	ldr	r3, [r4, #0]
 8013c68:	689b      	ldr	r3, [r3, #8]
 8013c6a:	4798      	blx	r3
 8013c6c:	69a4      	ldr	r4, [r4, #24]
 8013c6e:	2c00      	cmp	r4, #0
 8013c70:	d1d8      	bne.n	8013c24 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8013c72:	b002      	add	sp, #8
 8013c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c78 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013c78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c7a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013c7e:	460d      	mov	r5, r1
 8013c80:	4616      	mov	r6, r2
 8013c82:	b323      	cbz	r3, 8013cce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013c84:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013c86:	b314      	cbz	r4, 8013cce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013c88:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013c8c:	b1eb      	cbz	r3, 8013cca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013c8e:	466b      	mov	r3, sp
 8013c90:	6828      	ldr	r0, [r5, #0]
 8013c92:	6869      	ldr	r1, [r5, #4]
 8013c94:	c303      	stmia	r3!, {r0, r1}
 8013c96:	4668      	mov	r0, sp
 8013c98:	1d21      	adds	r1, r4, #4
 8013c9a:	f7ff ff15 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 8013c9e:	4668      	mov	r0, sp
 8013ca0:	f7ff ff55 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ca4:	b988      	cbnz	r0, 8013cca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013ca6:	f8bd 3000 	ldrh.w	r3, [sp]
 8013caa:	88a2      	ldrh	r2, [r4, #4]
 8013cac:	4669      	mov	r1, sp
 8013cae:	1a9b      	subs	r3, r3, r2
 8013cb0:	f8ad 3000 	strh.w	r3, [sp]
 8013cb4:	88e2      	ldrh	r2, [r4, #6]
 8013cb6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013cba:	4620      	mov	r0, r4
 8013cbc:	1a9b      	subs	r3, r3, r2
 8013cbe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013cc2:	6823      	ldr	r3, [r4, #0]
 8013cc4:	4632      	mov	r2, r6
 8013cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013cc8:	4798      	blx	r3
 8013cca:	69a4      	ldr	r4, [r4, #24]
 8013ccc:	e7db      	b.n	8013c86 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013cce:	b002      	add	sp, #8
 8013cd0:	bd70      	pop	{r4, r5, r6, pc}

08013cd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8013cd2:	b513      	push	{r0, r1, r4, lr}
 8013cd4:	6803      	ldr	r3, [r0, #0]
 8013cd6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8013cda:	2300      	movs	r3, #0
 8013cdc:	e9cd 3300 	strd	r3, r3, [sp]
 8013ce0:	466b      	mov	r3, sp
 8013ce2:	47a0      	blx	r4
 8013ce4:	b002      	add	sp, #8
 8013ce6:	bd10      	pop	{r4, pc}

08013ce8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8013ce8:	2301      	movs	r3, #1
 8013cea:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013cee:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013cf2:	4770      	bx	lr

08013cf4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013cfa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013cfe:	4770      	bx	lr

08013d00 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8013d00:	2201      	movs	r2, #1
 8013d02:	6843      	ldr	r3, [r0, #4]
 8013d04:	725a      	strb	r2, [r3, #9]
 8013d06:	6840      	ldr	r0, [r0, #4]
 8013d08:	6803      	ldr	r3, [r0, #0]
 8013d0a:	691b      	ldr	r3, [r3, #16]
 8013d0c:	4718      	bx	r3

08013d0e <_ZN8touchgfx3HAL8flushDMAEv>:
 8013d0e:	6840      	ldr	r0, [r0, #4]
 8013d10:	6803      	ldr	r3, [r0, #0]
 8013d12:	689b      	ldr	r3, [r3, #8]
 8013d14:	4718      	bx	r3

08013d16 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8013d16:	b530      	push	{r4, r5, lr}
 8013d18:	b08b      	sub	sp, #44	; 0x2c
 8013d1a:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8013d1e:	6804      	ldr	r4, [r0, #0]
 8013d20:	9509      	str	r5, [sp, #36]	; 0x24
 8013d22:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8013d26:	9508      	str	r5, [sp, #32]
 8013d28:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8013d2c:	9507      	str	r5, [sp, #28]
 8013d2e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8013d32:	9506      	str	r5, [sp, #24]
 8013d34:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8013d38:	9505      	str	r5, [sp, #20]
 8013d3a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8013d3e:	9504      	str	r5, [sp, #16]
 8013d40:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8013d44:	9503      	str	r5, [sp, #12]
 8013d46:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013d4a:	9502      	str	r5, [sp, #8]
 8013d4c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013d50:	e9cd 3500 	strd	r3, r5, [sp]
 8013d54:	4613      	mov	r3, r2
 8013d56:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8013d58:	2200      	movs	r2, #0
 8013d5a:	47a0      	blx	r4
 8013d5c:	b00b      	add	sp, #44	; 0x2c
 8013d5e:	bd30      	pop	{r4, r5, pc}

08013d60 <_ZN8touchgfx3HAL10beginFrameEv>:
 8013d60:	4b04      	ldr	r3, [pc, #16]	; (8013d74 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8013d62:	781b      	ldrb	r3, [r3, #0]
 8013d64:	b123      	cbz	r3, 8013d70 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013d66:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8013d6a:	f080 0001 	eor.w	r0, r0, #1
 8013d6e:	4770      	bx	lr
 8013d70:	2001      	movs	r0, #1
 8013d72:	4770      	bx	lr
 8013d74:	2004f6c6 	.word	0x2004f6c6

08013d78 <_ZN8touchgfx3HAL8endFrameEv>:
 8013d78:	b510      	push	{r4, lr}
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	6840      	ldr	r0, [r0, #4]
 8013d7e:	6803      	ldr	r3, [r0, #0]
 8013d80:	689b      	ldr	r3, [r3, #8]
 8013d82:	4798      	blx	r3
 8013d84:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8013d88:	b113      	cbz	r3, 8013d90 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013d90:	bd10      	pop	{r4, pc}

08013d92 <_ZN8touchgfx3HAL10initializeEv>:
 8013d92:	b510      	push	{r4, lr}
 8013d94:	4604      	mov	r4, r0
 8013d96:	f7fe f927 	bl	8011fe8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8013d9a:	6860      	ldr	r0, [r4, #4]
 8013d9c:	6803      	ldr	r3, [r0, #0]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	4798      	blx	r3
 8013da2:	68e0      	ldr	r0, [r4, #12]
 8013da4:	6803      	ldr	r3, [r0, #0]
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	4798      	blx	r3
 8013daa:	6823      	ldr	r3, [r4, #0]
 8013dac:	4620      	mov	r0, r4
 8013dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013db4:	4718      	bx	r3

08013db6 <_ZN8touchgfx3HAL9taskEntryEv>:
 8013db6:	4604      	mov	r4, r0
 8013db8:	b508      	push	{r3, lr}
 8013dba:	6803      	ldr	r3, [r0, #0]
 8013dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013dc0:	4798      	blx	r3
 8013dc2:	6823      	ldr	r3, [r4, #0]
 8013dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	4798      	blx	r3
 8013dca:	f7fe fa37 	bl	801223c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013dce:	6823      	ldr	r3, [r4, #0]
 8013dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dd2:	e7f8      	b.n	8013dc6 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08013dd4 <_ZN8touchgfx3HAL4tickEv>:
 8013dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013dd6:	6803      	ldr	r3, [r0, #0]
 8013dd8:	4604      	mov	r4, r0
 8013dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013dde:	4798      	blx	r3
 8013de0:	4d59      	ldr	r5, [pc, #356]	; (8013f48 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8013de2:	2800      	cmp	r0, #0
 8013de4:	f000 8095 	beq.w	8013f12 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8013de8:	2600      	movs	r6, #0
 8013dea:	2001      	movs	r0, #1
 8013dec:	f7fd fd94 	bl	8011918 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013df0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8013df4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8013df8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013dfc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8013e00:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8013e04:	b133      	cbz	r3, 8013e14 <_ZN8touchgfx3HAL4tickEv+0x40>
 8013e06:	6823      	ldr	r3, [r4, #0]
 8013e08:	4620      	mov	r0, r4
 8013e0a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013e0e:	4798      	blx	r3
 8013e10:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8013e14:	2601      	movs	r6, #1
 8013e16:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013e1a:	6862      	ldr	r2, [r4, #4]
 8013e1c:	f083 0301 	eor.w	r3, r3, #1
 8013e20:	7253      	strb	r3, [r2, #9]
 8013e22:	702e      	strb	r6, [r5, #0]
 8013e24:	f003 fd96 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 8013e28:	6803      	ldr	r3, [r0, #0]
 8013e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e2c:	4798      	blx	r3
 8013e2e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013e32:	b90b      	cbnz	r3, 8013e38 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013e34:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8013e38:	f003 fd8c 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 8013e3c:	6803      	ldr	r3, [r0, #0]
 8013e3e:	695b      	ldr	r3, [r3, #20]
 8013e40:	4798      	blx	r3
 8013e42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e44:	6803      	ldr	r3, [r0, #0]
 8013e46:	691b      	ldr	r3, [r3, #16]
 8013e48:	4798      	blx	r3
 8013e4a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013e4e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8013e52:	3b01      	subs	r3, #1
 8013e54:	b2db      	uxtb	r3, r3
 8013e56:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013e5a:	b10a      	cbz	r2, 8013e60 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d1eb      	bne.n	8013e38 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013e60:	4a3a      	ldr	r2, [pc, #232]	; (8013f4c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8013e62:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8013e66:	7813      	ldrb	r3, [r2, #0]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	b25b      	sxtb	r3, r3
 8013e6c:	4299      	cmp	r1, r3
 8013e6e:	7013      	strb	r3, [r2, #0]
 8013e70:	dc10      	bgt.n	8013e94 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013e72:	2300      	movs	r3, #0
 8013e74:	68e0      	ldr	r0, [r4, #12]
 8013e76:	7013      	strb	r3, [r2, #0]
 8013e78:	6803      	ldr	r3, [r0, #0]
 8013e7a:	aa03      	add	r2, sp, #12
 8013e7c:	68db      	ldr	r3, [r3, #12]
 8013e7e:	a902      	add	r1, sp, #8
 8013e80:	4798      	blx	r3
 8013e82:	6823      	ldr	r3, [r4, #0]
 8013e84:	2800      	cmp	r0, #0
 8013e86:	d050      	beq.n	8013f2a <_ZN8touchgfx3HAL4tickEv+0x156>
 8013e88:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013e8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013e90:	4620      	mov	r0, r4
 8013e92:	4798      	blx	r3
 8013e94:	2300      	movs	r3, #0
 8013e96:	6960      	ldr	r0, [r4, #20]
 8013e98:	f88d 3007 	strb.w	r3, [sp, #7]
 8013e9c:	b158      	cbz	r0, 8013eb6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013e9e:	6803      	ldr	r3, [r0, #0]
 8013ea0:	f10d 0107 	add.w	r1, sp, #7
 8013ea4:	68db      	ldr	r3, [r3, #12]
 8013ea6:	4798      	blx	r3
 8013ea8:	b128      	cbz	r0, 8013eb6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013eaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013eac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013eb0:	6803      	ldr	r3, [r0, #0]
 8013eb2:	68db      	ldr	r3, [r3, #12]
 8013eb4:	4798      	blx	r3
 8013eb6:	f104 001c 	add.w	r0, r4, #28
 8013eba:	f011 feb7 	bl	8025c2c <_ZN8touchgfx8Gestures4tickEv>
 8013ebe:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8013ec2:	b30b      	cbz	r3, 8013f08 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013ec4:	6920      	ldr	r0, [r4, #16]
 8013ec6:	6803      	ldr	r3, [r0, #0]
 8013ec8:	691b      	ldr	r3, [r3, #16]
 8013eca:	4798      	blx	r3
 8013ecc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013ece:	4606      	mov	r6, r0
 8013ed0:	b903      	cbnz	r3, 8013ed4 <_ZN8touchgfx3HAL4tickEv+0x100>
 8013ed2:	6720      	str	r0, [r4, #112]	; 0x70
 8013ed4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013ed6:	4a1e      	ldr	r2, [pc, #120]	; (8013f50 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013ed8:	1af3      	subs	r3, r6, r3
 8013eda:	4293      	cmp	r3, r2
 8013edc:	d914      	bls.n	8013f08 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013ede:	6920      	ldr	r0, [r4, #16]
 8013ee0:	6803      	ldr	r3, [r0, #0]
 8013ee2:	699b      	ldr	r3, [r3, #24]
 8013ee4:	4798      	blx	r3
 8013ee6:	2264      	movs	r2, #100	; 0x64
 8013ee8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013eea:	1af3      	subs	r3, r6, r3
 8013eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ef0:	fbb0 f0f3 	udiv	r0, r0, r3
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	dc1d      	bgt.n	8013f34 <_ZN8touchgfx3HAL4tickEv+0x160>
 8013ef8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8013efc:	6920      	ldr	r0, [r4, #16]
 8013efe:	2100      	movs	r1, #0
 8013f00:	6803      	ldr	r3, [r0, #0]
 8013f02:	69db      	ldr	r3, [r3, #28]
 8013f04:	4798      	blx	r3
 8013f06:	6726      	str	r6, [r4, #112]	; 0x70
 8013f08:	f003 fd24 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 8013f0c:	6803      	ldr	r3, [r0, #0]
 8013f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f10:	4798      	blx	r3
 8013f12:	6823      	ldr	r3, [r4, #0]
 8013f14:	4620      	mov	r0, r4
 8013f16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013f1a:	4798      	blx	r3
 8013f1c:	2001      	movs	r0, #1
 8013f1e:	f7fd fd17 	bl	8011950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8013f22:	2300      	movs	r3, #0
 8013f24:	702b      	strb	r3, [r5, #0]
 8013f26:	b004      	add	sp, #16
 8013f28:	bd70      	pop	{r4, r5, r6, pc}
 8013f2a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013f2e:	4620      	mov	r0, r4
 8013f30:	4798      	blx	r3
 8013f32:	e7af      	b.n	8013e94 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013f34:	2863      	cmp	r0, #99	; 0x63
 8013f36:	bfcb      	itete	gt
 8013f38:	2300      	movgt	r3, #0
 8013f3a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8013f3e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8013f42:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8013f46:	e7d9      	b.n	8013efc <_ZN8touchgfx3HAL4tickEv+0x128>
 8013f48:	2004f6cc 	.word	0x2004f6cc
 8013f4c:	2004f6cd 	.word	0x2004f6cd
 8013f50:	05f5e100 	.word	0x05f5e100

08013f54 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013f54:	f7fe b8e0 	b.w	8012118 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013f58 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013f58:	6581      	str	r1, [r0, #88]	; 0x58
 8013f5a:	301c      	adds	r0, #28
 8013f5c:	f011 be64 	b.w	8025c28 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08013f60 <_ZN8touchgfx3HAL5touchEll>:
 8013f60:	b530      	push	{r4, r5, lr}
 8013f62:	4604      	mov	r4, r0
 8013f64:	b087      	sub	sp, #28
 8013f66:	a804      	add	r0, sp, #16
 8013f68:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013f6c:	f003 fa78 	bl	8017460 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8013f70:	9b04      	ldr	r3, [sp, #16]
 8013f72:	a906      	add	r1, sp, #24
 8013f74:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013f78:	9b05      	ldr	r3, [sp, #20]
 8013f7a:	a803      	add	r0, sp, #12
 8013f7c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8013f80:	f003 fac0 	bl	8017504 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013f84:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8013f88:	f104 001c 	add.w	r0, r4, #28
 8013f8c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013f90:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013f94:	b189      	cbz	r1, 8013fba <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013f96:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8013f9a:	9300      	str	r3, [sp, #0]
 8013f9c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8013fa0:	4613      	mov	r3, r2
 8013fa2:	462a      	mov	r2, r5
 8013fa4:	f011 fe50 	bl	8025c48 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013fa8:	b128      	cbz	r0, 8013fb6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8013faa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013fae:	65e3      	str	r3, [r4, #92]	; 0x5c
 8013fb0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013fb4:	6623      	str	r3, [r4, #96]	; 0x60
 8013fb6:	b007      	add	sp, #28
 8013fb8:	bd30      	pop	{r4, r5, pc}
 8013fba:	f011 fe85 	bl	8025cc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013fc4:	e7f1      	b.n	8013faa <_ZN8touchgfx3HAL5touchEll+0x4a>

08013fc6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013fc6:	b510      	push	{r4, lr}
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d046      	beq.n	801405a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013fcc:	ea81 0002 	eor.w	r0, r1, r2
 8013fd0:	07c4      	lsls	r4, r0, #31
 8013fd2:	d508      	bpl.n	8013fe6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013fd4:	440b      	add	r3, r1
 8013fd6:	3a01      	subs	r2, #1
 8013fd8:	428b      	cmp	r3, r1
 8013fda:	d93e      	bls.n	801405a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013fdc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013fe0:	f801 0b01 	strb.w	r0, [r1], #1
 8013fe4:	e7f8      	b.n	8013fd8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8013fe6:	07d0      	lsls	r0, r2, #31
 8013fe8:	bf42      	ittt	mi
 8013fea:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8013fee:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8013ff2:	f801 0b01 	strbmi.w	r0, [r1], #1
 8013ff6:	2b01      	cmp	r3, #1
 8013ff8:	d911      	bls.n	801401e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013ffa:	ea81 0402 	eor.w	r4, r1, r2
 8013ffe:	07a4      	lsls	r4, r4, #30
 8014000:	4610      	mov	r0, r2
 8014002:	d022      	beq.n	801404a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8014004:	f023 0401 	bic.w	r4, r3, #1
 8014008:	440c      	add	r4, r1
 801400a:	428c      	cmp	r4, r1
 801400c:	4602      	mov	r2, r0
 801400e:	d904      	bls.n	801401a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014010:	8812      	ldrh	r2, [r2, #0]
 8014012:	3002      	adds	r0, #2
 8014014:	f821 2b02 	strh.w	r2, [r1], #2
 8014018:	e7f7      	b.n	801400a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801401a:	f003 0301 	and.w	r3, r3, #1
 801401e:	f023 0003 	bic.w	r0, r3, #3
 8014022:	4408      	add	r0, r1
 8014024:	4288      	cmp	r0, r1
 8014026:	4614      	mov	r4, r2
 8014028:	d904      	bls.n	8014034 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801402a:	6824      	ldr	r4, [r4, #0]
 801402c:	3204      	adds	r2, #4
 801402e:	f841 4b04 	str.w	r4, [r1], #4
 8014032:	e7f7      	b.n	8014024 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014034:	f003 0303 	and.w	r3, r3, #3
 8014038:	440b      	add	r3, r1
 801403a:	3a01      	subs	r2, #1
 801403c:	428b      	cmp	r3, r1
 801403e:	d90c      	bls.n	801405a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014040:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014044:	f801 0b01 	strb.w	r0, [r1], #1
 8014048:	e7f8      	b.n	801403c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801404a:	0790      	lsls	r0, r2, #30
 801404c:	d0e7      	beq.n	801401e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801404e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014052:	3b02      	subs	r3, #2
 8014054:	f821 0b02 	strh.w	r0, [r1], #2
 8014058:	e7e1      	b.n	801401e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801405a:	2001      	movs	r0, #1
 801405c:	bd10      	pop	{r4, pc}

0801405e <_ZN8touchgfx3HAL7noTouchEv>:
 801405e:	b510      	push	{r4, lr}
 8014060:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8014064:	4604      	mov	r4, r0
 8014066:	b153      	cbz	r3, 801407e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014068:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801406c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8014070:	2101      	movs	r1, #1
 8014072:	301c      	adds	r0, #28
 8014074:	f011 fe28 	bl	8025cc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014078:	2300      	movs	r3, #0
 801407a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801407e:	bd10      	pop	{r4, pc}

08014080 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014084:	4604      	mov	r4, r0
 8014086:	2000      	movs	r0, #0
 8014088:	b085      	sub	sp, #20
 801408a:	ad04      	add	r5, sp, #16
 801408c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014090:	69a0      	ldr	r0, [r4, #24]
 8014092:	4699      	mov	r9, r3
 8014094:	6806      	ldr	r6, [r0, #0]
 8014096:	9501      	str	r5, [sp, #4]
 8014098:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801409c:	460f      	mov	r7, r1
 801409e:	9500      	str	r5, [sp, #0]
 80140a0:	6835      	ldr	r5, [r6, #0]
 80140a2:	4690      	mov	r8, r2
 80140a4:	47a8      	blx	r5
 80140a6:	4d10      	ldr	r5, [pc, #64]	; (80140e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80140a8:	4606      	mov	r6, r0
 80140aa:	f8a5 9000 	strh.w	r9, [r5]
 80140ae:	f7fa f975 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 80140b2:	6803      	ldr	r3, [r0, #0]
 80140b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b6:	4798      	blx	r3
 80140b8:	b128      	cbz	r0, 80140c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80140ba:	2801      	cmp	r0, #1
 80140bc:	d00b      	beq.n	80140d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80140be:	4630      	mov	r0, r6
 80140c0:	b005      	add	sp, #20
 80140c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140c6:	882b      	ldrh	r3, [r5, #0]
 80140c8:	fb08 7203 	mla	r2, r8, r3, r7
 80140cc:	9b03      	ldr	r3, [sp, #12]
 80140ce:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80140d2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80140d4:	e7f3      	b.n	80140be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80140d6:	882a      	ldrh	r2, [r5, #0]
 80140d8:	9b03      	ldr	r3, [sp, #12]
 80140da:	fb08 7202 	mla	r2, r8, r2, r7
 80140de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80140e2:	1a9a      	subs	r2, r3, r2
 80140e4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80140e6:	e7ea      	b.n	80140be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80140e8:	2004f6c2 	.word	0x2004f6c2

080140ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80140ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140ee:	b08b      	sub	sp, #44	; 0x2c
 80140f0:	4617      	mov	r7, r2
 80140f2:	4604      	mov	r4, r0
 80140f4:	460e      	mov	r6, r1
 80140f6:	461d      	mov	r5, r3
 80140f8:	f7fa f950 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 80140fc:	6803      	ldr	r3, [r0, #0]
 80140fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014100:	4798      	blx	r3
 8014102:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014106:	9007      	str	r0, [sp, #28]
 8014108:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801410c:	4b0d      	ldr	r3, [pc, #52]	; (8014144 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801410e:	6822      	ldr	r2, [r4, #0]
 8014110:	881b      	ldrh	r3, [r3, #0]
 8014112:	4631      	mov	r1, r6
 8014114:	9306      	str	r3, [sp, #24]
 8014116:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801411a:	4620      	mov	r0, r4
 801411c:	9305      	str	r3, [sp, #20]
 801411e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014122:	9304      	str	r3, [sp, #16]
 8014124:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014128:	9303      	str	r3, [sp, #12]
 801412a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801412e:	9302      	str	r3, [sp, #8]
 8014130:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014134:	e9cd 5300 	strd	r5, r3, [sp]
 8014138:	463b      	mov	r3, r7
 801413a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801413c:	2200      	movs	r2, #0
 801413e:	47a8      	blx	r5
 8014140:	b00b      	add	sp, #44	; 0x2c
 8014142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014144:	2004f6c2 	.word	0x2004f6c2

08014148 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801414c:	4698      	mov	r8, r3
 801414e:	6803      	ldr	r3, [r0, #0]
 8014150:	b08b      	sub	sp, #44	; 0x2c
 8014152:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8014154:	4b14      	ldr	r3, [pc, #80]	; (80141a8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014156:	4617      	mov	r7, r2
 8014158:	f8b3 9000 	ldrh.w	r9, [r3]
 801415c:	460e      	mov	r6, r1
 801415e:	4604      	mov	r4, r0
 8014160:	f7fa f91c 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 8014164:	6803      	ldr	r3, [r0, #0]
 8014166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014168:	4798      	blx	r3
 801416a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801416e:	2200      	movs	r2, #0
 8014170:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014174:	2302      	movs	r3, #2
 8014176:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801417a:	2301      	movs	r3, #1
 801417c:	9305      	str	r3, [sp, #20]
 801417e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014182:	4631      	mov	r1, r6
 8014184:	9304      	str	r3, [sp, #16]
 8014186:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801418a:	4620      	mov	r0, r4
 801418c:	9303      	str	r3, [sp, #12]
 801418e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014192:	9302      	str	r3, [sp, #8]
 8014194:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014198:	e9cd 8300 	strd	r8, r3, [sp]
 801419c:	463b      	mov	r3, r7
 801419e:	47a8      	blx	r5
 80141a0:	b00b      	add	sp, #44	; 0x2c
 80141a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141a6:	bf00      	nop
 80141a8:	2004f6c2 	.word	0x2004f6c2

080141ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80141ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141b0:	4698      	mov	r8, r3
 80141b2:	6803      	ldr	r3, [r0, #0]
 80141b4:	b087      	sub	sp, #28
 80141b6:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80141b8:	4b10      	ldr	r3, [pc, #64]	; (80141fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80141ba:	460e      	mov	r6, r1
 80141bc:	f8b3 9000 	ldrh.w	r9, [r3]
 80141c0:	4617      	mov	r7, r2
 80141c2:	4604      	mov	r4, r0
 80141c4:	f7fa f8ea 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 80141c8:	6803      	ldr	r3, [r0, #0]
 80141ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141cc:	4798      	blx	r3
 80141ce:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80141d2:	f8cd 900c 	str.w	r9, [sp, #12]
 80141d6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80141da:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80141de:	463a      	mov	r2, r7
 80141e0:	9302      	str	r3, [sp, #8]
 80141e2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80141e6:	4631      	mov	r1, r6
 80141e8:	9301      	str	r3, [sp, #4]
 80141ea:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80141ee:	4620      	mov	r0, r4
 80141f0:	9300      	str	r3, [sp, #0]
 80141f2:	4643      	mov	r3, r8
 80141f4:	47a8      	blx	r5
 80141f6:	b007      	add	sp, #28
 80141f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141fc:	2004f6c2 	.word	0x2004f6c2

08014200 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014204:	4604      	mov	r4, r0
 8014206:	b08f      	sub	sp, #60	; 0x3c
 8014208:	4610      	mov	r0, r2
 801420a:	460d      	mov	r5, r1
 801420c:	4691      	mov	r9, r2
 801420e:	461e      	mov	r6, r3
 8014210:	f005 ff7c 	bl	801a10c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014214:	2800      	cmp	r0, #0
 8014216:	f000 809d 	beq.w	8014354 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801421a:	6823      	ldr	r3, [r4, #0]
 801421c:	4620      	mov	r0, r4
 801421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014220:	4798      	blx	r3
 8014222:	6823      	ldr	r3, [r4, #0]
 8014224:	f8df b190 	ldr.w	fp, [pc, #400]	; 80143b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801422a:	4620      	mov	r0, r4
 801422c:	4798      	blx	r3
 801422e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80143bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8014232:	f8bb 3000 	ldrh.w	r3, [fp]
 8014236:	4f5d      	ldr	r7, [pc, #372]	; (80143ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014238:	9301      	str	r3, [sp, #4]
 801423a:	f8ba 3000 	ldrh.w	r3, [sl]
 801423e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8014242:	9302      	str	r3, [sp, #8]
 8014244:	883b      	ldrh	r3, [r7, #0]
 8014246:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801424a:	9303      	str	r3, [sp, #12]
 801424c:	4b58      	ldr	r3, [pc, #352]	; (80143b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801424e:	4640      	mov	r0, r8
 8014250:	881a      	ldrh	r2, [r3, #0]
 8014252:	9305      	str	r3, [sp, #20]
 8014254:	9204      	str	r2, [sp, #16]
 8014256:	f005 ffed 	bl	801a234 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801425a:	8038      	strh	r0, [r7, #0]
 801425c:	4640      	mov	r0, r8
 801425e:	f006 f81d 	bl	801a29c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014262:	9b05      	ldr	r3, [sp, #20]
 8014264:	b280      	uxth	r0, r0
 8014266:	8018      	strh	r0, [r3, #0]
 8014268:	4b52      	ldr	r3, [pc, #328]	; (80143b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d174      	bne.n	801435a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8014270:	883b      	ldrh	r3, [r7, #0]
 8014272:	f8aa 0000 	strh.w	r0, [sl]
 8014276:	f8ab 3000 	strh.w	r3, [fp]
 801427a:	4648      	mov	r0, r9
 801427c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8014280:	f005 ff44 	bl	801a10c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014284:	2200      	movs	r2, #0
 8014286:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801428a:	4611      	mov	r1, r2
 801428c:	4628      	mov	r0, r5
 801428e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014292:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014296:	f7f9 ff7f 	bl	800e198 <_ZN8touchgfx8Drawable5setXYEss>
 801429a:	2301      	movs	r3, #1
 801429c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80142a0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80142a4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	dd5c      	ble.n	8014366 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80142ac:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	dd58      	ble.n	8014366 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80142b4:	462a      	mov	r2, r5
 80142b6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80142ba:	ab0a      	add	r3, sp, #40	; 0x28
 80142bc:	6851      	ldr	r1, [r2, #4]
 80142be:	c303      	stmia	r3!, {r0, r1}
 80142c0:	4631      	mov	r1, r6
 80142c2:	a80a      	add	r0, sp, #40	; 0x28
 80142c4:	f7ff fc00 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 80142c8:	2100      	movs	r1, #0
 80142ca:	4b38      	ldr	r3, [pc, #224]	; (80143ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80142cc:	910c      	str	r1, [sp, #48]	; 0x30
 80142ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80142d2:	4b37      	ldr	r3, [pc, #220]	; (80143b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80142d4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80142d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80142dc:	aa0a      	add	r2, sp, #40	; 0x28
 80142de:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80142e2:	ab08      	add	r3, sp, #32
 80142e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80142ec:	4618      	mov	r0, r3
 80142ee:	a90c      	add	r1, sp, #48	; 0x30
 80142f0:	f7ff fbea 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 80142f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d13c      	bne.n	8014374 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80142fa:	2000      	movs	r0, #0
 80142fc:	2600      	movs	r6, #0
 80142fe:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014302:	696b      	ldr	r3, [r5, #20]
 8014304:	682a      	ldr	r2, [r5, #0]
 8014306:	616e      	str	r6, [r5, #20]
 8014308:	9305      	str	r3, [sp, #20]
 801430a:	6892      	ldr	r2, [r2, #8]
 801430c:	a908      	add	r1, sp, #32
 801430e:	4628      	mov	r0, r5
 8014310:	4790      	blx	r2
 8014312:	9b05      	ldr	r3, [sp, #20]
 8014314:	4652      	mov	r2, sl
 8014316:	616b      	str	r3, [r5, #20]
 8014318:	4649      	mov	r1, r9
 801431a:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801431e:	4628      	mov	r0, r5
 8014320:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014324:	f7f9 ff38 	bl	800e198 <_ZN8touchgfx8Drawable5setXYEss>
 8014328:	9a01      	ldr	r2, [sp, #4]
 801432a:	4b23      	ldr	r3, [pc, #140]	; (80143b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801432c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8014330:	801a      	strh	r2, [r3, #0]
 8014332:	9a02      	ldr	r2, [sp, #8]
 8014334:	4b21      	ldr	r3, [pc, #132]	; (80143bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014336:	4620      	mov	r0, r4
 8014338:	801a      	strh	r2, [r3, #0]
 801433a:	9a03      	ldr	r2, [sp, #12]
 801433c:	4b1b      	ldr	r3, [pc, #108]	; (80143ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801433e:	801a      	strh	r2, [r3, #0]
 8014340:	4b1b      	ldr	r3, [pc, #108]	; (80143b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014342:	9a04      	ldr	r2, [sp, #16]
 8014344:	801a      	strh	r2, [r3, #0]
 8014346:	6823      	ldr	r3, [r4, #0]
 8014348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801434a:	4798      	blx	r3
 801434c:	6823      	ldr	r3, [r4, #0]
 801434e:	4620      	mov	r0, r4
 8014350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014352:	4798      	blx	r3
 8014354:	b00f      	add	sp, #60	; 0x3c
 8014356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801435a:	883b      	ldrh	r3, [r7, #0]
 801435c:	f8ab 0000 	strh.w	r0, [fp]
 8014360:	f8aa 3000 	strh.w	r3, [sl]
 8014364:	e789      	b.n	801427a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8014366:	462a      	mov	r2, r5
 8014368:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801436c:	ab0a      	add	r3, sp, #40	; 0x28
 801436e:	6851      	ldr	r1, [r2, #4]
 8014370:	c303      	stmia	r3!, {r0, r1}
 8014372:	e7a9      	b.n	80142c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8014374:	a807      	add	r0, sp, #28
 8014376:	f006 f8cd 	bl	801a514 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801437a:	4606      	mov	r6, r0
 801437c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801437e:	6803      	ldr	r3, [r0, #0]
 8014380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014382:	4798      	blx	r3
 8014384:	4286      	cmp	r6, r0
 8014386:	d1b8      	bne.n	80142fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8014388:	f7fa f808 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 801438c:	6803      	ldr	r3, [r0, #0]
 801438e:	4606      	mov	r6, r0
 8014390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014392:	a807      	add	r0, sp, #28
 8014394:	9305      	str	r3, [sp, #20]
 8014396:	f006 f8bd 	bl	801a514 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801439a:	9b05      	ldr	r3, [sp, #20]
 801439c:	4601      	mov	r1, r0
 801439e:	4630      	mov	r0, r6
 80143a0:	4798      	blx	r3
 80143a2:	f080 0001 	eor.w	r0, r0, #1
 80143a6:	b2c0      	uxtb	r0, r0
 80143a8:	e7a8      	b.n	80142fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80143aa:	bf00      	nop
 80143ac:	2004f6bc 	.word	0x2004f6bc
 80143b0:	2004f6be 	.word	0x2004f6be
 80143b4:	2004f6c0 	.word	0x2004f6c0
 80143b8:	2004f6c2 	.word	0x2004f6c2
 80143bc:	2004f6c4 	.word	0x2004f6c4

080143c0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80143c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143c4:	461d      	mov	r5, r3
 80143c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143ca:	2400      	movs	r4, #0
 80143cc:	b08a      	sub	sp, #40	; 0x28
 80143ce:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80143d2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80143d6:	4690      	mov	r8, r2
 80143d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80143dc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80143e0:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80143e4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80143e8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80143ec:	4607      	mov	r7, r0
 80143ee:	f8ad 301c 	strh.w	r3, [sp, #28]
 80143f2:	9404      	str	r4, [sp, #16]
 80143f4:	f88d 4020 	strb.w	r4, [sp, #32]
 80143f8:	f7fd fc02 	bl	8011c00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80143fc:	fb06 8505 	mla	r5, r6, r5, r8
 8014400:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	9505      	str	r5, [sp, #20]
 8014408:	f8ad 601e 	strh.w	r6, [sp, #30]
 801440c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014410:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8014414:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014418:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801441c:	6803      	ldr	r3, [r0, #0]
 801441e:	a901      	add	r1, sp, #4
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	4798      	blx	r3
 8014424:	b00a      	add	sp, #40	; 0x28
 8014426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801442a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801442a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801442e:	2400      	movs	r4, #0
 8014430:	461d      	mov	r5, r3
 8014432:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014436:	4691      	mov	r9, r2
 8014438:	b08b      	sub	sp, #44	; 0x2c
 801443a:	4688      	mov	r8, r1
 801443c:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8014440:	4607      	mov	r7, r0
 8014442:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014446:	9404      	str	r4, [sp, #16]
 8014448:	f7fd fbda 	bl	8011c00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801444c:	fb06 9505 	mla	r5, r6, r5, r9
 8014450:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014454:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014458:	f8ad 3018 	strh.w	r3, [sp, #24]
 801445c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	9505      	str	r5, [sp, #20]
 8014464:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014468:	f8ad 401c 	strh.w	r4, [sp, #28]
 801446c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014470:	f8cd 8010 	str.w	r8, [sp, #16]
 8014474:	f8ad 4020 	strh.w	r4, [sp, #32]
 8014478:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801447c:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014480:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8014484:	6803      	ldr	r3, [r0, #0]
 8014486:	a901      	add	r1, sp, #4
 8014488:	685b      	ldr	r3, [r3, #4]
 801448a:	4798      	blx	r3
 801448c:	b00b      	add	sp, #44	; 0x2c
 801448e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08014494 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014498:	4698      	mov	r8, r3
 801449a:	2300      	movs	r3, #0
 801449c:	b08a      	sub	sp, #40	; 0x28
 801449e:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80144a2:	4606      	mov	r6, r0
 80144a4:	2d0b      	cmp	r5, #11
 80144a6:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80144aa:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80144ae:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80144b2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80144b6:	9304      	str	r3, [sp, #16]
 80144b8:	d137      	bne.n	801452a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80144ba:	2380      	movs	r3, #128	; 0x80
 80144bc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80144c0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80144c4:	f88d 0020 	strb.w	r0, [sp, #32]
 80144c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80144cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80144d0:	4630      	mov	r0, r6
 80144d2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80144d6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80144da:	9203      	str	r2, [sp, #12]
 80144dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80144e0:	f7fd fb8e 	bl	8011c00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80144e4:	2c0b      	cmp	r4, #11
 80144e6:	bf8c      	ite	hi
 80144e8:	2100      	movhi	r1, #0
 80144ea:	4b1b      	ldrls	r3, [pc, #108]	; (8014558 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80144ec:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80144f0:	bf98      	it	ls
 80144f2:	5d19      	ldrbls	r1, [r3, r4]
 80144f4:	fb02 8307 	mla	r3, r2, r7, r8
 80144f8:	10c9      	asrs	r1, r1, #3
 80144fa:	fb01 0003 	mla	r0, r1, r3, r0
 80144fe:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014502:	9005      	str	r0, [sp, #20]
 8014504:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014508:	2300      	movs	r3, #0
 801450a:	6870      	ldr	r0, [r6, #4]
 801450c:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014510:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8014514:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014518:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801451c:	6803      	ldr	r3, [r0, #0]
 801451e:	a901      	add	r1, sp, #4
 8014520:	685b      	ldr	r3, [r3, #4]
 8014522:	4798      	blx	r3
 8014524:	b00a      	add	sp, #40	; 0x28
 8014526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801452a:	2d02      	cmp	r5, #2
 801452c:	d109      	bne.n	8014542 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801452e:	28ff      	cmp	r0, #255	; 0xff
 8014530:	d105      	bne.n	801453e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014532:	f1bc 0f00 	cmp.w	ip, #0
 8014536:	bf14      	ite	ne
 8014538:	2340      	movne	r3, #64	; 0x40
 801453a:	2320      	moveq	r3, #32
 801453c:	e7be      	b.n	80144bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801453e:	2340      	movs	r3, #64	; 0x40
 8014540:	e7bc      	b.n	80144bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014542:	28ff      	cmp	r0, #255	; 0xff
 8014544:	d105      	bne.n	8014552 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8014546:	f1bc 0f00 	cmp.w	ip, #0
 801454a:	bf14      	ite	ne
 801454c:	2304      	movne	r3, #4
 801454e:	2301      	moveq	r3, #1
 8014550:	e7b4      	b.n	80144bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014552:	2304      	movs	r3, #4
 8014554:	e7b2      	b.n	80144bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014556:	bf00      	nop
 8014558:	080290c0 	.word	0x080290c0

0801455c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801455c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014560:	b08b      	sub	sp, #44	; 0x2c
 8014562:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8014566:	461d      	mov	r5, r3
 8014568:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801456c:	bf14      	ite	ne
 801456e:	2308      	movne	r3, #8
 8014570:	2302      	moveq	r3, #2
 8014572:	2400      	movs	r4, #0
 8014574:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8014578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801457c:	4688      	mov	r8, r1
 801457e:	4693      	mov	fp, r2
 8014580:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8014584:	9404      	str	r4, [sp, #16]
 8014586:	4607      	mov	r7, r0
 8014588:	f7fd fb3a 	bl	8011c00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801458c:	2e0b      	cmp	r6, #11
 801458e:	bf98      	it	ls
 8014590:	4b15      	ldrls	r3, [pc, #84]	; (80145e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014592:	fb05 b50a 	mla	r5, r5, sl, fp
 8014596:	bf98      	it	ls
 8014598:	5d9c      	ldrbls	r4, [r3, r6]
 801459a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801459e:	10e4      	asrs	r4, r4, #3
 80145a0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80145a4:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80145a8:	fb04 0405 	mla	r4, r4, r5, r0
 80145ac:	f8ad 301a 	strh.w	r3, [sp, #26]
 80145b0:	2300      	movs	r3, #0
 80145b2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	9405      	str	r4, [sp, #20]
 80145ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 80145be:	f8ad a01e 	strh.w	sl, [sp, #30]
 80145c2:	f8cd 8010 	str.w	r8, [sp, #16]
 80145c6:	f88d 9020 	strb.w	r9, [sp, #32]
 80145ca:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80145ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80145d2:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80145d6:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80145da:	6803      	ldr	r3, [r0, #0]
 80145dc:	a901      	add	r1, sp, #4
 80145de:	685b      	ldr	r3, [r3, #4]
 80145e0:	4798      	blx	r3
 80145e2:	b00b      	add	sp, #44	; 0x2c
 80145e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145e8:	080290c0 	.word	0x080290c0

080145ec <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80145ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f0:	461e      	mov	r6, r3
 80145f2:	4b0a      	ldr	r3, [pc, #40]	; (801461c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80145f4:	460f      	mov	r7, r1
 80145f6:	881d      	ldrh	r5, [r3, #0]
 80145f8:	4690      	mov	r8, r2
 80145fa:	f7f9 fecf 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 80145fe:	6803      	ldr	r3, [r0, #0]
 8014600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014602:	4798      	blx	r3
 8014604:	280b      	cmp	r0, #11
 8014606:	bf8e      	itee	hi
 8014608:	2400      	movhi	r4, #0
 801460a:	4b05      	ldrls	r3, [pc, #20]	; (8014620 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801460c:	5c1c      	ldrbls	r4, [r3, r0]
 801460e:	fb08 7005 	mla	r0, r8, r5, r7
 8014612:	10e4      	asrs	r4, r4, #3
 8014614:	fb04 6000 	mla	r0, r4, r0, r6
 8014618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801461c:	2004f6c2 	.word	0x2004f6c2
 8014620:	080290c0 	.word	0x080290c0

08014624 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014626:	2500      	movs	r5, #0
 8014628:	b08b      	sub	sp, #44	; 0x2c
 801462a:	461f      	mov	r7, r3
 801462c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014630:	4604      	mov	r4, r0
 8014632:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014636:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801463a:	4616      	mov	r6, r2
 801463c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014640:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014644:	9504      	str	r5, [sp, #16]
 8014646:	f8ad 301a 	strh.w	r3, [sp, #26]
 801464a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801464e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014652:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014656:	f88d 3020 	strb.w	r3, [sp, #32]
 801465a:	f7fd fad1 	bl	8011c00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801465e:	463a      	mov	r2, r7
 8014660:	4631      	mov	r1, r6
 8014662:	4603      	mov	r3, r0
 8014664:	4620      	mov	r0, r4
 8014666:	f7ff ffc1 	bl	80145ec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801466a:	4b0e      	ldr	r3, [pc, #56]	; (80146a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801466c:	9005      	str	r0, [sp, #20]
 801466e:	881b      	ldrh	r3, [r3, #0]
 8014670:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014674:	f7f9 fe92 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 8014678:	6803      	ldr	r3, [r0, #0]
 801467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801467c:	4798      	blx	r3
 801467e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014680:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8014684:	9304      	str	r3, [sp, #16]
 8014686:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801468a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801468e:	6860      	ldr	r0, [r4, #4]
 8014690:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014694:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8014698:	6803      	ldr	r3, [r0, #0]
 801469a:	a901      	add	r1, sp, #4
 801469c:	685b      	ldr	r3, [r3, #4]
 801469e:	4798      	blx	r3
 80146a0:	b00b      	add	sp, #44	; 0x2c
 80146a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146a4:	2004f6c2 	.word	0x2004f6c2

080146a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80146a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146aa:	b08d      	sub	sp, #52	; 0x34
 80146ac:	466b      	mov	r3, sp
 80146ae:	e883 0006 	stmia.w	r3, {r1, r2}
 80146b2:	2300      	movs	r3, #0
 80146b4:	2501      	movs	r5, #1
 80146b6:	9306      	str	r3, [sp, #24]
 80146b8:	6803      	ldr	r3, [r0, #0]
 80146ba:	9503      	str	r5, [sp, #12]
 80146bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146be:	4604      	mov	r4, r0
 80146c0:	f8bd 6000 	ldrh.w	r6, [sp]
 80146c4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80146c8:	4798      	blx	r3
 80146ca:	463a      	mov	r2, r7
 80146cc:	4631      	mov	r1, r6
 80146ce:	4603      	mov	r3, r0
 80146d0:	4620      	mov	r0, r4
 80146d2:	f7ff ff8b 	bl	80145ec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80146d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80146d8:	9004      	str	r0, [sp, #16]
 80146da:	9307      	str	r3, [sp, #28]
 80146dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80146e0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80146e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80146e8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80146ec:	4b0e      	ldr	r3, [pc, #56]	; (8014728 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80146ee:	881b      	ldrh	r3, [r3, #0]
 80146f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80146f4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80146f8:	f7f9 fe50 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 80146fc:	6803      	ldr	r3, [r0, #0]
 80146fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014700:	4798      	blx	r3
 8014702:	23ff      	movs	r3, #255	; 0xff
 8014704:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014708:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801470c:	6860      	ldr	r0, [r4, #4]
 801470e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014712:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014716:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801471a:	6803      	ldr	r3, [r0, #0]
 801471c:	a903      	add	r1, sp, #12
 801471e:	685b      	ldr	r3, [r3, #4]
 8014720:	4798      	blx	r3
 8014722:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014724:	b00d      	add	sp, #52	; 0x34
 8014726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014728:	2004f6c2 	.word	0x2004f6c2

0801472c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014730:	b08c      	sub	sp, #48	; 0x30
 8014732:	466d      	mov	r5, sp
 8014734:	461e      	mov	r6, r3
 8014736:	2300      	movs	r3, #0
 8014738:	e885 0006 	stmia.w	r5, {r1, r2}
 801473c:	2501      	movs	r5, #1
 801473e:	9306      	str	r3, [sp, #24]
 8014740:	6803      	ldr	r3, [r0, #0]
 8014742:	9503      	str	r5, [sp, #12]
 8014744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014746:	4604      	mov	r4, r0
 8014748:	f8bd 7000 	ldrh.w	r7, [sp]
 801474c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014750:	4798      	blx	r3
 8014752:	4642      	mov	r2, r8
 8014754:	4639      	mov	r1, r7
 8014756:	4603      	mov	r3, r0
 8014758:	4620      	mov	r0, r4
 801475a:	f7ff ff47 	bl	80145ec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801475e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014762:	9004      	str	r0, [sp, #16]
 8014764:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014768:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801476c:	9607      	str	r6, [sp, #28]
 801476e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014772:	4b10      	ldr	r3, [pc, #64]	; (80147b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8014774:	881b      	ldrh	r3, [r3, #0]
 8014776:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801477a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801477c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014780:	f7f9 fe0c 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 8014784:	6803      	ldr	r3, [r0, #0]
 8014786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014788:	4798      	blx	r3
 801478a:	23ff      	movs	r3, #255	; 0xff
 801478c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014790:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014794:	6860      	ldr	r0, [r4, #4]
 8014796:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801479a:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801479e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80147a2:	6803      	ldr	r3, [r0, #0]
 80147a4:	a903      	add	r1, sp, #12
 80147a6:	685b      	ldr	r3, [r3, #4]
 80147a8:	4798      	blx	r3
 80147aa:	4630      	mov	r0, r6
 80147ac:	b00c      	add	sp, #48	; 0x30
 80147ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147b2:	bf00      	nop
 80147b4:	2004f6c2 	.word	0x2004f6c2

080147b8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80147b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147ba:	b085      	sub	sp, #20
 80147bc:	ac02      	add	r4, sp, #8
 80147be:	e884 0006 	stmia.w	r4, {r1, r2}
 80147c2:	4605      	mov	r5, r0
 80147c4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80147c8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80147cc:	f7fd fa18 	bl	8011c00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80147d0:	463a      	mov	r2, r7
 80147d2:	4603      	mov	r3, r0
 80147d4:	4631      	mov	r1, r6
 80147d6:	4628      	mov	r0, r5
 80147d8:	f7ff ff08 	bl	80145ec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80147dc:	4a05      	ldr	r2, [pc, #20]	; (80147f4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80147de:	682b      	ldr	r3, [r5, #0]
 80147e0:	8812      	ldrh	r2, [r2, #0]
 80147e2:	9200      	str	r2, [sp, #0]
 80147e4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80147e6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80147ea:	4603      	mov	r3, r0
 80147ec:	4628      	mov	r0, r5
 80147ee:	47b0      	blx	r6
 80147f0:	b005      	add	sp, #20
 80147f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147f4:	2004f6c2 	.word	0x2004f6c2

080147f8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80147f8:	b570      	push	{r4, r5, r6, lr}
 80147fa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80147fe:	4604      	mov	r4, r0
 8014800:	b19b      	cbz	r3, 801482a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014802:	2002      	movs	r0, #2
 8014804:	f7fd f8c0 	bl	8011988 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014808:	2300      	movs	r3, #0
 801480a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801480e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8014812:	6823      	ldr	r3, [r4, #0]
 8014814:	4620      	mov	r0, r4
 8014816:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801481a:	f7fd f9f1 	bl	8011c00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801481e:	462b      	mov	r3, r5
 8014820:	4601      	mov	r1, r0
 8014822:	4620      	mov	r0, r4
 8014824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014828:	4718      	bx	r3
 801482a:	bd70      	pop	{r4, r5, r6, pc}

0801482c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801482c:	b538      	push	{r3, r4, r5, lr}
 801482e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8014832:	4604      	mov	r4, r0
 8014834:	428b      	cmp	r3, r1
 8014836:	460d      	mov	r5, r1
 8014838:	d006      	beq.n	8014848 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801483a:	6803      	ldr	r3, [r0, #0]
 801483c:	b929      	cbnz	r1, 801484a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801483e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014842:	4798      	blx	r3
 8014844:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8014848:	bd38      	pop	{r3, r4, r5, pc}
 801484a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801484e:	e7f8      	b.n	8014842 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08014850 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014850:	b510      	push	{r4, lr}
 8014852:	4b0d      	ldr	r3, [pc, #52]	; (8014888 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014854:	4604      	mov	r4, r0
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	b95b      	cbnz	r3, 8014872 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801485a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801485e:	2b02      	cmp	r3, #2
 8014860:	d007      	beq.n	8014872 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014862:	6840      	ldr	r0, [r0, #4]
 8014864:	f000 f926 	bl	8014ab4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014868:	b118      	cbz	r0, 8014872 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801486a:	6862      	ldr	r2, [r4, #4]
 801486c:	7a53      	ldrb	r3, [r2, #9]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d0fc      	beq.n	801486c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014872:	f7fd fc31 	bl	80120d8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014876:	4620      	mov	r0, r4
 8014878:	2100      	movs	r1, #0
 801487a:	f7ff ffd7 	bl	801482c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801487e:	4620      	mov	r0, r4
 8014880:	f7fd f9be 	bl	8011c00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014884:	bd10      	pop	{r4, pc}
 8014886:	bf00      	nop
 8014888:	2004f6c6 	.word	0x2004f6c6

0801488c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801488c:	b570      	push	{r4, r5, r6, lr}
 801488e:	4604      	mov	r4, r0
 8014890:	6803      	ldr	r3, [r0, #0]
 8014892:	b919      	cbnz	r1, 801489c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8014894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801489a:	4718      	bx	r3
 801489c:	2200      	movs	r2, #0
 801489e:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 80148a2:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80148a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148a8:	4798      	blx	r3
 80148aa:	4605      	mov	r5, r0
 80148ac:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 80148b0:	4620      	mov	r0, r4
 80148b2:	2101      	movs	r1, #1
 80148b4:	f7ff ffba 	bl	801482c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80148b8:	4628      	mov	r0, r5
 80148ba:	bd70      	pop	{r4, r5, r6, pc}

080148bc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80148bc:	4770      	bx	lr

080148be <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80148be:	2000      	movs	r0, #0
 80148c0:	4770      	bx	lr

080148c2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80148c2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80148c6:	1a13      	subs	r3, r2, r0
 80148c8:	4258      	negs	r0, r3
 80148ca:	4158      	adcs	r0, r3
 80148cc:	4770      	bx	lr

080148ce <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80148ce:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80148d2:	1a9b      	subs	r3, r3, r2
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	bfdc      	itt	le
 80148d8:	6882      	ldrle	r2, [r0, #8]
 80148da:	189b      	addle	r3, r3, r2
 80148dc:	2b01      	cmp	r3, #1
 80148de:	bfcc      	ite	gt
 80148e0:	2000      	movgt	r0, #0
 80148e2:	2001      	movle	r0, #1
 80148e4:	4770      	bx	lr

080148e6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80148e6:	6902      	ldr	r2, [r0, #16]
 80148e8:	6843      	ldr	r3, [r0, #4]
 80148ea:	2024      	movs	r0, #36	; 0x24
 80148ec:	fb00 3002 	mla	r0, r0, r2, r3
 80148f0:	4770      	bx	lr

080148f2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80148f2:	6803      	ldr	r3, [r0, #0]
 80148f4:	691b      	ldr	r3, [r3, #16]
 80148f6:	4718      	bx	r3

080148f8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80148f8:	2301      	movs	r3, #1
 80148fa:	b570      	push	{r4, r5, r6, lr}
 80148fc:	7203      	strb	r3, [r0, #8]
 80148fe:	4604      	mov	r4, r0
 8014900:	6840      	ldr	r0, [r0, #4]
 8014902:	6803      	ldr	r3, [r0, #0]
 8014904:	699b      	ldr	r3, [r3, #24]
 8014906:	4798      	blx	r3
 8014908:	6803      	ldr	r3, [r0, #0]
 801490a:	4605      	mov	r5, r0
 801490c:	2b40      	cmp	r3, #64	; 0x40
 801490e:	d00c      	beq.n	801492a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014910:	d810      	bhi.n	8014934 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8014912:	2b04      	cmp	r3, #4
 8014914:	d01d      	beq.n	8014952 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8014916:	d804      	bhi.n	8014922 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8014918:	2b01      	cmp	r3, #1
 801491a:	d006      	beq.n	801492a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801491c:	2b02      	cmp	r3, #2
 801491e:	d02c      	beq.n	801497a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8014920:	bd70      	pop	{r4, r5, r6, pc}
 8014922:	2b08      	cmp	r3, #8
 8014924:	d01d      	beq.n	8014962 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8014926:	2b20      	cmp	r3, #32
 8014928:	d1fa      	bne.n	8014920 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801492a:	6823      	ldr	r3, [r4, #0]
 801492c:	4620      	mov	r0, r4
 801492e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014930:	4798      	blx	r3
 8014932:	e013      	b.n	801495c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014938:	d0f7      	beq.n	801492a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801493a:	d804      	bhi.n	8014946 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801493c:	2b80      	cmp	r3, #128	; 0x80
 801493e:	d0f4      	beq.n	801492a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014944:	e7f0      	b.n	8014928 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8014946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801494a:	d0ee      	beq.n	801492a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801494c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014950:	e7e5      	b.n	801491e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014952:	6823      	ldr	r3, [r4, #0]
 8014954:	7f01      	ldrb	r1, [r0, #28]
 8014956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014958:	4620      	mov	r0, r4
 801495a:	4798      	blx	r3
 801495c:	6823      	ldr	r3, [r4, #0]
 801495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014960:	e006      	b.n	8014970 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014962:	6823      	ldr	r3, [r4, #0]
 8014964:	7f01      	ldrb	r1, [r0, #28]
 8014966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014968:	4620      	mov	r0, r4
 801496a:	4798      	blx	r3
 801496c:	6823      	ldr	r3, [r4, #0]
 801496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014970:	4629      	mov	r1, r5
 8014972:	4620      	mov	r0, r4
 8014974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014978:	4718      	bx	r3
 801497a:	6823      	ldr	r3, [r4, #0]
 801497c:	4620      	mov	r0, r4
 801497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014980:	4798      	blx	r3
 8014982:	e7f3      	b.n	801496c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08014984 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014984:	4770      	bx	lr

08014986 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014986:	4770      	bx	lr

08014988 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014988:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801498c:	1ad2      	subs	r2, r2, r3
 801498e:	2a00      	cmp	r2, #0
 8014990:	b510      	push	{r4, lr}
 8014992:	bfdc      	itt	le
 8014994:	6884      	ldrle	r4, [r0, #8]
 8014996:	1912      	addle	r2, r2, r4
 8014998:	2a01      	cmp	r2, #1
 801499a:	dd16      	ble.n	80149ca <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801499c:	2424      	movs	r4, #36	; 0x24
 801499e:	6842      	ldr	r2, [r0, #4]
 80149a0:	fb04 2303 	mla	r3, r4, r3, r2
 80149a4:	f101 0220 	add.w	r2, r1, #32
 80149a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80149ac:	4291      	cmp	r1, r2
 80149ae:	f843 4b04 	str.w	r4, [r3], #4
 80149b2:	d1f9      	bne.n	80149a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80149b4:	780a      	ldrb	r2, [r1, #0]
 80149b6:	701a      	strb	r2, [r3, #0]
 80149b8:	68c3      	ldr	r3, [r0, #12]
 80149ba:	6882      	ldr	r2, [r0, #8]
 80149bc:	3301      	adds	r3, #1
 80149be:	429a      	cmp	r2, r3
 80149c0:	bfd8      	it	le
 80149c2:	1a9b      	suble	r3, r3, r2
 80149c4:	f3bf 8f5b 	dmb	ish
 80149c8:	60c3      	str	r3, [r0, #12]
 80149ca:	bd10      	pop	{r4, pc}

080149cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80149cc:	6903      	ldr	r3, [r0, #16]
 80149ce:	6882      	ldr	r2, [r0, #8]
 80149d0:	3301      	adds	r3, #1
 80149d2:	429a      	cmp	r2, r3
 80149d4:	bfd8      	it	le
 80149d6:	1a9b      	suble	r3, r3, r2
 80149d8:	f3bf 8f5b 	dmb	ish
 80149dc:	6103      	str	r3, [r0, #16]
 80149de:	4770      	bx	lr

080149e0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80149e0:	b570      	push	{r4, r5, r6, lr}
 80149e2:	4604      	mov	r4, r0
 80149e4:	460e      	mov	r6, r1
 80149e6:	6860      	ldr	r0, [r4, #4]
 80149e8:	6803      	ldr	r3, [r0, #0]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	4798      	blx	r3
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d1f9      	bne.n	80149e6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80149f2:	4d0d      	ldr	r5, [pc, #52]	; (8014a28 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80149f4:	6828      	ldr	r0, [r5, #0]
 80149f6:	6803      	ldr	r3, [r0, #0]
 80149f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80149fa:	4798      	blx	r3
 80149fc:	f7fd fbae 	bl	801215c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014a00:	6828      	ldr	r0, [r5, #0]
 8014a02:	2101      	movs	r1, #1
 8014a04:	f7ff ff12 	bl	801482c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014a08:	6860      	ldr	r0, [r4, #4]
 8014a0a:	4631      	mov	r1, r6
 8014a0c:	6803      	ldr	r3, [r0, #0]
 8014a0e:	689b      	ldr	r3, [r3, #8]
 8014a10:	4798      	blx	r3
 8014a12:	6823      	ldr	r3, [r4, #0]
 8014a14:	4620      	mov	r0, r4
 8014a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a18:	4798      	blx	r3
 8014a1a:	6828      	ldr	r0, [r5, #0]
 8014a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a20:	6803      	ldr	r3, [r0, #0]
 8014a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014a24:	4718      	bx	r3
 8014a26:	bf00      	nop
 8014a28:	2004f6c8 	.word	0x2004f6c8

08014a2c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014a2c:	b508      	push	{r3, lr}
 8014a2e:	f7fd fb53 	bl	80120d8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014a36:	f7fd bb6f 	b.w	8012118 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014a3a <_ZN8touchgfx13DMA_Interface5startEv>:
 8014a3a:	b510      	push	{r4, lr}
 8014a3c:	4604      	mov	r4, r0
 8014a3e:	6840      	ldr	r0, [r0, #4]
 8014a40:	6803      	ldr	r3, [r0, #0]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	4798      	blx	r3
 8014a46:	b948      	cbnz	r0, 8014a5c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014a48:	7a63      	ldrb	r3, [r4, #9]
 8014a4a:	b13b      	cbz	r3, 8014a5c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014a4c:	7a23      	ldrb	r3, [r4, #8]
 8014a4e:	b92b      	cbnz	r3, 8014a5c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014a50:	6823      	ldr	r3, [r4, #0]
 8014a52:	4620      	mov	r0, r4
 8014a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a5a:	4718      	bx	r3
 8014a5c:	bd10      	pop	{r4, pc}

08014a5e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014a5e:	b570      	push	{r4, r5, r6, lr}
 8014a60:	4604      	mov	r4, r0
 8014a62:	6840      	ldr	r0, [r0, #4]
 8014a64:	6803      	ldr	r3, [r0, #0]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	4798      	blx	r3
 8014a6a:	4605      	mov	r5, r0
 8014a6c:	b930      	cbnz	r0, 8014a7c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014a6e:	7a23      	ldrb	r3, [r4, #8]
 8014a70:	b123      	cbz	r3, 8014a7c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014a72:	6860      	ldr	r0, [r4, #4]
 8014a74:	6803      	ldr	r3, [r0, #0]
 8014a76:	695b      	ldr	r3, [r3, #20]
 8014a78:	4798      	blx	r3
 8014a7a:	7225      	strb	r5, [r4, #8]
 8014a7c:	6860      	ldr	r0, [r4, #4]
 8014a7e:	6803      	ldr	r3, [r0, #0]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	4798      	blx	r3
 8014a84:	b928      	cbnz	r0, 8014a92 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014a86:	6823      	ldr	r3, [r4, #0]
 8014a88:	4620      	mov	r0, r4
 8014a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a90:	4718      	bx	r3
 8014a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a96:	f7fd bb6d 	b.w	8012174 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08014a9c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014a9c:	6082      	str	r2, [r0, #8]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	b510      	push	{r4, lr}
 8014aa2:	4c03      	ldr	r4, [pc, #12]	; (8014ab0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014aa4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014aa8:	e9c0 4100 	strd	r4, r1, [r0]
 8014aac:	bd10      	pop	{r4, pc}
 8014aae:	bf00      	nop
 8014ab0:	080291fc 	.word	0x080291fc

08014ab4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014ab4:	6840      	ldr	r0, [r0, #4]
 8014ab6:	6803      	ldr	r3, [r0, #0]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	4718      	bx	r3

08014abc <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8014abc:	b508      	push	{r3, lr}
 8014abe:	4b05      	ldr	r3, [pc, #20]	; (8014ad4 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8014ac0:	6818      	ldr	r0, [r3, #0]
 8014ac2:	6803      	ldr	r3, [r0, #0]
 8014ac4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014ac8:	4798      	blx	r3
 8014aca:	1e43      	subs	r3, r0, #1
 8014acc:	4258      	negs	r0, r3
 8014ace:	4158      	adcs	r0, r3
 8014ad0:	bd08      	pop	{r3, pc}
 8014ad2:	bf00      	nop
 8014ad4:	2004f6c8 	.word	0x2004f6c8

08014ad8 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8014ad8:	b430      	push	{r4, r5}
 8014ada:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8014ade:	8a02      	ldrh	r2, [r0, #16]
 8014ae0:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8014ae4:	9202      	str	r2, [sp, #8]
 8014ae6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014aea:	68c2      	ldr	r2, [r0, #12]
 8014aec:	4629      	mov	r1, r5
 8014aee:	4620      	mov	r0, r4
 8014af0:	bc30      	pop	{r4, r5}
 8014af2:	f7fd bfdb 	b.w	8012aac <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08014af6 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8014af6:	f7fd bfc1 	b.w	8012a7c <_ZN8touchgfx5paint6rgb5658tearDownEv>

08014afa <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 8014afa:	4602      	mov	r2, r0
 8014afc:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8014b00:	cb03      	ldmia	r3!, {r0, r1}
 8014b02:	6010      	str	r0, [r2, #0]
 8014b04:	6051      	str	r1, [r2, #4]
 8014b06:	4610      	mov	r0, r2
 8014b08:	4770      	bx	lr

08014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8014b0a:	b507      	push	{r0, r1, r2, lr}
 8014b0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014b10:	ab01      	add	r3, sp, #4
 8014b12:	6809      	ldr	r1, [r1, #0]
 8014b14:	6800      	ldr	r0, [r0, #0]
 8014b16:	f004 f87e 	bl	8018c16 <_ZN8touchgfx6muldivElllRl>
 8014b1a:	b003      	add	sp, #12
 8014b1c:	f85d fb04 	ldr.w	pc, [sp], #4

08014b20 <_ZN8touchgfx7CWRUtil4sineEi>:
 8014b20:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014b24:	fb90 f2f3 	sdiv	r2, r0, r3
 8014b28:	fb02 0013 	mls	r0, r2, r3, r0
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	bfb8      	it	lt
 8014b30:	18c0      	addlt	r0, r0, r3
 8014b32:	285a      	cmp	r0, #90	; 0x5a
 8014b34:	4b09      	ldr	r3, [pc, #36]	; (8014b5c <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8014b36:	dc02      	bgt.n	8014b3e <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8014b38:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014b3c:	4770      	bx	lr
 8014b3e:	28b4      	cmp	r0, #180	; 0xb4
 8014b40:	dc02      	bgt.n	8014b48 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8014b42:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8014b46:	e7f7      	b.n	8014b38 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8014b48:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8014b4c:	bfd4      	ite	le
 8014b4e:	38b4      	suble	r0, #180	; 0xb4
 8014b50:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8014b54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014b58:	4240      	negs	r0, r0
 8014b5a:	4770      	bx	lr
 8014b5c:	08029260 	.word	0x08029260

08014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8014b60:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8014b64:	fb90 f2f3 	sdiv	r2, r0, r3
 8014b68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b6a:	fb02 0013 	mls	r0, r2, r3, r0
 8014b6e:	2800      	cmp	r0, #0
 8014b70:	bfb8      	it	lt
 8014b72:	18c0      	addlt	r0, r0, r3
 8014b74:	1144      	asrs	r4, r0, #5
 8014b76:	f000 061f 	and.w	r6, r0, #31
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	f7ff ffd0 	bl	8014b20 <_ZN8touchgfx7CWRUtil4sineEi>
 8014b80:	4605      	mov	r5, r0
 8014b82:	b90e      	cbnz	r6, 8014b88 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8014b84:	b002      	add	sp, #8
 8014b86:	bd70      	pop	{r4, r5, r6, pc}
 8014b88:	1c60      	adds	r0, r4, #1
 8014b8a:	f7ff ffc9 	bl	8014b20 <_ZN8touchgfx7CWRUtil4sineEi>
 8014b8e:	ab01      	add	r3, sp, #4
 8014b90:	2220      	movs	r2, #32
 8014b92:	4631      	mov	r1, r6
 8014b94:	1b40      	subs	r0, r0, r5
 8014b96:	f004 f83e 	bl	8018c16 <_ZN8touchgfx6muldivElllRl>
 8014b9a:	4428      	add	r0, r5
 8014b9c:	e7f2      	b.n	8014b84 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

08014b9e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 8014b9e:	b507      	push	{r0, r1, r2, lr}
 8014ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014ba4:	ab01      	add	r3, sp, #4
 8014ba6:	0140      	lsls	r0, r0, #5
 8014ba8:	f004 f835 	bl	8018c16 <_ZN8touchgfx6muldivElllRl>
 8014bac:	2320      	movs	r3, #32
 8014bae:	fb90 f0f3 	sdiv	r0, r0, r3
 8014bb2:	b003      	add	sp, #12
 8014bb4:	f85d fb04 	ldr.w	pc, [sp], #4

08014bb8 <_ZN8touchgfx13AbstractShapeC1Ev>:
 8014bb8:	b510      	push	{r4, lr}
 8014bba:	4604      	mov	r4, r0
 8014bbc:	f000 fe28 	bl	8015810 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8014bc0:	4b07      	ldr	r3, [pc, #28]	; (8014be0 <_ZN8touchgfx13AbstractShapeC1Ev+0x28>)
 8014bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014bc6:	6023      	str	r3, [r4, #0]
 8014bc8:	2300      	movs	r3, #0
 8014bca:	e9c4 220e 	strd	r2, r2, [r4, #56]	; 0x38
 8014bce:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8014bd2:	6363      	str	r3, [r4, #52]	; 0x34
 8014bd4:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 8014bd8:	60a3      	str	r3, [r4, #8]
 8014bda:	4620      	mov	r0, r4
 8014bdc:	bd10      	pop	{r4, pc}
 8014bde:	bf00      	nop
 8014be0:	08029320 	.word	0x08029320

08014be4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 8014be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be8:	2500      	movs	r5, #0
 8014bea:	6803      	ldr	r3, [r0, #0]
 8014bec:	b087      	sub	sp, #28
 8014bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	4798      	blx	r3
 8014bf4:	462e      	mov	r6, r5
 8014bf6:	46a8      	mov	r8, r5
 8014bf8:	462f      	mov	r7, r5
 8014bfa:	46a9      	mov	r9, r5
 8014bfc:	9000      	str	r0, [sp, #0]
 8014bfe:	9b00      	ldr	r3, [sp, #0]
 8014c00:	429d      	cmp	r5, r3
 8014c02:	da7d      	bge.n	8014d00 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x11c>
 8014c04:	6823      	ldr	r3, [r4, #0]
 8014c06:	4629      	mov	r1, r5
 8014c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	4798      	blx	r3
 8014c0e:	6823      	ldr	r3, [r4, #0]
 8014c10:	4682      	mov	sl, r0
 8014c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c14:	4629      	mov	r1, r5
 8014c16:	4620      	mov	r0, r4
 8014c18:	4798      	blx	r3
 8014c1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014c1c:	4683      	mov	fp, r0
 8014c1e:	4650      	mov	r0, sl
 8014c20:	f7ff ffbd 	bl	8014b9e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8014c24:	9002      	str	r0, [sp, #8]
 8014c26:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014c28:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014c2c:	f7ff ff98 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014c30:	a903      	add	r1, sp, #12
 8014c32:	9003      	str	r0, [sp, #12]
 8014c34:	a802      	add	r0, sp, #8
 8014c36:	f7ff ff68 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014c3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014c3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014c3e:	4402      	add	r2, r0
 8014c40:	4658      	mov	r0, fp
 8014c42:	9201      	str	r2, [sp, #4]
 8014c44:	f7ff ffab 	bl	8014b9e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8014c48:	9004      	str	r0, [sp, #16]
 8014c4a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014c4c:	f7ff ff88 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014c50:	a905      	add	r1, sp, #20
 8014c52:	9005      	str	r0, [sp, #20]
 8014c54:	a804      	add	r0, sp, #16
 8014c56:	f7ff ff58 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014c5a:	9a01      	ldr	r2, [sp, #4]
 8014c5c:	1a12      	subs	r2, r2, r0
 8014c5e:	b125      	cbz	r5, 8014c6a <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x86>
 8014c60:	2320      	movs	r3, #32
 8014c62:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c66:	429f      	cmp	r7, r3
 8014c68:	da03      	bge.n	8014c72 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8e>
 8014c6a:	2720      	movs	r7, #32
 8014c6c:	fb92 f7f7 	sdiv	r7, r2, r7
 8014c70:	b125      	cbz	r5, 8014c7c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x98>
 8014c72:	2320      	movs	r3, #32
 8014c74:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c78:	4599      	cmp	r9, r3
 8014c7a:	dd03      	ble.n	8014c84 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa0>
 8014c7c:	f04f 0920 	mov.w	r9, #32
 8014c80:	fb92 f9f9 	sdiv	r9, r2, r9
 8014c84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014c86:	4658      	mov	r0, fp
 8014c88:	9201      	str	r2, [sp, #4]
 8014c8a:	f7ff ff88 	bl	8014b9e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8014c8e:	9002      	str	r0, [sp, #8]
 8014c90:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014c92:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014c96:	f7ff ff63 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014c9a:	a903      	add	r1, sp, #12
 8014c9c:	9003      	str	r0, [sp, #12]
 8014c9e:	a802      	add	r0, sp, #8
 8014ca0:	f7ff ff33 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ca4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014ca6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014ca8:	eb00 0b03 	add.w	fp, r0, r3
 8014cac:	4650      	mov	r0, sl
 8014cae:	f7ff ff76 	bl	8014b9e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8014cb2:	9004      	str	r0, [sp, #16]
 8014cb4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014cb6:	f7ff ff53 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014cba:	a905      	add	r1, sp, #20
 8014cbc:	9005      	str	r0, [sp, #20]
 8014cbe:	a804      	add	r0, sp, #16
 8014cc0:	f7ff ff23 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014cc4:	9a01      	ldr	r2, [sp, #4]
 8014cc6:	eb00 030b 	add.w	r3, r0, fp
 8014cca:	b125      	cbz	r5, 8014cd6 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf2>
 8014ccc:	2120      	movs	r1, #32
 8014cce:	fb93 f1f1 	sdiv	r1, r3, r1
 8014cd2:	428e      	cmp	r6, r1
 8014cd4:	da03      	bge.n	8014cde <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfa>
 8014cd6:	2620      	movs	r6, #32
 8014cd8:	fb93 f6f6 	sdiv	r6, r3, r6
 8014cdc:	b125      	cbz	r5, 8014ce8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x104>
 8014cde:	2120      	movs	r1, #32
 8014ce0:	fb93 f1f1 	sdiv	r1, r3, r1
 8014ce4:	4588      	cmp	r8, r1
 8014ce6:	dd03      	ble.n	8014cf0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x10c>
 8014ce8:	f04f 0820 	mov.w	r8, #32
 8014cec:	fb93 f8f8 	sdiv	r8, r3, r8
 8014cf0:	6821      	ldr	r1, [r4, #0]
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	f8d1 a080 	ldr.w	sl, [r1, #128]	; 0x80
 8014cf8:	4629      	mov	r1, r5
 8014cfa:	47d0      	blx	sl
 8014cfc:	3501      	adds	r5, #1
 8014cfe:	e77e      	b.n	8014bfe <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 8014d00:	3701      	adds	r7, #1
 8014d02:	3601      	adds	r6, #1
 8014d04:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
 8014d08:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
 8014d0c:	eba7 0909 	sub.w	r9, r7, r9
 8014d10:	eba6 0808 	sub.w	r8, r6, r8
 8014d14:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 8014d18:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 8014d1c:	b007      	add	sp, #28
 8014d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014d24 <_ZN8touchgfx6CanvasD1Ev>:
 8014d24:	b510      	push	{r4, lr}
 8014d26:	4604      	mov	r4, r0
 8014d28:	4b03      	ldr	r3, [pc, #12]	; (8014d38 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8014d2a:	f840 3b20 	str.w	r3, [r0], #32
 8014d2e:	f000 fed9 	bl	8015ae4 <_ZN8touchgfx7OutlineD1Ev>
 8014d32:	4620      	mov	r0, r4
 8014d34:	bd10      	pop	{r4, pc}
 8014d36:	bf00      	nop
 8014d38:	08029258 	.word	0x08029258

08014d3c <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 8014d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d3e:	4604      	mov	r4, r0
 8014d40:	b09d      	sub	sp, #116	; 0x74
 8014d42:	460a      	mov	r2, r1
 8014d44:	4601      	mov	r1, r0
 8014d46:	4668      	mov	r0, sp
 8014d48:	f011 f90c 	bl	8025f64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014d4c:	6823      	ldr	r3, [r4, #0]
 8014d4e:	4620      	mov	r0, r4
 8014d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d52:	4798      	blx	r3
 8014d54:	4606      	mov	r6, r0
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d037      	beq.n	8014dca <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x8e>
 8014d5a:	6823      	ldr	r3, [r4, #0]
 8014d5c:	2100      	movs	r1, #0
 8014d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014d62:	4620      	mov	r0, r4
 8014d64:	4798      	blx	r3
 8014d66:	6823      	ldr	r3, [r4, #0]
 8014d68:	4605      	mov	r5, r0
 8014d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014d6e:	2100      	movs	r1, #0
 8014d70:	4620      	mov	r0, r4
 8014d72:	4798      	blx	r3
 8014d74:	4629      	mov	r1, r5
 8014d76:	4602      	mov	r2, r0
 8014d78:	4668      	mov	r0, sp
 8014d7a:	f011 fac9 	bl	8026310 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8014d7e:	2501      	movs	r5, #1
 8014d80:	42b5      	cmp	r5, r6
 8014d82:	da17      	bge.n	8014db4 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x78>
 8014d84:	6823      	ldr	r3, [r4, #0]
 8014d86:	4629      	mov	r1, r5
 8014d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	4798      	blx	r3
 8014d90:	6823      	ldr	r3, [r4, #0]
 8014d92:	4607      	mov	r7, r0
 8014d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014d98:	4629      	mov	r1, r5
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	4798      	blx	r3
 8014d9e:	4639      	mov	r1, r7
 8014da0:	4602      	mov	r2, r0
 8014da2:	4668      	mov	r0, sp
 8014da4:	f011 f98c 	bl	80260c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014da8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d80e      	bhi.n	8014dce <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x92>
 8014db0:	3501      	adds	r5, #1
 8014db2:	e7e5      	b.n	8014d80 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x44>
 8014db4:	21ff      	movs	r1, #255	; 0xff
 8014db6:	4668      	mov	r0, sp
 8014db8:	f011 f9fe 	bl	80261b8 <_ZN8touchgfx6Canvas6renderEh>
 8014dbc:	4604      	mov	r4, r0
 8014dbe:	4668      	mov	r0, sp
 8014dc0:	f7ff ffb0 	bl	8014d24 <_ZN8touchgfx6CanvasD1Ev>
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	b01d      	add	sp, #116	; 0x74
 8014dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dca:	2401      	movs	r4, #1
 8014dcc:	e7f7      	b.n	8014dbe <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>
 8014dce:	2400      	movs	r4, #0
 8014dd0:	e7f5      	b.n	8014dbe <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>

08014dd2 <_ZN8touchgfx6CanvasD0Ev>:
 8014dd2:	b510      	push	{r4, lr}
 8014dd4:	4604      	mov	r4, r0
 8014dd6:	f7ff ffa5 	bl	8014d24 <_ZN8touchgfx6CanvasD1Ev>
 8014dda:	4620      	mov	r0, r4
 8014ddc:	2170      	movs	r1, #112	; 0x70
 8014dde:	f011 fae9 	bl	80263b4 <_ZdlPvj>
 8014de2:	4620      	mov	r0, r4
 8014de4:	bd10      	pop	{r4, pc}

08014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8014de6:	b508      	push	{r3, lr}
 8014de8:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014dec:	f7ff feb8 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014df0:	bd08      	pop	{r3, pc}
	...

08014df4 <_ZN8touchgfx6CircleC1Ev>:
 8014df4:	b510      	push	{r4, lr}
 8014df6:	4604      	mov	r4, r0
 8014df8:	f000 fd0a 	bl	8015810 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8014dfc:	4b08      	ldr	r3, [pc, #32]	; (8014e20 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8014dfe:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8014e02:	6023      	str	r3, [r4, #0]
 8014e04:	2300      	movs	r3, #0
 8014e06:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 8014e0a:	f24b 4205 	movw	r2, #46085	; 0xb405
 8014e0e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8014e12:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014e16:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 8014e1a:	60a3      	str	r3, [r4, #8]
 8014e1c:	4620      	mov	r0, r4
 8014e1e:	bd10      	pop	{r4, pc}
 8014e20:	080293b4 	.word	0x080293b4

08014e24 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8014e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e28:	4680      	mov	r8, r0
 8014e2a:	4610      	mov	r0, r2
 8014e2c:	428a      	cmp	r2, r1
 8014e2e:	bfa8      	it	ge
 8014e30:	460a      	movge	r2, r1
 8014e32:	4699      	mov	r9, r3
 8014e34:	bfac      	ite	ge
 8014e36:	4603      	movge	r3, r0
 8014e38:	460b      	movlt	r3, r1
 8014e3a:	1a99      	subs	r1, r3, r2
 8014e3c:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 8014e40:	bfa4      	itt	ge
 8014e42:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8014e46:	2200      	movge	r2, #0
 8014e48:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 8014e4c:	b085      	sub	sp, #20
 8014e4e:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 8014e52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014e54:	9300      	str	r3, [sp, #0]
 8014e56:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 8014e5a:	f102 0b01 	add.w	fp, r2, #1
 8014e5e:	2c00      	cmp	r4, #0
 8014e60:	f040 80af 	bne.w	8014fc2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19e>
 8014e64:	4610      	mov	r0, r2
 8014e66:	9201      	str	r2, [sp, #4]
 8014e68:	f7ff fe7a 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014e6c:	a903      	add	r1, sp, #12
 8014e6e:	9003      	str	r0, [sp, #12]
 8014e70:	4650      	mov	r0, sl
 8014e72:	f7ff fe4a 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014e76:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8014e7a:	9a01      	ldr	r2, [sp, #4]
 8014e7c:	4408      	add	r0, r1
 8014e7e:	f8d9 1000 	ldr.w	r1, [r9]
 8014e82:	4281      	cmp	r1, r0
 8014e84:	bfc8      	it	gt
 8014e86:	f8c9 0000 	strgt.w	r0, [r9]
 8014e8a:	6839      	ldr	r1, [r7, #0]
 8014e8c:	4288      	cmp	r0, r1
 8014e8e:	bfc8      	it	gt
 8014e90:	6038      	strgt	r0, [r7, #0]
 8014e92:	4610      	mov	r0, r2
 8014e94:	f7ff ffa7 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014e98:	a903      	add	r1, sp, #12
 8014e9a:	9003      	str	r0, [sp, #12]
 8014e9c:	4650      	mov	r0, sl
 8014e9e:	f7ff fe34 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ea2:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8014ea6:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014eaa:	1a10      	subs	r0, r2, r0
 8014eac:	6832      	ldr	r2, [r6, #0]
 8014eae:	4282      	cmp	r2, r0
 8014eb0:	bfc8      	it	gt
 8014eb2:	6030      	strgt	r0, [r6, #0]
 8014eb4:	682a      	ldr	r2, [r5, #0]
 8014eb6:	4290      	cmp	r0, r2
 8014eb8:	fb9b f2f1 	sdiv	r2, fp, r1
 8014ebc:	fb01 b212 	mls	r2, r1, r2, fp
 8014ec0:	eba1 0202 	sub.w	r2, r1, r2
 8014ec4:	bfc8      	it	gt
 8014ec6:	6028      	strgt	r0, [r5, #0]
 8014ec8:	fb92 f0f1 	sdiv	r0, r2, r1
 8014ecc:	fb01 2210 	mls	r2, r1, r0, r2
 8014ed0:	4493      	add	fp, r2
 8014ed2:	9b00      	ldr	r3, [sp, #0]
 8014ed4:	455b      	cmp	r3, fp
 8014ed6:	db2a      	blt.n	8014f2e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x10a>
 8014ed8:	4658      	mov	r0, fp
 8014eda:	f7ff fe41 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014ede:	a903      	add	r1, sp, #12
 8014ee0:	9003      	str	r0, [sp, #12]
 8014ee2:	4650      	mov	r0, sl
 8014ee4:	f7ff fe11 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ee8:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014eec:	4410      	add	r0, r2
 8014eee:	f8d9 2000 	ldr.w	r2, [r9]
 8014ef2:	4282      	cmp	r2, r0
 8014ef4:	bfc8      	it	gt
 8014ef6:	f8c9 0000 	strgt.w	r0, [r9]
 8014efa:	683a      	ldr	r2, [r7, #0]
 8014efc:	4290      	cmp	r0, r2
 8014efe:	bfc8      	it	gt
 8014f00:	6038      	strgt	r0, [r7, #0]
 8014f02:	4658      	mov	r0, fp
 8014f04:	f7ff ff6f 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014f08:	a903      	add	r1, sp, #12
 8014f0a:	9003      	str	r0, [sp, #12]
 8014f0c:	4650      	mov	r0, sl
 8014f0e:	f7ff fdfc 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014f12:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014f16:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 8014f1a:	1a10      	subs	r0, r2, r0
 8014f1c:	6832      	ldr	r2, [r6, #0]
 8014f1e:	4282      	cmp	r2, r0
 8014f20:	bfc8      	it	gt
 8014f22:	6030      	strgt	r0, [r6, #0]
 8014f24:	682a      	ldr	r2, [r5, #0]
 8014f26:	4290      	cmp	r0, r2
 8014f28:	bfc8      	it	gt
 8014f2a:	6028      	strgt	r0, [r5, #0]
 8014f2c:	e7d1      	b.n	8014ed2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xae>
 8014f2e:	9b00      	ldr	r3, [sp, #0]
 8014f30:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 8014f34:	455b      	cmp	r3, fp
 8014f36:	dd27      	ble.n	8014f88 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x164>
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f7ff fe11 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014f3e:	a903      	add	r1, sp, #12
 8014f40:	9003      	str	r0, [sp, #12]
 8014f42:	4650      	mov	r0, sl
 8014f44:	f7ff fde1 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014f48:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014f4c:	4410      	add	r0, r2
 8014f4e:	f8d9 2000 	ldr.w	r2, [r9]
 8014f52:	4282      	cmp	r2, r0
 8014f54:	bfc8      	it	gt
 8014f56:	f8c9 0000 	strgt.w	r0, [r9]
 8014f5a:	683a      	ldr	r2, [r7, #0]
 8014f5c:	4290      	cmp	r0, r2
 8014f5e:	bfc8      	it	gt
 8014f60:	6038      	strgt	r0, [r7, #0]
 8014f62:	9800      	ldr	r0, [sp, #0]
 8014f64:	f7ff ff3f 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014f68:	a903      	add	r1, sp, #12
 8014f6a:	9003      	str	r0, [sp, #12]
 8014f6c:	4650      	mov	r0, sl
 8014f6e:	f7ff fdcc 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014f72:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014f76:	1a10      	subs	r0, r2, r0
 8014f78:	6832      	ldr	r2, [r6, #0]
 8014f7a:	4282      	cmp	r2, r0
 8014f7c:	bfc8      	it	gt
 8014f7e:	6030      	strgt	r0, [r6, #0]
 8014f80:	682a      	ldr	r2, [r5, #0]
 8014f82:	4290      	cmp	r0, r2
 8014f84:	bfc8      	it	gt
 8014f86:	6028      	strgt	r0, [r5, #0]
 8014f88:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014f8c:	f8d9 1000 	ldr.w	r1, [r9]
 8014f90:	4291      	cmp	r1, r2
 8014f92:	bfc8      	it	gt
 8014f94:	f8c9 2000 	strgt.w	r2, [r9]
 8014f98:	683a      	ldr	r2, [r7, #0]
 8014f9a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	bfb8      	it	lt
 8014fa2:	603b      	strlt	r3, [r7, #0]
 8014fa4:	6832      	ldr	r2, [r6, #0]
 8014fa6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8014faa:	429a      	cmp	r2, r3
 8014fac:	bfc8      	it	gt
 8014fae:	6033      	strgt	r3, [r6, #0]
 8014fb0:	682a      	ldr	r2, [r5, #0]
 8014fb2:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8014fb6:	429a      	cmp	r2, r3
 8014fb8:	da00      	bge.n	8014fbc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>
 8014fba:	602b      	str	r3, [r5, #0]
 8014fbc:	b005      	add	sp, #20
 8014fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc2:	2002      	movs	r0, #2
 8014fc4:	3401      	adds	r4, #1
 8014fc6:	fb94 f4f0 	sdiv	r4, r4, r0
 8014fca:	4610      	mov	r0, r2
 8014fcc:	9201      	str	r2, [sp, #4]
 8014fce:	f7ff fdc7 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014fd2:	a903      	add	r1, sp, #12
 8014fd4:	9003      	str	r0, [sp, #12]
 8014fd6:	4650      	mov	r0, sl
 8014fd8:	f7ff fd97 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014fdc:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8014fe0:	9a01      	ldr	r2, [sp, #4]
 8014fe2:	4408      	add	r0, r1
 8014fe4:	f8d9 1000 	ldr.w	r1, [r9]
 8014fe8:	1b03      	subs	r3, r0, r4
 8014fea:	4299      	cmp	r1, r3
 8014fec:	bfc8      	it	gt
 8014fee:	f8c9 3000 	strgt.w	r3, [r9]
 8014ff2:	6839      	ldr	r1, [r7, #0]
 8014ff4:	4420      	add	r0, r4
 8014ff6:	428b      	cmp	r3, r1
 8014ff8:	bfc8      	it	gt
 8014ffa:	603b      	strgt	r3, [r7, #0]
 8014ffc:	f8d9 1000 	ldr.w	r1, [r9]
 8015000:	4281      	cmp	r1, r0
 8015002:	bfc8      	it	gt
 8015004:	f8c9 0000 	strgt.w	r0, [r9]
 8015008:	6839      	ldr	r1, [r7, #0]
 801500a:	4288      	cmp	r0, r1
 801500c:	bfc8      	it	gt
 801500e:	6038      	strgt	r0, [r7, #0]
 8015010:	4610      	mov	r0, r2
 8015012:	f7ff fee8 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015016:	a903      	add	r1, sp, #12
 8015018:	9003      	str	r0, [sp, #12]
 801501a:	4650      	mov	r0, sl
 801501c:	f7ff fd75 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015020:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8015024:	1a10      	subs	r0, r2, r0
 8015026:	6832      	ldr	r2, [r6, #0]
 8015028:	1b01      	subs	r1, r0, r4
 801502a:	428a      	cmp	r2, r1
 801502c:	bfc8      	it	gt
 801502e:	6031      	strgt	r1, [r6, #0]
 8015030:	682a      	ldr	r2, [r5, #0]
 8015032:	4420      	add	r0, r4
 8015034:	4291      	cmp	r1, r2
 8015036:	bfc8      	it	gt
 8015038:	6029      	strgt	r1, [r5, #0]
 801503a:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 801503e:	6832      	ldr	r2, [r6, #0]
 8015040:	4282      	cmp	r2, r0
 8015042:	bfc8      	it	gt
 8015044:	6030      	strgt	r0, [r6, #0]
 8015046:	682a      	ldr	r2, [r5, #0]
 8015048:	4290      	cmp	r0, r2
 801504a:	fb9b f2f1 	sdiv	r2, fp, r1
 801504e:	fb01 b212 	mls	r2, r1, r2, fp
 8015052:	eba1 0202 	sub.w	r2, r1, r2
 8015056:	bfc8      	it	gt
 8015058:	6028      	strgt	r0, [r5, #0]
 801505a:	fb92 f0f1 	sdiv	r0, r2, r1
 801505e:	fb01 2210 	mls	r2, r1, r0, r2
 8015062:	4493      	add	fp, r2
 8015064:	9b00      	ldr	r3, [sp, #0]
 8015066:	455b      	cmp	r3, fp
 8015068:	db40      	blt.n	80150ec <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c8>
 801506a:	4658      	mov	r0, fp
 801506c:	f7ff fd78 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015070:	a903      	add	r1, sp, #12
 8015072:	9003      	str	r0, [sp, #12]
 8015074:	4650      	mov	r0, sl
 8015076:	f7ff fd48 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801507a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801507e:	4410      	add	r0, r2
 8015080:	f8d9 2000 	ldr.w	r2, [r9]
 8015084:	1b01      	subs	r1, r0, r4
 8015086:	428a      	cmp	r2, r1
 8015088:	bfc8      	it	gt
 801508a:	f8c9 1000 	strgt.w	r1, [r9]
 801508e:	683a      	ldr	r2, [r7, #0]
 8015090:	4420      	add	r0, r4
 8015092:	4291      	cmp	r1, r2
 8015094:	bfc8      	it	gt
 8015096:	6039      	strgt	r1, [r7, #0]
 8015098:	f8d9 2000 	ldr.w	r2, [r9]
 801509c:	4282      	cmp	r2, r0
 801509e:	bfc8      	it	gt
 80150a0:	f8c9 0000 	strgt.w	r0, [r9]
 80150a4:	683a      	ldr	r2, [r7, #0]
 80150a6:	4290      	cmp	r0, r2
 80150a8:	bfc8      	it	gt
 80150aa:	6038      	strgt	r0, [r7, #0]
 80150ac:	4658      	mov	r0, fp
 80150ae:	f7ff fe9a 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80150b2:	a903      	add	r1, sp, #12
 80150b4:	9003      	str	r0, [sp, #12]
 80150b6:	4650      	mov	r0, sl
 80150b8:	f7ff fd27 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80150bc:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80150c0:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 80150c4:	1a10      	subs	r0, r2, r0
 80150c6:	6832      	ldr	r2, [r6, #0]
 80150c8:	1b01      	subs	r1, r0, r4
 80150ca:	428a      	cmp	r2, r1
 80150cc:	bfc8      	it	gt
 80150ce:	6031      	strgt	r1, [r6, #0]
 80150d0:	682a      	ldr	r2, [r5, #0]
 80150d2:	4420      	add	r0, r4
 80150d4:	4291      	cmp	r1, r2
 80150d6:	bfc8      	it	gt
 80150d8:	6029      	strgt	r1, [r5, #0]
 80150da:	6832      	ldr	r2, [r6, #0]
 80150dc:	4282      	cmp	r2, r0
 80150de:	bfc8      	it	gt
 80150e0:	6030      	strgt	r0, [r6, #0]
 80150e2:	682a      	ldr	r2, [r5, #0]
 80150e4:	4290      	cmp	r0, r2
 80150e6:	bfc8      	it	gt
 80150e8:	6028      	strgt	r0, [r5, #0]
 80150ea:	e7bb      	b.n	8015064 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x240>
 80150ec:	9b00      	ldr	r3, [sp, #0]
 80150ee:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 80150f2:	455b      	cmp	r3, fp
 80150f4:	f77f af62 	ble.w	8014fbc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7ff fd31 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80150fe:	a903      	add	r1, sp, #12
 8015100:	9003      	str	r0, [sp, #12]
 8015102:	4650      	mov	r0, sl
 8015104:	f7ff fd01 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015108:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801510c:	4410      	add	r0, r2
 801510e:	f8d9 2000 	ldr.w	r2, [r9]
 8015112:	1b01      	subs	r1, r0, r4
 8015114:	428a      	cmp	r2, r1
 8015116:	bfc8      	it	gt
 8015118:	f8c9 1000 	strgt.w	r1, [r9]
 801511c:	683a      	ldr	r2, [r7, #0]
 801511e:	4420      	add	r0, r4
 8015120:	4291      	cmp	r1, r2
 8015122:	bfc8      	it	gt
 8015124:	6039      	strgt	r1, [r7, #0]
 8015126:	f8d9 2000 	ldr.w	r2, [r9]
 801512a:	4282      	cmp	r2, r0
 801512c:	bfc8      	it	gt
 801512e:	f8c9 0000 	strgt.w	r0, [r9]
 8015132:	683b      	ldr	r3, [r7, #0]
 8015134:	4298      	cmp	r0, r3
 8015136:	bfc8      	it	gt
 8015138:	6038      	strgt	r0, [r7, #0]
 801513a:	9800      	ldr	r0, [sp, #0]
 801513c:	f7ff fe53 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015140:	a903      	add	r1, sp, #12
 8015142:	9003      	str	r0, [sp, #12]
 8015144:	4650      	mov	r0, sl
 8015146:	f7ff fce0 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801514a:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 801514e:	6832      	ldr	r2, [r6, #0]
 8015150:	1a18      	subs	r0, r3, r0
 8015152:	1b03      	subs	r3, r0, r4
 8015154:	429a      	cmp	r2, r3
 8015156:	bfc8      	it	gt
 8015158:	6033      	strgt	r3, [r6, #0]
 801515a:	682a      	ldr	r2, [r5, #0]
 801515c:	4404      	add	r4, r0
 801515e:	4293      	cmp	r3, r2
 8015160:	bfc8      	it	gt
 8015162:	602b      	strgt	r3, [r5, #0]
 8015164:	6833      	ldr	r3, [r6, #0]
 8015166:	42a3      	cmp	r3, r4
 8015168:	bfc8      	it	gt
 801516a:	6034      	strgt	r4, [r6, #0]
 801516c:	682b      	ldr	r3, [r5, #0]
 801516e:	429c      	cmp	r4, r3
 8015170:	bfc8      	it	gt
 8015172:	602c      	strgt	r4, [r5, #0]
 8015174:	e722      	b.n	8014fbc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>

08015176 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8015176:	b530      	push	{r4, r5, lr}
 8015178:	4604      	mov	r4, r0
 801517a:	4608      	mov	r0, r1
 801517c:	2500      	movs	r5, #0
 801517e:	4611      	mov	r1, r2
 8015180:	461a      	mov	r2, r3
 8015182:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015186:	b089      	sub	sp, #36	; 0x24
 8015188:	015b      	lsls	r3, r3, #5
 801518a:	9304      	str	r3, [sp, #16]
 801518c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015190:	9505      	str	r5, [sp, #20]
 8015192:	015b      	lsls	r3, r3, #5
 8015194:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8015198:	2520      	movs	r5, #32
 801519a:	ab07      	add	r3, sp, #28
 801519c:	9302      	str	r3, [sp, #8]
 801519e:	ab06      	add	r3, sp, #24
 80151a0:	9301      	str	r3, [sp, #4]
 80151a2:	ab05      	add	r3, sp, #20
 80151a4:	9300      	str	r3, [sp, #0]
 80151a6:	ab04      	add	r3, sp, #16
 80151a8:	f7ff fe3c 	bl	8014e24 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 80151ac:	9a04      	ldr	r2, [sp, #16]
 80151ae:	9805      	ldr	r0, [sp, #20]
 80151b0:	fb92 f2f5 	sdiv	r2, r2, r5
 80151b4:	fb90 f0f5 	sdiv	r0, r0, r5
 80151b8:	9b06      	ldr	r3, [sp, #24]
 80151ba:	9907      	ldr	r1, [sp, #28]
 80151bc:	b292      	uxth	r2, r2
 80151be:	fb93 f3f5 	sdiv	r3, r3, r5
 80151c2:	fb91 f1f5 	sdiv	r1, r1, r5
 80151c6:	3002      	adds	r0, #2
 80151c8:	1a80      	subs	r0, r0, r2
 80151ca:	80a0      	strh	r0, [r4, #4]
 80151cc:	4620      	mov	r0, r4
 80151ce:	b29b      	uxth	r3, r3
 80151d0:	3102      	adds	r1, #2
 80151d2:	1ac9      	subs	r1, r1, r3
 80151d4:	3a01      	subs	r2, #1
 80151d6:	3b01      	subs	r3, #1
 80151d8:	8022      	strh	r2, [r4, #0]
 80151da:	8063      	strh	r3, [r4, #2]
 80151dc:	80e1      	strh	r1, [r4, #6]
 80151de:	b009      	add	sp, #36	; 0x24
 80151e0:	bd30      	pop	{r4, r5, pc}

080151e2 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 80151e2:	b510      	push	{r4, lr}
 80151e4:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 80151e8:	4604      	mov	r4, r0
 80151ea:	f7ff ffc4 	bl	8015176 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80151ee:	4620      	mov	r0, r4
 80151f0:	bd10      	pop	{r4, pc}

080151f2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 80151f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151f6:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 80151fa:	42b5      	cmp	r5, r6
 80151fc:	bfde      	ittt	le
 80151fe:	4633      	movle	r3, r6
 8015200:	462e      	movle	r6, r5
 8015202:	461d      	movle	r5, r3
 8015204:	2220      	movs	r2, #32
 8015206:	1bab      	subs	r3, r5, r6
 8015208:	468b      	mov	fp, r1
 801520a:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 801520e:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 8015212:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015214:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8015218:	b0ab      	sub	sp, #172	; 0xac
 801521a:	4604      	mov	r4, r0
 801521c:	bfa4      	itt	ge
 801521e:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 8015222:	2600      	movge	r6, #0
 8015224:	fb99 f9f2 	sdiv	r9, r9, r2
 8015228:	fb9a faf2 	sdiv	sl, sl, r2
 801522c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801522e:	2900      	cmp	r1, #0
 8015230:	f000 80f4 	beq.w	801541c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 8015234:	f9bb 0000 	ldrsh.w	r0, [fp]
 8015238:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 801523c:	eba9 0700 	sub.w	r7, r9, r0
 8015240:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 8015244:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 8015248:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 801524c:	ebaa 0802 	sub.w	r8, sl, r2
 8015250:	4407      	add	r7, r0
 8015252:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 8015256:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 801525a:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 801525e:	b23f      	sxth	r7, r7
 8015260:	4490      	add	r8, r2
 8015262:	2202      	movs	r2, #2
 8015264:	fb91 f1f2 	sdiv	r1, r1, r2
 8015268:	eba9 0707 	sub.w	r7, r9, r7
 801526c:	fa0f f888 	sxth.w	r8, r8
 8015270:	ebaa 0808 	sub.w	r8, sl, r8
 8015274:	2f00      	cmp	r7, #0
 8015276:	bfb8      	it	lt
 8015278:	427f      	neglt	r7, r7
 801527a:	f1b8 0f00 	cmp.w	r8, #0
 801527e:	bfb8      	it	lt
 8015280:	f1c8 0800 	rsblt	r8, r8, #0
 8015284:	45bc      	cmp	ip, r7
 8015286:	bfcc      	ite	gt
 8015288:	f10c 0701 	addgt.w	r7, ip, #1
 801528c:	3701      	addle	r7, #1
 801528e:	4540      	cmp	r0, r8
 8015290:	bfc8      	it	gt
 8015292:	f100 0801 	addgt.w	r8, r0, #1
 8015296:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801529a:	eba3 0301 	sub.w	r3, r3, r1
 801529e:	f100 0001 	add.w	r0, r0, #1
 80152a2:	ea4f 0060 	mov.w	r0, r0, asr #1
 80152a6:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80152aa:	bfd8      	it	le
 80152ac:	f108 0801 	addle.w	r8, r8, #1
 80152b0:	9201      	str	r2, [sp, #4]
 80152b2:	930d      	str	r3, [sp, #52]	; 0x34
 80152b4:	f7ff fc34 	bl	8014b20 <_ZN8touchgfx7CWRUtil4sineEi>
 80152b8:	a92a      	add	r1, sp, #168	; 0xa8
 80152ba:	f841 0d70 	str.w	r0, [r1, #-112]!
 80152be:	a80d      	add	r0, sp, #52	; 0x34
 80152c0:	f7ff fc23 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80152c4:	f04f 0c20 	mov.w	ip, #32
 80152c8:	fb90 f0fc 	sdiv	r0, r0, ip
 80152cc:	fb08 f808 	mul.w	r8, r8, r8
 80152d0:	4340      	muls	r0, r0
 80152d2:	fb07 8707 	mla	r7, r7, r7, r8
 80152d6:	4287      	cmp	r7, r0
 80152d8:	9a01      	ldr	r2, [sp, #4]
 80152da:	da04      	bge.n	80152e6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf4>
 80152dc:	2401      	movs	r4, #1
 80152de:	4620      	mov	r0, r4
 80152e0:	b02b      	add	sp, #172	; 0xac
 80152e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80152e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80152ea:	fb91 f3f2 	sdiv	r3, r1, r2
 80152ee:	4403      	add	r3, r0
 80152f0:	fb93 f3fc 	sdiv	r3, r3, ip
 80152f4:	f9bb 1000 	ldrsh.w	r1, [fp]
 80152f8:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 80152fc:	3301      	adds	r3, #1
 80152fe:	440a      	add	r2, r1
 8015300:	b212      	sxth	r2, r2
 8015302:	454a      	cmp	r2, r9
 8015304:	bfa8      	it	ge
 8015306:	464a      	movge	r2, r9
 8015308:	428a      	cmp	r2, r1
 801530a:	bfac      	ite	ge
 801530c:	eba9 0902 	subge.w	r9, r9, r2
 8015310:	eba9 0901 	sublt.w	r9, r9, r1
 8015314:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8015318:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801531c:	435b      	muls	r3, r3
 801531e:	440a      	add	r2, r1
 8015320:	b212      	sxth	r2, r2
 8015322:	4552      	cmp	r2, sl
 8015324:	bfa8      	it	ge
 8015326:	4652      	movge	r2, sl
 8015328:	428a      	cmp	r2, r1
 801532a:	bfac      	ite	ge
 801532c:	ebaa 0a02 	subge.w	sl, sl, r2
 8015330:	ebaa 0a01 	sublt.w	sl, sl, r1
 8015334:	fb0a fa0a 	mul.w	sl, sl, sl
 8015338:	fb09 a909 	mla	r9, r9, r9, sl
 801533c:	4599      	cmp	r9, r3
 801533e:	dccd      	bgt.n	80152dc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xea>
 8015340:	465a      	mov	r2, fp
 8015342:	4621      	mov	r1, r4
 8015344:	a80e      	add	r0, sp, #56	; 0x38
 8015346:	f010 fe0d 	bl	8025f64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801534a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801534c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801534e:	9209      	str	r2, [sp, #36]	; 0x24
 8015350:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015354:	930a      	str	r3, [sp, #40]	; 0x28
 8015356:	dd07      	ble.n	8015368 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8015358:	2102      	movs	r1, #2
 801535a:	fb93 f3f1 	sdiv	r3, r3, r1
 801535e:	4413      	add	r3, r2
 8015360:	930a      	str	r3, [sp, #40]	; 0x28
 8015362:	fb93 f3f1 	sdiv	r3, r3, r1
 8015366:	9309      	str	r3, [sp, #36]	; 0x24
 8015368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801536c:	4630      	mov	r0, r6
 801536e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015372:	930b      	str	r3, [sp, #44]	; 0x2c
 8015374:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 8015378:	f7ff fbf2 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801537c:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 8015380:	f849 0d74 	str.w	r0, [r9, #-116]!
 8015384:	4649      	mov	r1, r9
 8015386:	a80b      	add	r0, sp, #44	; 0x2c
 8015388:	f7ff fbbf 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801538c:	f04f 0a02 	mov.w	sl, #2
 8015390:	fb90 f0fa 	sdiv	r0, r0, sl
 8015394:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015396:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 801539a:	eb00 0b03 	add.w	fp, r0, r3
 801539e:	4630      	mov	r0, r6
 80153a0:	f7ff fd21 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80153a4:	f848 0d78 	str.w	r0, [r8, #-120]!
 80153a8:	4641      	mov	r1, r8
 80153aa:	a80b      	add	r0, sp, #44	; 0x2c
 80153ac:	f7ff fbad 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80153b0:	fb90 f0fa 	sdiv	r0, r0, sl
 80153b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80153b6:	4659      	mov	r1, fp
 80153b8:	1a12      	subs	r2, r2, r0
 80153ba:	017f      	lsls	r7, r7, #5
 80153bc:	a80e      	add	r0, sp, #56	; 0x38
 80153be:	f010 ffa7 	bl	8026310 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80153c2:	f106 0a20 	add.w	sl, r6, #32
 80153c6:	bb67      	cbnz	r7, 8015422 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 80153c8:	46b3      	mov	fp, r6
 80153ca:	45aa      	cmp	sl, r5
 80153cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153ce:	dc33      	bgt.n	8015438 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x246>
 80153d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153d2:	4650      	mov	r0, sl
 80153d4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80153d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80153da:	f7ff fbc1 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80153de:	4641      	mov	r1, r8
 80153e0:	900c      	str	r0, [sp, #48]	; 0x30
 80153e2:	a80b      	add	r0, sp, #44	; 0x2c
 80153e4:	f7ff fb91 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80153e8:	2302      	movs	r3, #2
 80153ea:	fb90 f0f3 	sdiv	r0, r0, r3
 80153ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80153f0:	eb00 0b02 	add.w	fp, r0, r2
 80153f4:	4650      	mov	r0, sl
 80153f6:	f7ff fcf6 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80153fa:	4649      	mov	r1, r9
 80153fc:	900d      	str	r0, [sp, #52]	; 0x34
 80153fe:	a80b      	add	r0, sp, #44	; 0x2c
 8015400:	f7ff fb83 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015404:	2302      	movs	r3, #2
 8015406:	fb90 f0f3 	sdiv	r0, r0, r3
 801540a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801540c:	4659      	mov	r1, fp
 801540e:	1a12      	subs	r2, r2, r0
 8015410:	a80e      	add	r0, sp, #56	; 0x38
 8015412:	46d3      	mov	fp, sl
 8015414:	f010 fe54 	bl	80260c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015418:	44ba      	add	sl, r7
 801541a:	e7d6      	b.n	80153ca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d8>
 801541c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015420:	e768      	b.n	80152f4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x102>
 8015422:	fb9a f2f7 	sdiv	r2, sl, r7
 8015426:	fb07 a212 	mls	r2, r7, r2, sl
 801542a:	1aba      	subs	r2, r7, r2
 801542c:	fb92 f1f7 	sdiv	r1, r2, r7
 8015430:	fb07 2211 	mls	r2, r7, r1, r2
 8015434:	4492      	add	sl, r2
 8015436:	e7c7      	b.n	80153c8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d6>
 8015438:	455d      	cmp	r5, fp
 801543a:	dd23      	ble.n	8015484 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x292>
 801543c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801543e:	4628      	mov	r0, r5
 8015440:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8015444:	920b      	str	r2, [sp, #44]	; 0x2c
 8015446:	f7ff fb8b 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801544a:	4641      	mov	r1, r8
 801544c:	900c      	str	r0, [sp, #48]	; 0x30
 801544e:	a80b      	add	r0, sp, #44	; 0x2c
 8015450:	f7ff fb5b 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015454:	f04f 0a02 	mov.w	sl, #2
 8015458:	fb90 f0fa 	sdiv	r0, r0, sl
 801545c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801545e:	4403      	add	r3, r0
 8015460:	4628      	mov	r0, r5
 8015462:	9301      	str	r3, [sp, #4]
 8015464:	f7ff fcbf 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015468:	4649      	mov	r1, r9
 801546a:	900d      	str	r0, [sp, #52]	; 0x34
 801546c:	a80b      	add	r0, sp, #44	; 0x2c
 801546e:	f7ff fb4c 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015472:	fb90 f0fa 	sdiv	r0, r0, sl
 8015476:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015478:	9b01      	ldr	r3, [sp, #4]
 801547a:	1a12      	subs	r2, r2, r0
 801547c:	4619      	mov	r1, r3
 801547e:	a80e      	add	r0, sp, #56	; 0x38
 8015480:	f010 fe1e 	bl	80260c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015486:	b98b      	cbnz	r3, 80154ac <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8015488:	1bad      	subs	r5, r5, r6
 801548a:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 801548e:	da04      	bge.n	801549a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8015490:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 8015494:	a80e      	add	r0, sp, #56	; 0x38
 8015496:	f010 fe13 	bl	80260c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801549a:	21ff      	movs	r1, #255	; 0xff
 801549c:	a80e      	add	r0, sp, #56	; 0x38
 801549e:	f010 fe8b 	bl	80261b8 <_ZN8touchgfx6Canvas6renderEh>
 80154a2:	4604      	mov	r4, r0
 80154a4:	a80e      	add	r0, sp, #56	; 0x38
 80154a6:	f7ff fc3d 	bl	8014d24 <_ZN8touchgfx6CanvasD1Ev>
 80154aa:	e718      	b.n	80152de <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xec>
 80154ac:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 80154b0:	429a      	cmp	r2, r3
 80154b2:	f200 8107 	bhi.w	80156c4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d2>
 80154b6:	1bab      	subs	r3, r5, r6
 80154b8:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 80154bc:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80154c0:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 80154c4:	9301      	str	r3, [sp, #4]
 80154c6:	da43      	bge.n	8015550 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 80154c8:	4628      	mov	r0, r5
 80154ca:	f7ff fb49 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80154ce:	4649      	mov	r1, r9
 80154d0:	900d      	str	r0, [sp, #52]	; 0x34
 80154d2:	a809      	add	r0, sp, #36	; 0x24
 80154d4:	f7ff fb19 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80154d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80154da:	18c3      	adds	r3, r0, r3
 80154dc:	4628      	mov	r0, r5
 80154de:	9303      	str	r3, [sp, #12]
 80154e0:	f7ff fc81 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80154e4:	4649      	mov	r1, r9
 80154e6:	900d      	str	r0, [sp, #52]	; 0x34
 80154e8:	a809      	add	r0, sp, #36	; 0x24
 80154ea:	f7ff fb0e 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80154ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80154f0:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 80154f4:	1a1b      	subs	r3, r3, r0
 80154f6:	9302      	str	r3, [sp, #8]
 80154f8:	9204      	str	r2, [sp, #16]
 80154fa:	eb05 030a 	add.w	r3, r5, sl
 80154fe:	9a04      	ldr	r2, [sp, #16]
 8015500:	4293      	cmp	r3, r2
 8015502:	da25      	bge.n	8015550 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 8015504:	4618      	mov	r0, r3
 8015506:	9306      	str	r3, [sp, #24]
 8015508:	f7ff fb2a 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801550c:	4649      	mov	r1, r9
 801550e:	900d      	str	r0, [sp, #52]	; 0x34
 8015510:	a80a      	add	r0, sp, #40	; 0x28
 8015512:	f7ff fafa 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015516:	2202      	movs	r2, #2
 8015518:	fb90 f0f2 	sdiv	r0, r0, r2
 801551c:	9b03      	ldr	r3, [sp, #12]
 801551e:	9207      	str	r2, [sp, #28]
 8015520:	18c3      	adds	r3, r0, r3
 8015522:	9305      	str	r3, [sp, #20]
 8015524:	9b06      	ldr	r3, [sp, #24]
 8015526:	4618      	mov	r0, r3
 8015528:	f7ff fc5d 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801552c:	a92a      	add	r1, sp, #168	; 0xa8
 801552e:	f841 0d78 	str.w	r0, [r1, #-120]!
 8015532:	a80a      	add	r0, sp, #40	; 0x28
 8015534:	f7ff fae9 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015538:	9a07      	ldr	r2, [sp, #28]
 801553a:	9b02      	ldr	r3, [sp, #8]
 801553c:	fb90 f2f2 	sdiv	r2, r0, r2
 8015540:	9905      	ldr	r1, [sp, #20]
 8015542:	1a9a      	subs	r2, r3, r2
 8015544:	a80e      	add	r0, sp, #56	; 0x38
 8015546:	f010 fdbb 	bl	80260c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801554a:	9b06      	ldr	r3, [sp, #24]
 801554c:	4453      	add	r3, sl
 801554e:	e7d6      	b.n	80154fe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x30c>
 8015550:	455d      	cmp	r5, fp
 8015552:	dd25      	ble.n	80155a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ae>
 8015554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015558:	4628      	mov	r0, r5
 801555a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801555e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015560:	f7ff fafe 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015564:	4641      	mov	r1, r8
 8015566:	900c      	str	r0, [sp, #48]	; 0x30
 8015568:	a80b      	add	r0, sp, #44	; 0x2c
 801556a:	f7ff face 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801556e:	2202      	movs	r2, #2
 8015570:	fb90 f0f2 	sdiv	r0, r0, r2
 8015574:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015576:	9202      	str	r2, [sp, #8]
 8015578:	eb00 0903 	add.w	r9, r0, r3
 801557c:	4628      	mov	r0, r5
 801557e:	f7ff fc32 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015582:	a92a      	add	r1, sp, #168	; 0xa8
 8015584:	f841 0d74 	str.w	r0, [r1, #-116]!
 8015588:	a80b      	add	r0, sp, #44	; 0x2c
 801558a:	f7ff fabe 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801558e:	9a02      	ldr	r2, [sp, #8]
 8015590:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015592:	fb90 f2f2 	sdiv	r2, r0, r2
 8015596:	4649      	mov	r1, r9
 8015598:	1a9a      	subs	r2, r3, r2
 801559a:	a80e      	add	r0, sp, #56	; 0x38
 801559c:	f010 fd90 	bl	80260c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80155a0:	46d9      	mov	r9, fp
 80155a2:	2502      	movs	r5, #2
 80155a4:	45b1      	cmp	r9, r6
 80155a6:	db25      	blt.n	80155f4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x402>
 80155a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155ac:	4648      	mov	r0, r9
 80155ae:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80155b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80155b4:	f7ff fad4 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80155b8:	4641      	mov	r1, r8
 80155ba:	900c      	str	r0, [sp, #48]	; 0x30
 80155bc:	a80b      	add	r0, sp, #44	; 0x2c
 80155be:	f7ff faa4 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80155c2:	fb90 f0f5 	sdiv	r0, r0, r5
 80155c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80155c8:	eb00 0b03 	add.w	fp, r0, r3
 80155cc:	4648      	mov	r0, r9
 80155ce:	f7ff fc0a 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80155d2:	a90d      	add	r1, sp, #52	; 0x34
 80155d4:	900d      	str	r0, [sp, #52]	; 0x34
 80155d6:	a80b      	add	r0, sp, #44	; 0x2c
 80155d8:	f7ff fa97 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80155dc:	fb90 f0f5 	sdiv	r0, r0, r5
 80155e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80155e2:	4659      	mov	r1, fp
 80155e4:	1a12      	subs	r2, r2, r0
 80155e6:	a80e      	add	r0, sp, #56	; 0x38
 80155e8:	46cb      	mov	fp, r9
 80155ea:	f010 fd69 	bl	80260c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80155ee:	eba9 0907 	sub.w	r9, r9, r7
 80155f2:	e7d7      	b.n	80155a4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3b2>
 80155f4:	455e      	cmp	r6, fp
 80155f6:	da22      	bge.n	801563e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x44c>
 80155f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155fc:	4630      	mov	r0, r6
 80155fe:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8015602:	930b      	str	r3, [sp, #44]	; 0x2c
 8015604:	f7ff faac 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015608:	4641      	mov	r1, r8
 801560a:	900c      	str	r0, [sp, #48]	; 0x30
 801560c:	a80b      	add	r0, sp, #44	; 0x2c
 801560e:	f7ff fa7c 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015612:	2502      	movs	r5, #2
 8015614:	fb90 f0f5 	sdiv	r0, r0, r5
 8015618:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801561a:	4407      	add	r7, r0
 801561c:	4630      	mov	r0, r6
 801561e:	f7ff fbe2 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015622:	a92a      	add	r1, sp, #168	; 0xa8
 8015624:	f841 0d74 	str.w	r0, [r1, #-116]!
 8015628:	a80b      	add	r0, sp, #44	; 0x2c
 801562a:	f7ff fa6e 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801562e:	fb90 f0f5 	sdiv	r0, r0, r5
 8015632:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015634:	4639      	mov	r1, r7
 8015636:	1a12      	subs	r2, r2, r0
 8015638:	a80e      	add	r0, sp, #56	; 0x38
 801563a:	f010 fd41 	bl	80260c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801563e:	9b01      	ldr	r3, [sp, #4]
 8015640:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8015644:	f6bf af29 	bge.w	801549a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8015648:	4630      	mov	r0, r6
 801564a:	f7ff fa89 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801564e:	ad2a      	add	r5, sp, #168	; 0xa8
 8015650:	f845 0d74 	str.w	r0, [r5, #-116]!
 8015654:	4629      	mov	r1, r5
 8015656:	a809      	add	r0, sp, #36	; 0x24
 8015658:	f7ff fa57 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801565c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801565e:	f04f 0b02 	mov.w	fp, #2
 8015662:	eb00 0903 	add.w	r9, r0, r3
 8015666:	4630      	mov	r0, r6
 8015668:	f7ff fbbd 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801566c:	4629      	mov	r1, r5
 801566e:	900d      	str	r0, [sp, #52]	; 0x34
 8015670:	a809      	add	r0, sp, #36	; 0x24
 8015672:	f7ff fa4a 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015676:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015678:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 801567c:	eba3 0800 	sub.w	r8, r3, r0
 8015680:	4454      	add	r4, sl
 8015682:	42b4      	cmp	r4, r6
 8015684:	f6bf af09 	bge.w	801549a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8015688:	4620      	mov	r0, r4
 801568a:	f7ff fa69 	bl	8014b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801568e:	4629      	mov	r1, r5
 8015690:	900d      	str	r0, [sp, #52]	; 0x34
 8015692:	a80a      	add	r0, sp, #40	; 0x28
 8015694:	f7ff fa39 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015698:	fb90 f0fb 	sdiv	r0, r0, fp
 801569c:	eb00 0709 	add.w	r7, r0, r9
 80156a0:	4620      	mov	r0, r4
 80156a2:	f7ff fba0 	bl	8014de6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80156a6:	a90c      	add	r1, sp, #48	; 0x30
 80156a8:	900c      	str	r0, [sp, #48]	; 0x30
 80156aa:	a80a      	add	r0, sp, #40	; 0x28
 80156ac:	f7ff fa2d 	bl	8014b0a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80156b0:	fb90 f2fb 	sdiv	r2, r0, fp
 80156b4:	4639      	mov	r1, r7
 80156b6:	eba8 0202 	sub.w	r2, r8, r2
 80156ba:	a80e      	add	r0, sp, #56	; 0x38
 80156bc:	f010 fd00 	bl	80260c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80156c0:	4454      	add	r4, sl
 80156c2:	e7de      	b.n	8015682 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x490>
 80156c4:	2400      	movs	r4, #0
 80156c6:	e6ed      	b.n	80154a4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

080156c8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80156c8:	2200      	movs	r2, #0
 80156ca:	b510      	push	{r4, lr}
 80156cc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80156d0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80156d4:	8002      	strh	r2, [r0, #0]
 80156d6:	8042      	strh	r2, [r0, #2]
 80156d8:	8084      	strh	r4, [r0, #4]
 80156da:	80c1      	strh	r1, [r0, #6]
 80156dc:	bd10      	pop	{r4, pc}
	...

080156e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80156e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80156e2:	6803      	ldr	r3, [r0, #0]
 80156e4:	460d      	mov	r5, r1
 80156e6:	4604      	mov	r4, r0
 80156e8:	4601      	mov	r1, r0
 80156ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80156ec:	a802      	add	r0, sp, #8
 80156ee:	4798      	blx	r3
 80156f0:	466b      	mov	r3, sp
 80156f2:	6828      	ldr	r0, [r5, #0]
 80156f4:	6869      	ldr	r1, [r5, #4]
 80156f6:	c303      	stmia	r3!, {r0, r1}
 80156f8:	4668      	mov	r0, sp
 80156fa:	4619      	mov	r1, r3
 80156fc:	f7fe f9e4 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 8015700:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015702:	b1a8      	cbz	r0, 8015730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8015704:	6803      	ldr	r3, [r0, #0]
 8015706:	1d21      	adds	r1, r4, #4
 8015708:	68db      	ldr	r3, [r3, #12]
 801570a:	4798      	blx	r3
 801570c:	b180      	cbz	r0, 8015730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801570e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8015712:	2b00      	cmp	r3, #0
 8015714:	dd0c      	ble.n	8015730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8015716:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801571a:	2d00      	cmp	r5, #0
 801571c:	dd08      	ble.n	8015730 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801571e:	4a2d      	ldr	r2, [pc, #180]	; (80157d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8015720:	7812      	ldrb	r2, [r2, #0]
 8015722:	b13a      	cbz	r2, 8015734 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8015724:	2a01      	cmp	r2, #1
 8015726:	d02d      	beq.n	8015784 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8015728:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801572a:	6803      	ldr	r3, [r0, #0]
 801572c:	691b      	ldr	r3, [r3, #16]
 801572e:	4798      	blx	r3
 8015730:	b004      	add	sp, #16
 8015732:	bd70      	pop	{r4, r5, r6, pc}
 8015734:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015738:	441d      	add	r5, r3
 801573a:	b2ad      	uxth	r5, r5
 801573c:	b22e      	sxth	r6, r5
 801573e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8015742:	42b3      	cmp	r3, r6
 8015744:	daf0      	bge.n	8015728 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015746:	6823      	ldr	r3, [r4, #0]
 8015748:	4669      	mov	r1, sp
 801574a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801574c:	4620      	mov	r0, r4
 801574e:	4798      	blx	r3
 8015750:	b940      	cbnz	r0, 8015764 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8015752:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015756:	2b01      	cmp	r3, #1
 8015758:	d004      	beq.n	8015764 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801575a:	3301      	adds	r3, #1
 801575c:	105b      	asrs	r3, r3, #1
 801575e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015762:	e7f0      	b.n	8015746 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8015764:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015768:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801576c:	4413      	add	r3, r2
 801576e:	b29b      	uxth	r3, r3
 8015770:	441a      	add	r2, r3
 8015772:	b212      	sxth	r2, r2
 8015774:	4296      	cmp	r6, r2
 8015776:	f8ad 3002 	strh.w	r3, [sp, #2]
 801577a:	dae0      	bge.n	801573e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801577c:	1aeb      	subs	r3, r5, r3
 801577e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015782:	e7dc      	b.n	801573e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8015784:	f8bd 5000 	ldrh.w	r5, [sp]
 8015788:	441d      	add	r5, r3
 801578a:	b2ad      	uxth	r5, r5
 801578c:	b22e      	sxth	r6, r5
 801578e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8015792:	42b3      	cmp	r3, r6
 8015794:	dac8      	bge.n	8015728 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015796:	6823      	ldr	r3, [r4, #0]
 8015798:	4669      	mov	r1, sp
 801579a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801579c:	4620      	mov	r0, r4
 801579e:	4798      	blx	r3
 80157a0:	b940      	cbnz	r0, 80157b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80157a2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80157a6:	2b01      	cmp	r3, #1
 80157a8:	d004      	beq.n	80157b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80157aa:	3301      	adds	r3, #1
 80157ac:	105b      	asrs	r3, r3, #1
 80157ae:	f8ad 3004 	strh.w	r3, [sp, #4]
 80157b2:	e7f0      	b.n	8015796 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 80157b4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80157b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80157bc:	4413      	add	r3, r2
 80157be:	b29b      	uxth	r3, r3
 80157c0:	441a      	add	r2, r3
 80157c2:	b212      	sxth	r2, r2
 80157c4:	4296      	cmp	r6, r2
 80157c6:	f8ad 3000 	strh.w	r3, [sp]
 80157ca:	dae0      	bge.n	801578e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80157cc:	1aeb      	subs	r3, r5, r3
 80157ce:	f8ad 3004 	strh.w	r3, [sp, #4]
 80157d2:	e7dc      	b.n	801578e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80157d4:	2004f6c0 	.word	0x2004f6c0

080157d8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80157d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80157da:	6803      	ldr	r3, [r0, #0]
 80157dc:	4604      	mov	r4, r0
 80157de:	4601      	mov	r1, r0
 80157e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80157e2:	4668      	mov	r0, sp
 80157e4:	4798      	blx	r3
 80157e6:	2100      	movs	r1, #0
 80157e8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80157ec:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80157f0:	9102      	str	r1, [sp, #8]
 80157f2:	4668      	mov	r0, sp
 80157f4:	a902      	add	r1, sp, #8
 80157f6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80157fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80157fe:	f7fe f963 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 8015802:	6823      	ldr	r3, [r4, #0]
 8015804:	4669      	mov	r1, sp
 8015806:	691b      	ldr	r3, [r3, #16]
 8015808:	4620      	mov	r0, r4
 801580a:	4798      	blx	r3
 801580c:	b004      	add	sp, #16
 801580e:	bd10      	pop	{r4, pc}

08015810 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8015810:	2101      	movs	r1, #1
 8015812:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8015816:	490b      	ldr	r1, [pc, #44]	; (8015844 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8015818:	2200      	movs	r2, #0
 801581a:	6001      	str	r1, [r0, #0]
 801581c:	21ff      	movs	r1, #255	; 0xff
 801581e:	8082      	strh	r2, [r0, #4]
 8015820:	80c2      	strh	r2, [r0, #6]
 8015822:	8102      	strh	r2, [r0, #8]
 8015824:	8142      	strh	r2, [r0, #10]
 8015826:	8182      	strh	r2, [r0, #12]
 8015828:	81c2      	strh	r2, [r0, #14]
 801582a:	8202      	strh	r2, [r0, #16]
 801582c:	8242      	strh	r2, [r0, #18]
 801582e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015832:	61c2      	str	r2, [r0, #28]
 8015834:	8402      	strh	r2, [r0, #32]
 8015836:	8442      	strh	r2, [r0, #34]	; 0x22
 8015838:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801583c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8015840:	6282      	str	r2, [r0, #40]	; 0x28
 8015842:	4770      	bx	lr
 8015844:	0802942c 	.word	0x0802942c

08015848 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8015848:	b508      	push	{r3, lr}
 801584a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801584e:	b10b      	cbz	r3, 8015854 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8015850:	f7f8 fc38 	bl	800e0c4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8015854:	bd08      	pop	{r3, pc}

08015856 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8015856:	6803      	ldr	r3, [r0, #0]
 8015858:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801585c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801585e:	4718      	bx	r3

08015860 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8015860:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8015864:	b510      	push	{r4, lr}
 8015866:	2bff      	cmp	r3, #255	; 0xff
 8015868:	d104      	bne.n	8015874 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801586a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801586e:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8015870:	429a      	cmp	r2, r3
 8015872:	d105      	bne.n	8015880 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8015874:	2300      	movs	r3, #0
 8015876:	8003      	strh	r3, [r0, #0]
 8015878:	8043      	strh	r3, [r0, #2]
 801587a:	8083      	strh	r3, [r0, #4]
 801587c:	80c3      	strh	r3, [r0, #6]
 801587e:	bd10      	pop	{r4, pc}
 8015880:	2300      	movs	r3, #0
 8015882:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8015886:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801588a:	8003      	strh	r3, [r0, #0]
 801588c:	8043      	strh	r3, [r0, #2]
 801588e:	8084      	strh	r4, [r0, #4]
 8015890:	80c2      	strh	r2, [r0, #6]
 8015892:	e7f4      	b.n	801587e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08015894 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8015894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015898:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801589c:	b087      	sub	sp, #28
 801589e:	4604      	mov	r4, r0
 80158a0:	4689      	mov	r9, r1
 80158a2:	b363      	cbz	r3, 80158fe <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 80158a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80158a8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d027      	beq.n	80158fe <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 80158ae:	ad06      	add	r5, sp, #24
 80158b0:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 80158b4:	4628      	mov	r0, r5
 80158b6:	f004 fcbd 	bl	801a234 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80158ba:	2700      	movs	r7, #0
 80158bc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80158c0:	a904      	add	r1, sp, #16
 80158c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80158c6:	6823      	ldr	r3, [r4, #0]
 80158c8:	f8ad 0014 	strh.w	r0, [sp, #20]
 80158cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ce:	4620      	mov	r0, r4
 80158d0:	9704      	str	r7, [sp, #16]
 80158d2:	4798      	blx	r3
 80158d4:	f7f8 fd62 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 80158d8:	6803      	ldr	r3, [r0, #0]
 80158da:	4606      	mov	r6, r0
 80158dc:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80158e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80158e2:	4628      	mov	r0, r5
 80158e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80158e8:	f004 fd90 	bl	801a40c <_ZNK8touchgfx6Bitmap7getDataEv>
 80158ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80158f0:	4601      	mov	r1, r0
 80158f2:	9300      	str	r3, [sp, #0]
 80158f4:	9701      	str	r7, [sp, #4]
 80158f6:	464b      	mov	r3, r9
 80158f8:	aa04      	add	r2, sp, #16
 80158fa:	4630      	mov	r0, r6
 80158fc:	47c0      	blx	r8
 80158fe:	b007      	add	sp, #28
 8015900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015904 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8015904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015906:	460d      	mov	r5, r1
 8015908:	2100      	movs	r1, #0
 801590a:	4604      	mov	r4, r0
 801590c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015910:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015914:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015918:	6803      	ldr	r3, [r0, #0]
 801591a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015920:	9100      	str	r1, [sp, #0]
 8015922:	4669      	mov	r1, sp
 8015924:	4798      	blx	r3
 8015926:	4621      	mov	r1, r4
 8015928:	a802      	add	r0, sp, #8
 801592a:	f003 f86d 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801592e:	f7f8 fd35 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 8015932:	6803      	ldr	r3, [r0, #0]
 8015934:	aa02      	add	r2, sp, #8
 8015936:	695e      	ldr	r6, [r3, #20]
 8015938:	4669      	mov	r1, sp
 801593a:	462b      	mov	r3, r5
 801593c:	47b0      	blx	r6
 801593e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015942:	2800      	cmp	r0, #0
 8015944:	bf08      	it	eq
 8015946:	461d      	moveq	r5, r3
 8015948:	84e5      	strh	r5, [r4, #38]	; 0x26
 801594a:	b004      	add	sp, #16
 801594c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015950 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8015950:	2200      	movs	r2, #0
 8015952:	8082      	strh	r2, [r0, #4]
 8015954:	80c2      	strh	r2, [r0, #6]
 8015956:	8102      	strh	r2, [r0, #8]
 8015958:	8142      	strh	r2, [r0, #10]
 801595a:	8182      	strh	r2, [r0, #12]
 801595c:	81c2      	strh	r2, [r0, #14]
 801595e:	8202      	strh	r2, [r0, #16]
 8015960:	8242      	strh	r2, [r0, #18]
 8015962:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015966:	61c2      	str	r2, [r0, #28]
 8015968:	8402      	strh	r2, [r0, #32]
 801596a:	8442      	strh	r2, [r0, #34]	; 0x22
 801596c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015970:	2201      	movs	r2, #1
 8015972:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8015976:	4a04      	ldr	r2, [pc, #16]	; (8015988 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 8015978:	6002      	str	r2, [r0, #0]
 801597a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801597e:	84c2      	strh	r2, [r0, #38]	; 0x26
 8015980:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8015984:	4770      	bx	lr
 8015986:	bf00      	nop
 8015988:	080294a4 	.word	0x080294a4

0801598c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801598c:	2300      	movs	r3, #0
 801598e:	8083      	strh	r3, [r0, #4]
 8015990:	80c3      	strh	r3, [r0, #6]
 8015992:	8003      	strh	r3, [r0, #0]
 8015994:	8043      	strh	r3, [r0, #2]
 8015996:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801599a:	2bff      	cmp	r3, #255	; 0xff
 801599c:	bf01      	itttt	eq
 801599e:	890b      	ldrheq	r3, [r1, #8]
 80159a0:	8083      	strheq	r3, [r0, #4]
 80159a2:	894b      	ldrheq	r3, [r1, #10]
 80159a4:	80c3      	strheq	r3, [r0, #6]
 80159a6:	4770      	bx	lr

080159a8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80159a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159aa:	4604      	mov	r4, r0
 80159ac:	466b      	mov	r3, sp
 80159ae:	6808      	ldr	r0, [r1, #0]
 80159b0:	6849      	ldr	r1, [r1, #4]
 80159b2:	c303      	stmia	r3!, {r0, r1}
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	4669      	mov	r1, sp
 80159b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159ba:	4620      	mov	r0, r4
 80159bc:	4798      	blx	r3
 80159be:	4b08      	ldr	r3, [pc, #32]	; (80159e0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80159c6:	b10a      	cbz	r2, 80159cc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80159c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80159ca:	b900      	cbnz	r0, 80159ce <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80159cc:	6898      	ldr	r0, [r3, #8]
 80159ce:	6803      	ldr	r3, [r0, #0]
 80159d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80159d2:	6a1d      	ldr	r5, [r3, #32]
 80159d4:	4669      	mov	r1, sp
 80159d6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80159da:	47a8      	blx	r5
 80159dc:	b003      	add	sp, #12
 80159de:	bd30      	pop	{r4, r5, pc}
 80159e0:	2004f6c8 	.word	0x2004f6c8

080159e4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80159e4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80159e8:	b12a      	cbz	r2, 80159f6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80159ea:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80159ee:	b112      	cbz	r2, 80159f6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80159f0:	6803      	ldr	r3, [r0, #0]
 80159f2:	695b      	ldr	r3, [r3, #20]
 80159f4:	4718      	bx	r3
 80159f6:	4770      	bx	lr

080159f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80159f8:	b570      	push	{r4, r5, r6, lr}
 80159fa:	880b      	ldrh	r3, [r1, #0]
 80159fc:	4604      	mov	r4, r0
 80159fe:	84c3      	strh	r3, [r0, #38]	; 0x26
 8015a00:	4608      	mov	r0, r1
 8015a02:	460d      	mov	r5, r1
 8015a04:	f004 fc16 	bl	801a234 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015a08:	4606      	mov	r6, r0
 8015a0a:	4628      	mov	r0, r5
 8015a0c:	f004 fc46 	bl	801a29c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015a10:	4605      	mov	r5, r0
 8015a12:	6823      	ldr	r3, [r4, #0]
 8015a14:	4631      	mov	r1, r6
 8015a16:	4620      	mov	r0, r4
 8015a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a1a:	4798      	blx	r3
 8015a1c:	6823      	ldr	r3, [r4, #0]
 8015a1e:	4629      	mov	r1, r5
 8015a20:	4620      	mov	r0, r4
 8015a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a28:	4718      	bx	r3

08015a2a <_ZNK8touchgfx5Image12getSolidRectEv>:
 8015a2a:	b510      	push	{r4, lr}
 8015a2c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8015a30:	4604      	mov	r4, r0
 8015a32:	2bff      	cmp	r3, #255	; 0xff
 8015a34:	d006      	beq.n	8015a44 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8015a36:	2300      	movs	r3, #0
 8015a38:	8003      	strh	r3, [r0, #0]
 8015a3a:	8043      	strh	r3, [r0, #2]
 8015a3c:	8083      	strh	r3, [r0, #4]
 8015a3e:	80c3      	strh	r3, [r0, #6]
 8015a40:	4620      	mov	r0, r4
 8015a42:	bd10      	pop	{r4, pc}
 8015a44:	3126      	adds	r1, #38	; 0x26
 8015a46:	f004 fc5d 	bl	801a304 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015a4a:	e7f9      	b.n	8015a40 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08015a4c <_ZNK8touchgfx5Image17invalidateContentEv>:
 8015a4c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8015a50:	b12a      	cbz	r2, 8015a5e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015a52:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8015a56:	b112      	cbz	r2, 8015a5e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015a58:	6803      	ldr	r3, [r0, #0]
 8015a5a:	695b      	ldr	r3, [r3, #20]
 8015a5c:	4718      	bx	r3
 8015a5e:	4770      	bx	lr

08015a60 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8015a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a64:	4604      	mov	r4, r0
 8015a66:	2500      	movs	r5, #0
 8015a68:	f854 3b26 	ldr.w	r3, [r4], #38
 8015a6c:	b088      	sub	sp, #32
 8015a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a70:	460f      	mov	r7, r1
 8015a72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015a76:	a904      	add	r1, sp, #16
 8015a78:	4606      	mov	r6, r0
 8015a7a:	4798      	blx	r3
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	f004 fbd9 	bl	801a234 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015a82:	4680      	mov	r8, r0
 8015a84:	4620      	mov	r0, r4
 8015a86:	f004 fc09 	bl	801a29c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015a8a:	9506      	str	r5, [sp, #24]
 8015a8c:	ad06      	add	r5, sp, #24
 8015a8e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015a92:	4639      	mov	r1, r7
 8015a94:	4628      	mov	r0, r5
 8015a96:	f8ad 801c 	strh.w	r8, [sp, #28]
 8015a9a:	f7fe f815 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 8015a9e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	dd19      	ble.n	8015ada <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015aa6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	dd15      	ble.n	8015ada <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015aae:	4b0c      	ldr	r3, [pc, #48]	; (8015ae0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015ab6:	b10a      	cbz	r2, 8015abc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8015ab8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015aba:	b900      	cbnz	r0, 8015abe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8015abc:	6898      	ldr	r0, [r3, #8]
 8015abe:	2701      	movs	r7, #1
 8015ac0:	6801      	ldr	r1, [r0, #0]
 8015ac2:	9702      	str	r7, [sp, #8]
 8015ac4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8015ac8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015acc:	e9cd 5600 	strd	r5, r6, [sp]
 8015ad0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015ad4:	688d      	ldr	r5, [r1, #8]
 8015ad6:	4621      	mov	r1, r4
 8015ad8:	47a8      	blx	r5
 8015ada:	b008      	add	sp, #32
 8015adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae0:	2004f6c8 	.word	0x2004f6c8

08015ae4 <_ZN8touchgfx7OutlineD1Ev>:
 8015ae4:	4770      	bx	lr

08015ae6 <_ZN8touchgfx7OutlineD0Ev>:
 8015ae6:	b510      	push	{r4, lr}
 8015ae8:	4604      	mov	r4, r0
 8015aea:	2130      	movs	r1, #48	; 0x30
 8015aec:	f010 fc62 	bl	80263b4 <_ZdlPvj>
 8015af0:	4620      	mov	r0, r4
 8015af2:	bd10      	pop	{r4, pc}

08015af4 <_ZN8touchgfx7Outline5resetEv>:
 8015af4:	b510      	push	{r4, lr}
 8015af6:	4604      	mov	r4, r0
 8015af8:	f000 fe8a 	bl	8016810 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8015afc:	60e0      	str	r0, [r4, #12]
 8015afe:	f000 fe8d 	bl	801681c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8015b02:	2200      	movs	r2, #0
 8015b04:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8015b08:	68e3      	ldr	r3, [r4, #12]
 8015b0a:	08c0      	lsrs	r0, r0, #3
 8015b0c:	3801      	subs	r0, #1
 8015b0e:	6123      	str	r3, [r4, #16]
 8015b10:	6060      	str	r0, [r4, #4]
 8015b12:	60a2      	str	r2, [r4, #8]
 8015b14:	8019      	strh	r1, [r3, #0]
 8015b16:	8059      	strh	r1, [r3, #2]
 8015b18:	809a      	strh	r2, [r3, #4]
 8015b1a:	80da      	strh	r2, [r3, #6]
 8015b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b1e:	f023 0301 	bic.w	r3, r3, #1
 8015b22:	f043 0302 	orr.w	r3, r3, #2
 8015b26:	6263      	str	r3, [r4, #36]	; 0x24
 8015b28:	bd10      	pop	{r4, pc}
	...

08015b2c <_ZN8touchgfx7OutlineC1Ev>:
 8015b2c:	4b0a      	ldr	r3, [pc, #40]	; (8015b58 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8015b2e:	b510      	push	{r4, lr}
 8015b30:	6003      	str	r3, [r0, #0]
 8015b32:	2300      	movs	r3, #0
 8015b34:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8015b38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b3c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8015b40:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8015b44:	6243      	str	r3, [r0, #36]	; 0x24
 8015b46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015b4a:	4604      	mov	r4, r0
 8015b4c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8015b50:	f7ff ffd0 	bl	8015af4 <_ZN8touchgfx7Outline5resetEv>
 8015b54:	4620      	mov	r0, r4
 8015b56:	bd10      	pop	{r4, pc}
 8015b58:	080295e8 	.word	0x080295e8

08015b5c <_ZN8touchgfx7Outline10renderLineEiiii>:
 8015b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b60:	b093      	sub	sp, #76	; 0x4c
 8015b62:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015b64:	9305      	str	r3, [sp, #20]
 8015b66:	f004 051f 	and.w	r5, r4, #31
 8015b6a:	1153      	asrs	r3, r2, #5
 8015b6c:	9504      	str	r5, [sp, #16]
 8015b6e:	1156      	asrs	r6, r2, #5
 8015b70:	1165      	asrs	r5, r4, #5
 8015b72:	9303      	str	r3, [sp, #12]
 8015b74:	42ae      	cmp	r6, r5
 8015b76:	ea4f 1364 	mov.w	r3, r4, asr #5
 8015b7a:	9306      	str	r3, [sp, #24]
 8015b7c:	f002 031f 	and.w	r3, r2, #31
 8015b80:	f040 80f8 	bne.w	8015d74 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8015b84:	9c04      	ldr	r4, [sp, #16]
 8015b86:	9a05      	ldr	r2, [sp, #20]
 8015b88:	42a3      	cmp	r3, r4
 8015b8a:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8015b8e:	6902      	ldr	r2, [r0, #16]
 8015b90:	d125      	bne.n	8015bde <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8015b92:	f9b2 3000 	ldrsh.w	r3, [r2]
 8015b96:	459e      	cmp	lr, r3
 8015b98:	d103      	bne.n	8015ba2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 8015b9a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015b9e:	429e      	cmp	r6, r3
 8015ba0:	d035      	beq.n	8015c0e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015ba2:	88d1      	ldrh	r1, [r2, #6]
 8015ba4:	8893      	ldrh	r3, [r2, #4]
 8015ba6:	430b      	orrs	r3, r1
 8015ba8:	d010      	beq.n	8015bcc <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8015baa:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	db0c      	blt.n	8015bcc <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8015bb2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015bb4:	428b      	cmp	r3, r1
 8015bb6:	da09      	bge.n	8015bcc <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8015bb8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015bbc:	428b      	cmp	r3, r1
 8015bbe:	bf38      	it	cc
 8015bc0:	3208      	addcc	r2, #8
 8015bc2:	f103 0301 	add.w	r3, r3, #1
 8015bc6:	bf38      	it	cc
 8015bc8:	6102      	strcc	r2, [r0, #16]
 8015bca:	6083      	str	r3, [r0, #8]
 8015bcc:	6903      	ldr	r3, [r0, #16]
 8015bce:	9a03      	ldr	r2, [sp, #12]
 8015bd0:	f8a3 e000 	strh.w	lr, [r3]
 8015bd4:	805a      	strh	r2, [r3, #2]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	809a      	strh	r2, [r3, #4]
 8015bda:	80da      	strh	r2, [r3, #6]
 8015bdc:	e017      	b.n	8015c0e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015bde:	9c05      	ldr	r4, [sp, #20]
 8015be0:	114e      	asrs	r6, r1, #5
 8015be2:	f004 041f 	and.w	r4, r4, #31
 8015be6:	9402      	str	r4, [sp, #8]
 8015be8:	9c04      	ldr	r4, [sp, #16]
 8015bea:	4576      	cmp	r6, lr
 8015bec:	f001 0c1f 	and.w	ip, r1, #31
 8015bf0:	eba4 0403 	sub.w	r4, r4, r3
 8015bf4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8015bf8:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8015bfc:	d10a      	bne.n	8015c14 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 8015bfe:	9b02      	ldr	r3, [sp, #8]
 8015c00:	44a0      	add	r8, r4
 8015c02:	449c      	add	ip, r3
 8015c04:	fb04 a40c 	mla	r4, r4, ip, sl
 8015c08:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015c0c:	80d4      	strh	r4, [r2, #6]
 8015c0e:	b013      	add	sp, #76	; 0x4c
 8015c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c14:	9d05      	ldr	r5, [sp, #20]
 8015c16:	1a69      	subs	r1, r5, r1
 8015c18:	bf5b      	ittet	pl
 8015c1a:	f1cc 0520 	rsbpl	r5, ip, #32
 8015c1e:	436c      	mulpl	r4, r5
 8015c20:	2500      	movmi	r5, #0
 8015c22:	2520      	movpl	r5, #32
 8015c24:	bf44      	itt	mi
 8015c26:	fb04 f40c 	mulmi.w	r4, r4, ip
 8015c2a:	4249      	negmi	r1, r1
 8015c2c:	9501      	str	r5, [sp, #4]
 8015c2e:	fb94 f5f1 	sdiv	r5, r4, r1
 8015c32:	bf54      	ite	pl
 8015c34:	f04f 0901 	movpl.w	r9, #1
 8015c38:	f04f 39ff 	movmi.w	r9, #4294967295
 8015c3c:	fb01 4415 	mls	r4, r1, r5, r4
 8015c40:	9f01      	ldr	r7, [sp, #4]
 8015c42:	2c00      	cmp	r4, #0
 8015c44:	bfb8      	it	lt
 8015c46:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8015c4a:	44bc      	add	ip, r7
 8015c4c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8015c50:	44a8      	add	r8, r5
 8015c52:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015c56:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015c5a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015c5e:	bfb8      	it	lt
 8015c60:	1864      	addlt	r4, r4, r1
 8015c62:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8015c66:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8015c6a:	444e      	add	r6, r9
 8015c6c:	ea58 0202 	orrs.w	r2, r8, r2
 8015c70:	d011      	beq.n	8015c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8015c72:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8015c76:	f1b8 0f00 	cmp.w	r8, #0
 8015c7a:	db0c      	blt.n	8015c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8015c7c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015c7e:	4590      	cmp	r8, r2
 8015c80:	da09      	bge.n	8015c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8015c82:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8015c86:	4590      	cmp	r8, r2
 8015c88:	bf3c      	itt	cc
 8015c8a:	f10c 0208 	addcc.w	r2, ip, #8
 8015c8e:	6102      	strcc	r2, [r0, #16]
 8015c90:	f108 0201 	add.w	r2, r8, #1
 8015c94:	6082      	str	r2, [r0, #8]
 8015c96:	2700      	movs	r7, #0
 8015c98:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015c9c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8015ca0:	45b6      	cmp	lr, r6
 8015ca2:	f8ac 6000 	strh.w	r6, [ip]
 8015ca6:	f8ac 2002 	strh.w	r2, [ip, #2]
 8015caa:	f8ac 7004 	strh.w	r7, [ip, #4]
 8015cae:	f8ac 7006 	strh.w	r7, [ip, #6]
 8015cb2:	442b      	add	r3, r5
 8015cb4:	d04d      	beq.n	8015d52 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8015cb6:	9f04      	ldr	r7, [sp, #16]
 8015cb8:	f04f 0a00 	mov.w	sl, #0
 8015cbc:	1aff      	subs	r7, r7, r3
 8015cbe:	443d      	add	r5, r7
 8015cc0:	016d      	lsls	r5, r5, #5
 8015cc2:	fb95 f8f1 	sdiv	r8, r5, r1
 8015cc6:	fb01 5518 	mls	r5, r1, r8, r5
 8015cca:	2d00      	cmp	r5, #0
 8015ccc:	bfb8      	it	lt
 8015cce:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8015cd2:	f108 0701 	add.w	r7, r8, #1
 8015cd6:	bfb8      	it	lt
 8015cd8:	186d      	addlt	r5, r5, r1
 8015cda:	1a64      	subs	r4, r4, r1
 8015cdc:	9703      	str	r7, [sp, #12]
 8015cde:	1964      	adds	r4, r4, r5
 8015ce0:	bf48      	it	mi
 8015ce2:	4647      	movmi	r7, r8
 8015ce4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015ce8:	bf58      	it	pl
 8015cea:	9f03      	ldrpl	r7, [sp, #12]
 8015cec:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8015cf0:	443b      	add	r3, r7
 8015cf2:	44bb      	add	fp, r7
 8015cf4:	f8ac b004 	strh.w	fp, [ip, #4]
 8015cf8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015cfc:	bf58      	it	pl
 8015cfe:	1a64      	subpl	r4, r4, r1
 8015d00:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015d04:	f8ac b006 	strh.w	fp, [ip, #6]
 8015d08:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015d0c:	444e      	add	r6, r9
 8015d0e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015d12:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015d16:	ea5b 0707 	orrs.w	r7, fp, r7
 8015d1a:	d011      	beq.n	8015d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015d1c:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8015d20:	f1bb 0f00 	cmp.w	fp, #0
 8015d24:	db0c      	blt.n	8015d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015d26:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015d28:	45bb      	cmp	fp, r7
 8015d2a:	da09      	bge.n	8015d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015d2c:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015d30:	45bb      	cmp	fp, r7
 8015d32:	bf3c      	itt	cc
 8015d34:	f10c 0708 	addcc.w	r7, ip, #8
 8015d38:	6107      	strcc	r7, [r0, #16]
 8015d3a:	f10b 0701 	add.w	r7, fp, #1
 8015d3e:	6087      	str	r7, [r0, #8]
 8015d40:	6907      	ldr	r7, [r0, #16]
 8015d42:	45b6      	cmp	lr, r6
 8015d44:	803e      	strh	r6, [r7, #0]
 8015d46:	807a      	strh	r2, [r7, #2]
 8015d48:	f8a7 a004 	strh.w	sl, [r7, #4]
 8015d4c:	f8a7 a006 	strh.w	sl, [r7, #6]
 8015d50:	d1c5      	bne.n	8015cde <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8015d52:	9a04      	ldr	r2, [sp, #16]
 8015d54:	1ad3      	subs	r3, r2, r3
 8015d56:	6902      	ldr	r2, [r0, #16]
 8015d58:	8891      	ldrh	r1, [r2, #4]
 8015d5a:	88d6      	ldrh	r6, [r2, #6]
 8015d5c:	4419      	add	r1, r3
 8015d5e:	8091      	strh	r1, [r2, #4]
 8015d60:	9902      	ldr	r1, [sp, #8]
 8015d62:	f101 0c20 	add.w	ip, r1, #32
 8015d66:	9901      	ldr	r1, [sp, #4]
 8015d68:	ebac 0c01 	sub.w	ip, ip, r1
 8015d6c:	fb03 630c 	mla	r3, r3, ip, r6
 8015d70:	80d3      	strh	r3, [r2, #6]
 8015d72:	e74c      	b.n	8015c0e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015d74:	9d05      	ldr	r5, [sp, #20]
 8015d76:	1aa2      	subs	r2, r4, r2
 8015d78:	eba5 0501 	sub.w	r5, r5, r1
 8015d7c:	9508      	str	r5, [sp, #32]
 8015d7e:	9202      	str	r2, [sp, #8]
 8015d80:	f140 8128 	bpl.w	8015fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8015d84:	9a03      	ldr	r2, [sp, #12]
 8015d86:	2a00      	cmp	r2, #0
 8015d88:	f6ff af41 	blt.w	8015c0e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8015d90:	9a02      	ldr	r2, [sp, #8]
 8015d92:	940b      	str	r4, [sp, #44]	; 0x2c
 8015d94:	4252      	negs	r2, r2
 8015d96:	9202      	str	r2, [sp, #8]
 8015d98:	9a06      	ldr	r2, [sp, #24]
 8015d9a:	2400      	movs	r4, #0
 8015d9c:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8015da0:	9206      	str	r2, [sp, #24]
 8015da2:	462a      	mov	r2, r5
 8015da4:	435a      	muls	r2, r3
 8015da6:	9401      	str	r4, [sp, #4]
 8015da8:	9c02      	ldr	r4, [sp, #8]
 8015daa:	9d02      	ldr	r5, [sp, #8]
 8015dac:	fb92 f4f4 	sdiv	r4, r2, r4
 8015db0:	fb05 2214 	mls	r2, r5, r4, r2
 8015db4:	2a00      	cmp	r2, #0
 8015db6:	9207      	str	r2, [sp, #28]
 8015db8:	bfbc      	itt	lt
 8015dba:	1952      	addlt	r2, r2, r5
 8015dbc:	9207      	strlt	r2, [sp, #28]
 8015dbe:	9a01      	ldr	r2, [sp, #4]
 8015dc0:	bfb8      	it	lt
 8015dc2:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015dc6:	eb04 0901 	add.w	r9, r4, r1
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	ea4f 1669 	mov.w	r6, r9, asr #5
 8015dd0:	6905      	ldr	r5, [r0, #16]
 8015dd2:	f040 8112 	bne.w	8015ffa <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8015dd6:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015dda:	429e      	cmp	r6, r3
 8015ddc:	d104      	bne.n	8015de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 8015dde:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015de2:	9a03      	ldr	r2, [sp, #12]
 8015de4:	429a      	cmp	r2, r3
 8015de6:	d01b      	beq.n	8015e20 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8015de8:	88ea      	ldrh	r2, [r5, #6]
 8015dea:	88ab      	ldrh	r3, [r5, #4]
 8015dec:	4313      	orrs	r3, r2
 8015dee:	d010      	beq.n	8015e12 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015df0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015df4:	2a00      	cmp	r2, #0
 8015df6:	db0c      	blt.n	8015e12 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015df8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	da09      	bge.n	8015e12 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015dfe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8015e02:	429a      	cmp	r2, r3
 8015e04:	bf38      	it	cc
 8015e06:	3508      	addcc	r5, #8
 8015e08:	f102 0201 	add.w	r2, r2, #1
 8015e0c:	bf38      	it	cc
 8015e0e:	6105      	strcc	r5, [r0, #16]
 8015e10:	6082      	str	r2, [r0, #8]
 8015e12:	6903      	ldr	r3, [r0, #16]
 8015e14:	9a03      	ldr	r2, [sp, #12]
 8015e16:	801e      	strh	r6, [r3, #0]
 8015e18:	805a      	strh	r2, [r3, #2]
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	809a      	strh	r2, [r3, #4]
 8015e1e:	80da      	strh	r2, [r3, #6]
 8015e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e22:	9a03      	ldr	r2, [sp, #12]
 8015e24:	6901      	ldr	r1, [r0, #16]
 8015e26:	441a      	add	r2, r3
 8015e28:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015e2c:	42b3      	cmp	r3, r6
 8015e2e:	d103      	bne.n	8015e38 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8015e30:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015e34:	429a      	cmp	r2, r3
 8015e36:	d01a      	beq.n	8015e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8015e38:	88cc      	ldrh	r4, [r1, #6]
 8015e3a:	888b      	ldrh	r3, [r1, #4]
 8015e3c:	4323      	orrs	r3, r4
 8015e3e:	d010      	beq.n	8015e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015e40:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015e44:	2c00      	cmp	r4, #0
 8015e46:	db0c      	blt.n	8015e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015e48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015e4a:	429c      	cmp	r4, r3
 8015e4c:	da09      	bge.n	8015e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015e4e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015e52:	429c      	cmp	r4, r3
 8015e54:	bf38      	it	cc
 8015e56:	3108      	addcc	r1, #8
 8015e58:	f104 0401 	add.w	r4, r4, #1
 8015e5c:	bf38      	it	cc
 8015e5e:	6101      	strcc	r1, [r0, #16]
 8015e60:	6084      	str	r4, [r0, #8]
 8015e62:	2100      	movs	r1, #0
 8015e64:	6903      	ldr	r3, [r0, #16]
 8015e66:	801e      	strh	r6, [r3, #0]
 8015e68:	805a      	strh	r2, [r3, #2]
 8015e6a:	8099      	strh	r1, [r3, #4]
 8015e6c:	80d9      	strh	r1, [r3, #6]
 8015e6e:	9b06      	ldr	r3, [sp, #24]
 8015e70:	4293      	cmp	r3, r2
 8015e72:	f000 8082 	beq.w	8015f7a <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8015e76:	9b08      	ldr	r3, [sp, #32]
 8015e78:	9902      	ldr	r1, [sp, #8]
 8015e7a:	015b      	lsls	r3, r3, #5
 8015e7c:	fb93 f1f1 	sdiv	r1, r3, r1
 8015e80:	9c02      	ldr	r4, [sp, #8]
 8015e82:	9103      	str	r1, [sp, #12]
 8015e84:	fb04 3311 	mls	r3, r4, r1, r3
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	9308      	str	r3, [sp, #32]
 8015e8c:	da04      	bge.n	8015e98 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 8015e8e:	1e4b      	subs	r3, r1, #1
 8015e90:	9303      	str	r3, [sp, #12]
 8015e92:	9b08      	ldr	r3, [sp, #32]
 8015e94:	4423      	add	r3, r4
 8015e96:	9308      	str	r3, [sp, #32]
 8015e98:	464f      	mov	r7, r9
 8015e9a:	2600      	movs	r6, #0
 8015e9c:	9b07      	ldr	r3, [sp, #28]
 8015e9e:	9902      	ldr	r1, [sp, #8]
 8015ea0:	1a5b      	subs	r3, r3, r1
 8015ea2:	9307      	str	r3, [sp, #28]
 8015ea4:	9b01      	ldr	r3, [sp, #4]
 8015ea6:	f1c3 0320 	rsb	r3, r3, #32
 8015eaa:	930e      	str	r3, [sp, #56]	; 0x38
 8015eac:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015eae:	9b01      	ldr	r3, [sp, #4]
 8015eb0:	1a5b      	subs	r3, r3, r1
 8015eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8015eb4:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8015eb8:	185b      	adds	r3, r3, r1
 8015eba:	bf58      	it	pl
 8015ebc:	9902      	ldrpl	r1, [sp, #8]
 8015ebe:	9307      	str	r3, [sp, #28]
 8015ec0:	bf5d      	ittte	pl
 8015ec2:	1a5b      	subpl	r3, r3, r1
 8015ec4:	9307      	strpl	r3, [sp, #28]
 8015ec6:	9b03      	ldrpl	r3, [sp, #12]
 8015ec8:	9903      	ldrmi	r1, [sp, #12]
 8015eca:	bf58      	it	pl
 8015ecc:	1c59      	addpl	r1, r3, #1
 8015ece:	4489      	add	r9, r1
 8015ed0:	2a00      	cmp	r2, #0
 8015ed2:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8015ed6:	db2e      	blt.n	8015f36 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015ed8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015eda:	4293      	cmp	r3, r2
 8015edc:	dd2b      	ble.n	8015f36 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015ede:	9c01      	ldr	r4, [sp, #4]
 8015ee0:	6905      	ldr	r5, [r0, #16]
 8015ee2:	46a0      	mov	r8, r4
 8015ee4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015ee6:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8015eea:	45a0      	cmp	r8, r4
 8015eec:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8015ef0:	f040 8150 	bne.w	8016194 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 8015ef4:	f9b5 1000 	ldrsh.w	r1, [r5]
 8015ef8:	4551      	cmp	r1, sl
 8015efa:	d103      	bne.n	8015f04 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 8015efc:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015f00:	4291      	cmp	r1, r2
 8015f02:	d018      	beq.n	8015f36 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015f04:	ea5c 010e 	orrs.w	r1, ip, lr
 8015f08:	d00f      	beq.n	8015f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8015f0a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015f0e:	2900      	cmp	r1, #0
 8015f10:	db0b      	blt.n	8015f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8015f12:	428b      	cmp	r3, r1
 8015f14:	dd09      	ble.n	8015f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8015f16:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8015f1a:	4299      	cmp	r1, r3
 8015f1c:	bf38      	it	cc
 8015f1e:	3508      	addcc	r5, #8
 8015f20:	f101 0101 	add.w	r1, r1, #1
 8015f24:	bf38      	it	cc
 8015f26:	6105      	strcc	r5, [r0, #16]
 8015f28:	6081      	str	r1, [r0, #8]
 8015f2a:	6903      	ldr	r3, [r0, #16]
 8015f2c:	f8a3 a000 	strh.w	sl, [r3]
 8015f30:	805a      	strh	r2, [r3, #2]
 8015f32:	809e      	strh	r6, [r3, #4]
 8015f34:	80de      	strh	r6, [r3, #6]
 8015f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f38:	6901      	ldr	r1, [r0, #16]
 8015f3a:	441a      	add	r2, r3
 8015f3c:	88cc      	ldrh	r4, [r1, #6]
 8015f3e:	888b      	ldrh	r3, [r1, #4]
 8015f40:	4323      	orrs	r3, r4
 8015f42:	d010      	beq.n	8015f66 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015f44:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015f48:	2c00      	cmp	r4, #0
 8015f4a:	db0c      	blt.n	8015f66 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015f4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015f4e:	429c      	cmp	r4, r3
 8015f50:	da09      	bge.n	8015f66 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015f52:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015f56:	429c      	cmp	r4, r3
 8015f58:	bf38      	it	cc
 8015f5a:	3108      	addcc	r1, #8
 8015f5c:	f104 0401 	add.w	r4, r4, #1
 8015f60:	bf38      	it	cc
 8015f62:	6101      	strcc	r1, [r0, #16]
 8015f64:	6084      	str	r4, [r0, #8]
 8015f66:	6903      	ldr	r3, [r0, #16]
 8015f68:	464f      	mov	r7, r9
 8015f6a:	f8a3 a000 	strh.w	sl, [r3]
 8015f6e:	805a      	strh	r2, [r3, #2]
 8015f70:	809e      	strh	r6, [r3, #4]
 8015f72:	80de      	strh	r6, [r3, #6]
 8015f74:	9b06      	ldr	r3, [sp, #24]
 8015f76:	4293      	cmp	r3, r2
 8015f78:	d19c      	bne.n	8015eb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8015f7a:	9b01      	ldr	r3, [sp, #4]
 8015f7c:	6907      	ldr	r7, [r0, #16]
 8015f7e:	f1c3 0620 	rsb	r6, r3, #32
 8015f82:	9b05      	ldr	r3, [sp, #20]
 8015f84:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8015f88:	9b04      	ldr	r3, [sp, #16]
 8015f8a:	429e      	cmp	r6, r3
 8015f8c:	f040 81cc 	bne.w	8016328 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8015f90:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015f94:	459e      	cmp	lr, r3
 8015f96:	d104      	bne.n	8015fa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8015f98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	f43f ae36 	beq.w	8015c0e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015fa2:	88f9      	ldrh	r1, [r7, #6]
 8015fa4:	88bb      	ldrh	r3, [r7, #4]
 8015fa6:	430b      	orrs	r3, r1
 8015fa8:	d010      	beq.n	8015fcc <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015faa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	db0c      	blt.n	8015fcc <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015fb2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015fb4:	428b      	cmp	r3, r1
 8015fb6:	da09      	bge.n	8015fcc <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015fb8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015fbc:	428b      	cmp	r3, r1
 8015fbe:	bf38      	it	cc
 8015fc0:	3708      	addcc	r7, #8
 8015fc2:	f103 0301 	add.w	r3, r3, #1
 8015fc6:	bf38      	it	cc
 8015fc8:	6107      	strcc	r7, [r0, #16]
 8015fca:	6083      	str	r3, [r0, #8]
 8015fcc:	6903      	ldr	r3, [r0, #16]
 8015fce:	f8a3 e000 	strh.w	lr, [r3]
 8015fd2:	e5ff      	b.n	8015bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8015fd4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015fd6:	9c03      	ldr	r4, [sp, #12]
 8015fd8:	42a2      	cmp	r2, r4
 8015fda:	f6ff ae18 	blt.w	8015c0e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015fde:	9c06      	ldr	r4, [sp, #24]
 8015fe0:	42a2      	cmp	r2, r4
 8015fe2:	bfb8      	it	lt
 8015fe4:	3201      	addlt	r2, #1
 8015fe6:	9c08      	ldr	r4, [sp, #32]
 8015fe8:	bfb8      	it	lt
 8015fea:	9206      	strlt	r2, [sp, #24]
 8015fec:	f1c3 0220 	rsb	r2, r3, #32
 8015ff0:	4362      	muls	r2, r4
 8015ff2:	2401      	movs	r4, #1
 8015ff4:	940b      	str	r4, [sp, #44]	; 0x2c
 8015ff6:	2420      	movs	r4, #32
 8015ff8:	e6d5      	b.n	8015da6 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8015ffa:	f009 021f 	and.w	r2, r9, #31
 8015ffe:	ea4f 1861 	mov.w	r8, r1, asr #5
 8016002:	920c      	str	r2, [sp, #48]	; 0x30
 8016004:	9a01      	ldr	r2, [sp, #4]
 8016006:	45b0      	cmp	r8, r6
 8016008:	f001 011f 	and.w	r1, r1, #31
 801600c:	eba2 0203 	sub.w	r2, r2, r3
 8016010:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8016014:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8016018:	d108      	bne.n	801602c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 801601a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801601c:	4496      	add	lr, r2
 801601e:	4419      	add	r1, r3
 8016020:	fb02 a101 	mla	r1, r2, r1, sl
 8016024:	f8a5 e004 	strh.w	lr, [r5, #4]
 8016028:	80e9      	strh	r1, [r5, #6]
 801602a:	e6f9      	b.n	8015e20 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801602c:	2c00      	cmp	r4, #0
 801602e:	f2c0 80aa 	blt.w	8016186 <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 8016032:	2701      	movs	r7, #1
 8016034:	970a      	str	r7, [sp, #40]	; 0x28
 8016036:	2720      	movs	r7, #32
 8016038:	f1c1 0c20 	rsb	ip, r1, #32
 801603c:	fb02 f20c 	mul.w	r2, r2, ip
 8016040:	fb92 fcf4 	sdiv	ip, r2, r4
 8016044:	fb04 221c 	mls	r2, r4, ip, r2
 8016048:	9709      	str	r7, [sp, #36]	; 0x24
 801604a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801604c:	2a00      	cmp	r2, #0
 801604e:	bfb8      	it	lt
 8016050:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8016054:	4439      	add	r1, r7
 8016056:	fb0c a101 	mla	r1, ip, r1, sl
 801605a:	44e6      	add	lr, ip
 801605c:	80e9      	strh	r1, [r5, #6]
 801605e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016060:	f8a5 e004 	strh.w	lr, [r5, #4]
 8016064:	eb08 0501 	add.w	r5, r8, r1
 8016068:	6901      	ldr	r1, [r0, #16]
 801606a:	bfb8      	it	lt
 801606c:	1912      	addlt	r2, r2, r4
 801606e:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8016072:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8016076:	ea58 070e 	orrs.w	r7, r8, lr
 801607a:	d010      	beq.n	801609e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801607c:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8016080:	f1be 0f00 	cmp.w	lr, #0
 8016084:	db0b      	blt.n	801609e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8016086:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016088:	45be      	cmp	lr, r7
 801608a:	da08      	bge.n	801609e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801608c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8016090:	45be      	cmp	lr, r7
 8016092:	bf3c      	itt	cc
 8016094:	3108      	addcc	r1, #8
 8016096:	6101      	strcc	r1, [r0, #16]
 8016098:	f10e 0101 	add.w	r1, lr, #1
 801609c:	6081      	str	r1, [r0, #8]
 801609e:	f04f 0e00 	mov.w	lr, #0
 80160a2:	6901      	ldr	r1, [r0, #16]
 80160a4:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80160a8:	42ae      	cmp	r6, r5
 80160aa:	800d      	strh	r5, [r1, #0]
 80160ac:	f8a1 8002 	strh.w	r8, [r1, #2]
 80160b0:	f8a1 e004 	strh.w	lr, [r1, #4]
 80160b4:	f8a1 e006 	strh.w	lr, [r1, #6]
 80160b8:	4463      	add	r3, ip
 80160ba:	d055      	beq.n	8016168 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 80160bc:	9901      	ldr	r1, [sp, #4]
 80160be:	1b12      	subs	r2, r2, r4
 80160c0:	1ac9      	subs	r1, r1, r3
 80160c2:	4461      	add	r1, ip
 80160c4:	0149      	lsls	r1, r1, #5
 80160c6:	fb91 fef4 	sdiv	lr, r1, r4
 80160ca:	fb04 111e 	mls	r1, r4, lr, r1
 80160ce:	2900      	cmp	r1, #0
 80160d0:	bfb8      	it	lt
 80160d2:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80160d6:	f10e 0701 	add.w	r7, lr, #1
 80160da:	bfb8      	it	lt
 80160dc:	1909      	addlt	r1, r1, r4
 80160de:	970d      	str	r7, [sp, #52]	; 0x34
 80160e0:	1852      	adds	r2, r2, r1
 80160e2:	bf48      	it	mi
 80160e4:	46f4      	movmi	ip, lr
 80160e6:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80160ea:	bf58      	it	pl
 80160ec:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 80160f0:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80160f4:	4463      	add	r3, ip
 80160f6:	44e3      	add	fp, ip
 80160f8:	f8aa b004 	strh.w	fp, [sl, #4]
 80160fc:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8016100:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016102:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8016106:	f8aa b006 	strh.w	fp, [sl, #6]
 801610a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801610e:	bf58      	it	pl
 8016110:	1b12      	subpl	r2, r2, r4
 8016112:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016116:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801611a:	443d      	add	r5, r7
 801611c:	ea5b 070a 	orrs.w	r7, fp, sl
 8016120:	d014      	beq.n	801614c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8016122:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8016126:	f1ba 0f00 	cmp.w	sl, #0
 801612a:	db0f      	blt.n	801614c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 801612c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801612e:	45ba      	cmp	sl, r7
 8016130:	da0c      	bge.n	801614c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8016132:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8016136:	45ba      	cmp	sl, r7
 8016138:	bf38      	it	cc
 801613a:	f10c 0c08 	addcc.w	ip, ip, #8
 801613e:	f10a 0a01 	add.w	sl, sl, #1
 8016142:	bf38      	it	cc
 8016144:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8016148:	f8c0 a008 	str.w	sl, [r0, #8]
 801614c:	f04f 0700 	mov.w	r7, #0
 8016150:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016154:	42ae      	cmp	r6, r5
 8016156:	f8ac 5000 	strh.w	r5, [ip]
 801615a:	f8ac 8002 	strh.w	r8, [ip, #2]
 801615e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8016162:	f8ac 7006 	strh.w	r7, [ip, #6]
 8016166:	d1bb      	bne.n	80160e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 8016168:	6904      	ldr	r4, [r0, #16]
 801616a:	9a01      	ldr	r2, [sp, #4]
 801616c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801616e:	1ad3      	subs	r3, r2, r3
 8016170:	88a2      	ldrh	r2, [r4, #4]
 8016172:	3120      	adds	r1, #32
 8016174:	441a      	add	r2, r3
 8016176:	80a2      	strh	r2, [r4, #4]
 8016178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801617a:	1a89      	subs	r1, r1, r2
 801617c:	88e2      	ldrh	r2, [r4, #6]
 801617e:	fb03 2301 	mla	r3, r3, r1, r2
 8016182:	80e3      	strh	r3, [r4, #6]
 8016184:	e64c      	b.n	8015e20 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8016186:	f04f 37ff 	mov.w	r7, #4294967295
 801618a:	434a      	muls	r2, r1
 801618c:	970a      	str	r7, [sp, #40]	; 0x28
 801618e:	4264      	negs	r4, r4
 8016190:	2700      	movs	r7, #0
 8016192:	e755      	b.n	8016040 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8016194:	ea4f 1867 	mov.w	r8, r7, asr #5
 8016198:	f009 031f 	and.w	r3, r9, #31
 801619c:	45d0      	cmp	r8, sl
 801619e:	f007 071f 	and.w	r7, r7, #31
 80161a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80161a4:	fa1f fc8c 	uxth.w	ip, ip
 80161a8:	fa1f fe8e 	uxth.w	lr, lr
 80161ac:	d10a      	bne.n	80161c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 80161ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161b0:	449c      	add	ip, r3
 80161b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161b4:	f8a5 c004 	strh.w	ip, [r5, #4]
 80161b8:	441f      	add	r7, r3
 80161ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161bc:	fb03 e707 	mla	r7, r3, r7, lr
 80161c0:	80ef      	strh	r7, [r5, #6]
 80161c2:	e6b8      	b.n	8015f36 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80161c4:	2900      	cmp	r1, #0
 80161c6:	f2c0 80a7 	blt.w	8016318 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 80161ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80161cc:	f1c7 0320 	rsb	r3, r7, #32
 80161d0:	4363      	muls	r3, r4
 80161d2:	2401      	movs	r4, #1
 80161d4:	940d      	str	r4, [sp, #52]	; 0x34
 80161d6:	2420      	movs	r4, #32
 80161d8:	940c      	str	r4, [sp, #48]	; 0x30
 80161da:	fb93 f4f1 	sdiv	r4, r3, r1
 80161de:	fb01 3b14 	mls	fp, r1, r4, r3
 80161e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161e4:	f1bb 0f00 	cmp.w	fp, #0
 80161e8:	bfb8      	it	lt
 80161ea:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80161ee:	441f      	add	r7, r3
 80161f0:	fb04 e707 	mla	r7, r4, r7, lr
 80161f4:	44a4      	add	ip, r4
 80161f6:	f8a5 c004 	strh.w	ip, [r5, #4]
 80161fa:	80ef      	strh	r7, [r5, #6]
 80161fc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016202:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8016206:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801620a:	bfb8      	it	lt
 801620c:	448b      	addlt	fp, r1
 801620e:	eb08 0503 	add.w	r5, r8, r3
 8016212:	ea5e 0307 	orrs.w	r3, lr, r7
 8016216:	d011      	beq.n	801623c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8016218:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801621c:	f1be 0f00 	cmp.w	lr, #0
 8016220:	db0c      	blt.n	801623c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8016222:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016224:	45be      	cmp	lr, r7
 8016226:	da09      	bge.n	801623c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8016228:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801622c:	45be      	cmp	lr, r7
 801622e:	bf3c      	itt	cc
 8016230:	f10c 0708 	addcc.w	r7, ip, #8
 8016234:	6107      	strcc	r7, [r0, #16]
 8016236:	f10e 0701 	add.w	r7, lr, #1
 801623a:	6087      	str	r7, [r0, #8]
 801623c:	6907      	ldr	r7, [r0, #16]
 801623e:	b213      	sxth	r3, r2
 8016240:	9310      	str	r3, [sp, #64]	; 0x40
 8016242:	807b      	strh	r3, [r7, #2]
 8016244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016246:	4555      	cmp	r5, sl
 8016248:	803d      	strh	r5, [r7, #0]
 801624a:	80be      	strh	r6, [r7, #4]
 801624c:	80fe      	strh	r6, [r7, #6]
 801624e:	eb04 0c03 	add.w	ip, r4, r3
 8016252:	d050      	beq.n	80162f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8016254:	9b01      	ldr	r3, [sp, #4]
 8016256:	eba3 070c 	sub.w	r7, r3, ip
 801625a:	443c      	add	r4, r7
 801625c:	0164      	lsls	r4, r4, #5
 801625e:	fb94 f8f1 	sdiv	r8, r4, r1
 8016262:	fb01 4418 	mls	r4, r1, r8, r4
 8016266:	2c00      	cmp	r4, #0
 8016268:	bfb8      	it	lt
 801626a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801626e:	ebab 0301 	sub.w	r3, fp, r1
 8016272:	f108 0701 	add.w	r7, r8, #1
 8016276:	bfb8      	it	lt
 8016278:	1864      	addlt	r4, r4, r1
 801627a:	9309      	str	r3, [sp, #36]	; 0x24
 801627c:	9711      	str	r7, [sp, #68]	; 0x44
 801627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016280:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016284:	191b      	adds	r3, r3, r4
 8016286:	bf4c      	ite	mi
 8016288:	4647      	movmi	r7, r8
 801628a:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 801628c:	f8be b004 	ldrh.w	fp, [lr, #4]
 8016290:	44bc      	add	ip, r7
 8016292:	44bb      	add	fp, r7
 8016294:	f8ae b004 	strh.w	fp, [lr, #4]
 8016298:	f8be b006 	ldrh.w	fp, [lr, #6]
 801629c:	9309      	str	r3, [sp, #36]	; 0x24
 801629e:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80162a2:	f8ae b006 	strh.w	fp, [lr, #6]
 80162a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80162a8:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80162ac:	443d      	add	r5, r7
 80162ae:	f8be b006 	ldrh.w	fp, [lr, #6]
 80162b2:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80162b6:	bf5c      	itt	pl
 80162b8:	1a5b      	subpl	r3, r3, r1
 80162ba:	9309      	strpl	r3, [sp, #36]	; 0x24
 80162bc:	ea5b 0307 	orrs.w	r3, fp, r7
 80162c0:	d011      	beq.n	80162e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80162c2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80162c6:	f1bb 0f00 	cmp.w	fp, #0
 80162ca:	db0c      	blt.n	80162e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80162cc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80162ce:	45bb      	cmp	fp, r7
 80162d0:	da09      	bge.n	80162e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80162d2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80162d6:	45bb      	cmp	fp, r7
 80162d8:	bf3c      	itt	cc
 80162da:	f10e 0708 	addcc.w	r7, lr, #8
 80162de:	6107      	strcc	r7, [r0, #16]
 80162e0:	f10b 0701 	add.w	r7, fp, #1
 80162e4:	6087      	str	r7, [r0, #8]
 80162e6:	6907      	ldr	r7, [r0, #16]
 80162e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162ea:	4555      	cmp	r5, sl
 80162ec:	803d      	strh	r5, [r7, #0]
 80162ee:	807b      	strh	r3, [r7, #2]
 80162f0:	80be      	strh	r6, [r7, #4]
 80162f2:	80fe      	strh	r6, [r7, #6]
 80162f4:	d1c3      	bne.n	801627e <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 80162f6:	9b01      	ldr	r3, [sp, #4]
 80162f8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80162fa:	eba3 0c0c 	sub.w	ip, r3, ip
 80162fe:	6903      	ldr	r3, [r0, #16]
 8016300:	3720      	adds	r7, #32
 8016302:	8899      	ldrh	r1, [r3, #4]
 8016304:	4461      	add	r1, ip
 8016306:	8099      	strh	r1, [r3, #4]
 8016308:	990c      	ldr	r1, [sp, #48]	; 0x30
 801630a:	1a7f      	subs	r7, r7, r1
 801630c:	88d9      	ldrh	r1, [r3, #6]
 801630e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8016312:	f8a3 c006 	strh.w	ip, [r3, #6]
 8016316:	e60e      	b.n	8015f36 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016318:	f04f 34ff 	mov.w	r4, #4294967295
 801631c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801631e:	940d      	str	r4, [sp, #52]	; 0x34
 8016320:	437b      	muls	r3, r7
 8016322:	4249      	negs	r1, r1
 8016324:	2400      	movs	r4, #0
 8016326:	e757      	b.n	80161d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8016328:	9905      	ldr	r1, [sp, #20]
 801632a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801632e:	f001 011f 	and.w	r1, r1, #31
 8016332:	9102      	str	r1, [sp, #8]
 8016334:	9904      	ldr	r1, [sp, #16]
 8016336:	45f3      	cmp	fp, lr
 8016338:	f009 0c1f 	and.w	ip, r9, #31
 801633c:	eba1 0406 	sub.w	r4, r1, r6
 8016340:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8016344:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8016348:	d108      	bne.n	801635c <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 801634a:	9b02      	ldr	r3, [sp, #8]
 801634c:	44a0      	add	r8, r4
 801634e:	449c      	add	ip, r3
 8016350:	fb04 a40c 	mla	r4, r4, ip, sl
 8016354:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016358:	80fc      	strh	r4, [r7, #6]
 801635a:	e458      	b.n	8015c0e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801635c:	9905      	ldr	r1, [sp, #20]
 801635e:	ebb1 0109 	subs.w	r1, r1, r9
 8016362:	bf5b      	ittet	pl
 8016364:	f1cc 0520 	rsbpl	r5, ip, #32
 8016368:	436c      	mulpl	r4, r5
 801636a:	2500      	movmi	r5, #0
 801636c:	2520      	movpl	r5, #32
 801636e:	bf44      	itt	mi
 8016370:	fb04 f40c 	mulmi.w	r4, r4, ip
 8016374:	4249      	negmi	r1, r1
 8016376:	9501      	str	r5, [sp, #4]
 8016378:	fb94 f5f1 	sdiv	r5, r4, r1
 801637c:	bf54      	ite	pl
 801637e:	f04f 0901 	movpl.w	r9, #1
 8016382:	f04f 39ff 	movmi.w	r9, #4294967295
 8016386:	fb01 4415 	mls	r4, r1, r5, r4
 801638a:	9b01      	ldr	r3, [sp, #4]
 801638c:	2c00      	cmp	r4, #0
 801638e:	bfb8      	it	lt
 8016390:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8016394:	449c      	add	ip, r3
 8016396:	fb05 ac0c 	mla	ip, r5, ip, sl
 801639a:	44a8      	add	r8, r5
 801639c:	f8a7 8004 	strh.w	r8, [r7, #4]
 80163a0:	f8a7 c006 	strh.w	ip, [r7, #6]
 80163a4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80163a8:	bfb8      	it	lt
 80163aa:	1864      	addlt	r4, r4, r1
 80163ac:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80163b0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80163b4:	eb0b 0309 	add.w	r3, fp, r9
 80163b8:	ea58 0707 	orrs.w	r7, r8, r7
 80163bc:	d011      	beq.n	80163e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80163be:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80163c2:	f1b8 0f00 	cmp.w	r8, #0
 80163c6:	db0c      	blt.n	80163e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80163c8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80163ca:	45b8      	cmp	r8, r7
 80163cc:	da09      	bge.n	80163e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80163ce:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80163d2:	45b8      	cmp	r8, r7
 80163d4:	bf3c      	itt	cc
 80163d6:	f10c 0708 	addcc.w	r7, ip, #8
 80163da:	6107      	strcc	r7, [r0, #16]
 80163dc:	f108 0701 	add.w	r7, r8, #1
 80163e0:	6087      	str	r7, [r0, #8]
 80163e2:	f04f 0c00 	mov.w	ip, #0
 80163e6:	6907      	ldr	r7, [r0, #16]
 80163e8:	b212      	sxth	r2, r2
 80163ea:	459e      	cmp	lr, r3
 80163ec:	803b      	strh	r3, [r7, #0]
 80163ee:	807a      	strh	r2, [r7, #2]
 80163f0:	f8a7 c004 	strh.w	ip, [r7, #4]
 80163f4:	f8a7 c006 	strh.w	ip, [r7, #6]
 80163f8:	442e      	add	r6, r5
 80163fa:	d04d      	beq.n	8016498 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 80163fc:	9f04      	ldr	r7, [sp, #16]
 80163fe:	f04f 0a00 	mov.w	sl, #0
 8016402:	1bbf      	subs	r7, r7, r6
 8016404:	443d      	add	r5, r7
 8016406:	016d      	lsls	r5, r5, #5
 8016408:	fb95 f8f1 	sdiv	r8, r5, r1
 801640c:	fb01 5518 	mls	r5, r1, r8, r5
 8016410:	4565      	cmp	r5, ip
 8016412:	bfb8      	it	lt
 8016414:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016418:	f108 0701 	add.w	r7, r8, #1
 801641c:	bfb8      	it	lt
 801641e:	186d      	addlt	r5, r5, r1
 8016420:	1a64      	subs	r4, r4, r1
 8016422:	9703      	str	r7, [sp, #12]
 8016424:	1964      	adds	r4, r4, r5
 8016426:	bf48      	it	mi
 8016428:	4647      	movmi	r7, r8
 801642a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801642e:	bf58      	it	pl
 8016430:	9f03      	ldrpl	r7, [sp, #12]
 8016432:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8016436:	443e      	add	r6, r7
 8016438:	44bb      	add	fp, r7
 801643a:	f8ac b004 	strh.w	fp, [ip, #4]
 801643e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016442:	bf58      	it	pl
 8016444:	1a64      	subpl	r4, r4, r1
 8016446:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801644a:	f8ac b006 	strh.w	fp, [ip, #6]
 801644e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016452:	444b      	add	r3, r9
 8016454:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016458:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801645c:	ea5b 0707 	orrs.w	r7, fp, r7
 8016460:	d011      	beq.n	8016486 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8016462:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8016466:	f1bb 0f00 	cmp.w	fp, #0
 801646a:	db0c      	blt.n	8016486 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801646c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801646e:	45bb      	cmp	fp, r7
 8016470:	da09      	bge.n	8016486 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8016472:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016476:	45bb      	cmp	fp, r7
 8016478:	bf3c      	itt	cc
 801647a:	f10c 0708 	addcc.w	r7, ip, #8
 801647e:	6107      	strcc	r7, [r0, #16]
 8016480:	f10b 0701 	add.w	r7, fp, #1
 8016484:	6087      	str	r7, [r0, #8]
 8016486:	6907      	ldr	r7, [r0, #16]
 8016488:	459e      	cmp	lr, r3
 801648a:	803b      	strh	r3, [r7, #0]
 801648c:	807a      	strh	r2, [r7, #2]
 801648e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8016492:	f8a7 a006 	strh.w	sl, [r7, #6]
 8016496:	d1c5      	bne.n	8016424 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8016498:	9b04      	ldr	r3, [sp, #16]
 801649a:	1b9e      	subs	r6, r3, r6
 801649c:	6903      	ldr	r3, [r0, #16]
 801649e:	889a      	ldrh	r2, [r3, #4]
 80164a0:	4432      	add	r2, r6
 80164a2:	809a      	strh	r2, [r3, #4]
 80164a4:	9a02      	ldr	r2, [sp, #8]
 80164a6:	f102 0c20 	add.w	ip, r2, #32
 80164aa:	9a01      	ldr	r2, [sp, #4]
 80164ac:	ebac 0c02 	sub.w	ip, ip, r2
 80164b0:	88da      	ldrh	r2, [r3, #6]
 80164b2:	fb06 260c 	mla	r6, r6, ip, r2
 80164b6:	80de      	strh	r6, [r3, #6]
 80164b8:	f7ff bba9 	b.w	8015c0e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

080164bc <_ZN8touchgfx7Outline6lineToEii>:
 80164bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80164be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164c0:	079b      	lsls	r3, r3, #30
 80164c2:	460e      	mov	r6, r1
 80164c4:	4615      	mov	r5, r2
 80164c6:	d511      	bpl.n	80164ec <_ZN8touchgfx7Outline6lineToEii+0x30>
 80164c8:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80164cc:	ea86 0701 	eor.w	r7, r6, r1
 80164d0:	ea85 0302 	eor.w	r3, r5, r2
 80164d4:	433b      	orrs	r3, r7
 80164d6:	d009      	beq.n	80164ec <_ZN8touchgfx7Outline6lineToEii+0x30>
 80164d8:	4633      	mov	r3, r6
 80164da:	9500      	str	r5, [sp, #0]
 80164dc:	f7ff fb3e 	bl	8015b5c <_ZN8touchgfx7Outline10renderLineEiiii>
 80164e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80164e2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80164e6:	f043 0301 	orr.w	r3, r3, #1
 80164ea:	6243      	str	r3, [r0, #36]	; 0x24
 80164ec:	b003      	add	sp, #12
 80164ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164f0 <_ZN8touchgfx7Outline6moveToEii>:
 80164f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80164f4:	4615      	mov	r5, r2
 80164f6:	079a      	lsls	r2, r3, #30
 80164f8:	4604      	mov	r4, r0
 80164fa:	460e      	mov	r6, r1
 80164fc:	d401      	bmi.n	8016502 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80164fe:	f7ff faf9 	bl	8015af4 <_ZN8touchgfx7Outline5resetEv>
 8016502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016504:	07db      	lsls	r3, r3, #31
 8016506:	d504      	bpl.n	8016512 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8016508:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801650c:	4620      	mov	r0, r4
 801650e:	f7ff ffd5 	bl	80164bc <_ZN8touchgfx7Outline6lineToEii>
 8016512:	6923      	ldr	r3, [r4, #16]
 8016514:	1170      	asrs	r0, r6, #5
 8016516:	f9b3 2000 	ldrsh.w	r2, [r3]
 801651a:	1169      	asrs	r1, r5, #5
 801651c:	4290      	cmp	r0, r2
 801651e:	d103      	bne.n	8016528 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8016520:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016524:	4291      	cmp	r1, r2
 8016526:	d01a      	beq.n	801655e <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8016528:	88df      	ldrh	r7, [r3, #6]
 801652a:	889a      	ldrh	r2, [r3, #4]
 801652c:	433a      	orrs	r2, r7
 801652e:	d010      	beq.n	8016552 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016530:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016534:	2a00      	cmp	r2, #0
 8016536:	db0c      	blt.n	8016552 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016538:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801653a:	42ba      	cmp	r2, r7
 801653c:	da09      	bge.n	8016552 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801653e:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8016542:	42ba      	cmp	r2, r7
 8016544:	bf38      	it	cc
 8016546:	3308      	addcc	r3, #8
 8016548:	f102 0201 	add.w	r2, r2, #1
 801654c:	bf38      	it	cc
 801654e:	6123      	strcc	r3, [r4, #16]
 8016550:	60a2      	str	r2, [r4, #8]
 8016552:	2200      	movs	r2, #0
 8016554:	6923      	ldr	r3, [r4, #16]
 8016556:	8018      	strh	r0, [r3, #0]
 8016558:	8059      	strh	r1, [r3, #2]
 801655a:	809a      	strh	r2, [r3, #4]
 801655c:	80da      	strh	r2, [r3, #6]
 801655e:	6166      	str	r6, [r4, #20]
 8016560:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016564:	6225      	str	r5, [r4, #32]
 8016566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016568 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8016568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801656c:	b0d0      	sub	sp, #320	; 0x140
 801656e:	466c      	mov	r4, sp
 8016570:	4627      	mov	r7, r4
 8016572:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8016576:	1a0d      	subs	r5, r1, r0
 8016578:	2d48      	cmp	r5, #72	; 0x48
 801657a:	f100 0308 	add.w	r3, r0, #8
 801657e:	f340 80d5 	ble.w	801672c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8016582:	112d      	asrs	r5, r5, #4
 8016584:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8016588:	6816      	ldr	r6, [r2, #0]
 801658a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801658e:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8016592:	6006      	str	r6, [r0, #0]
 8016594:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016598:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801659c:	6856      	ldr	r6, [r2, #4]
 801659e:	6046      	str	r6, [r0, #4]
 80165a0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80165a4:	f8a2 8002 	strh.w	r8, [r2, #2]
 80165a8:	f8a2 e004 	strh.w	lr, [r2, #4]
 80165ac:	f8a2 c006 	strh.w	ip, [r2, #6]
 80165b0:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80165b4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80165b8:	f1a1 0208 	sub.w	r2, r1, #8
 80165bc:	4565      	cmp	r5, ip
 80165be:	db06      	blt.n	80165ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80165c0:	d119      	bne.n	80165f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80165c2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80165c6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80165ca:	42ae      	cmp	r6, r5
 80165cc:	dd13      	ble.n	80165f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80165ce:	460e      	mov	r6, r1
 80165d0:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80165d4:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80165d8:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80165dc:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80165e0:	601d      	str	r5, [r3, #0]
 80165e2:	6875      	ldr	r5, [r6, #4]
 80165e4:	605d      	str	r5, [r3, #4]
 80165e6:	f821 9c08 	strh.w	r9, [r1, #-8]
 80165ea:	f821 cc06 	strh.w	ip, [r1, #-6]
 80165ee:	f821 8c04 	strh.w	r8, [r1, #-4]
 80165f2:	f821 ec02 	strh.w	lr, [r1, #-2]
 80165f6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80165fa:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80165fe:	42ae      	cmp	r6, r5
 8016600:	db06      	blt.n	8016610 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8016602:	d116      	bne.n	8016632 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8016604:	f9b0 c000 	ldrsh.w	ip, [r0]
 8016608:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801660c:	45ac      	cmp	ip, r5
 801660e:	da10      	bge.n	8016632 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8016610:	681d      	ldr	r5, [r3, #0]
 8016612:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016616:	6005      	str	r5, [r0, #0]
 8016618:	685d      	ldr	r5, [r3, #4]
 801661a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801661e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016622:	f8a0 8008 	strh.w	r8, [r0, #8]
 8016626:	6045      	str	r5, [r0, #4]
 8016628:	8146      	strh	r6, [r0, #10]
 801662a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801662e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016632:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016636:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801663a:	4565      	cmp	r5, ip
 801663c:	db06      	blt.n	801664c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801663e:	d119      	bne.n	8016674 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016640:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8016644:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016648:	42ae      	cmp	r6, r5
 801664a:	da13      	bge.n	8016674 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801664c:	460e      	mov	r6, r1
 801664e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016652:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016656:	6005      	str	r5, [r0, #0]
 8016658:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801665c:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8016660:	6875      	ldr	r5, [r6, #4]
 8016662:	6045      	str	r5, [r0, #4]
 8016664:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016668:	f821 cc06 	strh.w	ip, [r1, #-6]
 801666c:	f821 8c04 	strh.w	r8, [r1, #-4]
 8016670:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016674:	3308      	adds	r3, #8
 8016676:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801667a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801667e:	45e6      	cmp	lr, ip
 8016680:	dbf8      	blt.n	8016674 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016682:	d105      	bne.n	8016690 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016684:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016688:	f9b0 5000 	ldrsh.w	r5, [r0]
 801668c:	42ae      	cmp	r6, r5
 801668e:	dbf1      	blt.n	8016674 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016690:	4615      	mov	r5, r2
 8016692:	3a08      	subs	r2, #8
 8016694:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8016698:	45b4      	cmp	ip, r6
 801669a:	dbf9      	blt.n	8016690 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801669c:	d105      	bne.n	80166aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801669e:	f9b0 8000 	ldrsh.w	r8, [r0]
 80166a2:	f9b2 6000 	ldrsh.w	r6, [r2]
 80166a6:	45b0      	cmp	r8, r6
 80166a8:	dbf2      	blt.n	8016690 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80166aa:	4293      	cmp	r3, r2
 80166ac:	f1a5 0608 	sub.w	r6, r5, #8
 80166b0:	d816      	bhi.n	80166e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80166b2:	f8d6 c000 	ldr.w	ip, [r6]
 80166b6:	f9b3 a000 	ldrsh.w	sl, [r3]
 80166ba:	f8c3 c000 	str.w	ip, [r3]
 80166be:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80166c2:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80166c6:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80166ca:	f8c3 c004 	str.w	ip, [r3, #4]
 80166ce:	f825 ac08 	strh.w	sl, [r5, #-8]
 80166d2:	f825 ec06 	strh.w	lr, [r5, #-6]
 80166d6:	f825 9c04 	strh.w	r9, [r5, #-4]
 80166da:	f825 8c02 	strh.w	r8, [r5, #-2]
 80166de:	e7c9      	b.n	8016674 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80166e0:	f8d6 e000 	ldr.w	lr, [r6]
 80166e4:	f9b0 a000 	ldrsh.w	sl, [r0]
 80166e8:	f8c0 e000 	str.w	lr, [r0]
 80166ec:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80166f0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80166f4:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80166f8:	1a16      	subs	r6, r2, r0
 80166fa:	f8c0 e004 	str.w	lr, [r0, #4]
 80166fe:	f825 ac08 	strh.w	sl, [r5, #-8]
 8016702:	f825 cc06 	strh.w	ip, [r5, #-6]
 8016706:	f825 9c04 	strh.w	r9, [r5, #-4]
 801670a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801670e:	1acd      	subs	r5, r1, r3
 8016710:	10ed      	asrs	r5, r5, #3
 8016712:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8016716:	bfb5      	itete	lt
 8016718:	e9c4 0200 	strdlt	r0, r2, [r4]
 801671c:	e9c4 3100 	strdge	r3, r1, [r4]
 8016720:	460a      	movlt	r2, r1
 8016722:	4603      	movge	r3, r0
 8016724:	3408      	adds	r4, #8
 8016726:	4618      	mov	r0, r3
 8016728:	4611      	mov	r1, r2
 801672a:	e724      	b.n	8016576 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801672c:	4299      	cmp	r1, r3
 801672e:	d928      	bls.n	8016782 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8016730:	f1a3 0210 	sub.w	r2, r3, #16
 8016734:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8016738:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801673c:	45ac      	cmp	ip, r5
 801673e:	db06      	blt.n	801674e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8016740:	d11d      	bne.n	801677e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8016742:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8016746:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801674a:	42ae      	cmp	r6, r5
 801674c:	da17      	bge.n	801677e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801674e:	4615      	mov	r5, r2
 8016750:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8016754:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8016758:	6116      	str	r6, [r2, #16]
 801675a:	686e      	ldr	r6, [r5, #4]
 801675c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8016760:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8016764:	42a8      	cmp	r0, r5
 8016766:	6156      	str	r6, [r2, #20]
 8016768:	f8a2 9008 	strh.w	r9, [r2, #8]
 801676c:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8016770:	f8a2 800c 	strh.w	r8, [r2, #12]
 8016774:	f8a2 e00e 	strh.w	lr, [r2, #14]
 8016778:	f1a2 0208 	sub.w	r2, r2, #8
 801677c:	d1da      	bne.n	8016734 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801677e:	3308      	adds	r3, #8
 8016780:	e7d4      	b.n	801672c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8016782:	42bc      	cmp	r4, r7
 8016784:	d903      	bls.n	801678e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 8016786:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801678a:	3c08      	subs	r4, #8
 801678c:	e6f3      	b.n	8016576 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801678e:	b050      	add	sp, #320	; 0x140
 8016790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016794 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8016794:	b510      	push	{r4, lr}
 8016796:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016798:	4604      	mov	r4, r0
 801679a:	07da      	lsls	r2, r3, #31
 801679c:	d507      	bpl.n	80167ae <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801679e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80167a2:	f7ff fe8b 	bl	80164bc <_ZN8touchgfx7Outline6lineToEii>
 80167a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80167a8:	f023 0301 	bic.w	r3, r3, #1
 80167ac:	6243      	str	r3, [r0, #36]	; 0x24
 80167ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167b0:	079b      	lsls	r3, r3, #30
 80167b2:	d521      	bpl.n	80167f8 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80167b4:	6923      	ldr	r3, [r4, #16]
 80167b6:	88d9      	ldrh	r1, [r3, #6]
 80167b8:	889a      	ldrh	r2, [r3, #4]
 80167ba:	430a      	orrs	r2, r1
 80167bc:	d010      	beq.n	80167e0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80167be:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80167c2:	2a00      	cmp	r2, #0
 80167c4:	db0c      	blt.n	80167e0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80167c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80167c8:	428a      	cmp	r2, r1
 80167ca:	da09      	bge.n	80167e0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80167cc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80167d0:	4291      	cmp	r1, r2
 80167d2:	bf88      	it	hi
 80167d4:	3308      	addhi	r3, #8
 80167d6:	f102 0201 	add.w	r2, r2, #1
 80167da:	bf88      	it	hi
 80167dc:	6123      	strhi	r3, [r4, #16]
 80167de:	60a2      	str	r2, [r4, #8]
 80167e0:	68a1      	ldr	r1, [r4, #8]
 80167e2:	b129      	cbz	r1, 80167f0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80167e4:	6863      	ldr	r3, [r4, #4]
 80167e6:	4299      	cmp	r1, r3
 80167e8:	d802      	bhi.n	80167f0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80167ea:	68e0      	ldr	r0, [r4, #12]
 80167ec:	f7ff febc 	bl	8016568 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80167f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167f2:	f023 0302 	bic.w	r3, r3, #2
 80167f6:	6263      	str	r3, [r4, #36]	; 0x24
 80167f8:	68e0      	ldr	r0, [r4, #12]
 80167fa:	bd10      	pop	{r4, pc}

080167fc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80167fc:	4b02      	ldr	r3, [pc, #8]	; (8016808 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80167fe:	6018      	str	r0, [r3, #0]
 8016800:	4b02      	ldr	r3, [pc, #8]	; (801680c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8016802:	6019      	str	r1, [r3, #0]
 8016804:	4770      	bx	lr
 8016806:	bf00      	nop
 8016808:	2004f6d0 	.word	0x2004f6d0
 801680c:	2004f6d4 	.word	0x2004f6d4

08016810 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8016810:	4b01      	ldr	r3, [pc, #4]	; (8016818 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8016812:	6818      	ldr	r0, [r3, #0]
 8016814:	4770      	bx	lr
 8016816:	bf00      	nop
 8016818:	2004f6d0 	.word	0x2004f6d0

0801681c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801681c:	4b01      	ldr	r3, [pc, #4]	; (8016824 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801681e:	6818      	ldr	r0, [r3, #0]
 8016820:	4770      	bx	lr
 8016822:	bf00      	nop
 8016824:	2004f6d4 	.word	0x2004f6d4

08016828 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016828:	b510      	push	{r4, lr}
 801682a:	6803      	ldr	r3, [r0, #0]
 801682c:	460c      	mov	r4, r1
 801682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016830:	4798      	blx	r3
 8016832:	1b03      	subs	r3, r0, r4
 8016834:	4258      	negs	r0, r3
 8016836:	4158      	adcs	r0, r3
 8016838:	bd10      	pop	{r4, pc}
	...

0801683c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801683c:	4b01      	ldr	r3, [pc, #4]	; (8016844 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801683e:	6019      	str	r1, [r3, #0]
 8016840:	4770      	bx	lr
 8016842:	bf00      	nop
 8016844:	2004f6d8 	.word	0x2004f6d8

08016848 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801684c:	4696      	mov	lr, r2
 801684e:	4614      	mov	r4, r2
 8016850:	4605      	mov	r5, r0
 8016852:	460e      	mov	r6, r1
 8016854:	461f      	mov	r7, r3
 8016856:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801685a:	b097      	sub	sp, #92	; 0x5c
 801685c:	f10d 0c1c 	add.w	ip, sp, #28
 8016860:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016864:	f8de 3000 	ldr.w	r3, [lr]
 8016868:	f104 0e14 	add.w	lr, r4, #20
 801686c:	f8cc 3000 	str.w	r3, [ip]
 8016870:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016874:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016878:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801687c:	f8de 3000 	ldr.w	r3, [lr]
 8016880:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016884:	f8cc 3000 	str.w	r3, [ip]
 8016888:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801688c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016890:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016894:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8016898:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801689c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80168a0:	f8de 3000 	ldr.w	r3, [lr]
 80168a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80168a6:	f8cc 3000 	str.w	r3, [ip]
 80168aa:	9201      	str	r2, [sp, #4]
 80168ac:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80168b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80168b2:	682b      	ldr	r3, [r5, #0]
 80168b4:	9200      	str	r2, [sp, #0]
 80168b6:	f8cd 8008 	str.w	r8, [sp, #8]
 80168ba:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80168be:	aa07      	add	r2, sp, #28
 80168c0:	463b      	mov	r3, r7
 80168c2:	4631      	mov	r1, r6
 80168c4:	4628      	mov	r0, r5
 80168c6:	47d8      	blx	fp
 80168c8:	46a6      	mov	lr, r4
 80168ca:	f10d 0c1c 	add.w	ip, sp, #28
 80168ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80168d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80168d6:	f8de 3000 	ldr.w	r3, [lr]
 80168da:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80168de:	f8cc 3000 	str.w	r3, [ip]
 80168e2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80168e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80168ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80168ee:	f8de 3000 	ldr.w	r3, [lr]
 80168f2:	343c      	adds	r4, #60	; 0x3c
 80168f4:	f8cc 3000 	str.w	r3, [ip]
 80168f8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80168fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80168fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016902:	6823      	ldr	r3, [r4, #0]
 8016904:	4631      	mov	r1, r6
 8016906:	f8cc 3000 	str.w	r3, [ip]
 801690a:	682b      	ldr	r3, [r5, #0]
 801690c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016910:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016912:	f8cd 8008 	str.w	r8, [sp, #8]
 8016916:	9201      	str	r2, [sp, #4]
 8016918:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801691a:	4628      	mov	r0, r5
 801691c:	9200      	str	r2, [sp, #0]
 801691e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8016920:	aa07      	add	r2, sp, #28
 8016922:	463b      	mov	r3, r7
 8016924:	47a0      	blx	r4
 8016926:	b017      	add	sp, #92	; 0x5c
 8016928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801692c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801692c:	2000      	movs	r0, #0
 801692e:	4770      	bx	lr

08016930 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016934:	b08d      	sub	sp, #52	; 0x34
 8016936:	4688      	mov	r8, r1
 8016938:	9916      	ldr	r1, [sp, #88]	; 0x58
 801693a:	f8d3 c000 	ldr.w	ip, [r3]
 801693e:	680f      	ldr	r7, [r1, #0]
 8016940:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8016944:	eba7 070c 	sub.w	r7, r7, ip
 8016948:	42bc      	cmp	r4, r7
 801694a:	bfa8      	it	ge
 801694c:	463c      	movge	r4, r7
 801694e:	ee07 4a90 	vmov	s15, r4
 8016952:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8016956:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801695a:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801695e:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8016962:	edd3 6a07 	vldr	s13, [r3, #28]
 8016966:	ee25 4a04 	vmul.f32	s8, s10, s8
 801696a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801696e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016972:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016976:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801697a:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801697e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016982:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016984:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016988:	f9b1 9000 	ldrsh.w	r9, [r1]
 801698c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016990:	eb09 0e0c 	add.w	lr, r9, ip
 8016994:	4571      	cmp	r1, lr
 8016996:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801699a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801699e:	ee36 0a84 	vadd.f32	s0, s13, s8
 80169a2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80169a6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80169aa:	f340 808c 	ble.w	8016ac6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80169ae:	eba1 060e 	sub.w	r6, r1, lr
 80169b2:	fb96 f5f4 	sdiv	r5, r6, r4
 80169b6:	ee07 5a10 	vmov	s14, r5
 80169ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80169be:	2d00      	cmp	r5, #0
 80169c0:	fb04 6615 	mls	r6, r4, r5, r6
 80169c4:	eea7 0a04 	vfma.f32	s0, s14, s8
 80169c8:	eee7 0a24 	vfma.f32	s1, s14, s9
 80169cc:	eea7 1a05 	vfma.f32	s2, s14, s10
 80169d0:	dd12      	ble.n	80169f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80169d2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80169d6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80169da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169de:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80169e2:	bf14      	ite	ne
 80169e4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80169e8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80169ec:	ee31 2a45 	vsub.f32	s4, s2, s10
 80169f0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80169f4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80169f8:	fb05 f204 	mul.w	r2, r5, r4
 80169fc:	1abf      	subs	r7, r7, r2
 80169fe:	4494      	add	ip, r2
 8016a00:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016a04:	4411      	add	r1, r2
 8016a06:	eb09 020c 	add.w	r2, r9, ip
 8016a0a:	443a      	add	r2, r7
 8016a0c:	b209      	sxth	r1, r1
 8016a0e:	428a      	cmp	r2, r1
 8016a10:	bfc4      	itt	gt
 8016a12:	eba1 0209 	subgt.w	r2, r1, r9
 8016a16:	eba2 070c 	subgt.w	r7, r2, ip
 8016a1a:	2f00      	cmp	r7, #0
 8016a1c:	dd50      	ble.n	8016ac0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016a1e:	fb97 f1f4 	sdiv	r1, r7, r4
 8016a22:	fb04 7211 	mls	r2, r4, r1, r7
 8016a26:	b90a      	cbnz	r2, 8016a2c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016a28:	4622      	mov	r2, r4
 8016a2a:	3901      	subs	r1, #1
 8016a2c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016a30:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016a34:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016a38:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016a3c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016a40:	ee17 7a90 	vmov	r7, s15
 8016a44:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016a48:	eef0 6a42 	vmov.f32	s13, s4
 8016a4c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016a50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a54:	ee17 ca90 	vmov	ip, s15
 8016a58:	eeb0 7a61 	vmov.f32	s14, s3
 8016a5c:	6840      	ldr	r0, [r0, #4]
 8016a5e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016a62:	f8d0 a000 	ldr.w	sl, [r0]
 8016a66:	900b      	str	r0, [sp, #44]	; 0x2c
 8016a68:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016a6a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016a6e:	9008      	str	r0, [sp, #32]
 8016a70:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016a72:	695b      	ldr	r3, [r3, #20]
 8016a74:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016a78:	fb9c fcf4 	sdiv	ip, ip, r4
 8016a7c:	445b      	add	r3, fp
 8016a7e:	9307      	str	r3, [sp, #28]
 8016a80:	ee16 3a90 	vmov	r3, s13
 8016a84:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016a88:	fb0c 3306 	mla	r3, ip, r6, r3
 8016a8c:	fb97 f7f4 	sdiv	r7, r7, r4
 8016a90:	9302      	str	r3, [sp, #8]
 8016a92:	ee17 3a10 	vmov	r3, s14
 8016a96:	2900      	cmp	r1, #0
 8016a98:	bfcc      	ite	gt
 8016a9a:	46a1      	movgt	r9, r4
 8016a9c:	4691      	movle	r9, r2
 8016a9e:	44b6      	add	lr, r6
 8016aa0:	fb04 e505 	mla	r5, r4, r5, lr
 8016aa4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016aa8:	fb07 3706 	mla	r7, r7, r6, r3
 8016aac:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016ab0:	e9cd 4700 	strd	r4, r7, [sp]
 8016ab4:	eba9 0306 	sub.w	r3, r9, r6
 8016ab8:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016abc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016abe:	47a0      	blx	r4
 8016ac0:	b00d      	add	sp, #52	; 0x34
 8016ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac6:	2500      	movs	r5, #0
 8016ac8:	462e      	mov	r6, r5
 8016aca:	e799      	b.n	8016a00 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016acc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad0:	461d      	mov	r5, r3
 8016ad2:	b0db      	sub	sp, #364	; 0x16c
 8016ad4:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016ad8:	910f      	str	r1, [sp, #60]	; 0x3c
 8016ada:	930a      	str	r3, [sp, #40]	; 0x28
 8016adc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016ae0:	9009      	str	r0, [sp, #36]	; 0x24
 8016ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ae4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016ae8:	4614      	mov	r4, r2
 8016aea:	9310      	str	r3, [sp, #64]	; 0x40
 8016aec:	6803      	ldr	r3, [r0, #0]
 8016aee:	4629      	mov	r1, r5
 8016af0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8016af2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016af6:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016afa:	47b8      	blx	r7
 8016afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016afe:	6058      	str	r0, [r3, #4]
 8016b00:	2800      	cmp	r0, #0
 8016b02:	f000 83a1 	beq.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b06:	ed94 7a02 	vldr	s14, [r4, #8]
 8016b0a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b12:	682b      	ldr	r3, [r5, #0]
 8016b14:	9314      	str	r3, [sp, #80]	; 0x50
 8016b16:	686b      	ldr	r3, [r5, #4]
 8016b18:	9315      	str	r3, [sp, #84]	; 0x54
 8016b1a:	4bc1      	ldr	r3, [pc, #772]	; (8016e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016b1c:	7819      	ldrb	r1, [r3, #0]
 8016b1e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016b22:	2900      	cmp	r1, #0
 8016b24:	bf16      	itet	ne
 8016b26:	4619      	movne	r1, r3
 8016b28:	4611      	moveq	r1, r2
 8016b2a:	4613      	movne	r3, r2
 8016b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b30:	9116      	str	r1, [sp, #88]	; 0x58
 8016b32:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8016b36:	f240 8387 	bls.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b3a:	ed94 7a07 	vldr	s14, [r4, #28]
 8016b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b46:	f240 837f 	bls.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b4a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b56:	f240 8377 	bls.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b5a:	6822      	ldr	r2, [r4, #0]
 8016b5c:	4bb1      	ldr	r3, [pc, #708]	; (8016e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	f2c0 8372 	blt.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b64:	49b0      	ldr	r1, [pc, #704]	; (8016e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016b66:	6963      	ldr	r3, [r4, #20]
 8016b68:	428a      	cmp	r2, r1
 8016b6a:	f300 836d 	bgt.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b6e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016b72:	48ae      	ldr	r0, [pc, #696]	; (8016e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016b74:	33ff      	adds	r3, #255	; 0xff
 8016b76:	4283      	cmp	r3, r0
 8016b78:	f200 8366 	bhi.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016b7e:	4dac      	ldr	r5, [pc, #688]	; (8016e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016b80:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016b84:	33ff      	adds	r3, #255	; 0xff
 8016b86:	42ab      	cmp	r3, r5
 8016b88:	f200 835e 	bhi.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b8c:	6862      	ldr	r2, [r4, #4]
 8016b8e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8016b92:	33ff      	adds	r3, #255	; 0xff
 8016b94:	4283      	cmp	r3, r0
 8016b96:	f200 8357 	bhi.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b9a:	69a1      	ldr	r1, [r4, #24]
 8016b9c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016ba0:	33ff      	adds	r3, #255	; 0xff
 8016ba2:	4283      	cmp	r3, r0
 8016ba4:	f200 8350 	bhi.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016ba8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016baa:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8016bae:	30ff      	adds	r0, #255	; 0xff
 8016bb0:	42a8      	cmp	r0, r5
 8016bb2:	f200 8349 	bhi.w	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016bb6:	428a      	cmp	r2, r1
 8016bb8:	f280 8110 	bge.w	8016ddc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016bbc:	429a      	cmp	r2, r3
 8016bbe:	f300 8119 	bgt.w	8016df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016bc2:	4299      	cmp	r1, r3
 8016bc4:	f280 811d 	bge.w	8016e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016bc8:	2502      	movs	r5, #2
 8016bca:	2701      	movs	r7, #1
 8016bcc:	46a9      	mov	r9, r5
 8016bce:	46b8      	mov	r8, r7
 8016bd0:	f04f 0a00 	mov.w	sl, #0
 8016bd4:	4621      	mov	r1, r4
 8016bd6:	a849      	add	r0, sp, #292	; 0x124
 8016bd8:	f003 f862 	bl	8019ca0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016bdc:	4622      	mov	r2, r4
 8016bde:	4653      	mov	r3, sl
 8016be0:	a949      	add	r1, sp, #292	; 0x124
 8016be2:	f8cd 9000 	str.w	r9, [sp]
 8016be6:	a819      	add	r0, sp, #100	; 0x64
 8016be8:	f003 f98c 	bl	8019f04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016bec:	4622      	mov	r2, r4
 8016bee:	4653      	mov	r3, sl
 8016bf0:	a949      	add	r1, sp, #292	; 0x124
 8016bf2:	f8cd 8000 	str.w	r8, [sp]
 8016bf6:	a829      	add	r0, sp, #164	; 0xa4
 8016bf8:	f003 f984 	bl	8019f04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016bfc:	4643      	mov	r3, r8
 8016bfe:	4622      	mov	r2, r4
 8016c00:	a949      	add	r1, sp, #292	; 0x124
 8016c02:	f8cd 9000 	str.w	r9, [sp]
 8016c06:	a839      	add	r0, sp, #228	; 0xe4
 8016c08:	f003 f97c 	bl	8019f04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016c0c:	42af      	cmp	r7, r5
 8016c0e:	bfb5      	itete	lt
 8016c10:	2300      	movlt	r3, #0
 8016c12:	2301      	movge	r3, #1
 8016c14:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016c16:	930e      	strge	r3, [sp, #56]	; 0x38
 8016c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c1a:	af12      	add	r7, sp, #72	; 0x48
 8016c1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016c20:	bfb9      	ittee	lt
 8016c22:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016c24:	ac19      	addlt	r4, sp, #100	; 0x64
 8016c26:	ad19      	addge	r5, sp, #100	; 0x64
 8016c28:	ac29      	addge	r4, sp, #164	; 0xa4
 8016c2a:	e887 0003 	stmia.w	r7, {r0, r1}
 8016c2e:	b928      	cbnz	r0, 8016c3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016c30:	4b80      	ldr	r3, [pc, #512]	; (8016e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016c32:	6818      	ldr	r0, [r3, #0]
 8016c34:	6803      	ldr	r3, [r0, #0]
 8016c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c38:	4798      	blx	r3
 8016c3a:	6038      	str	r0, [r7, #0]
 8016c3c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016c3e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016c42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c46:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016c48:	930c      	str	r3, [sp, #48]	; 0x30
 8016c4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c4c:	6963      	ldr	r3, [r4, #20]
 8016c4e:	440b      	add	r3, r1
 8016c50:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016c54:	4408      	add	r0, r1
 8016c56:	b200      	sxth	r0, r0
 8016c58:	4283      	cmp	r3, r0
 8016c5a:	900d      	str	r0, [sp, #52]	; 0x34
 8016c5c:	f280 80dd 	bge.w	8016e1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016c60:	428b      	cmp	r3, r1
 8016c62:	da08      	bge.n	8016c76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016c64:	2a00      	cmp	r2, #0
 8016c66:	dd06      	ble.n	8016c76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016c68:	1acb      	subs	r3, r1, r3
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	f2c0 80e4 	blt.w	8016e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	f300 80e2 	bgt.w	8016e3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016c76:	6967      	ldr	r7, [r4, #20]
 8016c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c7a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016c7e:	443b      	add	r3, r7
 8016c80:	461f      	mov	r7, r3
 8016c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c84:	1bdf      	subs	r7, r3, r7
 8016c86:	4297      	cmp	r7, r2
 8016c88:	bfa8      	it	ge
 8016c8a:	4617      	movge	r7, r2
 8016c8c:	2f00      	cmp	r7, #0
 8016c8e:	f340 8166 	ble.w	8016f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016c92:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016c94:	6829      	ldr	r1, [r5, #0]
 8016c96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016c9a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016c9e:	4411      	add	r1, r2
 8016ca0:	4299      	cmp	r1, r3
 8016ca2:	6820      	ldr	r0, [r4, #0]
 8016ca4:	dd1a      	ble.n	8016cdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016ca6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016caa:	4402      	add	r2, r0
 8016cac:	440b      	add	r3, r1
 8016cae:	b21b      	sxth	r3, r3
 8016cb0:	429a      	cmp	r2, r3
 8016cb2:	dc13      	bgt.n	8016cdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016cb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cb8:	a912      	add	r1, sp, #72	; 0x48
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	9206      	str	r2, [sp, #24]
 8016cbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016cc0:	9500      	str	r5, [sp, #0]
 8016cc2:	9205      	str	r2, [sp, #20]
 8016cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016cc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016cc8:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016ccc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016cce:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016cd2:	aa49      	add	r2, sp, #292	; 0x124
 8016cd4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016cd8:	4623      	mov	r3, r4
 8016cda:	47c8      	blx	r9
 8016cdc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016ce0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016ce4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016ce8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016cec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016cf0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016cf4:	ed94 6a08 	vldr	s12, [r4, #32]
 8016cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016cfc:	edd4 6a07 	vldr	s13, [r4, #28]
 8016d00:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016d04:	441a      	add	r2, r3
 8016d06:	6963      	ldr	r3, [r4, #20]
 8016d08:	68a1      	ldr	r1, [r4, #8]
 8016d0a:	3301      	adds	r3, #1
 8016d0c:	6163      	str	r3, [r4, #20]
 8016d0e:	69a3      	ldr	r3, [r4, #24]
 8016d10:	6022      	str	r2, [r4, #0]
 8016d12:	3b01      	subs	r3, #1
 8016d14:	61a3      	str	r3, [r4, #24]
 8016d16:	6923      	ldr	r3, [r4, #16]
 8016d18:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016d1c:	440b      	add	r3, r1
 8016d1e:	68e1      	ldr	r1, [r4, #12]
 8016d20:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016d24:	428b      	cmp	r3, r1
 8016d26:	edc4 6a07 	vstr	s13, [r4, #28]
 8016d2a:	6123      	str	r3, [r4, #16]
 8016d2c:	db15      	blt.n	8016d5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016d2e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016d32:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016d36:	edc4 6a07 	vstr	s13, [r4, #28]
 8016d3a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016d3e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016d42:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016d46:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d4e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016d52:	3201      	adds	r2, #1
 8016d54:	1a5b      	subs	r3, r3, r1
 8016d56:	6022      	str	r2, [r4, #0]
 8016d58:	6123      	str	r3, [r4, #16]
 8016d5a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016d5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016d62:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016d66:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016d6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d6e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016d72:	ed95 6a08 	vldr	s12, [r5, #32]
 8016d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016d7a:	edd5 6a07 	vldr	s13, [r5, #28]
 8016d7e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016d82:	441a      	add	r2, r3
 8016d84:	696b      	ldr	r3, [r5, #20]
 8016d86:	68a9      	ldr	r1, [r5, #8]
 8016d88:	3301      	adds	r3, #1
 8016d8a:	616b      	str	r3, [r5, #20]
 8016d8c:	69ab      	ldr	r3, [r5, #24]
 8016d8e:	602a      	str	r2, [r5, #0]
 8016d90:	3b01      	subs	r3, #1
 8016d92:	61ab      	str	r3, [r5, #24]
 8016d94:	692b      	ldr	r3, [r5, #16]
 8016d96:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016d9a:	440b      	add	r3, r1
 8016d9c:	68e9      	ldr	r1, [r5, #12]
 8016d9e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016da2:	428b      	cmp	r3, r1
 8016da4:	edc5 6a07 	vstr	s13, [r5, #28]
 8016da8:	612b      	str	r3, [r5, #16]
 8016daa:	db15      	blt.n	8016dd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016dac:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016db0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016db4:	edc5 6a07 	vstr	s13, [r5, #28]
 8016db8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016dbc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016dc0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016dc4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016dcc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016dd0:	3201      	adds	r2, #1
 8016dd2:	1a5b      	subs	r3, r3, r1
 8016dd4:	602a      	str	r2, [r5, #0]
 8016dd6:	612b      	str	r3, [r5, #16]
 8016dd8:	3f01      	subs	r7, #1
 8016dda:	e757      	b.n	8016c8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016ddc:	4299      	cmp	r1, r3
 8016dde:	dc13      	bgt.n	8016e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016de0:	429a      	cmp	r2, r3
 8016de2:	da14      	bge.n	8016e0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016de4:	2502      	movs	r5, #2
 8016de6:	2703      	movs	r7, #3
 8016de8:	46a9      	mov	r9, r5
 8016dea:	f04f 0800 	mov.w	r8, #0
 8016dee:	f04f 0a01 	mov.w	sl, #1
 8016df2:	e6ef      	b.n	8016bd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016df4:	2501      	movs	r5, #1
 8016df6:	2700      	movs	r7, #0
 8016df8:	46a9      	mov	r9, r5
 8016dfa:	46b8      	mov	r8, r7
 8016dfc:	f04f 0a02 	mov.w	sl, #2
 8016e00:	e6e8      	b.n	8016bd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016e02:	2501      	movs	r5, #1
 8016e04:	2702      	movs	r7, #2
 8016e06:	e6e1      	b.n	8016bcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016e08:	2500      	movs	r5, #0
 8016e0a:	2701      	movs	r7, #1
 8016e0c:	e7f4      	b.n	8016df8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016e0e:	2702      	movs	r7, #2
 8016e10:	2503      	movs	r5, #3
 8016e12:	f04f 0900 	mov.w	r9, #0
 8016e16:	46b8      	mov	r8, r7
 8016e18:	e7e9      	b.n	8016dee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016e1a:	4613      	mov	r3, r2
 8016e1c:	e728      	b.n	8016c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016e1e:	bf00      	nop
 8016e20:	2004f6c0 	.word	0x2004f6c0
 8016e24:	fffd8f01 	.word	0xfffd8f01
 8016e28:	00027100 	.word	0x00027100
 8016e2c:	0004e1ff 	.word	0x0004e1ff
 8016e30:	0004e1fe 	.word	0x0004e1fe
 8016e34:	2004f6c8 	.word	0x2004f6c8
 8016e38:	4613      	mov	r3, r2
 8016e3a:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016e3e:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016e42:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016e46:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016e4a:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016e4e:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016e52:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016e56:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016e5a:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016e5e:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016e62:	469e      	mov	lr, r3
 8016e64:	469c      	mov	ip, r3
 8016e66:	f04f 0900 	mov.w	r9, #0
 8016e6a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016e6c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016e6e:	9111      	str	r1, [sp, #68]	; 0x44
 8016e70:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016e74:	f1bc 0f00 	cmp.w	ip, #0
 8016e78:	d147      	bne.n	8016f0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016e7a:	eb03 0c07 	add.w	ip, r3, r7
 8016e7e:	1ad7      	subs	r7, r2, r3
 8016e80:	f1b9 0f00 	cmp.w	r9, #0
 8016e84:	d009      	beq.n	8016e9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016e86:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016e8a:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016e8e:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016e92:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016e96:	9029      	str	r0, [sp, #164]	; 0xa4
 8016e98:	912d      	str	r1, [sp, #180]	; 0xb4
 8016e9a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016e9e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016ea2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016ea6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016eaa:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016eae:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016eb2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016eb6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016eba:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016ebe:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016ec2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016ec6:	f04f 0800 	mov.w	r8, #0
 8016eca:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016ecc:	9111      	str	r1, [sp, #68]	; 0x44
 8016ece:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016ed2:	f1be 0f00 	cmp.w	lr, #0
 8016ed6:	d031      	beq.n	8016f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016ed8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016eda:	4450      	add	r0, sl
 8016edc:	4431      	add	r1, r6
 8016ede:	4549      	cmp	r1, r9
 8016ee0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016ee4:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016ee8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016eec:	db08      	blt.n	8016f00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016eee:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016ef2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016ef6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016efa:	3001      	adds	r0, #1
 8016efc:	eba1 0109 	sub.w	r1, r1, r9
 8016f00:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016f04:	f04f 0801 	mov.w	r8, #1
 8016f08:	e7e3      	b.n	8016ed2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016f0a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016f0c:	4450      	add	r0, sl
 8016f0e:	4431      	add	r1, r6
 8016f10:	4541      	cmp	r1, r8
 8016f12:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016f16:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016f1a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016f1e:	db08      	blt.n	8016f32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016f20:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016f24:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016f28:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016f2c:	3001      	adds	r0, #1
 8016f2e:	eba1 0108 	sub.w	r1, r1, r8
 8016f32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016f36:	f04f 0901 	mov.w	r9, #1
 8016f3a:	e79b      	b.n	8016e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016f3c:	449c      	add	ip, r3
 8016f3e:	1aff      	subs	r7, r7, r3
 8016f40:	f1b8 0f00 	cmp.w	r8, #0
 8016f44:	d009      	beq.n	8016f5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016f46:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016f4a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016f4e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016f52:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016f56:	9019      	str	r0, [sp, #100]	; 0x64
 8016f58:	911d      	str	r1, [sp, #116]	; 0x74
 8016f5a:	1ad2      	subs	r2, r2, r3
 8016f5c:	e68b      	b.n	8016c76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f60:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	f000 80d1 	beq.w	801710a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016f68:	ad19      	add	r5, sp, #100	; 0x64
 8016f6a:	ac39      	add	r4, sp, #228	; 0xe4
 8016f6c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016f6e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016f72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016f76:	930c      	str	r3, [sp, #48]	; 0x30
 8016f78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016f7a:	6963      	ldr	r3, [r4, #20]
 8016f7c:	440b      	add	r3, r1
 8016f7e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016f82:	4408      	add	r0, r1
 8016f84:	b200      	sxth	r0, r0
 8016f86:	4283      	cmp	r3, r0
 8016f88:	900d      	str	r0, [sp, #52]	; 0x34
 8016f8a:	f280 80c1 	bge.w	8017110 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8016f8e:	428b      	cmp	r3, r1
 8016f90:	da08      	bge.n	8016fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016f92:	2a00      	cmp	r2, #0
 8016f94:	dd06      	ble.n	8016fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016f96:	1acb      	subs	r3, r1, r3
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	f2c0 80bb 	blt.w	8017114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	f300 80b9 	bgt.w	8017116 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016fa4:	6967      	ldr	r7, [r4, #20]
 8016fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fa8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016fac:	443b      	add	r3, r7
 8016fae:	461f      	mov	r7, r3
 8016fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fb2:	1bdf      	subs	r7, r3, r7
 8016fb4:	4297      	cmp	r7, r2
 8016fb6:	bfa8      	it	ge
 8016fb8:	4617      	movge	r7, r2
 8016fba:	2f00      	cmp	r7, #0
 8016fbc:	f340 813c 	ble.w	8017238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016fc0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016fc2:	6829      	ldr	r1, [r5, #0]
 8016fc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016fc8:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016fcc:	4411      	add	r1, r2
 8016fce:	4299      	cmp	r1, r3
 8016fd0:	6820      	ldr	r0, [r4, #0]
 8016fd2:	dd1a      	ble.n	801700a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016fd4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016fd8:	4402      	add	r2, r0
 8016fda:	440b      	add	r3, r1
 8016fdc:	b21b      	sxth	r3, r3
 8016fde:	429a      	cmp	r2, r3
 8016fe0:	dc13      	bgt.n	801700a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016fe2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fe6:	a912      	add	r1, sp, #72	; 0x48
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	9206      	str	r2, [sp, #24]
 8016fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016fee:	9500      	str	r5, [sp, #0]
 8016ff0:	9205      	str	r2, [sp, #20]
 8016ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ff6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016ffa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016ffc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017000:	aa49      	add	r2, sp, #292	; 0x124
 8017002:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017006:	4623      	mov	r3, r4
 8017008:	47c8      	blx	r9
 801700a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801700e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017012:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017016:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801701a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801701e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017022:	ed94 6a08 	vldr	s12, [r4, #32]
 8017026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801702a:	edd4 6a07 	vldr	s13, [r4, #28]
 801702e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017032:	441a      	add	r2, r3
 8017034:	6963      	ldr	r3, [r4, #20]
 8017036:	68a1      	ldr	r1, [r4, #8]
 8017038:	3301      	adds	r3, #1
 801703a:	6163      	str	r3, [r4, #20]
 801703c:	69a3      	ldr	r3, [r4, #24]
 801703e:	6022      	str	r2, [r4, #0]
 8017040:	3b01      	subs	r3, #1
 8017042:	61a3      	str	r3, [r4, #24]
 8017044:	6923      	ldr	r3, [r4, #16]
 8017046:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801704a:	440b      	add	r3, r1
 801704c:	68e1      	ldr	r1, [r4, #12]
 801704e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017052:	428b      	cmp	r3, r1
 8017054:	edc4 6a07 	vstr	s13, [r4, #28]
 8017058:	6123      	str	r3, [r4, #16]
 801705a:	db15      	blt.n	8017088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801705c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017060:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017064:	edc4 6a07 	vstr	s13, [r4, #28]
 8017068:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801706c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017070:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017074:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017078:	ee77 7a27 	vadd.f32	s15, s14, s15
 801707c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017080:	3201      	adds	r2, #1
 8017082:	1a5b      	subs	r3, r3, r1
 8017084:	6022      	str	r2, [r4, #0]
 8017086:	6123      	str	r3, [r4, #16]
 8017088:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801708c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017090:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017094:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017098:	ee37 7a27 	vadd.f32	s14, s14, s15
 801709c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80170a0:	ed95 6a08 	vldr	s12, [r5, #32]
 80170a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80170a8:	edd5 6a07 	vldr	s13, [r5, #28]
 80170ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 80170b0:	441a      	add	r2, r3
 80170b2:	696b      	ldr	r3, [r5, #20]
 80170b4:	68a9      	ldr	r1, [r5, #8]
 80170b6:	3301      	adds	r3, #1
 80170b8:	616b      	str	r3, [r5, #20]
 80170ba:	69ab      	ldr	r3, [r5, #24]
 80170bc:	602a      	str	r2, [r5, #0]
 80170be:	3b01      	subs	r3, #1
 80170c0:	61ab      	str	r3, [r5, #24]
 80170c2:	692b      	ldr	r3, [r5, #16]
 80170c4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80170c8:	440b      	add	r3, r1
 80170ca:	68e9      	ldr	r1, [r5, #12]
 80170cc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80170d0:	428b      	cmp	r3, r1
 80170d2:	edc5 6a07 	vstr	s13, [r5, #28]
 80170d6:	612b      	str	r3, [r5, #16]
 80170d8:	db15      	blt.n	8017106 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80170da:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80170de:	ee76 6a26 	vadd.f32	s13, s12, s13
 80170e2:	edc5 6a07 	vstr	s13, [r5, #28]
 80170e6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80170ea:	ee36 7a87 	vadd.f32	s14, s13, s14
 80170ee:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80170f2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80170f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80170fa:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80170fe:	3201      	adds	r2, #1
 8017100:	1a5b      	subs	r3, r3, r1
 8017102:	602a      	str	r2, [r5, #0]
 8017104:	612b      	str	r3, [r5, #16]
 8017106:	3f01      	subs	r7, #1
 8017108:	e757      	b.n	8016fba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801710a:	ad39      	add	r5, sp, #228	; 0xe4
 801710c:	ac19      	add	r4, sp, #100	; 0x64
 801710e:	e72d      	b.n	8016f6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017110:	4613      	mov	r3, r2
 8017112:	e744      	b.n	8016f9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017114:	4613      	mov	r3, r2
 8017116:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801711a:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801711e:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8017122:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8017126:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801712a:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801712e:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8017132:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8017136:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801713a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801713e:	469e      	mov	lr, r3
 8017140:	461f      	mov	r7, r3
 8017142:	f04f 0900 	mov.w	r9, #0
 8017146:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017148:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801714c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801714e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8017152:	960e      	str	r6, [sp, #56]	; 0x38
 8017154:	2f00      	cmp	r7, #0
 8017156:	d146      	bne.n	80171e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017158:	449c      	add	ip, r3
 801715a:	1ad7      	subs	r7, r2, r3
 801715c:	f1b9 0f00 	cmp.w	r9, #0
 8017160:	d009      	beq.n	8017176 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017162:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017166:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801716a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801716e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017172:	9039      	str	r0, [sp, #228]	; 0xe4
 8017174:	913d      	str	r1, [sp, #244]	; 0xf4
 8017176:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801717a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801717e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017182:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017186:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801718a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801718e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017192:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017196:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801719a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801719e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80171a2:	f04f 0800 	mov.w	r8, #0
 80171a6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80171a8:	910e      	str	r1, [sp, #56]	; 0x38
 80171aa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80171ae:	f1be 0f00 	cmp.w	lr, #0
 80171b2:	d030      	beq.n	8017216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80171b4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80171b6:	4450      	add	r0, sl
 80171b8:	4431      	add	r1, r6
 80171ba:	4549      	cmp	r1, r9
 80171bc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80171c0:	ee37 7a04 	vadd.f32	s14, s14, s8
 80171c4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80171c8:	db08      	blt.n	80171dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80171ca:	ee77 7a85 	vadd.f32	s15, s15, s10
 80171ce:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80171d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80171d6:	3001      	adds	r0, #1
 80171d8:	eba1 0109 	sub.w	r1, r1, r9
 80171dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80171e0:	f04f 0801 	mov.w	r8, #1
 80171e4:	e7e3      	b.n	80171ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80171e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80171e8:	4450      	add	r0, sl
 80171ea:	4431      	add	r1, r6
 80171ec:	4541      	cmp	r1, r8
 80171ee:	ee37 7a24 	vadd.f32	s14, s14, s9
 80171f2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80171f6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80171fa:	db08      	blt.n	801720e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80171fc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017200:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017204:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017208:	3001      	adds	r0, #1
 801720a:	eba1 0108 	sub.w	r1, r1, r8
 801720e:	3f01      	subs	r7, #1
 8017210:	f04f 0901 	mov.w	r9, #1
 8017214:	e79e      	b.n	8017154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017216:	449c      	add	ip, r3
 8017218:	1aff      	subs	r7, r7, r3
 801721a:	f1b8 0f00 	cmp.w	r8, #0
 801721e:	d009      	beq.n	8017234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017220:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017224:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017228:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801722c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017230:	9019      	str	r0, [sp, #100]	; 0x64
 8017232:	911d      	str	r1, [sp, #116]	; 0x74
 8017234:	1ad2      	subs	r2, r2, r3
 8017236:	e6b5      	b.n	8016fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	b923      	cbnz	r3, 8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801723e:	4b04      	ldr	r3, [pc, #16]	; (8017250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017240:	6818      	ldr	r0, [r3, #0]
 8017242:	6803      	ldr	r3, [r0, #0]
 8017244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017246:	4798      	blx	r3
 8017248:	b05b      	add	sp, #364	; 0x16c
 801724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801724e:	bf00      	nop
 8017250:	2004f6c8 	.word	0x2004f6c8

08017254 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017254:	2b03      	cmp	r3, #3
 8017256:	d818      	bhi.n	801728a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8017258:	e8df f003 	tbb	[pc, r3]
 801725c:	130d0602 	.word	0x130d0602
 8017260:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017264:	1850      	adds	r0, r2, r1
 8017266:	4770      	bx	lr
 8017268:	8803      	ldrh	r3, [r0, #0]
 801726a:	8880      	ldrh	r0, [r0, #4]
 801726c:	4418      	add	r0, r3
 801726e:	b200      	sxth	r0, r0
 8017270:	1a80      	subs	r0, r0, r2
 8017272:	3801      	subs	r0, #1
 8017274:	4770      	bx	lr
 8017276:	8803      	ldrh	r3, [r0, #0]
 8017278:	8880      	ldrh	r0, [r0, #4]
 801727a:	4418      	add	r0, r3
 801727c:	b200      	sxth	r0, r0
 801727e:	1a40      	subs	r0, r0, r1
 8017280:	e7f7      	b.n	8017272 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017282:	f9b0 0000 	ldrsh.w	r0, [r0]
 8017286:	4410      	add	r0, r2
 8017288:	4770      	bx	lr
 801728a:	2000      	movs	r0, #0
 801728c:	4770      	bx	lr

0801728e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801728e:	2b03      	cmp	r3, #3
 8017290:	d817      	bhi.n	80172c2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017292:	e8df f003 	tbb	[pc, r3]
 8017296:	0602      	.short	0x0602
 8017298:	1009      	.short	0x1009
 801729a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801729e:	1850      	adds	r0, r2, r1
 80172a0:	4770      	bx	lr
 80172a2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80172a6:	e7fa      	b.n	801729e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80172a8:	8843      	ldrh	r3, [r0, #2]
 80172aa:	88c0      	ldrh	r0, [r0, #6]
 80172ac:	4418      	add	r0, r3
 80172ae:	b200      	sxth	r0, r0
 80172b0:	1a80      	subs	r0, r0, r2
 80172b2:	3801      	subs	r0, #1
 80172b4:	4770      	bx	lr
 80172b6:	8843      	ldrh	r3, [r0, #2]
 80172b8:	88c0      	ldrh	r0, [r0, #6]
 80172ba:	4418      	add	r0, r3
 80172bc:	b200      	sxth	r0, r0
 80172be:	1a40      	subs	r0, r0, r1
 80172c0:	e7f7      	b.n	80172b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80172c2:	2000      	movs	r0, #0
 80172c4:	4770      	bx	lr
	...

080172c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80172c8:	2200      	movs	r2, #0
 80172ca:	4b01      	ldr	r3, [pc, #4]	; (80172d0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80172cc:	601a      	str	r2, [r3, #0]
 80172ce:	4770      	bx	lr
 80172d0:	2004f6d8 	.word	0x2004f6d8

080172d4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80172d4:	4603      	mov	r3, r0
 80172d6:	b1c8      	cbz	r0, 801730c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80172d8:	0c02      	lsrs	r2, r0, #16
 80172da:	0412      	lsls	r2, r2, #16
 80172dc:	b9a2      	cbnz	r2, 8017308 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80172de:	0403      	lsls	r3, r0, #16
 80172e0:	2010      	movs	r0, #16
 80172e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80172e6:	bf04      	itt	eq
 80172e8:	021b      	lsleq	r3, r3, #8
 80172ea:	3008      	addeq	r0, #8
 80172ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80172f0:	bf04      	itt	eq
 80172f2:	011b      	lsleq	r3, r3, #4
 80172f4:	3004      	addeq	r0, #4
 80172f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80172fa:	bf04      	itt	eq
 80172fc:	009b      	lsleq	r3, r3, #2
 80172fe:	3002      	addeq	r0, #2
 8017300:	2b00      	cmp	r3, #0
 8017302:	db04      	blt.n	801730e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017304:	3001      	adds	r0, #1
 8017306:	4770      	bx	lr
 8017308:	2000      	movs	r0, #0
 801730a:	e7ea      	b.n	80172e2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801730c:	2020      	movs	r0, #32
 801730e:	4770      	bx	lr

08017310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017314:	b087      	sub	sp, #28
 8017316:	4681      	mov	r9, r0
 8017318:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801731c:	4610      	mov	r0, r2
 801731e:	4698      	mov	r8, r3
 8017320:	460d      	mov	r5, r1
 8017322:	b981      	cbnz	r1, 8017346 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017324:	b14b      	cbz	r3, 801733a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8017326:	460b      	mov	r3, r1
 8017328:	e9cd 4700 	strd	r4, r7, [sp]
 801732c:	464a      	mov	r2, r9
 801732e:	4641      	mov	r1, r8
 8017330:	f7ff ffee 	bl	8017310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017334:	b007      	add	sp, #28
 8017336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801733a:	f04f 33ff 	mov.w	r3, #4294967295
 801733e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017342:	603b      	str	r3, [r7, #0]
 8017344:	e7f6      	b.n	8017334 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017346:	fa32 fa01 	lsrs.w	sl, r2, r1
 801734a:	d107      	bne.n	801735c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801734c:	fb09 f602 	mul.w	r6, r9, r2
 8017350:	fbb6 f0f4 	udiv	r0, r6, r4
 8017354:	fb04 6610 	mls	r6, r4, r0, r6
 8017358:	603e      	str	r6, [r7, #0]
 801735a:	e7eb      	b.n	8017334 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801735c:	fa09 fb01 	lsl.w	fp, r9, r1
 8017360:	fbbb f3f4 	udiv	r3, fp, r4
 8017364:	2601      	movs	r6, #1
 8017366:	9302      	str	r3, [sp, #8]
 8017368:	408e      	lsls	r6, r1
 801736a:	fb0a f303 	mul.w	r3, sl, r3
 801736e:	3e01      	subs	r6, #1
 8017370:	4016      	ands	r6, r2
 8017372:	4630      	mov	r0, r6
 8017374:	9303      	str	r3, [sp, #12]
 8017376:	f7ff ffad 	bl	80172d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801737a:	464a      	mov	r2, r9
 801737c:	460b      	mov	r3, r1
 801737e:	e9cd 4700 	strd	r4, r7, [sp]
 8017382:	4601      	mov	r1, r0
 8017384:	4630      	mov	r0, r6
 8017386:	f7ff ffc3 	bl	8017310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801738a:	9b02      	ldr	r3, [sp, #8]
 801738c:	4606      	mov	r6, r0
 801738e:	fb04 bb13 	mls	fp, r4, r3, fp
 8017392:	4658      	mov	r0, fp
 8017394:	eb05 0108 	add.w	r1, r5, r8
 8017398:	f7ff ff9c 	bl	80172d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801739c:	ab05      	add	r3, sp, #20
 801739e:	e9cd 4300 	strd	r4, r3, [sp]
 80173a2:	465a      	mov	r2, fp
 80173a4:	4603      	mov	r3, r0
 80173a6:	4650      	mov	r0, sl
 80173a8:	f7ff ffb2 	bl	8017310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80173ac:	6839      	ldr	r1, [r7, #0]
 80173ae:	9a05      	ldr	r2, [sp, #20]
 80173b0:	9b03      	ldr	r3, [sp, #12]
 80173b2:	4411      	add	r1, r2
 80173b4:	fbb1 f2f4 	udiv	r2, r1, r4
 80173b8:	fb04 1412 	mls	r4, r4, r2, r1
 80173bc:	18d3      	adds	r3, r2, r3
 80173be:	441e      	add	r6, r3
 80173c0:	4430      	add	r0, r6
 80173c2:	603c      	str	r4, [r7, #0]
 80173c4:	e7b6      	b.n	8017334 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080173c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80173c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173ca:	b085      	sub	sp, #20
 80173cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80173ce:	f1b0 0900 	subs.w	r9, r0, #0
 80173d2:	461d      	mov	r5, r3
 80173d4:	bfbf      	itttt	lt
 80173d6:	6823      	ldrlt	r3, [r4, #0]
 80173d8:	f1c9 0900 	rsblt	r9, r9, #0
 80173dc:	425b      	neglt	r3, r3
 80173de:	6023      	strlt	r3, [r4, #0]
 80173e0:	bfb4      	ite	lt
 80173e2:	f04f 36ff 	movlt.w	r6, #4294967295
 80173e6:	2601      	movge	r6, #1
 80173e8:	2a00      	cmp	r2, #0
 80173ea:	4617      	mov	r7, r2
 80173ec:	da04      	bge.n	80173f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80173ee:	6823      	ldr	r3, [r4, #0]
 80173f0:	4257      	negs	r7, r2
 80173f2:	425b      	negs	r3, r3
 80173f4:	4276      	negs	r6, r6
 80173f6:	6023      	str	r3, [r4, #0]
 80173f8:	2d00      	cmp	r5, #0
 80173fa:	4638      	mov	r0, r7
 80173fc:	bfba      	itte	lt
 80173fe:	426d      	neglt	r5, r5
 8017400:	f04f 38ff 	movlt.w	r8, #4294967295
 8017404:	f04f 0801 	movge.w	r8, #1
 8017408:	f7ff ff64 	bl	80172d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801740c:	ab03      	add	r3, sp, #12
 801740e:	e9cd 5300 	strd	r5, r3, [sp]
 8017412:	463a      	mov	r2, r7
 8017414:	4603      	mov	r3, r0
 8017416:	4648      	mov	r0, r9
 8017418:	f7ff ff7a 	bl	8017310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801741c:	6823      	ldr	r3, [r4, #0]
 801741e:	9a03      	ldr	r2, [sp, #12]
 8017420:	4546      	cmp	r6, r8
 8017422:	441a      	add	r2, r3
 8017424:	fb92 f3f5 	sdiv	r3, r2, r5
 8017428:	4418      	add	r0, r3
 801742a:	fb05 2313 	mls	r3, r5, r3, r2
 801742e:	bf18      	it	ne
 8017430:	4240      	negne	r0, r0
 8017432:	1c72      	adds	r2, r6, #1
 8017434:	6023      	str	r3, [r4, #0]
 8017436:	d105      	bne.n	8017444 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017438:	2b00      	cmp	r3, #0
 801743a:	f1c3 0200 	rsb	r2, r3, #0
 801743e:	db0b      	blt.n	8017458 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017440:	6022      	str	r2, [r4, #0]
 8017442:	e006      	b.n	8017452 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017444:	2e01      	cmp	r6, #1
 8017446:	d104      	bne.n	8017452 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017448:	2b00      	cmp	r3, #0
 801744a:	da02      	bge.n	8017452 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801744c:	442b      	add	r3, r5
 801744e:	3801      	subs	r0, #1
 8017450:	6023      	str	r3, [r4, #0]
 8017452:	b005      	add	sp, #20
 8017454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017458:	3801      	subs	r0, #1
 801745a:	1b52      	subs	r2, r2, r5
 801745c:	e7f0      	b.n	8017440 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017460 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017460:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017464:	4c1c      	ldr	r4, [pc, #112]	; (80174d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017466:	4605      	mov	r5, r0
 8017468:	69a3      	ldr	r3, [r4, #24]
 801746a:	6807      	ldr	r7, [r0, #0]
 801746c:	b92b      	cbnz	r3, 801747a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801746e:	6840      	ldr	r0, [r0, #4]
 8017470:	e9c5 7000 	strd	r7, r0, [r5]
 8017474:	b004      	add	sp, #16
 8017476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801747a:	f04f 0802 	mov.w	r8, #2
 801747e:	fb93 f1f8 	sdiv	r1, r3, r8
 8017482:	68a2      	ldr	r2, [r4, #8]
 8017484:	ae04      	add	r6, sp, #16
 8017486:	440a      	add	r2, r1
 8017488:	f846 2d04 	str.w	r2, [r6, #-4]!
 801748c:	69e1      	ldr	r1, [r4, #28]
 801748e:	463a      	mov	r2, r7
 8017490:	9600      	str	r6, [sp, #0]
 8017492:	6820      	ldr	r0, [r4, #0]
 8017494:	f7ff ff97 	bl	80173c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017498:	69a3      	ldr	r3, [r4, #24]
 801749a:	4607      	mov	r7, r0
 801749c:	686a      	ldr	r2, [r5, #4]
 801749e:	6a21      	ldr	r1, [r4, #32]
 80174a0:	9600      	str	r6, [sp, #0]
 80174a2:	6860      	ldr	r0, [r4, #4]
 80174a4:	f7ff ff8f 	bl	80173c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80174a8:	69a3      	ldr	r3, [r4, #24]
 80174aa:	6962      	ldr	r2, [r4, #20]
 80174ac:	fb93 f8f8 	sdiv	r8, r3, r8
 80174b0:	4442      	add	r2, r8
 80174b2:	9203      	str	r2, [sp, #12]
 80174b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80174b6:	682a      	ldr	r2, [r5, #0]
 80174b8:	4407      	add	r7, r0
 80174ba:	9600      	str	r6, [sp, #0]
 80174bc:	68e0      	ldr	r0, [r4, #12]
 80174be:	f7ff ff82 	bl	80173c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80174c2:	9600      	str	r6, [sp, #0]
 80174c4:	4680      	mov	r8, r0
 80174c6:	69a3      	ldr	r3, [r4, #24]
 80174c8:	686a      	ldr	r2, [r5, #4]
 80174ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80174cc:	6920      	ldr	r0, [r4, #16]
 80174ce:	f7ff ff7a 	bl	80173c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80174d2:	4440      	add	r0, r8
 80174d4:	e7cc      	b.n	8017470 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80174d6:	bf00      	nop
 80174d8:	2004f6dc 	.word	0x2004f6dc

080174dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80174dc:	4b07      	ldr	r3, [pc, #28]	; (80174fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80174de:	781b      	ldrb	r3, [r3, #0]
 80174e0:	2b01      	cmp	r3, #1
 80174e2:	d109      	bne.n	80174f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80174e4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80174e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80174ec:	8003      	strh	r3, [r0, #0]
 80174ee:	4b04      	ldr	r3, [pc, #16]	; (8017500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80174f0:	881b      	ldrh	r3, [r3, #0]
 80174f2:	3b01      	subs	r3, #1
 80174f4:	1a9b      	subs	r3, r3, r2
 80174f6:	800b      	strh	r3, [r1, #0]
 80174f8:	4770      	bx	lr
 80174fa:	bf00      	nop
 80174fc:	2004f6c0 	.word	0x2004f6c0
 8017500:	2004f6bc 	.word	0x2004f6bc

08017504 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017504:	b510      	push	{r4, lr}
 8017506:	4b07      	ldr	r3, [pc, #28]	; (8017524 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017508:	781b      	ldrb	r3, [r3, #0]
 801750a:	2b01      	cmp	r3, #1
 801750c:	d108      	bne.n	8017520 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801750e:	4b06      	ldr	r3, [pc, #24]	; (8017528 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017510:	880c      	ldrh	r4, [r1, #0]
 8017512:	881b      	ldrh	r3, [r3, #0]
 8017514:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017518:	3b01      	subs	r3, #1
 801751a:	1b1b      	subs	r3, r3, r4
 801751c:	8003      	strh	r3, [r0, #0]
 801751e:	800a      	strh	r2, [r1, #0]
 8017520:	bd10      	pop	{r4, pc}
 8017522:	bf00      	nop
 8017524:	2004f6c0 	.word	0x2004f6c0
 8017528:	2004f6bc 	.word	0x2004f6bc

0801752c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801752c:	b510      	push	{r4, lr}
 801752e:	4b0a      	ldr	r3, [pc, #40]	; (8017558 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017530:	781b      	ldrb	r3, [r3, #0]
 8017532:	2b01      	cmp	r3, #1
 8017534:	d10e      	bne.n	8017554 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017536:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801753a:	8843      	ldrh	r3, [r0, #2]
 801753c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017540:	18ca      	adds	r2, r1, r3
 8017542:	4b06      	ldr	r3, [pc, #24]	; (801755c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017544:	8044      	strh	r4, [r0, #2]
 8017546:	881b      	ldrh	r3, [r3, #0]
 8017548:	1a9b      	subs	r3, r3, r2
 801754a:	8003      	strh	r3, [r0, #0]
 801754c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017550:	8081      	strh	r1, [r0, #4]
 8017552:	80c3      	strh	r3, [r0, #6]
 8017554:	bd10      	pop	{r4, pc}
 8017556:	bf00      	nop
 8017558:	2004f6c0 	.word	0x2004f6c0
 801755c:	2004f6bc 	.word	0x2004f6bc

08017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017560:	4b08      	ldr	r3, [pc, #32]	; (8017584 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017562:	781b      	ldrb	r3, [r3, #0]
 8017564:	2b01      	cmp	r3, #1
 8017566:	d10c      	bne.n	8017582 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017568:	8803      	ldrh	r3, [r0, #0]
 801756a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801756e:	8842      	ldrh	r2, [r0, #2]
 8017570:	8002      	strh	r2, [r0, #0]
 8017572:	185a      	adds	r2, r3, r1
 8017574:	4b04      	ldr	r3, [pc, #16]	; (8017588 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017576:	881b      	ldrh	r3, [r3, #0]
 8017578:	1a9b      	subs	r3, r3, r2
 801757a:	8043      	strh	r3, [r0, #2]
 801757c:	88c3      	ldrh	r3, [r0, #6]
 801757e:	80c1      	strh	r1, [r0, #6]
 8017580:	8083      	strh	r3, [r0, #4]
 8017582:	4770      	bx	lr
 8017584:	2004f6c0 	.word	0x2004f6c0
 8017588:	2004f6bc 	.word	0x2004f6bc

0801758c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801758c:	b510      	push	{r4, lr}
 801758e:	4b07      	ldr	r3, [pc, #28]	; (80175ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017590:	781b      	ldrb	r3, [r3, #0]
 8017592:	2b01      	cmp	r3, #1
 8017594:	d108      	bne.n	80175a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017596:	f9b1 3000 	ldrsh.w	r3, [r1]
 801759a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801759e:	8003      	strh	r3, [r0, #0]
 80175a0:	8893      	ldrh	r3, [r2, #4]
 80175a2:	3b01      	subs	r3, #1
 80175a4:	1b1b      	subs	r3, r3, r4
 80175a6:	800b      	strh	r3, [r1, #0]
 80175a8:	bd10      	pop	{r4, pc}
 80175aa:	bf00      	nop
 80175ac:	2004f6c0 	.word	0x2004f6c0

080175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80175b0:	b510      	push	{r4, lr}
 80175b2:	4b0a      	ldr	r3, [pc, #40]	; (80175dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80175b4:	460a      	mov	r2, r1
 80175b6:	781b      	ldrb	r3, [r3, #0]
 80175b8:	2b01      	cmp	r3, #1
 80175ba:	d10d      	bne.n	80175d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80175bc:	8881      	ldrh	r1, [r0, #4]
 80175be:	8803      	ldrh	r3, [r0, #0]
 80175c0:	440b      	add	r3, r1
 80175c2:	4601      	mov	r1, r0
 80175c4:	3b01      	subs	r3, #1
 80175c6:	f821 3b02 	strh.w	r3, [r1], #2
 80175ca:	f7ff ffdf 	bl	801758c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80175ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80175d2:	88c2      	ldrh	r2, [r0, #6]
 80175d4:	80c3      	strh	r3, [r0, #6]
 80175d6:	8082      	strh	r2, [r0, #4]
 80175d8:	bd10      	pop	{r4, pc}
 80175da:	bf00      	nop
 80175dc:	2004f6c0 	.word	0x2004f6c0

080175e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80175e0:	2300      	movs	r3, #0
 80175e2:	b570      	push	{r4, r5, r6, lr}
 80175e4:	4c0a      	ldr	r4, [pc, #40]	; (8017610 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80175e6:	4605      	mov	r5, r0
 80175e8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80175ec:	6820      	ldr	r0, [r4, #0]
 80175ee:	460e      	mov	r6, r1
 80175f0:	b110      	cbz	r0, 80175f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 80175f2:	6803      	ldr	r3, [r0, #0]
 80175f4:	695b      	ldr	r3, [r3, #20]
 80175f6:	4798      	blx	r3
 80175f8:	6026      	str	r6, [r4, #0]
 80175fa:	6833      	ldr	r3, [r6, #0]
 80175fc:	4630      	mov	r0, r6
 80175fe:	68db      	ldr	r3, [r3, #12]
 8017600:	4798      	blx	r3
 8017602:	682b      	ldr	r3, [r5, #0]
 8017604:	4628      	mov	r0, r5
 8017606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801760a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801760c:	4718      	bx	r3
 801760e:	bf00      	nop
 8017610:	2004f70c 	.word	0x2004f70c

08017614 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017614:	2100      	movs	r1, #0
 8017616:	4b06      	ldr	r3, [pc, #24]	; (8017630 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017618:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801761c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017620:	4b04      	ldr	r3, [pc, #16]	; (8017634 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017622:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8017626:	f9b3 3000 	ldrsh.w	r3, [r3]
 801762a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801762e:	4770      	bx	lr
 8017630:	2004f6bc 	.word	0x2004f6bc
 8017634:	2004f6be 	.word	0x2004f6be

08017638 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017638:	4b03      	ldr	r3, [pc, #12]	; (8017648 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801763a:	6818      	ldr	r0, [r3, #0]
 801763c:	b110      	cbz	r0, 8017644 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801763e:	6803      	ldr	r3, [r0, #0]
 8017640:	699b      	ldr	r3, [r3, #24]
 8017642:	4718      	bx	r3
 8017644:	4770      	bx	lr
 8017646:	bf00      	nop
 8017648:	2004f70c 	.word	0x2004f70c

0801764c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801764c:	4770      	bx	lr
	...

08017650 <_ZN8touchgfx11Application4drawEv>:
 8017650:	b507      	push	{r0, r1, r2, lr}
 8017652:	2100      	movs	r1, #0
 8017654:	4b08      	ldr	r3, [pc, #32]	; (8017678 <_ZN8touchgfx11Application4drawEv+0x28>)
 8017656:	9100      	str	r1, [sp, #0]
 8017658:	f9b3 2000 	ldrsh.w	r2, [r3]
 801765c:	4b07      	ldr	r3, [pc, #28]	; (801767c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801765e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017666:	4669      	mov	r1, sp
 8017668:	f8ad 3006 	strh.w	r3, [sp, #6]
 801766c:	6803      	ldr	r3, [r0, #0]
 801766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017670:	4798      	blx	r3
 8017672:	b003      	add	sp, #12
 8017674:	f85d fb04 	ldr.w	pc, [sp], #4
 8017678:	2004f6bc 	.word	0x2004f6bc
 801767c:	2004f6be 	.word	0x2004f6be

08017680 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017680:	4b03      	ldr	r3, [pc, #12]	; (8017690 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017682:	6818      	ldr	r0, [r3, #0]
 8017684:	b110      	cbz	r0, 801768c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017686:	6803      	ldr	r3, [r0, #0]
 8017688:	69db      	ldr	r3, [r3, #28]
 801768a:	4718      	bx	r3
 801768c:	4770      	bx	lr
 801768e:	bf00      	nop
 8017690:	2004f70c 	.word	0x2004f70c

08017694 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017694:	4b03      	ldr	r3, [pc, #12]	; (80176a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017696:	6818      	ldr	r0, [r3, #0]
 8017698:	b110      	cbz	r0, 80176a0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801769a:	6803      	ldr	r3, [r0, #0]
 801769c:	6a1b      	ldr	r3, [r3, #32]
 801769e:	4718      	bx	r3
 80176a0:	4770      	bx	lr
 80176a2:	bf00      	nop
 80176a4:	2004f70c 	.word	0x2004f70c

080176a8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80176a8:	2300      	movs	r3, #0
 80176aa:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80176ae:	4770      	bx	lr

080176b0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80176b0:	4b03      	ldr	r3, [pc, #12]	; (80176c0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80176b2:	6818      	ldr	r0, [r3, #0]
 80176b4:	b110      	cbz	r0, 80176bc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80176b6:	6803      	ldr	r3, [r0, #0]
 80176b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176ba:	4718      	bx	r3
 80176bc:	4770      	bx	lr
 80176be:	bf00      	nop
 80176c0:	2004f70c 	.word	0x2004f70c

080176c4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80176c4:	b570      	push	{r4, r5, r6, lr}
 80176c6:	4d32      	ldr	r5, [pc, #200]	; (8017790 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 80176c8:	4604      	mov	r4, r0
 80176ca:	6828      	ldr	r0, [r5, #0]
 80176cc:	b140      	cbz	r0, 80176e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80176ce:	7a03      	ldrb	r3, [r0, #8]
 80176d0:	b933      	cbnz	r3, 80176e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80176d2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80176d6:	6803      	ldr	r3, [r0, #0]
 80176d8:	689b      	ldr	r3, [r3, #8]
 80176da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176de:	4718      	bx	r3
 80176e0:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 80176e4:	b97b      	cbnz	r3, 8017706 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80176e6:	b170      	cbz	r0, 8017706 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80176e8:	7a03      	ldrb	r3, [r0, #8]
 80176ea:	b163      	cbz	r3, 8017706 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80176ec:	4b29      	ldr	r3, [pc, #164]	; (8017794 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80176ee:	6818      	ldr	r0, [r3, #0]
 80176f0:	b110      	cbz	r0, 80176f8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80176f2:	6803      	ldr	r3, [r0, #0]
 80176f4:	691b      	ldr	r3, [r3, #16]
 80176f6:	4798      	blx	r3
 80176f8:	6828      	ldr	r0, [r5, #0]
 80176fa:	6803      	ldr	r3, [r0, #0]
 80176fc:	68db      	ldr	r3, [r3, #12]
 80176fe:	4798      	blx	r3
 8017700:	2301      	movs	r3, #1
 8017702:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8017706:	2500      	movs	r5, #0
 8017708:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801770c:	42a8      	cmp	r0, r5
 801770e:	dd0c      	ble.n	801772a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8017710:	1963      	adds	r3, r4, r5
 8017712:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017716:	b132      	cbz	r2, 8017726 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8017718:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801771c:	4413      	add	r3, r2
 801771e:	6858      	ldr	r0, [r3, #4]
 8017720:	6803      	ldr	r3, [r0, #0]
 8017722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017724:	4798      	blx	r3
 8017726:	3501      	adds	r5, #1
 8017728:	e7ee      	b.n	8017708 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801772a:	2300      	movs	r3, #0
 801772c:	461a      	mov	r2, r3
 801772e:	4298      	cmp	r0, r3
 8017730:	d015      	beq.n	801775e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8017732:	18e1      	adds	r1, r4, r3
 8017734:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8017738:	b16d      	cbz	r5, 8017756 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801773a:	429a      	cmp	r2, r3
 801773c:	d00a      	beq.n	8017754 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801773e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8017742:	4431      	add	r1, r6
 8017744:	684e      	ldr	r6, [r1, #4]
 8017746:	b291      	uxth	r1, r2
 8017748:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801774c:	604e      	str	r6, [r1, #4]
 801774e:	18a1      	adds	r1, r4, r2
 8017750:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017754:	3201      	adds	r2, #1
 8017756:	3301      	adds	r3, #1
 8017758:	e7e9      	b.n	801772e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801775a:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801775e:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8017762:	4295      	cmp	r5, r2
 8017764:	dd0d      	ble.n	8017782 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8017766:	1e6b      	subs	r3, r5, #1
 8017768:	b29b      	uxth	r3, r3
 801776a:	4618      	mov	r0, r3
 801776c:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8017770:	3104      	adds	r1, #4
 8017772:	4285      	cmp	r5, r0
 8017774:	ddf1      	ble.n	801775a <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8017776:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801777a:	3001      	adds	r0, #1
 801777c:	f841 6c04 	str.w	r6, [r1, #-4]
 8017780:	e7f7      	b.n	8017772 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8017782:	4b04      	ldr	r3, [pc, #16]	; (8017794 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8017784:	6818      	ldr	r0, [r3, #0]
 8017786:	b110      	cbz	r0, 801778e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8017788:	6803      	ldr	r3, [r0, #0]
 801778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801778c:	e7a5      	b.n	80176da <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801778e:	bd70      	pop	{r4, r5, r6, pc}
 8017790:	2004f710 	.word	0x2004f710
 8017794:	2004f70c 	.word	0x2004f70c

08017798 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017798:	b510      	push	{r4, lr}
 801779a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801779e:	888a      	ldrh	r2, [r1, #4]
 80177a0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80177a4:	4422      	add	r2, r4
 80177a6:	b212      	sxth	r2, r2
 80177a8:	4293      	cmp	r3, r2
 80177aa:	da15      	bge.n	80177d8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80177ac:	8882      	ldrh	r2, [r0, #4]
 80177ae:	4413      	add	r3, r2
 80177b0:	b21b      	sxth	r3, r3
 80177b2:	429c      	cmp	r4, r3
 80177b4:	da10      	bge.n	80177d8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80177b6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80177ba:	88c9      	ldrh	r1, [r1, #6]
 80177bc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80177c0:	4419      	add	r1, r3
 80177c2:	b209      	sxth	r1, r1
 80177c4:	428a      	cmp	r2, r1
 80177c6:	da07      	bge.n	80177d8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80177c8:	88c0      	ldrh	r0, [r0, #6]
 80177ca:	4410      	add	r0, r2
 80177cc:	b200      	sxth	r0, r0
 80177ce:	4283      	cmp	r3, r0
 80177d0:	bfac      	ite	ge
 80177d2:	2000      	movge	r0, #0
 80177d4:	2001      	movlt	r0, #1
 80177d6:	bd10      	pop	{r4, pc}
 80177d8:	2000      	movs	r0, #0
 80177da:	e7fc      	b.n	80177d6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080177dc <_ZN8touchgfx4Rect10restrictToEss>:
 80177dc:	f9b0 3000 	ldrsh.w	r3, [r0]
 80177e0:	b510      	push	{r4, lr}
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	da04      	bge.n	80177f0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80177e6:	8884      	ldrh	r4, [r0, #4]
 80177e8:	4423      	add	r3, r4
 80177ea:	8083      	strh	r3, [r0, #4]
 80177ec:	2300      	movs	r3, #0
 80177ee:	8003      	strh	r3, [r0, #0]
 80177f0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80177f4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80177f8:	1b09      	subs	r1, r1, r4
 80177fa:	428b      	cmp	r3, r1
 80177fc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017800:	bfc8      	it	gt
 8017802:	8081      	strhgt	r1, [r0, #4]
 8017804:	2b00      	cmp	r3, #0
 8017806:	da04      	bge.n	8017812 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8017808:	88c1      	ldrh	r1, [r0, #6]
 801780a:	440b      	add	r3, r1
 801780c:	80c3      	strh	r3, [r0, #6]
 801780e:	2300      	movs	r3, #0
 8017810:	8043      	strh	r3, [r0, #2]
 8017812:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017816:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801781a:	1a52      	subs	r2, r2, r1
 801781c:	4293      	cmp	r3, r2
 801781e:	bfc8      	it	gt
 8017820:	80c2      	strhgt	r2, [r0, #6]
 8017822:	bd10      	pop	{r4, pc}

08017824 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017824:	b510      	push	{r4, lr}
 8017826:	460c      	mov	r4, r1
 8017828:	4b0f      	ldr	r3, [pc, #60]	; (8017868 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801782a:	4620      	mov	r0, r4
 801782c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017830:	4b0e      	ldr	r3, [pc, #56]	; (801786c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8017832:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017836:	f7ff ffd1 	bl	80177dc <_ZN8touchgfx4Rect10restrictToEss>
 801783a:	4b0d      	ldr	r3, [pc, #52]	; (8017870 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801783c:	6818      	ldr	r0, [r3, #0]
 801783e:	b190      	cbz	r0, 8017866 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017840:	6803      	ldr	r3, [r0, #0]
 8017842:	4621      	mov	r1, r4
 8017844:	689b      	ldr	r3, [r3, #8]
 8017846:	4798      	blx	r3
 8017848:	4b0a      	ldr	r3, [pc, #40]	; (8017874 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801784a:	6818      	ldr	r0, [r3, #0]
 801784c:	b118      	cbz	r0, 8017856 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801784e:	6803      	ldr	r3, [r0, #0]
 8017850:	4621      	mov	r1, r4
 8017852:	689b      	ldr	r3, [r3, #8]
 8017854:	4798      	blx	r3
 8017856:	4b08      	ldr	r3, [pc, #32]	; (8017878 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8017858:	4621      	mov	r1, r4
 801785a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801785e:	6818      	ldr	r0, [r3, #0]
 8017860:	6803      	ldr	r3, [r0, #0]
 8017862:	69db      	ldr	r3, [r3, #28]
 8017864:	4718      	bx	r3
 8017866:	bd10      	pop	{r4, pc}
 8017868:	2004f6be 	.word	0x2004f6be
 801786c:	2004f6bc 	.word	0x2004f6bc
 8017870:	2004f70c 	.word	0x2004f70c
 8017874:	2004f708 	.word	0x2004f708
 8017878:	2004f6c8 	.word	0x2004f6c8

0801787c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801787e:	4606      	mov	r6, r0
 8017880:	4608      	mov	r0, r1
 8017882:	460f      	mov	r7, r1
 8017884:	f7fc f963 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017888:	b9e8      	cbnz	r0, 80178c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801788a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801788e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017892:	42a5      	cmp	r5, r4
 8017894:	db17      	blt.n	80178c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017896:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801789a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801789e:	429a      	cmp	r2, r3
 80178a0:	db11      	blt.n	80178c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80178a2:	88b9      	ldrh	r1, [r7, #4]
 80178a4:	440d      	add	r5, r1
 80178a6:	88b1      	ldrh	r1, [r6, #4]
 80178a8:	b22d      	sxth	r5, r5
 80178aa:	440c      	add	r4, r1
 80178ac:	b224      	sxth	r4, r4
 80178ae:	42a5      	cmp	r5, r4
 80178b0:	dc09      	bgt.n	80178c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80178b2:	88f8      	ldrh	r0, [r7, #6]
 80178b4:	4410      	add	r0, r2
 80178b6:	88f2      	ldrh	r2, [r6, #6]
 80178b8:	b200      	sxth	r0, r0
 80178ba:	4413      	add	r3, r2
 80178bc:	b21b      	sxth	r3, r3
 80178be:	4298      	cmp	r0, r3
 80178c0:	bfcc      	ite	gt
 80178c2:	2000      	movgt	r0, #0
 80178c4:	2001      	movle	r0, #1
 80178c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080178c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80178c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178ca:	4604      	mov	r4, r0
 80178cc:	4608      	mov	r0, r1
 80178ce:	460d      	mov	r5, r1
 80178d0:	f7fc f93d 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 80178d4:	b978      	cbnz	r0, 80178f6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80178d6:	4620      	mov	r0, r4
 80178d8:	f7fc f939 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 80178dc:	f9b5 6000 	ldrsh.w	r6, [r5]
 80178e0:	b150      	cbz	r0, 80178f8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80178e2:	8026      	strh	r6, [r4, #0]
 80178e4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80178e8:	8063      	strh	r3, [r4, #2]
 80178ea:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80178ee:	80a3      	strh	r3, [r4, #4]
 80178f0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80178f4:	80e3      	strh	r3, [r4, #6]
 80178f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178f8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80178fc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017900:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017904:	42b1      	cmp	r1, r6
 8017906:	460f      	mov	r7, r1
 8017908:	bfa8      	it	ge
 801790a:	4637      	movge	r7, r6
 801790c:	4293      	cmp	r3, r2
 801790e:	4618      	mov	r0, r3
 8017910:	bfa8      	it	ge
 8017912:	4610      	movge	r0, r2
 8017914:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017918:	88ed      	ldrh	r5, [r5, #6]
 801791a:	4466      	add	r6, ip
 801791c:	442a      	add	r2, r5
 801791e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017922:	88e5      	ldrh	r5, [r4, #6]
 8017924:	4461      	add	r1, ip
 8017926:	442b      	add	r3, r5
 8017928:	b236      	sxth	r6, r6
 801792a:	b209      	sxth	r1, r1
 801792c:	b212      	sxth	r2, r2
 801792e:	b21b      	sxth	r3, r3
 8017930:	428e      	cmp	r6, r1
 8017932:	bfac      	ite	ge
 8017934:	ebc7 0106 	rsbge	r1, r7, r6
 8017938:	ebc7 0101 	rsblt	r1, r7, r1
 801793c:	429a      	cmp	r2, r3
 801793e:	bfac      	ite	ge
 8017940:	ebc0 0202 	rsbge	r2, r0, r2
 8017944:	ebc0 0203 	rsblt	r2, r0, r3
 8017948:	8027      	strh	r7, [r4, #0]
 801794a:	8060      	strh	r0, [r4, #2]
 801794c:	80a1      	strh	r1, [r4, #4]
 801794e:	80e2      	strh	r2, [r4, #6]
 8017950:	e7d1      	b.n	80178f6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08017954 <_ZN8touchgfx11Application11getInstanceEv>:
 8017954:	4b01      	ldr	r3, [pc, #4]	; (801795c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017956:	6818      	ldr	r0, [r3, #0]
 8017958:	4770      	bx	lr
 801795a:	bf00      	nop
 801795c:	2004f71c 	.word	0x2004f71c

08017960 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8017960:	2300      	movs	r3, #0
 8017962:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8017966:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801796a:	30a8      	adds	r0, #168	; 0xa8
 801796c:	f802 3b01 	strb.w	r3, [r2], #1
 8017970:	4282      	cmp	r2, r0
 8017972:	d1fb      	bne.n	801796c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8017974:	4770      	bx	lr
	...

08017978 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 8017978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801797a:	4b10      	ldr	r3, [pc, #64]	; (80179bc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 801797c:	4605      	mov	r5, r0
 801797e:	781b      	ldrb	r3, [r3, #0]
 8017980:	b1d3      	cbz	r3, 80179b8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 8017982:	4b0f      	ldr	r3, [pc, #60]	; (80179c0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 8017984:	4f0f      	ldr	r7, [pc, #60]	; (80179c4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 8017986:	881c      	ldrh	r4, [r3, #0]
 8017988:	f100 06ea 	add.w	r6, r0, #234	; 0xea
 801798c:	f8b5 312a 	ldrh.w	r3, [r5, #298]	; 0x12a
 8017990:	42a3      	cmp	r3, r4
 8017992:	d90e      	bls.n	80179b2 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801799a:	b10a      	cbz	r2, 80179a0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 801799c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801799e:	b900      	cbnz	r0, 80179a2 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 80179a0:	6898      	ldr	r0, [r3, #8]
 80179a2:	6803      	ldr	r3, [r0, #0]
 80179a4:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 80179a8:	69db      	ldr	r3, [r3, #28]
 80179aa:	3401      	adds	r4, #1
 80179ac:	4798      	blx	r3
 80179ae:	b2a4      	uxth	r4, r4
 80179b0:	e7ec      	b.n	801798c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 80179b2:	2300      	movs	r3, #0
 80179b4:	f8a5 312a 	strh.w	r3, [r5, #298]	; 0x12a
 80179b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179ba:	bf00      	nop
 80179bc:	2004f6c6 	.word	0x2004f6c6
 80179c0:	20025820 	.word	0x20025820
 80179c4:	2004f6c8 	.word	0x2004f6c8

080179c8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80179c8:	4603      	mov	r3, r0
 80179ca:	2200      	movs	r2, #0
 80179cc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80179d0:	801a      	strh	r2, [r3, #0]
 80179d2:	805a      	strh	r2, [r3, #2]
 80179d4:	809a      	strh	r2, [r3, #4]
 80179d6:	80da      	strh	r2, [r3, #6]
 80179d8:	3308      	adds	r3, #8
 80179da:	428b      	cmp	r3, r1
 80179dc:	d1f8      	bne.n	80179d0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80179de:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80179e2:	4770      	bx	lr

080179e4 <_ZN8touchgfx11ApplicationC1Ev>:
 80179e4:	b570      	push	{r4, r5, r6, lr}
 80179e6:	2500      	movs	r5, #0
 80179e8:	4604      	mov	r4, r0
 80179ea:	4b18      	ldr	r3, [pc, #96]	; (8017a4c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80179ec:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 80179f0:	6003      	str	r3, [r0, #0]
 80179f2:	30a8      	adds	r0, #168	; 0xa8
 80179f4:	f7ff ffe8 	bl	80179c8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80179f8:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80179fc:	f7ff ffe4 	bl	80179c8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017a00:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8017a04:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8017a08:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8017a0c:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8017a10:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8017a14:	490e      	ldr	r1, [pc, #56]	; (8017a50 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8017a16:	480f      	ldr	r0, [pc, #60]	; (8017a54 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8017a18:	f00e f8b4 	bl	8025b84 <CRC_Lock>
 8017a1c:	4e0e      	ldr	r6, [pc, #56]	; (8017a58 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8017a1e:	4b0f      	ldr	r3, [pc, #60]	; (8017a5c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017a20:	b158      	cbz	r0, 8017a3a <_ZN8touchgfx11ApplicationC1Ev+0x56>
 8017a22:	801d      	strh	r5, [r3, #0]
 8017a24:	2300      	movs	r3, #0
 8017a26:	4a0e      	ldr	r2, [pc, #56]	; (8017a60 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017a28:	4620      	mov	r0, r4
 8017a2a:	6013      	str	r3, [r2, #0]
 8017a2c:	4a0d      	ldr	r2, [pc, #52]	; (8017a64 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017a2e:	6033      	str	r3, [r6, #0]
 8017a30:	6013      	str	r3, [r2, #0]
 8017a32:	f7ff ff95 	bl	8017960 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8017a36:	4620      	mov	r0, r4
 8017a38:	bd70      	pop	{r4, r5, r6, pc}
 8017a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017a3e:	2002      	movs	r0, #2
 8017a40:	801a      	strh	r2, [r3, #0]
 8017a42:	6030      	str	r0, [r6, #0]
 8017a44:	f001 fa9e 	bl	8018f84 <_ZN8touchgfx6Screen4drawEv>
 8017a48:	e7ec      	b.n	8017a24 <_ZN8touchgfx11ApplicationC1Ev+0x40>
 8017a4a:	bf00      	nop
 8017a4c:	08029650 	.word	0x08029650
 8017a50:	b5e8b5cd 	.word	0xb5e8b5cd
 8017a54:	f407a5c2 	.word	0xf407a5c2
 8017a58:	2004f70c 	.word	0x2004f70c
 8017a5c:	20025820 	.word	0x20025820
 8017a60:	2004f71c 	.word	0x2004f71c
 8017a64:	2004f710 	.word	0x2004f710

08017a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017a68:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8017a6c:	b510      	push	{r4, lr}
 8017a6e:	3b01      	subs	r3, #1
 8017a70:	b29b      	uxth	r3, r3
 8017a72:	428b      	cmp	r3, r1
 8017a74:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8017a78:	d908      	bls.n	8017a8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8017a7a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017a7e:	681a      	ldr	r2, [r3, #0]
 8017a80:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017a84:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8017a88:	685a      	ldr	r2, [r3, #4]
 8017a8a:	6062      	str	r2, [r4, #4]
 8017a8c:	bd10      	pop	{r4, pc}
	...

08017a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a94:	4b94      	ldr	r3, [pc, #592]	; (8017ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8017a96:	b08f      	sub	sp, #60	; 0x3c
 8017a98:	ac0a      	add	r4, sp, #40	; 0x28
 8017a9a:	e884 0006 	stmia.w	r4, {r1, r2}
 8017a9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017aa2:	4b92      	ldr	r3, [pc, #584]	; (8017cec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8017aa4:	4683      	mov	fp, r0
 8017aa6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017aaa:	4620      	mov	r0, r4
 8017aac:	f7ff fe96 	bl	80177dc <_ZN8touchgfx4Rect10restrictToEss>
 8017ab0:	4620      	mov	r0, r4
 8017ab2:	f7fc f84c 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ab6:	2800      	cmp	r0, #0
 8017ab8:	d16a      	bne.n	8017b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017aba:	9403      	str	r4, [sp, #12]
 8017abc:	2400      	movs	r4, #0
 8017abe:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8017ac2:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017ac6:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8017aca:	9301      	str	r3, [sp, #4]
 8017acc:	36a0      	adds	r6, #160	; 0xa0
 8017ace:	42a5      	cmp	r5, r4
 8017ad0:	d00d      	beq.n	8017aee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8017ad2:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8017ad6:	9803      	ldr	r0, [sp, #12]
 8017ad8:	f7ff fed0 	bl	801787c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017adc:	b128      	cbz	r0, 8017aea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8017ade:	1e69      	subs	r1, r5, #1
 8017ae0:	1b09      	subs	r1, r1, r4
 8017ae2:	b289      	uxth	r1, r1
 8017ae4:	9801      	ldr	r0, [sp, #4]
 8017ae6:	f7ff ffbf 	bl	8017a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017aea:	3401      	adds	r4, #1
 8017aec:	e7ef      	b.n	8017ace <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8017aee:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8017af2:	1e7b      	subs	r3, r7, #1
 8017af4:	9302      	str	r3, [sp, #8]
 8017af6:	9704      	str	r7, [sp, #16]
 8017af8:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8017afc:	2400      	movs	r4, #0
 8017afe:	4655      	mov	r5, sl
 8017b00:	4626      	mov	r6, r4
 8017b02:	9705      	str	r7, [sp, #20]
 8017b04:	9b05      	ldr	r3, [sp, #20]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d078      	beq.n	8017bfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8017b0a:	9903      	ldr	r1, [sp, #12]
 8017b0c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8017b10:	f7ff fe42 	bl	8017798 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017b14:	b360      	cbz	r0, 8017b70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017b16:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8017b1a:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8017b1e:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8017b22:	45e6      	cmp	lr, ip
 8017b24:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8017b28:	db35      	blt.n	8017b96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017b2a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017b2e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017b32:	4472      	add	r2, lr
 8017b34:	4463      	add	r3, ip
 8017b36:	b212      	sxth	r2, r2
 8017b38:	b21b      	sxth	r3, r3
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	dc2b      	bgt.n	8017b96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017b3e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017b42:	fa1f f288 	uxth.w	r2, r8
 8017b46:	4413      	add	r3, r2
 8017b48:	b29b      	uxth	r3, r3
 8017b4a:	45c1      	cmp	r9, r8
 8017b4c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017b50:	fa0f fe83 	sxth.w	lr, r3
 8017b54:	fa1f fc89 	uxth.w	ip, r9
 8017b58:	db0f      	blt.n	8017b7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8017b5a:	eba3 030c 	sub.w	r3, r3, ip
 8017b5e:	1ac9      	subs	r1, r1, r3
 8017b60:	b209      	sxth	r1, r1
 8017b62:	2900      	cmp	r1, #0
 8017b64:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017b68:	dd12      	ble.n	8017b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017b6a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8017b6e:	4604      	mov	r4, r0
 8017b70:	9b05      	ldr	r3, [sp, #20]
 8017b72:	3d08      	subs	r5, #8
 8017b74:	3b01      	subs	r3, #1
 8017b76:	9305      	str	r3, [sp, #20]
 8017b78:	e7c4      	b.n	8017b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8017b7a:	4461      	add	r1, ip
 8017b7c:	b209      	sxth	r1, r1
 8017b7e:	4571      	cmp	r1, lr
 8017b80:	dc3a      	bgt.n	8017bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017b82:	eba2 020c 	sub.w	r2, r2, ip
 8017b86:	b212      	sxth	r2, r2
 8017b88:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8017b8c:	2a00      	cmp	r2, #0
 8017b8e:	dcee      	bgt.n	8017b6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017b90:	b00f      	add	sp, #60	; 0x3c
 8017b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b96:	45c1      	cmp	r9, r8
 8017b98:	db2e      	blt.n	8017bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017b9a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8017b9e:	4499      	add	r9, r3
 8017ba0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017ba4:	fa0f f989 	sxth.w	r9, r9
 8017ba8:	4498      	add	r8, r3
 8017baa:	fa0f f888 	sxth.w	r8, r8
 8017bae:	45c1      	cmp	r9, r8
 8017bb0:	dc22      	bgt.n	8017bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017bb2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017bb6:	fa1f f28c 	uxth.w	r2, ip
 8017bba:	4413      	add	r3, r2
 8017bbc:	b29b      	uxth	r3, r3
 8017bbe:	45e6      	cmp	lr, ip
 8017bc0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017bc4:	fa1f f88e 	uxth.w	r8, lr
 8017bc8:	fa0f f983 	sxth.w	r9, r3
 8017bcc:	db0a      	blt.n	8017be4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8017bce:	eba3 0308 	sub.w	r3, r3, r8
 8017bd2:	1ac9      	subs	r1, r1, r3
 8017bd4:	b209      	sxth	r1, r1
 8017bd6:	2900      	cmp	r1, #0
 8017bd8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8017bdc:	ddd8      	ble.n	8017b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017bde:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8017be2:	e7c4      	b.n	8017b6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017be4:	4441      	add	r1, r8
 8017be6:	b209      	sxth	r1, r1
 8017be8:	4549      	cmp	r1, r9
 8017bea:	dc05      	bgt.n	8017bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017bec:	eba2 0208 	sub.w	r2, r2, r8
 8017bf0:	b212      	sxth	r2, r2
 8017bf2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017bf6:	e7c9      	b.n	8017b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8017bf8:	4606      	mov	r6, r0
 8017bfa:	e7b9      	b.n	8017b70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017bfc:	2c00      	cmp	r4, #0
 8017bfe:	f47f af7d 	bne.w	8017afc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8017c02:	2e00      	cmp	r6, #0
 8017c04:	f000 81e2 	beq.w	8017fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017c08:	4655      	mov	r5, sl
 8017c0a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8017c0e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8017c12:	b2b9      	uxth	r1, r7
 8017c14:	9105      	str	r1, [sp, #20]
 8017c16:	9805      	ldr	r0, [sp, #20]
 8017c18:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017c1c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017c20:	4401      	add	r1, r0
 8017c22:	b2b3      	uxth	r3, r6
 8017c24:	b289      	uxth	r1, r1
 8017c26:	441a      	add	r2, r3
 8017c28:	9106      	str	r1, [sp, #24]
 8017c2a:	b292      	uxth	r2, r2
 8017c2c:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8017c30:	fa0f f882 	sxth.w	r8, r2
 8017c34:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8017c38:	9b04      	ldr	r3, [sp, #16]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d058      	beq.n	8017cf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8017c3e:	9903      	ldr	r1, [sp, #12]
 8017c40:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8017c44:	f7ff fda8 	bl	8017798 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017c48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017c4c:	b1d8      	cbz	r0, 8017c86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017c4e:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8017c52:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8017c56:	4576      	cmp	r6, lr
 8017c58:	dc26      	bgt.n	8017ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8017c5a:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8017c5e:	44f4      	add	ip, lr
 8017c60:	fa0f fc8c 	sxth.w	ip, ip
 8017c64:	45e0      	cmp	r8, ip
 8017c66:	db1f      	blt.n	8017ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8017c68:	428f      	cmp	r7, r1
 8017c6a:	fa1f fc81 	uxth.w	ip, r1
 8017c6e:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8017c72:	dc0f      	bgt.n	8017c94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8017c74:	9806      	ldr	r0, [sp, #24]
 8017c76:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8017c7a:	eba0 0c0c 	sub.w	ip, r0, ip
 8017c7e:	eba1 010c 	sub.w	r1, r1, ip
 8017c82:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8017c86:	4620      	mov	r0, r4
 8017c88:	9904      	ldr	r1, [sp, #16]
 8017c8a:	3d08      	subs	r5, #8
 8017c8c:	3901      	subs	r1, #1
 8017c8e:	9104      	str	r1, [sp, #16]
 8017c90:	4604      	mov	r4, r0
 8017c92:	e7cf      	b.n	8017c34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8017c94:	4461      	add	r1, ip
 8017c96:	b209      	sxth	r1, r1
 8017c98:	4549      	cmp	r1, r9
 8017c9a:	dcf5      	bgt.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017c9c:	9905      	ldr	r1, [sp, #20]
 8017c9e:	eba1 0c0c 	sub.w	ip, r1, ip
 8017ca2:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8017ca6:	e7ee      	b.n	8017c86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017ca8:	428f      	cmp	r7, r1
 8017caa:	dced      	bgt.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017cac:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8017cb0:	4461      	add	r1, ip
 8017cb2:	b209      	sxth	r1, r1
 8017cb4:	4589      	cmp	r9, r1
 8017cb6:	dbe7      	blt.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017cb8:	4576      	cmp	r6, lr
 8017cba:	fa1f fc8e 	uxth.w	ip, lr
 8017cbe:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8017cc2:	dc08      	bgt.n	8017cd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8017cc4:	eba2 0c0c 	sub.w	ip, r2, ip
 8017cc8:	eba1 010c 	sub.w	r1, r1, ip
 8017ccc:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8017cd0:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8017cd4:	e7d7      	b.n	8017c86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017cd6:	4461      	add	r1, ip
 8017cd8:	b209      	sxth	r1, r1
 8017cda:	4588      	cmp	r8, r1
 8017cdc:	dbd4      	blt.n	8017c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017cde:	eba3 0c0c 	sub.w	ip, r3, ip
 8017ce2:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8017ce6:	e7ce      	b.n	8017c86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017ce8:	2004f6be 	.word	0x2004f6be
 8017cec:	2004f6bc 	.word	0x2004f6bc
 8017cf0:	2c00      	cmp	r4, #0
 8017cf2:	f000 816b 	beq.w	8017fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017cf6:	9b02      	ldr	r3, [sp, #8]
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	f000 8167 	beq.w	8017fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017cfe:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8017d02:	4621      	mov	r1, r4
 8017d04:	9803      	ldr	r0, [sp, #12]
 8017d06:	f7ff fdb9 	bl	801787c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017d0a:	b120      	cbz	r0, 8017d16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8017d0c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017d10:	9801      	ldr	r0, [sp, #4]
 8017d12:	f7ff fea9 	bl	8017a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017d16:	9903      	ldr	r1, [sp, #12]
 8017d18:	4620      	mov	r0, r4
 8017d1a:	f7ff fd3d 	bl	8017798 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017d1e:	2800      	cmp	r0, #0
 8017d20:	f000 809b 	beq.w	8017e5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8017d24:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8017d28:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8017d2c:	b281      	uxth	r1, r0
 8017d2e:	eb01 0c03 	add.w	ip, r1, r3
 8017d32:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8017d36:	fa1f f98c 	uxth.w	r9, ip
 8017d3a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8017d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8017d40:	b2ab      	uxth	r3, r5
 8017d42:	eb03 040c 	add.w	r4, r3, ip
 8017d46:	b2a4      	uxth	r4, r4
 8017d48:	9405      	str	r4, [sp, #20]
 8017d4a:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8017d4e:	4285      	cmp	r5, r0
 8017d50:	9404      	str	r4, [sp, #16]
 8017d52:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8017d56:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8017d5a:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8017d5e:	f340 809a 	ble.w	8017e96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8017d62:	1a5b      	subs	r3, r3, r1
 8017d64:	b29b      	uxth	r3, r3
 8017d66:	4596      	cmp	lr, r2
 8017d68:	fa0f f589 	sxth.w	r5, r9
 8017d6c:	b21e      	sxth	r6, r3
 8017d6e:	dd2e      	ble.n	8017dce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8017d70:	9f02      	ldr	r7, [sp, #8]
 8017d72:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8017d76:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017d7a:	9f04      	ldr	r7, [sp, #16]
 8017d7c:	fa1f fe8e 	uxth.w	lr, lr
 8017d80:	1b7f      	subs	r7, r7, r5
 8017d82:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8017d86:	b292      	uxth	r2, r2
 8017d88:	ebae 0102 	sub.w	r1, lr, r2
 8017d8c:	4486      	add	lr, r0
 8017d8e:	442a      	add	r2, r5
 8017d90:	b289      	uxth	r1, r1
 8017d92:	fa0f fe8e 	sxth.w	lr, lr
 8017d96:	b212      	sxth	r2, r2
 8017d98:	b20c      	sxth	r4, r1
 8017d9a:	ebae 0202 	sub.w	r2, lr, r2
 8017d9e:	4367      	muls	r7, r4
 8017da0:	4372      	muls	r2, r6
 8017da2:	4297      	cmp	r7, r2
 8017da4:	db09      	blt.n	8017dba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8017da6:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8017daa:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8017dae:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8017db2:	449c      	add	ip, r3
 8017db4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017db8:	e680      	b.n	8017abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017dba:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8017dbe:	4401      	add	r1, r0
 8017dc0:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8017dc4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017dc8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017dcc:	e676      	b.n	8017abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017dce:	9f04      	ldr	r7, [sp, #16]
 8017dd0:	42bd      	cmp	r5, r7
 8017dd2:	da27      	bge.n	8017e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8017dd4:	9902      	ldr	r1, [sp, #8]
 8017dd6:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8017dda:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8017dde:	eb04 010e 	add.w	r1, r4, lr
 8017de2:	fa1f f881 	uxth.w	r8, r1
 8017de6:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8017dea:	fa0f f988 	sxth.w	r9, r8
 8017dee:	4411      	add	r1, r2
 8017df0:	eba1 0108 	sub.w	r1, r1, r8
 8017df4:	b289      	uxth	r1, r1
 8017df6:	fa0f f881 	sxth.w	r8, r1
 8017dfa:	eba2 020e 	sub.w	r2, r2, lr
 8017dfe:	1b7f      	subs	r7, r7, r5
 8017e00:	4372      	muls	r2, r6
 8017e02:	fb08 f707 	mul.w	r7, r8, r7
 8017e06:	42ba      	cmp	r2, r7
 8017e08:	dc06      	bgt.n	8017e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017e0a:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8017e0e:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8017e12:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8017e16:	e7ca      	b.n	8017dae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8017e18:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8017e1c:	4421      	add	r1, r4
 8017e1e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017e22:	e64b      	b.n	8017abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017e24:	9d05      	ldr	r5, [sp, #20]
 8017e26:	2c06      	cmp	r4, #6
 8017e28:	eba9 0505 	sub.w	r5, r9, r5
 8017e2c:	b2ad      	uxth	r5, r5
 8017e2e:	fa0f fe85 	sxth.w	lr, r5
 8017e32:	d818      	bhi.n	8017e66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8017e34:	9b04      	ldr	r3, [sp, #16]
 8017e36:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8017e3a:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8017e3e:	1c63      	adds	r3, r4, #1
 8017e40:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8017e44:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8017e48:	9b01      	ldr	r3, [sp, #4]
 8017e4a:	9d01      	ldr	r5, [sp, #4]
 8017e4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017e50:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8017e54:	805a      	strh	r2, [r3, #2]
 8017e56:	809e      	strh	r6, [r3, #4]
 8017e58:	80d9      	strh	r1, [r3, #6]
 8017e5a:	9b02      	ldr	r3, [sp, #8]
 8017e5c:	f1aa 0a08 	sub.w	sl, sl, #8
 8017e60:	3b01      	subs	r3, #1
 8017e62:	9302      	str	r3, [sp, #8]
 8017e64:	e747      	b.n	8017cf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8017e66:	9a02      	ldr	r2, [sp, #8]
 8017e68:	45b6      	cmp	lr, r6
 8017e6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017e6e:	db0d      	blt.n	8017e8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8017e70:	449c      	add	ip, r3
 8017e72:	fa1f fc8c 	uxth.w	ip, ip
 8017e76:	445a      	add	r2, fp
 8017e78:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017e7c:	448c      	add	ip, r1
 8017e7e:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8017e82:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8017e86:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8017e8a:	e617      	b.n	8017abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017e8c:	445a      	add	r2, fp
 8017e8e:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8017e92:	44ac      	add	ip, r5
 8017e94:	e78e      	b.n	8017db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8017e96:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8017e9a:	fa1f f18e 	uxth.w	r1, lr
 8017e9e:	eb01 0806 	add.w	r8, r1, r6
 8017ea2:	b293      	uxth	r3, r2
 8017ea4:	fa1f f888 	uxth.w	r8, r8
 8017ea8:	9306      	str	r3, [sp, #24]
 8017eaa:	fa0f f388 	sxth.w	r3, r8
 8017eae:	9307      	str	r3, [sp, #28]
 8017eb0:	9f06      	ldr	r7, [sp, #24]
 8017eb2:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8017eb6:	4596      	cmp	lr, r2
 8017eb8:	443b      	add	r3, r7
 8017eba:	b29b      	uxth	r3, r3
 8017ebc:	9308      	str	r3, [sp, #32]
 8017ebe:	da25      	bge.n	8017f0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8017ec0:	9905      	ldr	r1, [sp, #20]
 8017ec2:	eba3 0308 	sub.w	r3, r3, r8
 8017ec6:	eba9 0401 	sub.w	r4, r9, r1
 8017eca:	b2a4      	uxth	r4, r4
 8017ecc:	b29b      	uxth	r3, r3
 8017ece:	fa0f f984 	sxth.w	r9, r4
 8017ed2:	b219      	sxth	r1, r3
 8017ed4:	eba2 020e 	sub.w	r2, r2, lr
 8017ed8:	1b40      	subs	r0, r0, r5
 8017eda:	fb09 f202 	mul.w	r2, r9, r2
 8017ede:	4348      	muls	r0, r1
 8017ee0:	4282      	cmp	r2, r0
 8017ee2:	9a02      	ldr	r2, [sp, #8]
 8017ee4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017ee8:	445a      	add	r2, fp
 8017eea:	dc06      	bgt.n	8017efa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8017eec:	9b07      	ldr	r3, [sp, #28]
 8017eee:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8017ef2:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8017ef6:	44a4      	add	ip, r4
 8017ef8:	e75c      	b.n	8017db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8017efa:	9904      	ldr	r1, [sp, #16]
 8017efc:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8017f00:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8017f04:	4433      	add	r3, r6
 8017f06:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017f0a:	e5d7      	b.n	8017abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f0c:	9f06      	ldr	r7, [sp, #24]
 8017f0e:	9b04      	ldr	r3, [sp, #16]
 8017f10:	1bc9      	subs	r1, r1, r7
 8017f12:	fa0f f789 	sxth.w	r7, r9
 8017f16:	b289      	uxth	r1, r1
 8017f18:	429f      	cmp	r7, r3
 8017f1a:	fa0f fe81 	sxth.w	lr, r1
 8017f1e:	dd23      	ble.n	8017f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8017f20:	9a05      	ldr	r2, [sp, #20]
 8017f22:	1b40      	subs	r0, r0, r5
 8017f24:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017f28:	eba9 0202 	sub.w	r2, r9, r2
 8017f2c:	9d07      	ldr	r5, [sp, #28]
 8017f2e:	b292      	uxth	r2, r2
 8017f30:	eba5 0a03 	sub.w	sl, r5, r3
 8017f34:	b214      	sxth	r4, r2
 8017f36:	fb0e f000 	mul.w	r0, lr, r0
 8017f3a:	fb04 fa0a 	mul.w	sl, r4, sl
 8017f3e:	9b02      	ldr	r3, [sp, #8]
 8017f40:	4550      	cmp	r0, sl
 8017f42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8017f46:	445b      	add	r3, fp
 8017f48:	db03      	blt.n	8017f52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 8017f4a:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8017f4e:	4494      	add	ip, r2
 8017f50:	e730      	b.n	8017db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8017f52:	9a04      	ldr	r2, [sp, #16]
 8017f54:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8017f58:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8017f5c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8017f60:	4431      	add	r1, r6
 8017f62:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017f66:	e75a      	b.n	8017e1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8017f68:	9b08      	ldr	r3, [sp, #32]
 8017f6a:	2c06      	cmp	r4, #6
 8017f6c:	eba3 0308 	sub.w	r3, r3, r8
 8017f70:	b29b      	uxth	r3, r3
 8017f72:	b21d      	sxth	r5, r3
 8017f74:	d813      	bhi.n	8017f9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 8017f76:	9b07      	ldr	r3, [sp, #28]
 8017f78:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8017f7c:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8017f80:	1c63      	adds	r3, r4, #1
 8017f82:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8017f86:	9b01      	ldr	r3, [sp, #4]
 8017f88:	9901      	ldr	r1, [sp, #4]
 8017f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017f8e:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8017f92:	805a      	strh	r2, [r3, #2]
 8017f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f96:	f8a3 e006 	strh.w	lr, [r3, #6]
 8017f9a:	809a      	strh	r2, [r3, #4]
 8017f9c:	e75d      	b.n	8017e5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8017f9e:	9802      	ldr	r0, [sp, #8]
 8017fa0:	4575      	cmp	r5, lr
 8017fa2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8017fa6:	db0d      	blt.n	8017fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8017fa8:	4431      	add	r1, r6
 8017faa:	9b06      	ldr	r3, [sp, #24]
 8017fac:	b289      	uxth	r1, r1
 8017fae:	4458      	add	r0, fp
 8017fb0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017fb4:	4419      	add	r1, r3
 8017fb6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017fba:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8017fbe:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8017fc2:	e57b      	b.n	8017abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017fc4:	4458      	add	r0, fp
 8017fc6:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8017fca:	e79b      	b.n	8017f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8017fcc:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 8017fd0:	2e07      	cmp	r6, #7
 8017fd2:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8017fd6:	d812      	bhi.n	8017ffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56e>
 8017fd8:	1c75      	adds	r5, r6, #1
 8017fda:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8017fde:	9d01      	ldr	r5, [sp, #4]
 8017fe0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017fe4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8017fe8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8017fec:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8017ff0:	442c      	add	r4, r5
 8017ff2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8017ff6:	8061      	strh	r1, [r4, #2]
 8017ff8:	80a2      	strh	r2, [r4, #4]
 8017ffa:	80e3      	strh	r3, [r4, #6]
 8017ffc:	e5c8      	b.n	8017b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017ffe:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8018002:	f04f 37ff 	mov.w	r7, #4294967295
 8018006:	2500      	movs	r5, #0
 8018008:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801800c:	3e01      	subs	r6, #1
 801800e:	445c      	add	r4, fp
 8018010:	9305      	str	r3, [sp, #20]
 8018012:	1e72      	subs	r2, r6, #1
 8018014:	4691      	mov	r9, r2
 8018016:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801801a:	9302      	str	r3, [sp, #8]
 801801c:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8018020:	9304      	str	r3, [sp, #16]
 8018022:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8018026:	f1b9 3fff 	cmp.w	r9, #4294967295
 801802a:	bf16      	itet	ne
 801802c:	9905      	ldrne	r1, [sp, #20]
 801802e:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8018032:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8018036:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801803a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801803e:	6818      	ldr	r0, [r3, #0]
 8018040:	fb18 f801 	smulbb	r8, r8, r1
 8018044:	6859      	ldr	r1, [r3, #4]
 8018046:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801804a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801804e:	4671      	mov	r1, lr
 8018050:	a80c      	add	r0, sp, #48	; 0x30
 8018052:	9207      	str	r2, [sp, #28]
 8018054:	9306      	str	r3, [sp, #24]
 8018056:	f7ff fc37 	bl	80178c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801805a:	f04f 0c08 	mov.w	ip, #8
 801805e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018062:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8018066:	9b04      	ldr	r3, [sp, #16]
 8018068:	9a02      	ldr	r2, [sp, #8]
 801806a:	fb10 f001 	smulbb	r0, r0, r1
 801806e:	fb02 8803 	mla	r8, r2, r3, r8
 8018072:	eba0 0108 	sub.w	r1, r0, r8
 8018076:	fb90 f0fc 	sdiv	r0, r0, ip
 801807a:	4288      	cmp	r0, r1
 801807c:	dc20      	bgt.n	80180c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 801807e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018082:	4551      	cmp	r1, sl
 8018084:	da03      	bge.n	801808e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 8018086:	b1d9      	cbz	r1, 80180c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 8018088:	468a      	mov	sl, r1
 801808a:	464f      	mov	r7, r9
 801808c:	4635      	mov	r5, r6
 801808e:	f109 39ff 	add.w	r9, r9, #4294967295
 8018092:	f119 0f02 	cmn.w	r9, #2
 8018096:	d1c6      	bne.n	8018026 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 8018098:	4616      	mov	r6, r2
 801809a:	3201      	adds	r2, #1
 801809c:	f1a4 0408 	sub.w	r4, r4, #8
 80180a0:	d1b7      	bne.n	8018012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x582>
 80180a2:	9b01      	ldr	r3, [sp, #4]
 80180a4:	b2ac      	uxth	r4, r5
 80180a6:	00ed      	lsls	r5, r5, #3
 80180a8:	1958      	adds	r0, r3, r5
 80180aa:	1c7b      	adds	r3, r7, #1
 80180ac:	d10b      	bne.n	80180c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 80180ae:	4601      	mov	r1, r0
 80180b0:	9803      	ldr	r0, [sp, #12]
 80180b2:	f7ff fc09 	bl	80178c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80180b6:	4621      	mov	r1, r4
 80180b8:	9801      	ldr	r0, [sp, #4]
 80180ba:	f7ff fcd5 	bl	8017a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80180be:	e4fd      	b.n	8017abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80180c0:	464f      	mov	r7, r9
 80180c2:	4635      	mov	r5, r6
 80180c4:	e7ed      	b.n	80180a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 80180c6:	9b01      	ldr	r3, [sp, #4]
 80180c8:	00ff      	lsls	r7, r7, #3
 80180ca:	19d9      	adds	r1, r3, r7
 80180cc:	f7ff fbfc 	bl	80178c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80180d0:	9b03      	ldr	r3, [sp, #12]
 80180d2:	445f      	add	r7, fp
 80180d4:	cb03      	ldmia	r3!, {r0, r1}
 80180d6:	445d      	add	r5, fp
 80180d8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80180dc:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80180e0:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 80180e4:	9b03      	ldr	r3, [sp, #12]
 80180e6:	6869      	ldr	r1, [r5, #4]
 80180e8:	c303      	stmia	r3!, {r0, r1}
 80180ea:	e7e4      	b.n	80180b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>

080180ec <_ZN8touchgfx11Application10invalidateEv>:
 80180ec:	2100      	movs	r1, #0
 80180ee:	4b09      	ldr	r3, [pc, #36]	; (8018114 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80180f0:	b082      	sub	sp, #8
 80180f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80180f6:	4b08      	ldr	r3, [pc, #32]	; (8018118 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80180f8:	9100      	str	r1, [sp, #0]
 80180fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80180fe:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018102:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018106:	ab02      	add	r3, sp, #8
 8018108:	e913 0006 	ldmdb	r3, {r1, r2}
 801810c:	b002      	add	sp, #8
 801810e:	f7ff bcbf 	b.w	8017a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018112:	bf00      	nop
 8018114:	2004f6bc 	.word	0x2004f6bc
 8018118:	2004f6be 	.word	0x2004f6be

0801811c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018120:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8018124:	b09b      	sub	sp, #108	; 0x6c
 8018126:	4604      	mov	r4, r0
 8018128:	4630      	mov	r0, r6
 801812a:	f7fb fd10 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801812e:	4605      	mov	r5, r0
 8018130:	b940      	cbnz	r0, 8018144 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8018132:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018136:	4620      	mov	r0, r4
 8018138:	f7ff fcaa 	bl	8017a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801813c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8018140:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8018144:	4bc9      	ldr	r3, [pc, #804]	; (801846c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d03e      	beq.n	80181ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801814c:	4dc8      	ldr	r5, [pc, #800]	; (8018470 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801814e:	4628      	mov	r0, r5
 8018150:	f7fb fcfd 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018154:	4606      	mov	r6, r0
 8018156:	2800      	cmp	r0, #0
 8018158:	d137      	bne.n	80181ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801815a:	4628      	mov	r0, r5
 801815c:	f7ff f9e6 	bl	801752c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018160:	6829      	ldr	r1, [r5, #0]
 8018162:	686a      	ldr	r2, [r5, #4]
 8018164:	4620      	mov	r0, r4
 8018166:	f7ff fc93 	bl	8017a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801816a:	802e      	strh	r6, [r5, #0]
 801816c:	806e      	strh	r6, [r5, #2]
 801816e:	80ae      	strh	r6, [r5, #4]
 8018170:	80ee      	strh	r6, [r5, #6]
 8018172:	ae09      	add	r6, sp, #36	; 0x24
 8018174:	4630      	mov	r0, r6
 8018176:	f7ff fc27 	bl	80179c8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801817a:	4abe      	ldr	r2, [pc, #760]	; (8018474 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801817c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8018180:	8815      	ldrh	r5, [r2, #0]
 8018182:	9202      	str	r2, [sp, #8]
 8018184:	462b      	mov	r3, r5
 8018186:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801818a:	429f      	cmp	r7, r3
 801818c:	d924      	bls.n	80181d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801818e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8018192:	2907      	cmp	r1, #7
 8018194:	d816      	bhi.n	80181c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8018196:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801819a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801819e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80181a2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80181a6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 80181aa:	1c4a      	adds	r2, r1, #1
 80181ac:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80181b0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 80181b4:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 80181b8:	f8a2 9002 	strh.w	r9, [r2, #2]
 80181bc:	f8a2 e004 	strh.w	lr, [r2, #4]
 80181c0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80181c4:	3301      	adds	r3, #1
 80181c6:	b29b      	uxth	r3, r3
 80181c8:	e7df      	b.n	801818a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 80181ca:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d1cf      	bne.n	8018172 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80181d2:	b01b      	add	sp, #108	; 0x6c
 80181d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d8:	462f      	mov	r7, r5
 80181da:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80181de:	42bb      	cmp	r3, r7
 80181e0:	d90b      	bls.n	80181fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80181e2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80181e6:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80181ea:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80181ee:	4620      	mov	r0, r4
 80181f0:	3701      	adds	r7, #1
 80181f2:	f7ff fc4d 	bl	8017a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80181f6:	b2bf      	uxth	r7, r7
 80181f8:	e7ef      	b.n	80181da <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80181fa:	4a9f      	ldr	r2, [pc, #636]	; (8018478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80181fc:	6813      	ldr	r3, [r2, #0]
 80181fe:	4690      	mov	r8, r2
 8018200:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018204:	2b01      	cmp	r3, #1
 8018206:	f040 80e6 	bne.w	80183d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 801820a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801820e:	4629      	mov	r1, r5
 8018210:	2500      	movs	r5, #0
 8018212:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8018216:	33aa      	adds	r3, #170	; 0xaa
 8018218:	428f      	cmp	r7, r1
 801821a:	f103 0308 	add.w	r3, r3, #8
 801821e:	dd0a      	ble.n	8018236 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8018220:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018224:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8018228:	3101      	adds	r1, #1
 801822a:	4402      	add	r2, r0
 801822c:	b212      	sxth	r2, r2
 801822e:	4295      	cmp	r5, r2
 8018230:	bfb8      	it	lt
 8018232:	4615      	movlt	r5, r2
 8018234:	e7f0      	b.n	8018218 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8018236:	4b91      	ldr	r3, [pc, #580]	; (801847c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8018238:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8018478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 801823c:	881b      	ldrh	r3, [r3, #0]
 801823e:	46d8      	mov	r8, fp
 8018240:	2b0f      	cmp	r3, #15
 8018242:	bf88      	it	hi
 8018244:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8018248:	f04f 0300 	mov.w	r3, #0
 801824c:	bf98      	it	ls
 801824e:	f04f 0a01 	movls.w	sl, #1
 8018252:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018256:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801825a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801825e:	4438      	add	r0, r7
 8018260:	b207      	sxth	r7, r0
 8018262:	f8db 0000 	ldr.w	r0, [fp]
 8018266:	42bd      	cmp	r5, r7
 8018268:	6803      	ldr	r3, [r0, #0]
 801826a:	f340 8084 	ble.w	8018376 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801826e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018272:	4798      	blx	r3
 8018274:	eb07 030a 	add.w	r3, r7, sl
 8018278:	4298      	cmp	r0, r3
 801827a:	da07      	bge.n	801828c <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801827c:	4285      	cmp	r5, r0
 801827e:	dd05      	ble.n	801828c <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8018280:	4287      	cmp	r7, r0
 8018282:	dd6d      	ble.n	8018360 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8018284:	2f00      	cmp	r7, #0
 8018286:	dd6b      	ble.n	8018360 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8018288:	4628      	mov	r0, r5
 801828a:	e004      	b.n	8018296 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 801828c:	4287      	cmp	r7, r0
 801828e:	dcfb      	bgt.n	8018288 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018290:	42a8      	cmp	r0, r5
 8018292:	bfa8      	it	ge
 8018294:	4628      	movge	r0, r5
 8018296:	2200      	movs	r2, #0
 8018298:	4b79      	ldr	r3, [pc, #484]	; (8018480 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801829a:	1bc0      	subs	r0, r0, r7
 801829c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80182a0:	f8ad 7016 	strh.w	r7, [sp, #22]
 80182a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80182a8:	9b02      	ldr	r3, [sp, #8]
 80182aa:	f8ad 2014 	strh.w	r2, [sp, #20]
 80182ae:	881f      	ldrh	r7, [r3, #0]
 80182b0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80182b4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80182b8:	42bb      	cmp	r3, r7
 80182ba:	d9cc      	bls.n	8018256 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 80182bc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80182c0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80182c4:	ab07      	add	r3, sp, #28
 80182c6:	6851      	ldr	r1, [r2, #4]
 80182c8:	c303      	stmia	r3!, {r0, r1}
 80182ca:	a905      	add	r1, sp, #20
 80182cc:	a807      	add	r0, sp, #28
 80182ce:	f7ff fa63 	bl	8017798 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80182d2:	2800      	cmp	r0, #0
 80182d4:	d04c      	beq.n	8018370 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 80182d6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80182da:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80182de:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80182e2:	4686      	mov	lr, r0
 80182e4:	4290      	cmp	r0, r2
 80182e6:	4448      	add	r0, r9
 80182e8:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80182ec:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80182f0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80182f4:	bfb8      	it	lt
 80182f6:	4696      	movlt	lr, r2
 80182f8:	444a      	add	r2, r9
 80182fa:	4299      	cmp	r1, r3
 80182fc:	b280      	uxth	r0, r0
 80182fe:	b292      	uxth	r2, r2
 8018300:	468c      	mov	ip, r1
 8018302:	9303      	str	r3, [sp, #12]
 8018304:	bfb8      	it	lt
 8018306:	469c      	movlt	ip, r3
 8018308:	fa0f f982 	sxth.w	r9, r2
 801830c:	b203      	sxth	r3, r0
 801830e:	454b      	cmp	r3, r9
 8018310:	bfb8      	it	lt
 8018312:	4602      	movlt	r2, r0
 8018314:	eba2 020e 	sub.w	r2, r2, lr
 8018318:	f8ad 2020 	strh.w	r2, [sp, #32]
 801831c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8018320:	9b03      	ldr	r3, [sp, #12]
 8018322:	4411      	add	r1, r2
 8018324:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018328:	b289      	uxth	r1, r1
 801832a:	4413      	add	r3, r2
 801832c:	b29b      	uxth	r3, r3
 801832e:	b208      	sxth	r0, r1
 8018330:	b21a      	sxth	r2, r3
 8018332:	4290      	cmp	r0, r2
 8018334:	bfb8      	it	lt
 8018336:	460b      	movlt	r3, r1
 8018338:	eba3 030c 	sub.w	r3, r3, ip
 801833c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018340:	f8ad e01c 	strh.w	lr, [sp, #28]
 8018344:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018348:	a807      	add	r0, sp, #28
 801834a:	f7fb fc00 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801834e:	b920      	cbnz	r0, 801835a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8018350:	6823      	ldr	r3, [r4, #0]
 8018352:	a907      	add	r1, sp, #28
 8018354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018356:	4620      	mov	r0, r4
 8018358:	4798      	blx	r3
 801835a:	3701      	adds	r7, #1
 801835c:	b2bf      	uxth	r7, r7
 801835e:	e7a9      	b.n	80182b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8018360:	f8d8 0000 	ldr.w	r0, [r8]
 8018364:	2101      	movs	r1, #1
 8018366:	6803      	ldr	r3, [r0, #0]
 8018368:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801836c:	4798      	blx	r3
 801836e:	e772      	b.n	8018256 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8018370:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018374:	e7e8      	b.n	8018348 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8018376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018378:	4798      	blx	r3
 801837a:	4b42      	ldr	r3, [pc, #264]	; (8018484 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	2b00      	cmp	r3, #0
 8018380:	f43f af27 	beq.w	80181d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018384:	2300      	movs	r3, #0
 8018386:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801838a:	9b02      	ldr	r3, [sp, #8]
 801838c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8018390:	881b      	ldrh	r3, [r3, #0]
 8018392:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018396:	429d      	cmp	r5, r3
 8018398:	f67f af1b 	bls.w	80181d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801839c:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 80183a0:	2907      	cmp	r1, #7
 80183a2:	d815      	bhi.n	80183d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 80183a4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80183a8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80183ac:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80183b0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80183b4:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 80183b8:	1c4a      	adds	r2, r1, #1
 80183ba:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 80183be:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80183c2:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 80183c6:	f8a2 e002 	strh.w	lr, [r2, #2]
 80183ca:	f8a2 c004 	strh.w	ip, [r2, #4]
 80183ce:	80d7      	strh	r7, [r2, #6]
 80183d0:	3301      	adds	r3, #1
 80183d2:	b29b      	uxth	r3, r3
 80183d4:	e7df      	b.n	8018396 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 80183d6:	2b02      	cmp	r3, #2
 80183d8:	f040 8136 	bne.w	8018648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 80183dc:	4b2a      	ldr	r3, [pc, #168]	; (8018488 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 80183de:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80183e2:	781b      	ldrb	r3, [r3, #0]
 80183e4:	2b01      	cmp	r3, #1
 80183e6:	f000 809c 	beq.w	8018522 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80183ea:	9b02      	ldr	r3, [sp, #8]
 80183ec:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 80183f0:	f8b3 b000 	ldrh.w	fp, [r3]
 80183f4:	f10b 0b01 	add.w	fp, fp, #1
 80183f8:	fa1f fb8b 	uxth.w	fp, fp
 80183fc:	2a00      	cmp	r2, #0
 80183fe:	d0bc      	beq.n	801837a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8018400:	4659      	mov	r1, fp
 8018402:	f04f 0800 	mov.w	r8, #0
 8018406:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801840a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801840e:	441d      	add	r5, r3
 8018410:	b22d      	sxth	r5, r5
 8018412:	b28b      	uxth	r3, r1
 8018414:	429a      	cmp	r2, r3
 8018416:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801841a:	f240 80c1 	bls.w	80185a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 801841e:	4427      	add	r7, r4
 8018420:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8018424:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8018428:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801842c:	4608      	mov	r0, r1
 801842e:	4563      	cmp	r3, ip
 8018430:	f340 80a3 	ble.w	801857a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8018434:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8018438:	4465      	add	r5, ip
 801843a:	b22d      	sxth	r5, r5
 801843c:	429d      	cmp	r5, r3
 801843e:	bfa8      	it	ge
 8018440:	461d      	movge	r5, r3
 8018442:	3101      	adds	r1, #1
 8018444:	4680      	mov	r8, r0
 8018446:	e7e4      	b.n	8018412 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8018448:	d10b      	bne.n	8018462 <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 801844a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801844e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8018452:	458c      	cmp	ip, r1
 8018454:	bfb4      	ite	lt
 8018456:	469c      	movlt	ip, r3
 8018458:	46bc      	movge	ip, r7
 801845a:	4572      	cmp	r2, lr
 801845c:	bfb8      	it	lt
 801845e:	4672      	movlt	r2, lr
 8018460:	e088      	b.n	8018574 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8018462:	428a      	cmp	r2, r1
 8018464:	bfb8      	it	lt
 8018466:	460a      	movlt	r2, r1
 8018468:	46bc      	mov	ip, r7
 801846a:	e083      	b.n	8018574 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801846c:	2004f708 	.word	0x2004f708
 8018470:	2004f714 	.word	0x2004f714
 8018474:	20025820 	.word	0x20025820
 8018478:	2004f6c8 	.word	0x2004f6c8
 801847c:	2004f6be 	.word	0x2004f6be
 8018480:	2004f6bc 	.word	0x2004f6bc
 8018484:	2004f6c6 	.word	0x2004f6c6
 8018488:	2004f6c0 	.word	0x2004f6c0
 801848c:	1961      	adds	r1, r4, r5
 801848e:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8018492:	ab07      	add	r3, sp, #28
 8018494:	6849      	ldr	r1, [r1, #4]
 8018496:	c303      	stmia	r3!, {r0, r1}
 8018498:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801849c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80184a0:	2b13      	cmp	r3, #19
 80184a2:	bfd8      	it	le
 80184a4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80184a8:	440b      	add	r3, r1
 80184aa:	1a9b      	subs	r3, r3, r2
 80184ac:	a807      	add	r0, sp, #28
 80184ae:	f8ad 3020 	strh.w	r3, [sp, #32]
 80184b2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80184b6:	f7ff f853 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80184ba:	a807      	add	r0, sp, #28
 80184bc:	f7fb fb47 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 80184c0:	bb78      	cbnz	r0, 8018522 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80184c2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80184c6:	f8d8 0000 	ldr.w	r0, [r8]
 80184ca:	f1bc 0f14 	cmp.w	ip, #20
 80184ce:	bfa8      	it	ge
 80184d0:	f04f 0c14 	movge.w	ip, #20
 80184d4:	f8d0 e000 	ldr.w	lr, [r0]
 80184d8:	fa1f fc8c 	uxth.w	ip, ip
 80184dc:	f8cd c000 	str.w	ip, [sp]
 80184e0:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80184e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80184e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80184ec:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80184f0:	47d0      	blx	sl
 80184f2:	4682      	mov	sl, r0
 80184f4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80184f8:	a807      	add	r0, sp, #28
 80184fa:	f7ff f817 	bl	801752c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80184fe:	6823      	ldr	r3, [r4, #0]
 8018500:	4620      	mov	r0, r4
 8018502:	4425      	add	r5, r4
 8018504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018506:	a907      	add	r1, sp, #28
 8018508:	4798      	blx	r3
 801850a:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801850e:	eba0 000a 	sub.w	r0, r0, sl
 8018512:	b200      	sxth	r0, r0
 8018514:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8018518:	b918      	cbnz	r0, 8018522 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801851a:	b2b9      	uxth	r1, r7
 801851c:	4648      	mov	r0, r9
 801851e:	f7ff faa3 	bl	8017a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018522:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8018526:	f1bb 0f00 	cmp.w	fp, #0
 801852a:	f43f af26 	beq.w	801837a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801852e:	2700      	movs	r7, #0
 8018530:	9b02      	ldr	r3, [sp, #8]
 8018532:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8018536:	881b      	ldrh	r3, [r3, #0]
 8018538:	3301      	adds	r3, #1
 801853a:	b29b      	uxth	r3, r3
 801853c:	b299      	uxth	r1, r3
 801853e:	458b      	cmp	fp, r1
 8018540:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 8018544:	d9a2      	bls.n	801848c <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 8018546:	4425      	add	r5, r4
 8018548:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801854c:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8018550:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8018554:	4408      	add	r0, r1
 8018556:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801855a:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801855e:	b200      	sxth	r0, r0
 8018560:	4471      	add	r1, lr
 8018562:	b209      	sxth	r1, r1
 8018564:	4288      	cmp	r0, r1
 8018566:	469c      	mov	ip, r3
 8018568:	f6bf af6e 	bge.w	8018448 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 801856c:	4586      	cmp	lr, r0
 801856e:	4672      	mov	r2, lr
 8018570:	bfb8      	it	lt
 8018572:	4602      	movlt	r2, r0
 8018574:	3301      	adds	r3, #1
 8018576:	4667      	mov	r7, ip
 8018578:	e7e0      	b.n	801853c <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 801857a:	d10c      	bne.n	8018596 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 801857c:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8018580:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8018584:	4287      	cmp	r7, r0
 8018586:	bfb4      	ite	lt
 8018588:	4608      	movlt	r0, r1
 801858a:	4640      	movge	r0, r8
 801858c:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8018590:	443b      	add	r3, r7
 8018592:	b21b      	sxth	r3, r3
 8018594:	e752      	b.n	801843c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8018596:	4565      	cmp	r5, ip
 8018598:	bfa8      	it	ge
 801859a:	4665      	movge	r5, ip
 801859c:	4640      	mov	r0, r8
 801859e:	e750      	b.n	8018442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 80185a0:	eb09 0007 	add.w	r0, r9, r7
 80185a4:	4427      	add	r7, r4
 80185a6:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 80185aa:	9203      	str	r2, [sp, #12]
 80185ac:	f1ba 0f13 	cmp.w	sl, #19
 80185b0:	bfde      	ittt	le
 80185b2:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 80185b6:	4455      	addle	r5, sl
 80185b8:	b22d      	sxthle	r5, r5
 80185ba:	f7fb fac8 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 80185be:	9a03      	ldr	r2, [sp, #12]
 80185c0:	2800      	cmp	r0, #0
 80185c2:	f47f af1b 	bne.w	80183fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 80185c6:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 80185ca:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80185ce:	1aad      	subs	r5, r5, r2
 80185d0:	2d14      	cmp	r5, #20
 80185d2:	bfa8      	it	ge
 80185d4:	2514      	movge	r5, #20
 80185d6:	4828      	ldr	r0, [pc, #160]	; (8018678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 80185d8:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 80185dc:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80185e0:	6800      	ldr	r0, [r0, #0]
 80185e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80185e6:	f8ad 201e 	strh.w	r2, [sp, #30]
 80185ea:	f8ad 3020 	strh.w	r3, [sp, #32]
 80185ee:	f8d0 c000 	ldr.w	ip, [r0]
 80185f2:	b2ad      	uxth	r5, r5
 80185f4:	fa1f fa8a 	uxth.w	sl, sl
 80185f8:	4555      	cmp	r5, sl
 80185fa:	bf94      	ite	ls
 80185fc:	9500      	strls	r5, [sp, #0]
 80185fe:	f8cd a000 	strhi.w	sl, [sp]
 8018602:	b292      	uxth	r2, r2
 8018604:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8018608:	b29b      	uxth	r3, r3
 801860a:	b289      	uxth	r1, r1
 801860c:	47a8      	blx	r5
 801860e:	6823      	ldr	r3, [r4, #0]
 8018610:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018616:	a907      	add	r1, sp, #28
 8018618:	4620      	mov	r0, r4
 801861a:	4798      	blx	r3
 801861c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8018620:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8018624:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8018628:	1a5b      	subs	r3, r3, r1
 801862a:	440a      	add	r2, r1
 801862c:	b21b      	sxth	r3, r3
 801862e:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8018632:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8018636:	2b00      	cmp	r3, #0
 8018638:	f47f aed7 	bne.w	80183ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 801863c:	fa1f f188 	uxth.w	r1, r8
 8018640:	4648      	mov	r0, r9
 8018642:	f7ff fa11 	bl	8017a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018646:	e6d0      	b.n	80183ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8018648:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801864c:	42ab      	cmp	r3, r5
 801864e:	f67f ae94 	bls.w	801837a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8018652:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018656:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801865a:	ab07      	add	r3, sp, #28
 801865c:	6851      	ldr	r1, [r2, #4]
 801865e:	c303      	stmia	r3!, {r0, r1}
 8018660:	a807      	add	r0, sp, #28
 8018662:	f7fb fa74 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018666:	b920      	cbnz	r0, 8018672 <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8018668:	6823      	ldr	r3, [r4, #0]
 801866a:	a907      	add	r1, sp, #28
 801866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801866e:	4620      	mov	r0, r4
 8018670:	4798      	blx	r3
 8018672:	3501      	adds	r5, #1
 8018674:	b2ad      	uxth	r5, r5
 8018676:	e7e7      	b.n	8018648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8018678:	2004f6c8 	.word	0x2004f6c8

0801867c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801867c:	2200      	movs	r2, #0
 801867e:	4b03      	ldr	r3, [pc, #12]	; (801868c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018680:	801a      	strh	r2, [r3, #0]
 8018682:	805a      	strh	r2, [r3, #2]
 8018684:	809a      	strh	r2, [r3, #4]
 8018686:	80da      	strh	r2, [r3, #6]
 8018688:	4770      	bx	lr
 801868a:	bf00      	nop
 801868c:	2004f714 	.word	0x2004f714

08018690 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018694:	4606      	mov	r6, r0
 8018696:	b09d      	sub	sp, #116	; 0x74
 8018698:	a803      	add	r0, sp, #12
 801869a:	4614      	mov	r4, r2
 801869c:	468a      	mov	sl, r1
 801869e:	461d      	mov	r5, r3
 80186a0:	f000 fe1d 	bl	80192de <_ZN8touchgfx12TextProviderC1Ev>
 80186a4:	6833      	ldr	r3, [r6, #0]
 80186a6:	4630      	mov	r0, r6
 80186a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186aa:	4798      	blx	r3
 80186ac:	6833      	ldr	r3, [r6, #0]
 80186ae:	4607      	mov	r7, r0
 80186b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80186b2:	4630      	mov	r0, r6
 80186b4:	4798      	blx	r3
 80186b6:	462a      	mov	r2, r5
 80186b8:	2500      	movs	r5, #0
 80186ba:	9000      	str	r0, [sp, #0]
 80186bc:	4621      	mov	r1, r4
 80186be:	463b      	mov	r3, r7
 80186c0:	a803      	add	r0, sp, #12
 80186c2:	f000 fe5f 	bl	8019384 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80186c6:	462c      	mov	r4, r5
 80186c8:	46a9      	mov	r9, r5
 80186ca:	46a8      	mov	r8, r5
 80186cc:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80186d0:	2300      	movs	r3, #0
 80186d2:	9302      	str	r3, [sp, #8]
 80186d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80186d8:	429c      	cmp	r4, r3
 80186da:	d002      	beq.n	80186e2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80186dc:	455c      	cmp	r4, fp
 80186de:	bf18      	it	ne
 80186e0:	4625      	movne	r5, r4
 80186e2:	ab02      	add	r3, sp, #8
 80186e4:	4632      	mov	r2, r6
 80186e6:	4651      	mov	r1, sl
 80186e8:	a803      	add	r0, sp, #12
 80186ea:	f001 f93b 	bl	8019964 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80186ee:	4604      	mov	r4, r0
 80186f0:	b108      	cbz	r0, 80186f6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80186f2:	280a      	cmp	r0, #10
 80186f4:	d10a      	bne.n	801870c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80186f6:	45c1      	cmp	r9, r8
 80186f8:	bf38      	it	cc
 80186fa:	46c1      	movcc	r9, r8
 80186fc:	f04f 0800 	mov.w	r8, #0
 8018700:	2c00      	cmp	r4, #0
 8018702:	d1e5      	bne.n	80186d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018704:	4648      	mov	r0, r9
 8018706:	b01d      	add	sp, #116	; 0x74
 8018708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801870c:	9a02      	ldr	r2, [sp, #8]
 801870e:	2a00      	cmp	r2, #0
 8018710:	d0de      	beq.n	80186d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018712:	7b57      	ldrb	r7, [r2, #13]
 8018714:	6833      	ldr	r3, [r6, #0]
 8018716:	007f      	lsls	r7, r7, #1
 8018718:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801871c:	7a97      	ldrb	r7, [r2, #10]
 801871e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018720:	4307      	orrs	r7, r0
 8018722:	4629      	mov	r1, r5
 8018724:	4630      	mov	r0, r6
 8018726:	8894      	ldrh	r4, [r2, #4]
 8018728:	4798      	blx	r3
 801872a:	4438      	add	r0, r7
 801872c:	4480      	add	r8, r0
 801872e:	fa1f f888 	uxth.w	r8, r8
 8018732:	e7e5      	b.n	8018700 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018734 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018734:	b508      	push	{r3, lr}
 8018736:	6803      	ldr	r3, [r0, #0]
 8018738:	68db      	ldr	r3, [r3, #12]
 801873a:	4798      	blx	r3
 801873c:	b128      	cbz	r0, 801874a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801873e:	7b43      	ldrb	r3, [r0, #13]
 8018740:	7a80      	ldrb	r0, [r0, #10]
 8018742:	005b      	lsls	r3, r3, #1
 8018744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018748:	4318      	orrs	r0, r3
 801874a:	bd08      	pop	{r3, pc}

0801874c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801874c:	b40e      	push	{r1, r2, r3}
 801874e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018750:	4605      	mov	r5, r0
 8018752:	b09e      	sub	sp, #120	; 0x78
 8018754:	ab23      	add	r3, sp, #140	; 0x8c
 8018756:	f853 4b04 	ldr.w	r4, [r3], #4
 801875a:	a805      	add	r0, sp, #20
 801875c:	9303      	str	r3, [sp, #12]
 801875e:	f000 fdbe 	bl	80192de <_ZN8touchgfx12TextProviderC1Ev>
 8018762:	682b      	ldr	r3, [r5, #0]
 8018764:	4628      	mov	r0, r5
 8018766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018768:	4798      	blx	r3
 801876a:	682b      	ldr	r3, [r5, #0]
 801876c:	4606      	mov	r6, r0
 801876e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018770:	4628      	mov	r0, r5
 8018772:	4798      	blx	r3
 8018774:	4621      	mov	r1, r4
 8018776:	2400      	movs	r4, #0
 8018778:	4633      	mov	r3, r6
 801877a:	9000      	str	r0, [sp, #0]
 801877c:	9a03      	ldr	r2, [sp, #12]
 801877e:	ae1e      	add	r6, sp, #120	; 0x78
 8018780:	a805      	add	r0, sp, #20
 8018782:	f000 fdff 	bl	8019384 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018786:	f846 4d68 	str.w	r4, [r6, #-104]!
 801878a:	4633      	mov	r3, r6
 801878c:	462a      	mov	r2, r5
 801878e:	4621      	mov	r1, r4
 8018790:	a805      	add	r0, sp, #20
 8018792:	f001 f8e7 	bl	8019964 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018796:	b1f0      	cbz	r0, 80187d6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8018798:	280a      	cmp	r0, #10
 801879a:	d018      	beq.n	80187ce <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801879c:	9f04      	ldr	r7, [sp, #16]
 801879e:	b1b7      	cbz	r7, 80187ce <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80187a0:	7b78      	ldrb	r0, [r7, #13]
 80187a2:	7a3b      	ldrb	r3, [r7, #8]
 80187a4:	00c1      	lsls	r1, r0, #3
 80187a6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80187aa:	4319      	orrs	r1, r3
 80187ac:	0643      	lsls	r3, r0, #25
 80187ae:	bf44      	itt	mi
 80187b0:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80187b4:	b219      	sxthmi	r1, r3
 80187b6:	0100      	lsls	r0, r0, #4
 80187b8:	79fb      	ldrb	r3, [r7, #7]
 80187ba:	88aa      	ldrh	r2, [r5, #4]
 80187bc:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80187c0:	4303      	orrs	r3, r0
 80187c2:	4413      	add	r3, r2
 80187c4:	1a5b      	subs	r3, r3, r1
 80187c6:	b29b      	uxth	r3, r3
 80187c8:	42a3      	cmp	r3, r4
 80187ca:	bfc8      	it	gt
 80187cc:	b21c      	sxthgt	r4, r3
 80187ce:	4633      	mov	r3, r6
 80187d0:	462a      	mov	r2, r5
 80187d2:	2100      	movs	r1, #0
 80187d4:	e7dc      	b.n	8018790 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80187d6:	b2a0      	uxth	r0, r4
 80187d8:	b01e      	add	sp, #120	; 0x78
 80187da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80187de:	b003      	add	sp, #12
 80187e0:	4770      	bx	lr

080187e2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80187e2:	b40e      	push	{r1, r2, r3}
 80187e4:	b570      	push	{r4, r5, r6, lr}
 80187e6:	4604      	mov	r4, r0
 80187e8:	b09d      	sub	sp, #116	; 0x74
 80187ea:	ab21      	add	r3, sp, #132	; 0x84
 80187ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80187f0:	a803      	add	r0, sp, #12
 80187f2:	9302      	str	r3, [sp, #8]
 80187f4:	f000 fd73 	bl	80192de <_ZN8touchgfx12TextProviderC1Ev>
 80187f8:	6823      	ldr	r3, [r4, #0]
 80187fa:	4620      	mov	r0, r4
 80187fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187fe:	4798      	blx	r3
 8018800:	6823      	ldr	r3, [r4, #0]
 8018802:	4606      	mov	r6, r0
 8018804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018806:	4620      	mov	r0, r4
 8018808:	4798      	blx	r3
 801880a:	4633      	mov	r3, r6
 801880c:	9000      	str	r0, [sp, #0]
 801880e:	9a02      	ldr	r2, [sp, #8]
 8018810:	4629      	mov	r1, r5
 8018812:	a803      	add	r0, sp, #12
 8018814:	f000 fdb6 	bl	8019384 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018818:	a803      	add	r0, sp, #12
 801881a:	f001 f925 	bl	8019a68 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801881e:	2401      	movs	r4, #1
 8018820:	b2a3      	uxth	r3, r4
 8018822:	b140      	cbz	r0, 8018836 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8018824:	280a      	cmp	r0, #10
 8018826:	bf08      	it	eq
 8018828:	3301      	addeq	r3, #1
 801882a:	a803      	add	r0, sp, #12
 801882c:	bf08      	it	eq
 801882e:	b21c      	sxtheq	r4, r3
 8018830:	f001 f91a 	bl	8019a68 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018834:	e7f4      	b.n	8018820 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018836:	4618      	mov	r0, r3
 8018838:	b01d      	add	sp, #116	; 0x74
 801883a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801883e:	b003      	add	sp, #12
 8018840:	4770      	bx	lr

08018842 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018842:	b40e      	push	{r1, r2, r3}
 8018844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018846:	4604      	mov	r4, r0
 8018848:	b09e      	sub	sp, #120	; 0x78
 801884a:	ab23      	add	r3, sp, #140	; 0x8c
 801884c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018850:	a805      	add	r0, sp, #20
 8018852:	9303      	str	r3, [sp, #12]
 8018854:	f000 fd43 	bl	80192de <_ZN8touchgfx12TextProviderC1Ev>
 8018858:	6823      	ldr	r3, [r4, #0]
 801885a:	4620      	mov	r0, r4
 801885c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801885e:	4798      	blx	r3
 8018860:	6823      	ldr	r3, [r4, #0]
 8018862:	4606      	mov	r6, r0
 8018864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018866:	4620      	mov	r0, r4
 8018868:	4798      	blx	r3
 801886a:	4633      	mov	r3, r6
 801886c:	4629      	mov	r1, r5
 801886e:	9000      	str	r0, [sp, #0]
 8018870:	9a03      	ldr	r2, [sp, #12]
 8018872:	a805      	add	r0, sp, #20
 8018874:	f000 fd86 	bl	8019384 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018878:	2100      	movs	r1, #0
 801887a:	ad1e      	add	r5, sp, #120	; 0x78
 801887c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018880:	462b      	mov	r3, r5
 8018882:	4622      	mov	r2, r4
 8018884:	a805      	add	r0, sp, #20
 8018886:	f001 f86d 	bl	8019964 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801888a:	26ff      	movs	r6, #255	; 0xff
 801888c:	b1d8      	cbz	r0, 80188c6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801888e:	280a      	cmp	r0, #10
 8018890:	d012      	beq.n	80188b8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018892:	9804      	ldr	r0, [sp, #16]
 8018894:	b180      	cbz	r0, 80188b8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018896:	7b47      	ldrb	r7, [r0, #13]
 8018898:	7922      	ldrb	r2, [r4, #4]
 801889a:	00fb      	lsls	r3, r7, #3
 801889c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80188a0:	7a03      	ldrb	r3, [r0, #8]
 80188a2:	430b      	orrs	r3, r1
 80188a4:	0679      	lsls	r1, r7, #25
 80188a6:	bf44      	itt	mi
 80188a8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80188ac:	b21b      	sxthmi	r3, r3
 80188ae:	1ad3      	subs	r3, r2, r3
 80188b0:	b2db      	uxtb	r3, r3
 80188b2:	429e      	cmp	r6, r3
 80188b4:	bf28      	it	cs
 80188b6:	461e      	movcs	r6, r3
 80188b8:	462b      	mov	r3, r5
 80188ba:	4622      	mov	r2, r4
 80188bc:	2100      	movs	r1, #0
 80188be:	a805      	add	r0, sp, #20
 80188c0:	f001 f850 	bl	8019964 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80188c4:	e7e2      	b.n	801888c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80188c6:	4630      	mov	r0, r6
 80188c8:	b01e      	add	sp, #120	; 0x78
 80188ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80188ce:	b003      	add	sp, #12
 80188d0:	4770      	bx	lr

080188d2 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80188d2:	b513      	push	{r0, r1, r4, lr}
 80188d4:	2400      	movs	r4, #0
 80188d6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80188da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80188de:	6803      	ldr	r3, [r0, #0]
 80188e0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80188e4:	9400      	str	r4, [sp, #0]
 80188e6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80188ea:	691b      	ldr	r3, [r3, #16]
 80188ec:	4669      	mov	r1, sp
 80188ee:	4798      	blx	r3
 80188f0:	b002      	add	sp, #8
 80188f2:	bd10      	pop	{r4, pc}

080188f4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80188f4:	b538      	push	{r3, r4, r5, lr}
 80188f6:	460c      	mov	r4, r1
 80188f8:	4605      	mov	r5, r0
 80188fa:	680b      	ldr	r3, [r1, #0]
 80188fc:	68db      	ldr	r3, [r3, #12]
 80188fe:	4798      	blx	r3
 8018900:	6823      	ldr	r3, [r4, #0]
 8018902:	4620      	mov	r0, r4
 8018904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018906:	4629      	mov	r1, r5
 8018908:	4798      	blx	r3
 801890a:	4628      	mov	r0, r5
 801890c:	bd38      	pop	{r3, r4, r5, pc}

0801890e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801890e:	b410      	push	{r4}
 8018910:	880a      	ldrh	r2, [r1, #0]
 8018912:	8884      	ldrh	r4, [r0, #4]
 8018914:	4422      	add	r2, r4
 8018916:	800a      	strh	r2, [r1, #0]
 8018918:	88c4      	ldrh	r4, [r0, #6]
 801891a:	884a      	ldrh	r2, [r1, #2]
 801891c:	4422      	add	r2, r4
 801891e:	804a      	strh	r2, [r1, #2]
 8018920:	6940      	ldr	r0, [r0, #20]
 8018922:	b120      	cbz	r0, 801892e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018924:	6803      	ldr	r3, [r0, #0]
 8018926:	f85d 4b04 	ldr.w	r4, [sp], #4
 801892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801892c:	4718      	bx	r3
 801892e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018932:	4770      	bx	lr

08018934 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018934:	b570      	push	{r4, r5, r6, lr}
 8018936:	460c      	mov	r4, r1
 8018938:	8882      	ldrh	r2, [r0, #4]
 801893a:	880b      	ldrh	r3, [r1, #0]
 801893c:	4605      	mov	r5, r0
 801893e:	4413      	add	r3, r2
 8018940:	800b      	strh	r3, [r1, #0]
 8018942:	88c2      	ldrh	r2, [r0, #6]
 8018944:	884b      	ldrh	r3, [r1, #2]
 8018946:	4413      	add	r3, r2
 8018948:	804b      	strh	r3, [r1, #2]
 801894a:	1d01      	adds	r1, r0, #4
 801894c:	4620      	mov	r0, r4
 801894e:	f7fb f8bb 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 8018952:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018956:	2b00      	cmp	r3, #0
 8018958:	dd0b      	ble.n	8018972 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801895a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801895e:	2b00      	cmp	r3, #0
 8018960:	dd07      	ble.n	8018972 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018962:	6968      	ldr	r0, [r5, #20]
 8018964:	b128      	cbz	r0, 8018972 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018966:	6803      	ldr	r3, [r0, #0]
 8018968:	4621      	mov	r1, r4
 801896a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801896e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018970:	4718      	bx	r3
 8018972:	bd70      	pop	{r4, r5, r6, pc}

08018974 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018974:	b570      	push	{r4, r5, r6, lr}
 8018976:	460c      	mov	r4, r1
 8018978:	8882      	ldrh	r2, [r0, #4]
 801897a:	880b      	ldrh	r3, [r1, #0]
 801897c:	4605      	mov	r5, r0
 801897e:	4413      	add	r3, r2
 8018980:	800b      	strh	r3, [r1, #0]
 8018982:	88c2      	ldrh	r2, [r0, #6]
 8018984:	884b      	ldrh	r3, [r1, #2]
 8018986:	4413      	add	r3, r2
 8018988:	804b      	strh	r3, [r1, #2]
 801898a:	1d01      	adds	r1, r0, #4
 801898c:	4620      	mov	r0, r4
 801898e:	f7fb f89b 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 8018992:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018996:	2b00      	cmp	r3, #0
 8018998:	dd18      	ble.n	80189cc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801899a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	dd14      	ble.n	80189cc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80189a2:	6968      	ldr	r0, [r5, #20]
 80189a4:	b128      	cbz	r0, 80189b2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80189a6:	6803      	ldr	r3, [r0, #0]
 80189a8:	4621      	mov	r1, r4
 80189aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189ae:	691b      	ldr	r3, [r3, #16]
 80189b0:	4718      	bx	r3
 80189b2:	4b07      	ldr	r3, [pc, #28]	; (80189d0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	3304      	adds	r3, #4
 80189b8:	429d      	cmp	r5, r3
 80189ba:	d107      	bne.n	80189cc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80189bc:	f7fe ffca 	bl	8017954 <_ZN8touchgfx11Application11getInstanceEv>
 80189c0:	6821      	ldr	r1, [r4, #0]
 80189c2:	6862      	ldr	r2, [r4, #4]
 80189c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189c8:	f7ff b862 	b.w	8017a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80189cc:	bd70      	pop	{r4, r5, r6, pc}
 80189ce:	bf00      	nop
 80189d0:	2004f70c 	.word	0x2004f70c

080189d4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80189d4:	b570      	push	{r4, r5, r6, lr}
 80189d6:	4604      	mov	r4, r0
 80189d8:	4616      	mov	r6, r2
 80189da:	460d      	mov	r5, r1
 80189dc:	b901      	cbnz	r1, 80189e0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80189de:	b192      	cbz	r2, 8018a06 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80189e0:	6823      	ldr	r3, [r4, #0]
 80189e2:	4620      	mov	r0, r4
 80189e4:	699b      	ldr	r3, [r3, #24]
 80189e6:	4798      	blx	r3
 80189e8:	88e2      	ldrh	r2, [r4, #6]
 80189ea:	88a1      	ldrh	r1, [r4, #4]
 80189ec:	4432      	add	r2, r6
 80189ee:	4429      	add	r1, r5
 80189f0:	4620      	mov	r0, r4
 80189f2:	b212      	sxth	r2, r2
 80189f4:	b209      	sxth	r1, r1
 80189f6:	f7f5 fbcf 	bl	800e198 <_ZN8touchgfx8Drawable5setXYEss>
 80189fa:	6823      	ldr	r3, [r4, #0]
 80189fc:	4620      	mov	r0, r4
 80189fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a02:	699b      	ldr	r3, [r3, #24]
 8018a04:	4718      	bx	r3
 8018a06:	bd70      	pop	{r4, r5, r6, pc}

08018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018a08:	b510      	push	{r4, lr}
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	4604      	mov	r4, r0
 8018a0e:	4608      	mov	r0, r1
 8018a10:	8023      	strh	r3, [r4, #0]
 8018a12:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018a16:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018a1a:	8063      	strh	r3, [r4, #2]
 8018a1c:	6803      	ldr	r3, [r0, #0]
 8018a1e:	80a1      	strh	r1, [r4, #4]
 8018a20:	80e2      	strh	r2, [r4, #6]
 8018a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a24:	4621      	mov	r1, r4
 8018a26:	4798      	blx	r3
 8018a28:	4620      	mov	r0, r4
 8018a2a:	bd10      	pop	{r4, pc}

08018a2c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018a2c:	b530      	push	{r4, r5, lr}
 8018a2e:	8083      	strh	r3, [r0, #4]
 8018a30:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018a34:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8018a38:	7183      	strb	r3, [r0, #6]
 8018a3a:	79c3      	ldrb	r3, [r0, #7]
 8018a3c:	6101      	str	r1, [r0, #16]
 8018a3e:	f365 0306 	bfi	r3, r5, #0, #7
 8018a42:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8018a46:	8282      	strh	r2, [r0, #20]
 8018a48:	f365 13c7 	bfi	r3, r5, #7, #1
 8018a4c:	71c3      	strb	r3, [r0, #7]
 8018a4e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018a52:	7203      	strb	r3, [r0, #8]
 8018a54:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018a58:	7243      	strb	r3, [r0, #9]
 8018a5a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018a5e:	8143      	strh	r3, [r0, #10]
 8018a60:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018a64:	8183      	strh	r3, [r0, #12]
 8018a66:	4b01      	ldr	r3, [pc, #4]	; (8018a6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8018a68:	6003      	str	r3, [r0, #0]
 8018a6a:	bd30      	pop	{r4, r5, pc}
 8018a6c:	08029704 	.word	0x08029704

08018a70 <_ZNK8touchgfx9ConstFont4findEt>:
 8018a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a72:	6904      	ldr	r4, [r0, #16]
 8018a74:	b3bc      	cbz	r4, 8018ae6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018a76:	88a3      	ldrh	r3, [r4, #4]
 8018a78:	8a82      	ldrh	r2, [r0, #20]
 8018a7a:	1acb      	subs	r3, r1, r3
 8018a7c:	f102 32ff 	add.w	r2, r2, #4294967295
 8018a80:	d431      	bmi.n	8018ae6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018a82:	4293      	cmp	r3, r2
 8018a84:	dd0c      	ble.n	8018aa0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018a86:	230e      	movs	r3, #14
 8018a88:	fb03 4302 	mla	r3, r3, r2, r4
 8018a8c:	889b      	ldrh	r3, [r3, #4]
 8018a8e:	1a5b      	subs	r3, r3, r1
 8018a90:	1ad3      	subs	r3, r2, r3
 8018a92:	429a      	cmp	r2, r3
 8018a94:	db27      	blt.n	8018ae6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	bfbc      	itt	lt
 8018a9a:	2302      	movlt	r3, #2
 8018a9c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018aa0:	2500      	movs	r5, #0
 8018aa2:	260e      	movs	r6, #14
 8018aa4:	4295      	cmp	r5, r2
 8018aa6:	dc1e      	bgt.n	8018ae6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018aa8:	fb06 4003 	mla	r0, r6, r3, r4
 8018aac:	8887      	ldrh	r7, [r0, #4]
 8018aae:	42b9      	cmp	r1, r7
 8018ab0:	d01a      	beq.n	8018ae8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018ab2:	d20d      	bcs.n	8018ad0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018ab4:	1e5a      	subs	r2, r3, #1
 8018ab6:	4295      	cmp	r5, r2
 8018ab8:	dc15      	bgt.n	8018ae6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018aba:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018abe:	1a5b      	subs	r3, r3, r1
 8018ac0:	1ad3      	subs	r3, r2, r3
 8018ac2:	429a      	cmp	r2, r3
 8018ac4:	db0f      	blt.n	8018ae6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ac6:	429d      	cmp	r5, r3
 8018ac8:	ddec      	ble.n	8018aa4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018aca:	1953      	adds	r3, r2, r5
 8018acc:	105b      	asrs	r3, r3, #1
 8018ace:	e7e9      	b.n	8018aa4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018ad0:	1c5d      	adds	r5, r3, #1
 8018ad2:	42aa      	cmp	r2, r5
 8018ad4:	db07      	blt.n	8018ae6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ad6:	8a43      	ldrh	r3, [r0, #18]
 8018ad8:	1acb      	subs	r3, r1, r3
 8018ada:	442b      	add	r3, r5
 8018adc:	429d      	cmp	r5, r3
 8018ade:	dc02      	bgt.n	8018ae6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ae0:	429a      	cmp	r2, r3
 8018ae2:	dadf      	bge.n	8018aa4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018ae4:	e7f1      	b.n	8018aca <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018ae6:	2000      	movs	r0, #0
 8018ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018aea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aec:	4604      	mov	r4, r0
 8018aee:	4617      	mov	r7, r2
 8018af0:	461e      	mov	r6, r3
 8018af2:	b911      	cbnz	r1, 8018afa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018af4:	2500      	movs	r5, #0
 8018af6:	4628      	mov	r0, r5
 8018af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018afa:	290a      	cmp	r1, #10
 8018afc:	d0fa      	beq.n	8018af4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018afe:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018b02:	4291      	cmp	r1, r2
 8018b04:	d0f6      	beq.n	8018af4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018b06:	f242 020b 	movw	r2, #8203	; 0x200b
 8018b0a:	4291      	cmp	r1, r2
 8018b0c:	d0f2      	beq.n	8018af4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018b0e:	f7ff ffaf 	bl	8018a70 <_ZNK8touchgfx9ConstFont4findEt>
 8018b12:	4605      	mov	r5, r0
 8018b14:	b950      	cbnz	r0, 8018b2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018b16:	6823      	ldr	r3, [r4, #0]
 8018b18:	4620      	mov	r0, r4
 8018b1a:	691b      	ldr	r3, [r3, #16]
 8018b1c:	4798      	blx	r3
 8018b1e:	4601      	mov	r1, r0
 8018b20:	4620      	mov	r0, r4
 8018b22:	f7ff ffa5 	bl	8018a70 <_ZNK8touchgfx9ConstFont4findEt>
 8018b26:	4605      	mov	r5, r0
 8018b28:	2800      	cmp	r0, #0
 8018b2a:	d0e3      	beq.n	8018af4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018b2c:	6823      	ldr	r3, [r4, #0]
 8018b2e:	4629      	mov	r1, r5
 8018b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b32:	4620      	mov	r0, r4
 8018b34:	4798      	blx	r3
 8018b36:	6038      	str	r0, [r7, #0]
 8018b38:	6823      	ldr	r3, [r4, #0]
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b3e:	4798      	blx	r3
 8018b40:	7030      	strb	r0, [r6, #0]
 8018b42:	e7d8      	b.n	8018af6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018b44 <_ZN8touchgfx4clzuEm>:
 8018b44:	4603      	mov	r3, r0
 8018b46:	b1c8      	cbz	r0, 8018b7c <_ZN8touchgfx4clzuEm+0x38>
 8018b48:	0c02      	lsrs	r2, r0, #16
 8018b4a:	0412      	lsls	r2, r2, #16
 8018b4c:	b9a2      	cbnz	r2, 8018b78 <_ZN8touchgfx4clzuEm+0x34>
 8018b4e:	0403      	lsls	r3, r0, #16
 8018b50:	2010      	movs	r0, #16
 8018b52:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018b56:	bf04      	itt	eq
 8018b58:	021b      	lsleq	r3, r3, #8
 8018b5a:	3008      	addeq	r0, #8
 8018b5c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018b60:	bf04      	itt	eq
 8018b62:	011b      	lsleq	r3, r3, #4
 8018b64:	3004      	addeq	r0, #4
 8018b66:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018b6a:	bf04      	itt	eq
 8018b6c:	009b      	lsleq	r3, r3, #2
 8018b6e:	3002      	addeq	r0, #2
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	db04      	blt.n	8018b7e <_ZN8touchgfx4clzuEm+0x3a>
 8018b74:	3001      	adds	r0, #1
 8018b76:	4770      	bx	lr
 8018b78:	2000      	movs	r0, #0
 8018b7a:	e7ea      	b.n	8018b52 <_ZN8touchgfx4clzuEm+0xe>
 8018b7c:	2020      	movs	r0, #32
 8018b7e:	4770      	bx	lr

08018b80 <_ZN8touchgfx7muldivuEmmmRm>:
 8018b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b84:	4680      	mov	r8, r0
 8018b86:	460f      	mov	r7, r1
 8018b88:	4615      	mov	r5, r2
 8018b8a:	461e      	mov	r6, r3
 8018b8c:	f7ff ffda 	bl	8018b44 <_ZN8touchgfx4clzuEm>
 8018b90:	b998      	cbnz	r0, 8018bba <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8018b92:	4608      	mov	r0, r1
 8018b94:	f7ff ffd6 	bl	8018b44 <_ZN8touchgfx4clzuEm>
 8018b98:	2800      	cmp	r0, #0
 8018b9a:	dd08      	ble.n	8018bae <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8018b9c:	4633      	mov	r3, r6
 8018b9e:	462a      	mov	r2, r5
 8018ba0:	4641      	mov	r1, r8
 8018ba2:	4638      	mov	r0, r7
 8018ba4:	f7ff ffec 	bl	8018b80 <_ZN8touchgfx7muldivuEmmmRm>
 8018ba8:	b003      	add	sp, #12
 8018baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bae:	f04f 33ff 	mov.w	r3, #4294967295
 8018bb2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018bb6:	6033      	str	r3, [r6, #0]
 8018bb8:	e7f6      	b.n	8018ba8 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8018bba:	fa31 f900 	lsrs.w	r9, r1, r0
 8018bbe:	fb01 f308 	mul.w	r3, r1, r8
 8018bc2:	d105      	bne.n	8018bd0 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8018bc4:	fbb3 f0f5 	udiv	r0, r3, r5
 8018bc8:	fb05 3510 	mls	r5, r5, r0, r3
 8018bcc:	6035      	str	r5, [r6, #0]
 8018bce:	e7eb      	b.n	8018ba8 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8018bd0:	2301      	movs	r3, #1
 8018bd2:	fa08 fb00 	lsl.w	fp, r8, r0
 8018bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8018bda:	3801      	subs	r0, #1
 8018bdc:	462a      	mov	r2, r5
 8018bde:	4633      	mov	r3, r6
 8018be0:	4641      	mov	r1, r8
 8018be2:	4038      	ands	r0, r7
 8018be4:	f7ff ffcc 	bl	8018b80 <_ZN8touchgfx7muldivuEmmmRm>
 8018be8:	fbbb faf5 	udiv	sl, fp, r5
 8018bec:	462a      	mov	r2, r5
 8018bee:	4607      	mov	r7, r0
 8018bf0:	ab01      	add	r3, sp, #4
 8018bf2:	fb05 b11a 	mls	r1, r5, sl, fp
 8018bf6:	4648      	mov	r0, r9
 8018bf8:	f7ff ffc2 	bl	8018b80 <_ZN8touchgfx7muldivuEmmmRm>
 8018bfc:	9b01      	ldr	r3, [sp, #4]
 8018bfe:	6832      	ldr	r2, [r6, #0]
 8018c00:	fb09 f40a 	mul.w	r4, r9, sl
 8018c04:	441a      	add	r2, r3
 8018c06:	fbb2 f3f5 	udiv	r3, r2, r5
 8018c0a:	441c      	add	r4, r3
 8018c0c:	443c      	add	r4, r7
 8018c0e:	4420      	add	r0, r4
 8018c10:	fb05 2513 	mls	r5, r5, r3, r2
 8018c14:	e7da      	b.n	8018bcc <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08018c16 <_ZN8touchgfx6muldivElllRl>:
 8018c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c18:	2800      	cmp	r0, #0
 8018c1a:	bfb6      	itet	lt
 8018c1c:	f04f 34ff 	movlt.w	r4, #4294967295
 8018c20:	2401      	movge	r4, #1
 8018c22:	4240      	neglt	r0, r0
 8018c24:	2900      	cmp	r1, #0
 8018c26:	bfbc      	itt	lt
 8018c28:	4249      	neglt	r1, r1
 8018c2a:	4264      	neglt	r4, r4
 8018c2c:	2a00      	cmp	r2, #0
 8018c2e:	bfb6      	itet	lt
 8018c30:	4265      	neglt	r5, r4
 8018c32:	4625      	movge	r5, r4
 8018c34:	4252      	neglt	r2, r2
 8018c36:	4288      	cmp	r0, r1
 8018c38:	461e      	mov	r6, r3
 8018c3a:	bfc2      	ittt	gt
 8018c3c:	4603      	movgt	r3, r0
 8018c3e:	4608      	movgt	r0, r1
 8018c40:	4619      	movgt	r1, r3
 8018c42:	ab01      	add	r3, sp, #4
 8018c44:	f7ff ff9c 	bl	8018b80 <_ZN8touchgfx7muldivuEmmmRm>
 8018c48:	9b01      	ldr	r3, [sp, #4]
 8018c4a:	4368      	muls	r0, r5
 8018c4c:	435c      	muls	r4, r3
 8018c4e:	6034      	str	r4, [r6, #0]
 8018c50:	b002      	add	sp, #8
 8018c52:	bd70      	pop	{r4, r5, r6, pc}

08018c54 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8018c54:	2000      	movs	r0, #0
 8018c56:	4770      	bx	lr

08018c58 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8018c58:	2001      	movs	r0, #1
 8018c5a:	4770      	bx	lr

08018c5c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8018c5c:	2002      	movs	r0, #2
 8018c5e:	4770      	bx	lr

08018c60 <_ZN8touchgfx12GestureEventD1Ev>:
 8018c60:	4770      	bx	lr

08018c62 <_ZN8touchgfx9DragEventD1Ev>:
 8018c62:	4770      	bx	lr

08018c64 <_ZN8touchgfx10ClickEventD1Ev>:
 8018c64:	4770      	bx	lr

08018c66 <_ZN8touchgfx10ClickEventD0Ev>:
 8018c66:	b510      	push	{r4, lr}
 8018c68:	4604      	mov	r4, r0
 8018c6a:	210c      	movs	r1, #12
 8018c6c:	f00d fba2 	bl	80263b4 <_ZdlPvj>
 8018c70:	4620      	mov	r0, r4
 8018c72:	bd10      	pop	{r4, pc}

08018c74 <_ZN8touchgfx9DragEventD0Ev>:
 8018c74:	b510      	push	{r4, lr}
 8018c76:	4604      	mov	r4, r0
 8018c78:	2110      	movs	r1, #16
 8018c7a:	f00d fb9b 	bl	80263b4 <_ZdlPvj>
 8018c7e:	4620      	mov	r0, r4
 8018c80:	bd10      	pop	{r4, pc}

08018c82 <_ZN8touchgfx12GestureEventD0Ev>:
 8018c82:	b510      	push	{r4, lr}
 8018c84:	4604      	mov	r4, r0
 8018c86:	210c      	movs	r1, #12
 8018c88:	f00d fb94 	bl	80263b4 <_ZdlPvj>
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	bd10      	pop	{r4, pc}

08018c90 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018c90:	b530      	push	{r4, r5, lr}
 8018c92:	460d      	mov	r5, r1
 8018c94:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018c96:	b087      	sub	sp, #28
 8018c98:	4604      	mov	r4, r0
 8018c9a:	b301      	cbz	r1, 8018cde <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018c9c:	a801      	add	r0, sp, #4
 8018c9e:	f7ff feb3 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018ca2:	892a      	ldrh	r2, [r5, #8]
 8018ca4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018ca8:	7928      	ldrb	r0, [r5, #4]
 8018caa:	1ad2      	subs	r2, r2, r3
 8018cac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018cae:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018cb2:	441a      	add	r2, r3
 8018cb4:	896b      	ldrh	r3, [r5, #10]
 8018cb6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018cba:	f88d 0010 	strb.w	r0, [sp, #16]
 8018cbe:	1b5b      	subs	r3, r3, r5
 8018cc0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018cc2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018cc4:	442b      	add	r3, r5
 8018cc6:	4d07      	ldr	r5, [pc, #28]	; (8018ce4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018cc8:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018ccc:	9503      	str	r5, [sp, #12]
 8018cce:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018cd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018cd6:	6803      	ldr	r3, [r0, #0]
 8018cd8:	a903      	add	r1, sp, #12
 8018cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018cdc:	4798      	blx	r3
 8018cde:	b007      	add	sp, #28
 8018ce0:	bd30      	pop	{r4, r5, pc}
 8018ce2:	bf00      	nop
 8018ce4:	08029784 	.word	0x08029784

08018ce8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018cee:	b08a      	sub	sp, #40	; 0x28
 8018cf0:	4604      	mov	r4, r0
 8018cf2:	460d      	mov	r5, r1
 8018cf4:	b113      	cbz	r3, 8018cfc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8018cf6:	790b      	ldrb	r3, [r1, #4]
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d044      	beq.n	8018d86 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018cfc:	f104 0804 	add.w	r8, r4, #4
 8018d00:	4641      	mov	r1, r8
 8018d02:	a803      	add	r0, sp, #12
 8018d04:	f7ff fe80 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d08:	792b      	ldrb	r3, [r5, #4]
 8018d0a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018d0e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018d12:	b983      	cbnz	r3, 8018d36 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018d14:	892a      	ldrh	r2, [r5, #8]
 8018d16:	88e9      	ldrh	r1, [r5, #6]
 8018d18:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8018d1c:	1b92      	subs	r2, r2, r6
 8018d1e:	1bc9      	subs	r1, r1, r7
 8018d20:	9301      	str	r3, [sp, #4]
 8018d22:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8018d26:	9300      	str	r3, [sp, #0]
 8018d28:	b212      	sxth	r2, r2
 8018d2a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018d2e:	b209      	sxth	r1, r1
 8018d30:	4640      	mov	r0, r8
 8018d32:	f7fa fde9 	bl	8013908 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8018d36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018d38:	b329      	cbz	r1, 8018d86 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018d3a:	a805      	add	r0, sp, #20
 8018d3c:	f7ff fe64 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d40:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018d44:	792b      	ldrb	r3, [r5, #4]
 8018d46:	1abf      	subs	r7, r7, r2
 8018d48:	88ea      	ldrh	r2, [r5, #6]
 8018d4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018d4c:	4417      	add	r7, r2
 8018d4e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018d50:	f88d 3020 	strb.w	r3, [sp, #32]
 8018d54:	4417      	add	r7, r2
 8018d56:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018d5a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018d5e:	1ab6      	subs	r6, r6, r2
 8018d60:	892a      	ldrh	r2, [r5, #8]
 8018d62:	a907      	add	r1, sp, #28
 8018d64:	4416      	add	r6, r2
 8018d66:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018d68:	4416      	add	r6, r2
 8018d6a:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018d6e:	2600      	movs	r6, #0
 8018d70:	4a06      	ldr	r2, [pc, #24]	; (8018d8c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8018d72:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018d76:	9207      	str	r2, [sp, #28]
 8018d78:	6803      	ldr	r3, [r0, #0]
 8018d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d7c:	4798      	blx	r3
 8018d7e:	792b      	ldrb	r3, [r5, #4]
 8018d80:	b10b      	cbz	r3, 8018d86 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018d82:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8018d86:	b00a      	add	sp, #40	; 0x28
 8018d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d8c:	0802975c 	.word	0x0802975c

08018d90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d94:	460c      	mov	r4, r1
 8018d96:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018d98:	b088      	sub	sp, #32
 8018d9a:	4605      	mov	r5, r0
 8018d9c:	2900      	cmp	r1, #0
 8018d9e:	d06d      	beq.n	8018e7c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018da0:	4668      	mov	r0, sp
 8018da2:	f7ff fe31 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018da6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8018da8:	88e3      	ldrh	r3, [r4, #6]
 8018daa:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018dae:	440b      	add	r3, r1
 8018db0:	b21b      	sxth	r3, r3
 8018db2:	4543      	cmp	r3, r8
 8018db4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018db8:	db31      	blt.n	8018e1e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018dba:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018dbe:	44c4      	add	ip, r8
 8018dc0:	fa0f fc8c 	sxth.w	ip, ip
 8018dc4:	4563      	cmp	r3, ip
 8018dc6:	da2a      	bge.n	8018e1e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018dc8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8018dca:	8926      	ldrh	r6, [r4, #8]
 8018dcc:	4416      	add	r6, r2
 8018dce:	b236      	sxth	r6, r6
 8018dd0:	42be      	cmp	r6, r7
 8018dd2:	db24      	blt.n	8018e1e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018dd4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018dd8:	4438      	add	r0, r7
 8018dda:	b200      	sxth	r0, r0
 8018ddc:	4286      	cmp	r6, r0
 8018dde:	da1e      	bge.n	8018e1e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018de0:	8963      	ldrh	r3, [r4, #10]
 8018de2:	4419      	add	r1, r3
 8018de4:	b209      	sxth	r1, r1
 8018de6:	4541      	cmp	r1, r8
 8018de8:	db08      	blt.n	8018dfc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018dea:	4561      	cmp	r1, ip
 8018dec:	da06      	bge.n	8018dfc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018dee:	89a3      	ldrh	r3, [r4, #12]
 8018df0:	441a      	add	r2, r3
 8018df2:	b212      	sxth	r2, r2
 8018df4:	42ba      	cmp	r2, r7
 8018df6:	db01      	blt.n	8018dfc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018df8:	4282      	cmp	r2, r0
 8018dfa:	db10      	blt.n	8018e1e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018dfc:	4b21      	ldr	r3, [pc, #132]	; (8018e84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018dfe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018e00:	9304      	str	r3, [sp, #16]
 8018e02:	2302      	movs	r3, #2
 8018e04:	f88d 3014 	strb.w	r3, [sp, #20]
 8018e08:	2300      	movs	r3, #0
 8018e0a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018e0e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018e12:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018e16:	6803      	ldr	r3, [r0, #0]
 8018e18:	a904      	add	r1, sp, #16
 8018e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e1c:	4798      	blx	r3
 8018e1e:	1d29      	adds	r1, r5, #4
 8018e20:	a802      	add	r0, sp, #8
 8018e22:	f7ff fdf1 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e26:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018e2a:	88e0      	ldrh	r0, [r4, #6]
 8018e2c:	eba3 0808 	sub.w	r8, r3, r8
 8018e30:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018e34:	7921      	ldrb	r1, [r4, #4]
 8018e36:	1bdf      	subs	r7, r3, r7
 8018e38:	b2bb      	uxth	r3, r7
 8018e3a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018e3e:	fa1f f888 	uxth.w	r8, r8
 8018e42:	8922      	ldrh	r2, [r4, #8]
 8018e44:	8967      	ldrh	r7, [r4, #10]
 8018e46:	89a4      	ldrh	r4, [r4, #12]
 8018e48:	4440      	add	r0, r8
 8018e4a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018e4c:	4460      	add	r0, ip
 8018e4e:	441a      	add	r2, r3
 8018e50:	44b8      	add	r8, r7
 8018e52:	4423      	add	r3, r4
 8018e54:	4c0c      	ldr	r4, [pc, #48]	; (8018e88 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018e56:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018e5a:	4433      	add	r3, r6
 8018e5c:	4432      	add	r2, r6
 8018e5e:	44e0      	add	r8, ip
 8018e60:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018e62:	f88d 1014 	strb.w	r1, [sp, #20]
 8018e66:	9404      	str	r4, [sp, #16]
 8018e68:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018e6c:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018e70:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018e74:	6803      	ldr	r3, [r0, #0]
 8018e76:	a904      	add	r1, sp, #16
 8018e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e7a:	4798      	blx	r3
 8018e7c:	b008      	add	sp, #32
 8018e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e82:	bf00      	nop
 8018e84:	0802975c 	.word	0x0802975c
 8018e88:	08029770 	.word	0x08029770

08018e8c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e8e:	4604      	mov	r4, r0
 8018e90:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018e94:	3201      	adds	r2, #1
 8018e96:	d112      	bne.n	8018ebe <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018e98:	2500      	movs	r5, #0
 8018e9a:	9500      	str	r5, [sp, #0]
 8018e9c:	466d      	mov	r5, sp
 8018e9e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018ea2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018ea6:	6803      	ldr	r3, [r0, #0]
 8018ea8:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018eac:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018eb0:	4629      	mov	r1, r5
 8018eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018eb4:	4798      	blx	r3
 8018eb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018eba:	e884 0003 	stmia.w	r4, {r0, r1}
 8018ebe:	4620      	mov	r0, r4
 8018ec0:	b003      	add	sp, #12
 8018ec2:	bd30      	pop	{r4, r5, pc}

08018ec4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018ec4:	b513      	push	{r0, r1, r4, lr}
 8018ec6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018eca:	4604      	mov	r4, r0
 8018ecc:	3301      	adds	r3, #1
 8018ece:	d109      	bne.n	8018ee4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018ed0:	4601      	mov	r1, r0
 8018ed2:	4668      	mov	r0, sp
 8018ed4:	f7ff fd98 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018ed8:	f8bd 3000 	ldrh.w	r3, [sp]
 8018edc:	8423      	strh	r3, [r4, #32]
 8018ede:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018ee2:	8463      	strh	r3, [r4, #34]	; 0x22
 8018ee4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018ee8:	b002      	add	sp, #8
 8018eea:	bd10      	pop	{r4, pc}

08018eec <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018eec:	b513      	push	{r0, r1, r4, lr}
 8018eee:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018ef2:	4604      	mov	r4, r0
 8018ef4:	3301      	adds	r3, #1
 8018ef6:	d109      	bne.n	8018f0c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018ef8:	4601      	mov	r1, r0
 8018efa:	4668      	mov	r0, sp
 8018efc:	f7ff fd84 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f00:	f8bd 3000 	ldrh.w	r3, [sp]
 8018f04:	8423      	strh	r3, [r4, #32]
 8018f06:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018f0a:	8463      	strh	r3, [r4, #34]	; 0x22
 8018f0c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018f10:	b002      	add	sp, #8
 8018f12:	bd10      	pop	{r4, pc}

08018f14 <_ZN8touchgfx6ScreenC1Ev>:
 8018f14:	b570      	push	{r4, r5, r6, lr}
 8018f16:	4605      	mov	r5, r0
 8018f18:	4b16      	ldr	r3, [pc, #88]	; (8018f74 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018f1a:	2101      	movs	r1, #1
 8018f1c:	f845 3b04 	str.w	r3, [r5], #4
 8018f20:	2300      	movs	r3, #0
 8018f22:	4604      	mov	r4, r0
 8018f24:	8103      	strh	r3, [r0, #8]
 8018f26:	8143      	strh	r3, [r0, #10]
 8018f28:	8183      	strh	r3, [r0, #12]
 8018f2a:	81c3      	strh	r3, [r0, #14]
 8018f2c:	8203      	strh	r3, [r0, #16]
 8018f2e:	8243      	strh	r3, [r0, #18]
 8018f30:	8283      	strh	r3, [r0, #20]
 8018f32:	82c3      	strh	r3, [r0, #22]
 8018f34:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018f38:	6203      	str	r3, [r0, #32]
 8018f3a:	8483      	strh	r3, [r0, #36]	; 0x24
 8018f3c:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018f3e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8018f42:	4a0d      	ldr	r2, [pc, #52]	; (8018f78 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018f44:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8018f48:	6343      	str	r3, [r0, #52]	; 0x34
 8018f4a:	4b0c      	ldr	r3, [pc, #48]	; (8018f7c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018f4c:	6042      	str	r2, [r0, #4]
 8018f4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018f52:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8018f54:	4a0a      	ldr	r2, [pc, #40]	; (8018f80 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018f56:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8018f5a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8018f5e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018f62:	4628      	mov	r0, r5
 8018f64:	4798      	blx	r3
 8018f66:	6863      	ldr	r3, [r4, #4]
 8018f68:	4628      	mov	r0, r5
 8018f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f6c:	4631      	mov	r1, r6
 8018f6e:	4798      	blx	r3
 8018f70:	4620      	mov	r0, r4
 8018f72:	bd70      	pop	{r4, r5, r6, pc}
 8018f74:	08029798 	.word	0x08029798
 8018f78:	08029038 	.word	0x08029038
 8018f7c:	2004f6be 	.word	0x2004f6be
 8018f80:	2004f6bc 	.word	0x2004f6bc

08018f84 <_ZN8touchgfx6Screen4drawEv>:
 8018f84:	b507      	push	{r0, r1, r2, lr}
 8018f86:	2100      	movs	r1, #0
 8018f88:	4b08      	ldr	r3, [pc, #32]	; (8018fac <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018f8a:	9100      	str	r1, [sp, #0]
 8018f8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f90:	4b07      	ldr	r3, [pc, #28]	; (8018fb0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018f92:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f9a:	4669      	mov	r1, sp
 8018f9c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018fa0:	6803      	ldr	r3, [r0, #0]
 8018fa2:	689b      	ldr	r3, [r3, #8]
 8018fa4:	4798      	blx	r3
 8018fa6:	b003      	add	sp, #12
 8018fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8018fac:	2004f6bc 	.word	0x2004f6bc
 8018fb0:	2004f6be 	.word	0x2004f6be

08018fb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018fbc:	b089      	sub	sp, #36	; 0x24
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	4680      	mov	r8, r0
 8018fc2:	460c      	mov	r4, r1
 8018fc4:	4615      	mov	r5, r2
 8018fc6:	dd0e      	ble.n	8018fe6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018fc8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	dd0a      	ble.n	8018fe6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018fd0:	4628      	mov	r0, r5
 8018fd2:	f7ff ff5b 	bl	8018e8c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018fd6:	4621      	mov	r1, r4
 8018fd8:	f7fe fbde 	bl	8017798 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018fdc:	69eb      	ldr	r3, [r5, #28]
 8018fde:	b928      	cbnz	r0, 8018fec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018fe0:	461d      	mov	r5, r3
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d1f4      	bne.n	8018fd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018fe6:	b009      	add	sp, #36	; 0x24
 8018fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fec:	ae04      	add	r6, sp, #16
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	f000 80b5 	beq.w	801915e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018ff4:	682b      	ldr	r3, [r5, #0]
 8018ff6:	4629      	mov	r1, r5
 8018ff8:	68db      	ldr	r3, [r3, #12]
 8018ffa:	a802      	add	r0, sp, #8
 8018ffc:	4798      	blx	r3
 8018ffe:	4628      	mov	r0, r5
 8019000:	f7ff ff60 	bl	8018ec4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019004:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019008:	4407      	add	r7, r0
 801900a:	4628      	mov	r0, r5
 801900c:	f7ff ff6e 	bl	8018eec <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019010:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019014:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019018:	4418      	add	r0, r3
 801901a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801901e:	4621      	mov	r1, r4
 8019020:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019024:	b23f      	sxth	r7, r7
 8019026:	4630      	mov	r0, r6
 8019028:	f8ad 2014 	strh.w	r2, [sp, #20]
 801902c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019030:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019034:	f7fa fd48 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 8019038:	4628      	mov	r0, r5
 801903a:	f7ff ff27 	bl	8018e8c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801903e:	4602      	mov	r2, r0
 8019040:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019044:	ab06      	add	r3, sp, #24
 8019046:	e883 0003 	stmia.w	r3, {r0, r1}
 801904a:	4611      	mov	r1, r2
 801904c:	4618      	mov	r0, r3
 801904e:	f7fa fd3b 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 8019052:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019056:	f9b4 1000 	ldrsh.w	r1, [r4]
 801905a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801905e:	4299      	cmp	r1, r3
 8019060:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019064:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019068:	d10b      	bne.n	8019082 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801906a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801906e:	4552      	cmp	r2, sl
 8019070:	d107      	bne.n	8019082 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019072:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019076:	455a      	cmp	r2, fp
 8019078:	d103      	bne.n	8019082 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801907a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801907e:	454a      	cmp	r2, r9
 8019080:	d06d      	beq.n	801915e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019082:	f1bb 0f00 	cmp.w	fp, #0
 8019086:	dd65      	ble.n	8019154 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019088:	f1b9 0f00 	cmp.w	r9, #0
 801908c:	dd62      	ble.n	8019154 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801908e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019092:	fa1f f08a 	uxth.w	r0, sl
 8019096:	4552      	cmp	r2, sl
 8019098:	9000      	str	r0, [sp, #0]
 801909a:	da12      	bge.n	80190c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801909c:	9301      	str	r3, [sp, #4]
 801909e:	9b00      	ldr	r3, [sp, #0]
 80190a0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80190a4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80190a8:	1a9a      	subs	r2, r3, r2
 80190aa:	f8ad 1010 	strh.w	r1, [sp, #16]
 80190ae:	f8ad 0014 	strh.w	r0, [sp, #20]
 80190b2:	f8ad 2016 	strh.w	r2, [sp, #22]
 80190b6:	69ea      	ldr	r2, [r5, #28]
 80190b8:	4631      	mov	r1, r6
 80190ba:	4640      	mov	r0, r8
 80190bc:	f7ff ff7a 	bl	8018fb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80190c0:	9b01      	ldr	r3, [sp, #4]
 80190c2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80190c6:	b29f      	uxth	r7, r3
 80190c8:	429a      	cmp	r2, r3
 80190ca:	da0d      	bge.n	80190e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80190cc:	f8ad 2010 	strh.w	r2, [sp, #16]
 80190d0:	1aba      	subs	r2, r7, r2
 80190d2:	f8ad a012 	strh.w	sl, [sp, #18]
 80190d6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80190da:	f8ad 9016 	strh.w	r9, [sp, #22]
 80190de:	69ea      	ldr	r2, [r5, #28]
 80190e0:	4631      	mov	r1, r6
 80190e2:	4640      	mov	r0, r8
 80190e4:	f7ff ff66 	bl	8018fb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80190e8:	8822      	ldrh	r2, [r4, #0]
 80190ea:	88a3      	ldrh	r3, [r4, #4]
 80190ec:	445f      	add	r7, fp
 80190ee:	4413      	add	r3, r2
 80190f0:	b29b      	uxth	r3, r3
 80190f2:	b2bf      	uxth	r7, r7
 80190f4:	b23a      	sxth	r2, r7
 80190f6:	b219      	sxth	r1, r3
 80190f8:	4291      	cmp	r1, r2
 80190fa:	dd0d      	ble.n	8019118 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80190fc:	1bdb      	subs	r3, r3, r7
 80190fe:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019102:	f8ad a012 	strh.w	sl, [sp, #18]
 8019106:	f8ad 3014 	strh.w	r3, [sp, #20]
 801910a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801910e:	69ea      	ldr	r2, [r5, #28]
 8019110:	4631      	mov	r1, r6
 8019112:	4640      	mov	r0, r8
 8019114:	f7ff ff4e 	bl	8018fb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019118:	88e2      	ldrh	r2, [r4, #6]
 801911a:	8863      	ldrh	r3, [r4, #2]
 801911c:	4413      	add	r3, r2
 801911e:	9a00      	ldr	r2, [sp, #0]
 8019120:	b29b      	uxth	r3, r3
 8019122:	444a      	add	r2, r9
 8019124:	fa1f f982 	uxth.w	r9, r2
 8019128:	fa0f f289 	sxth.w	r2, r9
 801912c:	b219      	sxth	r1, r3
 801912e:	428a      	cmp	r2, r1
 8019130:	da15      	bge.n	801915e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019132:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019136:	f9b4 0000 	ldrsh.w	r0, [r4]
 801913a:	eba3 0309 	sub.w	r3, r3, r9
 801913e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019142:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019146:	f8ad 2012 	strh.w	r2, [sp, #18]
 801914a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801914e:	69ea      	ldr	r2, [r5, #28]
 8019150:	4631      	mov	r1, r6
 8019152:	e001      	b.n	8019158 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019154:	4621      	mov	r1, r4
 8019156:	69ea      	ldr	r2, [r5, #28]
 8019158:	4640      	mov	r0, r8
 801915a:	f7ff ff2b 	bl	8018fb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801915e:	4628      	mov	r0, r5
 8019160:	f7ff fe94 	bl	8018e8c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019164:	4633      	mov	r3, r6
 8019166:	4602      	mov	r2, r0
 8019168:	6861      	ldr	r1, [r4, #4]
 801916a:	6820      	ldr	r0, [r4, #0]
 801916c:	c303      	stmia	r3!, {r0, r1}
 801916e:	4611      	mov	r1, r2
 8019170:	4630      	mov	r0, r6
 8019172:	f7fa fca9 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 8019176:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801917a:	2b00      	cmp	r3, #0
 801917c:	f77f af33 	ble.w	8018fe6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019180:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019184:	2b00      	cmp	r3, #0
 8019186:	f77f af2e 	ble.w	8018fe6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801918a:	4628      	mov	r0, r5
 801918c:	f7ff fe9a 	bl	8018ec4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019190:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019194:	1a18      	subs	r0, r3, r0
 8019196:	f8ad 0010 	strh.w	r0, [sp, #16]
 801919a:	4628      	mov	r0, r5
 801919c:	f7ff fea6 	bl	8018eec <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80191a0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80191a4:	4631      	mov	r1, r6
 80191a6:	1a18      	subs	r0, r3, r0
 80191a8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80191ac:	682b      	ldr	r3, [r5, #0]
 80191ae:	4628      	mov	r0, r5
 80191b0:	689b      	ldr	r3, [r3, #8]
 80191b2:	4798      	blx	r3
 80191b4:	e717      	b.n	8018fe6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080191b6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80191b6:	b570      	push	{r4, r5, r6, lr}
 80191b8:	2300      	movs	r3, #0
 80191ba:	460c      	mov	r4, r1
 80191bc:	b086      	sub	sp, #24
 80191be:	1d06      	adds	r6, r0, #4
 80191c0:	4631      	mov	r1, r6
 80191c2:	4605      	mov	r5, r0
 80191c4:	a802      	add	r0, sp, #8
 80191c6:	9301      	str	r3, [sp, #4]
 80191c8:	f7ff fc1e 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80191cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80191d0:	8822      	ldrh	r2, [r4, #0]
 80191d2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80191d6:	1ad2      	subs	r2, r2, r3
 80191d8:	8863      	ldrh	r3, [r4, #2]
 80191da:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80191de:	1a5b      	subs	r3, r3, r1
 80191e0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80191e4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80191e8:	f8ad 0014 	strh.w	r0, [sp, #20]
 80191ec:	f8ad 1016 	strh.w	r1, [sp, #22]
 80191f0:	aa01      	add	r2, sp, #4
 80191f2:	a904      	add	r1, sp, #16
 80191f4:	4630      	mov	r0, r6
 80191f6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80191fa:	f7fa fd3d 	bl	8013c78 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80191fe:	9a01      	ldr	r2, [sp, #4]
 8019200:	b11a      	cbz	r2, 801920a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8019202:	4621      	mov	r1, r4
 8019204:	4628      	mov	r0, r5
 8019206:	f7ff fed5 	bl	8018fb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801920a:	b006      	add	sp, #24
 801920c:	bd70      	pop	{r4, r5, r6, pc}

0801920e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801920e:	b530      	push	{r4, r5, lr}
 8019210:	4602      	mov	r2, r0
 8019212:	b085      	sub	sp, #20
 8019214:	460d      	mov	r5, r1
 8019216:	466b      	mov	r3, sp
 8019218:	4604      	mov	r4, r0
 801921a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801921e:	6851      	ldr	r1, [r2, #4]
 8019220:	c303      	stmia	r3!, {r0, r1}
 8019222:	4629      	mov	r1, r5
 8019224:	4668      	mov	r0, sp
 8019226:	f7fa fc4f 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 801922a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801922e:	b12b      	cbz	r3, 801923c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8019230:	4669      	mov	r1, sp
 8019232:	4620      	mov	r0, r4
 8019234:	f7ff ffbf 	bl	80191b6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019238:	b005      	add	sp, #20
 801923a:	bd30      	pop	{r4, r5, pc}
 801923c:	3404      	adds	r4, #4
 801923e:	4621      	mov	r1, r4
 8019240:	a802      	add	r0, sp, #8
 8019242:	f7ff fbe1 	bl	8018a08 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019246:	f8bd 3000 	ldrh.w	r3, [sp]
 801924a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801924e:	4669      	mov	r1, sp
 8019250:	1a9b      	subs	r3, r3, r2
 8019252:	f8ad 3000 	strh.w	r3, [sp]
 8019256:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801925a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801925e:	4620      	mov	r0, r4
 8019260:	1a9b      	subs	r3, r3, r2
 8019262:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019266:	f7fa fcce 	bl	8013c06 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801926a:	e7e5      	b.n	8019238 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801926c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801926c:	460b      	mov	r3, r1
 801926e:	680a      	ldr	r2, [r1, #0]
 8019270:	1d01      	adds	r1, r0, #4
 8019272:	6992      	ldr	r2, [r2, #24]
 8019274:	4618      	mov	r0, r3
 8019276:	4710      	bx	r2

08019278 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8019278:	4298      	cmp	r0, r3
 801927a:	d200      	bcs.n	801927e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801927c:	b913      	cbnz	r3, 8019284 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801927e:	440a      	add	r2, r1
 8019280:	b210      	sxth	r0, r2
 8019282:	4770      	bx	lr
 8019284:	ee07 0a90 	vmov	s15, r0
 8019288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801928c:	ee07 3a90 	vmov	s15, r3
 8019290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801929c:	ee07 2a90 	vmov	s15, r2
 80192a0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80192a4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80192a8:	ee67 5a07 	vmul.f32	s11, s14, s14
 80192ac:	ee07 1a90 	vmov	s15, r1
 80192b0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80192b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80192bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80192c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80192c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192c8:	bfcc      	ite	gt
 80192ca:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80192ce:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80192d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80192d6:	ee17 3a90 	vmov	r3, s15
 80192da:	b218      	sxth	r0, r3
 80192dc:	4770      	bx	lr

080192de <_ZN8touchgfx12TextProviderC1Ev>:
 80192de:	b538      	push	{r3, r4, r5, lr}
 80192e0:	2500      	movs	r5, #0
 80192e2:	2302      	movs	r3, #2
 80192e4:	4604      	mov	r4, r0
 80192e6:	e9c0 5500 	strd	r5, r5, [r0]
 80192ea:	7403      	strb	r3, [r0, #16]
 80192ec:	6145      	str	r5, [r0, #20]
 80192ee:	7605      	strb	r5, [r0, #24]
 80192f0:	83c5      	strh	r5, [r0, #30]
 80192f2:	8405      	strh	r5, [r0, #32]
 80192f4:	86c5      	strh	r5, [r0, #54]	; 0x36
 80192f6:	8705      	strh	r5, [r0, #56]	; 0x38
 80192f8:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80192fa:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80192fe:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8019302:	220e      	movs	r2, #14
 8019304:	4629      	mov	r1, r5
 8019306:	304c      	adds	r0, #76	; 0x4c
 8019308:	f00d f90b 	bl	8026522 <memset>
 801930c:	2301      	movs	r3, #1
 801930e:	4620      	mov	r0, r4
 8019310:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8019314:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019318:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801931c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8019320:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8019324:	f7f7 ffba 	bl	801129c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019328:	4620      	mov	r0, r4
 801932a:	bd38      	pop	{r3, r4, r5, pc}

0801932c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801932c:	b530      	push	{r4, r5, lr}
 801932e:	2500      	movs	r5, #0
 8019330:	2401      	movs	r4, #1
 8019332:	6843      	ldr	r3, [r0, #4]
 8019334:	b913      	cbnz	r3, 801933c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019336:	6803      	ldr	r3, [r0, #0]
 8019338:	b313      	cbz	r3, 8019380 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801933a:	6043      	str	r3, [r0, #4]
 801933c:	7e03      	ldrb	r3, [r0, #24]
 801933e:	b143      	cbz	r3, 8019352 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019340:	6943      	ldr	r3, [r0, #20]
 8019342:	b12b      	cbz	r3, 8019350 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019344:	881a      	ldrh	r2, [r3, #0]
 8019346:	b11a      	cbz	r2, 8019350 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019348:	1c9a      	adds	r2, r3, #2
 801934a:	6142      	str	r2, [r0, #20]
 801934c:	8818      	ldrh	r0, [r3, #0]
 801934e:	bd30      	pop	{r4, r5, pc}
 8019350:	7605      	strb	r5, [r0, #24]
 8019352:	6843      	ldr	r3, [r0, #4]
 8019354:	8819      	ldrh	r1, [r3, #0]
 8019356:	b199      	cbz	r1, 8019380 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019358:	1c9a      	adds	r2, r3, #2
 801935a:	2902      	cmp	r1, #2
 801935c:	6042      	str	r2, [r0, #4]
 801935e:	d1f5      	bne.n	801934c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019360:	7c03      	ldrb	r3, [r0, #16]
 8019362:	2b01      	cmp	r3, #1
 8019364:	d8e5      	bhi.n	8019332 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019366:	1c5a      	adds	r2, r3, #1
 8019368:	7402      	strb	r2, [r0, #16]
 801936a:	3302      	adds	r3, #2
 801936c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019370:	6143      	str	r3, [r0, #20]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d0dd      	beq.n	8019332 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019376:	881b      	ldrh	r3, [r3, #0]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d0da      	beq.n	8019332 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801937c:	7604      	strb	r4, [r0, #24]
 801937e:	e7d8      	b.n	8019332 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019380:	2000      	movs	r0, #0
 8019382:	e7e4      	b.n	801934e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019384 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8019384:	6001      	str	r1, [r0, #0]
 8019386:	2100      	movs	r1, #0
 8019388:	b430      	push	{r4, r5}
 801938a:	6041      	str	r1, [r0, #4]
 801938c:	6815      	ldr	r5, [r2, #0]
 801938e:	6085      	str	r5, [r0, #8]
 8019390:	6852      	ldr	r2, [r2, #4]
 8019392:	6443      	str	r3, [r0, #68]	; 0x44
 8019394:	9b02      	ldr	r3, [sp, #8]
 8019396:	60c2      	str	r2, [r0, #12]
 8019398:	7401      	strb	r1, [r0, #16]
 801939a:	6141      	str	r1, [r0, #20]
 801939c:	7601      	strb	r1, [r0, #24]
 801939e:	8701      	strh	r1, [r0, #56]	; 0x38
 80193a0:	8401      	strh	r1, [r0, #32]
 80193a2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80193a6:	6483      	str	r3, [r0, #72]	; 0x48
 80193a8:	bc30      	pop	{r4, r5}
 80193aa:	f7f7 bf77 	b.w	801129c <_ZN8touchgfx12TextProvider18initializeInternalEv>

080193ae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80193ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193b0:	4605      	mov	r5, r0
 80193b2:	4608      	mov	r0, r1
 80193b4:	b1e9      	cbz	r1, 80193f2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80193b6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80193ba:	460b      	mov	r3, r1
 80193bc:	4622      	mov	r2, r4
 80193be:	f101 0708 	add.w	r7, r1, #8
 80193c2:	4626      	mov	r6, r4
 80193c4:	6818      	ldr	r0, [r3, #0]
 80193c6:	6859      	ldr	r1, [r3, #4]
 80193c8:	3308      	adds	r3, #8
 80193ca:	c603      	stmia	r6!, {r0, r1}
 80193cc:	42bb      	cmp	r3, r7
 80193ce:	4634      	mov	r4, r6
 80193d0:	d1f7      	bne.n	80193c2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80193d2:	6818      	ldr	r0, [r3, #0]
 80193d4:	6030      	str	r0, [r6, #0]
 80193d6:	4610      	mov	r0, r2
 80193d8:	889b      	ldrh	r3, [r3, #4]
 80193da:	80b3      	strh	r3, [r6, #4]
 80193dc:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80193e0:	015b      	lsls	r3, r3, #5
 80193e2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80193e6:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80193ea:	430b      	orrs	r3, r1
 80193ec:	425b      	negs	r3, r3
 80193ee:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80193f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080193f4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80193f4:	b538      	push	{r3, r4, r5, lr}
 80193f6:	460c      	mov	r4, r1
 80193f8:	6811      	ldr	r1, [r2, #0]
 80193fa:	4610      	mov	r0, r2
 80193fc:	68cd      	ldr	r5, [r1, #12]
 80193fe:	4619      	mov	r1, r3
 8019400:	47a8      	blx	r5
 8019402:	2800      	cmp	r0, #0
 8019404:	bf08      	it	eq
 8019406:	4620      	moveq	r0, r4
 8019408:	bd38      	pop	{r3, r4, r5, pc}
	...

0801940c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801940e:	4604      	mov	r4, r0
 8019410:	4615      	mov	r5, r2
 8019412:	4608      	mov	r0, r1
 8019414:	b93a      	cbnz	r2, 8019426 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019416:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801941a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801941e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8019422:	4628      	mov	r0, r5
 8019424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019426:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801942a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801942e:	8893      	ldrh	r3, [r2, #4]
 8019430:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8019434:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019438:	79ee      	ldrb	r6, [r5, #7]
 801943a:	4316      	orrs	r6, r2
 801943c:	19da      	adds	r2, r3, r7
 801943e:	b291      	uxth	r1, r2
 8019440:	291d      	cmp	r1, #29
 8019442:	b2b7      	uxth	r7, r6
 8019444:	d879      	bhi.n	801953a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8019446:	2201      	movs	r2, #1
 8019448:	408a      	lsls	r2, r1
 801944a:	4974      	ldr	r1, [pc, #464]	; (801961c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 801944c:	10f6      	asrs	r6, r6, #3
 801944e:	420a      	tst	r2, r1
 8019450:	d12d      	bne.n	80194ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 8019452:	f412 7f60 	tst.w	r2, #896	; 0x380
 8019456:	d070      	beq.n	801953a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8019458:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801945c:	462b      	mov	r3, r5
 801945e:	f105 0e08 	add.w	lr, r5, #8
 8019462:	4615      	mov	r5, r2
 8019464:	4694      	mov	ip, r2
 8019466:	6818      	ldr	r0, [r3, #0]
 8019468:	6859      	ldr	r1, [r3, #4]
 801946a:	3308      	adds	r3, #8
 801946c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019470:	4573      	cmp	r3, lr
 8019472:	4662      	mov	r2, ip
 8019474:	d1f6      	bne.n	8019464 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8019476:	6818      	ldr	r0, [r3, #0]
 8019478:	f8cc 0000 	str.w	r0, [ip]
 801947c:	889b      	ldrh	r3, [r3, #4]
 801947e:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019482:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8019486:	b2b3      	uxth	r3, r6
 8019488:	1aca      	subs	r2, r1, r3
 801948a:	b292      	uxth	r2, r2
 801948c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8019490:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8019494:	10d2      	asrs	r2, r2, #3
 8019496:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801949a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801949e:	4302      	orrs	r2, r0
 80194a0:	1bcf      	subs	r7, r1, r7
 80194a2:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80194a6:	1afb      	subs	r3, r7, r3
 80194a8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80194ac:	e7b9      	b.n	8019422 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80194ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80194b0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80194b4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80194b6:	f640 6333 	movw	r3, #3635	; 0xe33
 80194ba:	4299      	cmp	r1, r3
 80194bc:	d110      	bne.n	80194e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 80194be:	6803      	ldr	r3, [r0, #0]
 80194c0:	68db      	ldr	r3, [r3, #12]
 80194c2:	4798      	blx	r3
 80194c4:	7b41      	ldrb	r1, [r0, #13]
 80194c6:	00cb      	lsls	r3, r1, #3
 80194c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80194cc:	7a03      	ldrb	r3, [r0, #8]
 80194ce:	0648      	lsls	r0, r1, #25
 80194d0:	ea43 0302 	orr.w	r3, r3, r2
 80194d4:	bf44      	itt	mi
 80194d6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80194da:	b21b      	sxthmi	r3, r3
 80194dc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80194e0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80194e4:	462a      	mov	r2, r5
 80194e6:	443b      	add	r3, r7
 80194e8:	4433      	add	r3, r6
 80194ea:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80194ee:	f105 0c08 	add.w	ip, r5, #8
 80194f2:	4635      	mov	r5, r6
 80194f4:	b29b      	uxth	r3, r3
 80194f6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80194fa:	4637      	mov	r7, r6
 80194fc:	6810      	ldr	r0, [r2, #0]
 80194fe:	6851      	ldr	r1, [r2, #4]
 8019500:	3208      	adds	r2, #8
 8019502:	c703      	stmia	r7!, {r0, r1}
 8019504:	4562      	cmp	r2, ip
 8019506:	463e      	mov	r6, r7
 8019508:	d1f7      	bne.n	80194fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 801950a:	6810      	ldr	r0, [r2, #0]
 801950c:	6038      	str	r0, [r7, #0]
 801950e:	8892      	ldrh	r2, [r2, #4]
 8019510:	80ba      	strh	r2, [r7, #4]
 8019512:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019516:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801951a:	10db      	asrs	r3, r3, #3
 801951c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019524:	4313      	orrs	r3, r2
 8019526:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801952a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801952e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8019532:	1a9b      	subs	r3, r3, r2
 8019534:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019538:	e773      	b.n	8019422 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801953a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801953e:	f023 0204 	bic.w	r2, r3, #4
 8019542:	428a      	cmp	r2, r1
 8019544:	d003      	beq.n	801954e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8019546:	f640 621d 	movw	r2, #3613	; 0xe1d
 801954a:	4293      	cmp	r3, r2
 801954c:	d120      	bne.n	8019590 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 801954e:	3b01      	subs	r3, #1
 8019550:	4602      	mov	r2, r0
 8019552:	b29b      	uxth	r3, r3
 8019554:	4629      	mov	r1, r5
 8019556:	4620      	mov	r0, r4
 8019558:	f7ff ff4c 	bl	80193f4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801955c:	7b41      	ldrb	r1, [r0, #13]
 801955e:	00cb      	lsls	r3, r1, #3
 8019560:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019564:	7a03      	ldrb	r3, [r0, #8]
 8019566:	0649      	lsls	r1, r1, #25
 8019568:	ea43 0302 	orr.w	r3, r3, r2
 801956c:	bf44      	itt	mi
 801956e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019572:	b21b      	sxthmi	r3, r3
 8019574:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019578:	7b6b      	ldrb	r3, [r5, #13]
 801957a:	7aaa      	ldrb	r2, [r5, #10]
 801957c:	005b      	lsls	r3, r3, #1
 801957e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019582:	4313      	orrs	r3, r2
 8019584:	115a      	asrs	r2, r3, #5
 8019586:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801958a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801958e:	e036      	b.n	80195fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 8019590:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019594:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8019598:	7a2a      	ldrb	r2, [r5, #8]
 801959a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801959e:	ea42 0201 	orr.w	r2, r2, r1
 80195a2:	f640 6109 	movw	r1, #3593	; 0xe09
 80195a6:	bf1c      	itt	ne
 80195a8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80195ac:	b212      	sxthne	r2, r2
 80195ae:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80195b2:	f023 0210 	bic.w	r2, r3, #16
 80195b6:	428a      	cmp	r2, r1
 80195b8:	d003      	beq.n	80195c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 80195ba:	f640 6213 	movw	r2, #3603	; 0xe13
 80195be:	4293      	cmp	r3, r2
 80195c0:	d12a      	bne.n	8019618 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 80195c2:	7b6e      	ldrb	r6, [r5, #13]
 80195c4:	4629      	mov	r1, r5
 80195c6:	0076      	lsls	r6, r6, #1
 80195c8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80195cc:	7aae      	ldrb	r6, [r5, #10]
 80195ce:	4316      	orrs	r6, r2
 80195d0:	f640 6213 	movw	r2, #3603	; 0xe13
 80195d4:	4293      	cmp	r3, r2
 80195d6:	bf18      	it	ne
 80195d8:	f103 33ff 	addne.w	r3, r3, #4294967295
 80195dc:	4602      	mov	r2, r0
 80195de:	bf14      	ite	ne
 80195e0:	b29b      	uxthne	r3, r3
 80195e2:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80195e6:	4620      	mov	r0, r4
 80195e8:	f7ff ff04 	bl	80193f4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80195ec:	7b43      	ldrb	r3, [r0, #13]
 80195ee:	7a82      	ldrb	r2, [r0, #10]
 80195f0:	005b      	lsls	r3, r3, #1
 80195f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80195f6:	4313      	orrs	r3, r2
 80195f8:	1af6      	subs	r6, r6, r3
 80195fa:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80195fe:	7b69      	ldrb	r1, [r5, #13]
 8019600:	00cb      	lsls	r3, r1, #3
 8019602:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019606:	7a2b      	ldrb	r3, [r5, #8]
 8019608:	4313      	orrs	r3, r2
 801960a:	064a      	lsls	r2, r1, #25
 801960c:	bf44      	itt	mi
 801960e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019612:	b21b      	sxthmi	r3, r3
 8019614:	1bdb      	subs	r3, r3, r7
 8019616:	e747      	b.n	80194a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 8019618:	2300      	movs	r3, #0
 801961a:	e7b6      	b.n	801958a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 801961c:	3fc00079 	.word	0x3fc00079

08019620 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019624:	4604      	mov	r4, r0
 8019626:	b942      	cbnz	r2, 801963a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801962c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8019630:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8019634:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019638:	e047      	b.n	80196ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801963a:	7b51      	ldrb	r1, [r2, #13]
 801963c:	8893      	ldrh	r3, [r2, #4]
 801963e:	010d      	lsls	r5, r1, #4
 8019640:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8019644:	79d5      	ldrb	r5, [r2, #7]
 8019646:	4305      	orrs	r5, r0
 8019648:	2d04      	cmp	r5, #4
 801964a:	bfcc      	ite	gt
 801964c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8019650:	f04f 0e01 	movle.w	lr, #1
 8019654:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019658:	f200 80ab 	bhi.w	80197b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801965c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8019660:	4283      	cmp	r3, r0
 8019662:	d216      	bcs.n	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019664:	f240 605b 	movw	r0, #1627	; 0x65b
 8019668:	4283      	cmp	r3, r0
 801966a:	d859      	bhi.n	8019720 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801966c:	f240 6057 	movw	r0, #1623	; 0x657
 8019670:	4283      	cmp	r3, r0
 8019672:	d20e      	bcs.n	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019674:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019678:	d24a      	bcs.n	8019710 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801967a:	f240 604e 	movw	r0, #1614	; 0x64e
 801967e:	4283      	cmp	r3, r0
 8019680:	d207      	bcs.n	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019682:	f240 601a 	movw	r0, #1562	; 0x61a
 8019686:	4283      	cmp	r3, r0
 8019688:	d02a      	beq.n	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801968a:	d821      	bhi.n	80196d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801968c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019690:	d35b      	bcc.n	801974a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019692:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8019696:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801969a:	f040 80d0 	bne.w	801983e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801969e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80196a2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80196a6:	f040 80ca 	bne.w	801983e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80196aa:	00cb      	lsls	r3, r1, #3
 80196ac:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80196b0:	7a13      	ldrb	r3, [r2, #8]
 80196b2:	0649      	lsls	r1, r1, #25
 80196b4:	ea43 0300 	orr.w	r3, r3, r0
 80196b8:	bf44      	itt	mi
 80196ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80196be:	b21b      	sxthmi	r3, r3
 80196c0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80196c4:	1b5d      	subs	r5, r3, r5
 80196c6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80196ca:	4610      	mov	r0, r2
 80196cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196d0:	f240 604b 	movw	r0, #1611	; 0x64b
 80196d4:	4283      	cmp	r3, r0
 80196d6:	d338      	bcc.n	801974a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80196d8:	f240 604c 	movw	r0, #1612	; 0x64c
 80196dc:	4283      	cmp	r3, r0
 80196de:	d9d8      	bls.n	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80196e0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80196e4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80196e8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80196ec:	f040 80f2 	bne.w	80198d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 80196f0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80196f4:	f040 80ee 	bne.w	80198d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 80196f8:	00cb      	lsls	r3, r1, #3
 80196fa:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80196fe:	7a13      	ldrb	r3, [r2, #8]
 8019700:	064e      	lsls	r6, r1, #25
 8019702:	ea43 0300 	orr.w	r3, r3, r0
 8019706:	bf44      	itt	mi
 8019708:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801970c:	b21b      	sxthmi	r3, r3
 801970e:	e7d9      	b.n	80196c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8019710:	f240 6054 	movw	r0, #1620	; 0x654
 8019714:	4283      	cmp	r3, r0
 8019716:	d8e3      	bhi.n	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019718:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801971c:	d9e0      	bls.n	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801971e:	e7b8      	b.n	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019720:	f240 6074 	movw	r0, #1652	; 0x674
 8019724:	4283      	cmp	r3, r0
 8019726:	d0b4      	beq.n	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019728:	d82d      	bhi.n	8019786 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801972a:	f240 605e 	movw	r0, #1630	; 0x65e
 801972e:	4283      	cmp	r3, r0
 8019730:	d804      	bhi.n	801973c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8019732:	f240 605d 	movw	r0, #1629	; 0x65d
 8019736:	4283      	cmp	r3, r0
 8019738:	d3d2      	bcc.n	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801973a:	e7aa      	b.n	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801973c:	f240 605f 	movw	r0, #1631	; 0x65f
 8019740:	4283      	cmp	r3, r0
 8019742:	d0cd      	beq.n	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019744:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8019748:	d0a3      	beq.n	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801974a:	00cb      	lsls	r3, r1, #3
 801974c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019750:	7a13      	ldrb	r3, [r2, #8]
 8019752:	0649      	lsls	r1, r1, #25
 8019754:	ea43 0300 	orr.w	r3, r3, r0
 8019758:	bf44      	itt	mi
 801975a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801975e:	b21b      	sxthmi	r3, r3
 8019760:	1b5d      	subs	r5, r3, r5
 8019762:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019766:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801976a:	7b53      	ldrb	r3, [r2, #13]
 801976c:	015b      	lsls	r3, r3, #5
 801976e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019772:	7993      	ldrb	r3, [r2, #6]
 8019774:	430b      	orrs	r3, r1
 8019776:	2105      	movs	r1, #5
 8019778:	005b      	lsls	r3, r3, #1
 801977a:	fb93 f3f1 	sdiv	r3, r3, r1
 801977e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019782:	440b      	add	r3, r1
 8019784:	e756      	b.n	8019634 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8019786:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801978a:	4283      	cmp	r3, r0
 801978c:	d809      	bhi.n	80197a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801978e:	f240 60df 	movw	r0, #1759	; 0x6df
 8019792:	4283      	cmp	r3, r0
 8019794:	f4bf af7d 	bcs.w	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019798:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801979c:	2b05      	cmp	r3, #5
 801979e:	d8d4      	bhi.n	801974a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80197a0:	e777      	b.n	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197a2:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80197a6:	4283      	cmp	r3, r0
 80197a8:	d09a      	beq.n	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197aa:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80197ae:	4283      	cmp	r3, r0
 80197b0:	e7ca      	b.n	8019748 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80197b2:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80197b6:	d22b      	bcs.n	8019810 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80197b8:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80197bc:	4283      	cmp	r3, r0
 80197be:	d28f      	bcs.n	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197c0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80197c4:	4283      	cmp	r3, r0
 80197c6:	d816      	bhi.n	80197f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80197c8:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80197cc:	4283      	cmp	r3, r0
 80197ce:	f4bf af60 	bcs.w	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197d2:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80197d6:	4283      	cmp	r3, r0
 80197d8:	d80a      	bhi.n	80197f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80197da:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80197de:	4283      	cmp	r3, r0
 80197e0:	f4bf af57 	bcs.w	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197e4:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80197e8:	4283      	cmp	r3, r0
 80197ea:	f43f af79 	beq.w	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197ee:	e7ac      	b.n	801974a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80197f0:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80197f4:	e7f8      	b.n	80197e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80197f6:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80197fa:	4283      	cmp	r3, r0
 80197fc:	d802      	bhi.n	8019804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80197fe:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019802:	e798      	b.n	8019736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019804:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8019808:	4283      	cmp	r3, r0
 801980a:	f47f af42 	bne.w	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801980e:	e767      	b.n	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019810:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8019814:	4283      	cmp	r3, r0
 8019816:	f43f af63 	beq.w	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801981a:	d802      	bhi.n	8019822 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801981c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8019820:	e7f2      	b.n	8019808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8019822:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8019826:	4283      	cmp	r3, r0
 8019828:	d805      	bhi.n	8019836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801982a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801982e:	4283      	cmp	r3, r0
 8019830:	f4ff af2f 	bcc.w	8019692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019834:	e754      	b.n	80196e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019836:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801983a:	4283      	cmp	r3, r0
 801983c:	e7af      	b.n	801979e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801983e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8019842:	4617      	mov	r7, r2
 8019844:	4666      	mov	r6, ip
 8019846:	f102 0808 	add.w	r8, r2, #8
 801984a:	46e6      	mov	lr, ip
 801984c:	6838      	ldr	r0, [r7, #0]
 801984e:	6879      	ldr	r1, [r7, #4]
 8019850:	3708      	adds	r7, #8
 8019852:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019856:	4547      	cmp	r7, r8
 8019858:	46f4      	mov	ip, lr
 801985a:	d1f6      	bne.n	801984a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801985c:	6838      	ldr	r0, [r7, #0]
 801985e:	f8ce 0000 	str.w	r0, [lr]
 8019862:	88b9      	ldrh	r1, [r7, #4]
 8019864:	f8ae 1004 	strh.w	r1, [lr, #4]
 8019868:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801986c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019870:	d009      	beq.n	8019886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8019872:	7b51      	ldrb	r1, [r2, #13]
 8019874:	7992      	ldrb	r2, [r2, #6]
 8019876:	0149      	lsls	r1, r1, #5
 8019878:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801987c:	4311      	orrs	r1, r2
 801987e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019882:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019886:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801988a:	b2ad      	uxth	r5, r5
 801988c:	d00d      	beq.n	80198aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801988e:	442b      	add	r3, r5
 8019890:	b29b      	uxth	r3, r3
 8019892:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019896:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801989a:	10db      	asrs	r3, r3, #3
 801989c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80198a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80198a4:	4313      	orrs	r3, r2
 80198a6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80198aa:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80198ae:	00cb      	lsls	r3, r1, #3
 80198b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80198b4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80198b8:	064f      	lsls	r7, r1, #25
 80198ba:	ea43 0302 	orr.w	r3, r3, r2
 80198be:	bf44      	itt	mi
 80198c0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80198c4:	b21b      	sxthmi	r3, r3
 80198c6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80198ca:	1b5b      	subs	r3, r3, r5
 80198cc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80198d0:	4632      	mov	r2, r6
 80198d2:	e6fa      	b.n	80196ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80198d4:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80198d8:	4617      	mov	r7, r2
 80198da:	4666      	mov	r6, ip
 80198dc:	f102 0908 	add.w	r9, r2, #8
 80198e0:	46e0      	mov	r8, ip
 80198e2:	6838      	ldr	r0, [r7, #0]
 80198e4:	6879      	ldr	r1, [r7, #4]
 80198e6:	3708      	adds	r7, #8
 80198e8:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80198ec:	454f      	cmp	r7, r9
 80198ee:	46c4      	mov	ip, r8
 80198f0:	d1f6      	bne.n	80198e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 80198f2:	6838      	ldr	r0, [r7, #0]
 80198f4:	f8c8 0000 	str.w	r0, [r8]
 80198f8:	88b9      	ldrh	r1, [r7, #4]
 80198fa:	f8a8 1004 	strh.w	r1, [r8, #4]
 80198fe:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019902:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019906:	d009      	beq.n	801991c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8019908:	7b51      	ldrb	r1, [r2, #13]
 801990a:	7992      	ldrb	r2, [r2, #6]
 801990c:	0149      	lsls	r1, r1, #5
 801990e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019912:	4311      	orrs	r1, r2
 8019914:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019918:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801991c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019920:	d00e      	beq.n	8019940 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8019922:	eba3 030e 	sub.w	r3, r3, lr
 8019926:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801992a:	b29b      	uxth	r3, r3
 801992c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019930:	10db      	asrs	r3, r3, #3
 8019932:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019936:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801993a:	4313      	orrs	r3, r2
 801993c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019940:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019944:	00cb      	lsls	r3, r1, #3
 8019946:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801994a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801994e:	0648      	lsls	r0, r1, #25
 8019950:	ea43 0302 	orr.w	r3, r3, r2
 8019954:	bf44      	itt	mi
 8019956:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801995a:	b21b      	sxthmi	r3, r3
 801995c:	1b5d      	subs	r5, r3, r5
 801995e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019962:	e7b5      	b.n	80198d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08019964 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019968:	461e      	mov	r6, r3
 801996a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801996c:	4604      	mov	r4, r0
 801996e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019972:	4617      	mov	r7, r2
 8019974:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019978:	f7f7 fbea 	bl	8011150 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801997c:	4605      	mov	r5, r0
 801997e:	b918      	cbnz	r0, 8019988 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8019980:	6030      	str	r0, [r6, #0]
 8019982:	4628      	mov	r0, r5
 8019984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019988:	683b      	ldr	r3, [r7, #0]
 801998a:	4601      	mov	r1, r0
 801998c:	68db      	ldr	r3, [r3, #12]
 801998e:	4638      	mov	r0, r7
 8019990:	4798      	blx	r3
 8019992:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801999a:	4602      	mov	r2, r0
 801999c:	6030      	str	r0, [r6, #0]
 801999e:	d213      	bcs.n	80199c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80199a0:	4643      	mov	r3, r8
 80199a2:	4639      	mov	r1, r7
 80199a4:	4620      	mov	r0, r4
 80199a6:	f7ff fe3b 	bl	8019620 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80199aa:	6030      	str	r0, [r6, #0]
 80199ac:	6833      	ldr	r3, [r6, #0]
 80199ae:	b143      	cbz	r3, 80199c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80199b0:	7b5a      	ldrb	r2, [r3, #13]
 80199b2:	7a9b      	ldrb	r3, [r3, #10]
 80199b4:	0052      	lsls	r2, r2, #1
 80199b6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80199ba:	4313      	orrs	r3, r2
 80199bc:	bf0c      	ite	eq
 80199be:	2301      	moveq	r3, #1
 80199c0:	2300      	movne	r3, #0
 80199c2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80199c6:	e7dc      	b.n	8019982 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80199c8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80199cc:	b29b      	uxth	r3, r3
 80199ce:	2b7f      	cmp	r3, #127	; 0x7f
 80199d0:	d804      	bhi.n	80199dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80199d2:	4639      	mov	r1, r7
 80199d4:	4620      	mov	r0, r4
 80199d6:	f7ff fd19 	bl	801940c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80199da:	e7e6      	b.n	80199aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80199dc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d0e3      	beq.n	80199ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80199e4:	f640 1302 	movw	r3, #2306	; 0x902
 80199e8:	429d      	cmp	r5, r3
 80199ea:	d1df      	bne.n	80199ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80199ec:	4601      	mov	r1, r0
 80199ee:	4620      	mov	r0, r4
 80199f0:	f7ff fcdd 	bl	80193ae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80199f4:	e7d9      	b.n	80199aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080199f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80199f6:	b510      	push	{r4, lr}
 80199f8:	4604      	mov	r4, r0
 80199fa:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80199fe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019a00:	b1f1      	cbz	r1, 8019a40 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019a02:	2b0a      	cmp	r3, #10
 8019a04:	d02f      	beq.n	8019a66 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8019a06:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019a08:	3901      	subs	r1, #1
 8019a0a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019a0e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8019a10:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8019a14:	1c51      	adds	r1, r2, #1
 8019a16:	b289      	uxth	r1, r1
 8019a18:	2901      	cmp	r1, #1
 8019a1a:	bf84      	itt	hi
 8019a1c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019a20:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8019a22:	f103 0201 	add.w	r2, r3, #1
 8019a26:	8722      	strh	r2, [r4, #56]	; 0x38
 8019a28:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019a2a:	bf98      	it	ls
 8019a2c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8019a2e:	4413      	add	r3, r2
 8019a30:	b29b      	uxth	r3, r3
 8019a32:	2b09      	cmp	r3, #9
 8019a34:	bf88      	it	hi
 8019a36:	3b0a      	subhi	r3, #10
 8019a38:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019a3c:	8458      	strh	r0, [r3, #34]	; 0x22
 8019a3e:	e7dc      	b.n	80199fa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019a40:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019a42:	2b0a      	cmp	r3, #10
 8019a44:	d00f      	beq.n	8019a66 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8019a46:	4620      	mov	r0, r4
 8019a48:	f7ff fc70 	bl	801932c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019a4c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019a4e:	1c5a      	adds	r2, r3, #1
 8019a50:	8722      	strh	r2, [r4, #56]	; 0x38
 8019a52:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019a54:	4413      	add	r3, r2
 8019a56:	b29b      	uxth	r3, r3
 8019a58:	2b09      	cmp	r3, #9
 8019a5a:	bf88      	it	hi
 8019a5c:	3b0a      	subhi	r3, #10
 8019a5e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019a62:	8458      	strh	r0, [r3, #34]	; 0x22
 8019a64:	e7ec      	b.n	8019a40 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019a66:	bd10      	pop	{r4, pc}

08019a68 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019a68:	b538      	push	{r3, r4, r5, lr}
 8019a6a:	4604      	mov	r4, r0
 8019a6c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019a6e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8019a72:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8019a74:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8019a76:	3a01      	subs	r2, #1
 8019a78:	8702      	strh	r2, [r0, #56]	; 0x38
 8019a7a:	1c5a      	adds	r2, r3, #1
 8019a7c:	b292      	uxth	r2, r2
 8019a7e:	2a09      	cmp	r2, #9
 8019a80:	bf86      	itte	hi
 8019a82:	3b09      	subhi	r3, #9
 8019a84:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8019a86:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8019a88:	f7ff ffb5 	bl	80199f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019a8c:	8c23      	ldrh	r3, [r4, #32]
 8019a8e:	2b01      	cmp	r3, #1
 8019a90:	bf9c      	itt	ls
 8019a92:	3301      	addls	r3, #1
 8019a94:	8423      	strhls	r3, [r4, #32]
 8019a96:	8be3      	ldrh	r3, [r4, #30]
 8019a98:	b90b      	cbnz	r3, 8019a9e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8019a9a:	2302      	movs	r3, #2
 8019a9c:	83e3      	strh	r3, [r4, #30]
 8019a9e:	8be3      	ldrh	r3, [r4, #30]
 8019aa0:	4628      	mov	r0, r5
 8019aa2:	3b01      	subs	r3, #1
 8019aa4:	b29b      	uxth	r3, r3
 8019aa6:	83e3      	strh	r3, [r4, #30]
 8019aa8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019aac:	8365      	strh	r5, [r4, #26]
 8019aae:	bd38      	pop	{r3, r4, r5, pc}

08019ab0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019ab0:	428a      	cmp	r2, r1
 8019ab2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ab6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8019ab8:	d931      	bls.n	8019b1e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8019aba:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8019abc:	1a54      	subs	r4, r2, r1
 8019abe:	19ee      	adds	r6, r5, r7
 8019ac0:	3e01      	subs	r6, #1
 8019ac2:	fa1f fe84 	uxth.w	lr, r4
 8019ac6:	b2b4      	uxth	r4, r6
 8019ac8:	eba4 090e 	sub.w	r9, r4, lr
 8019acc:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8019ad0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8019ad4:	fa1f f989 	uxth.w	r9, r9
 8019ad8:	2c09      	cmp	r4, #9
 8019ada:	4626      	mov	r6, r4
 8019adc:	bf88      	it	hi
 8019ade:	f1a4 060a 	subhi.w	r6, r4, #10
 8019ae2:	f1bc 0f00 	cmp.w	ip, #0
 8019ae6:	bf08      	it	eq
 8019ae8:	f04f 0c02 	moveq.w	ip, #2
 8019aec:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019af0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019af4:	3c01      	subs	r4, #1
 8019af6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8019afa:	fa1f fc8c 	uxth.w	ip, ip
 8019afe:	b2a4      	uxth	r4, r4
 8019b00:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019b04:	454c      	cmp	r4, r9
 8019b06:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8019b0a:	d1e5      	bne.n	8019ad8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8019b0c:	eba5 050e 	sub.w	r5, r5, lr
 8019b10:	eb0e 0408 	add.w	r4, lr, r8
 8019b14:	8705      	strh	r5, [r0, #56]	; 0x38
 8019b16:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8019b1a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8019b1e:	250a      	movs	r5, #10
 8019b20:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8019b22:	1a64      	subs	r4, r4, r1
 8019b24:	4439      	add	r1, r7
 8019b26:	b289      	uxth	r1, r1
 8019b28:	2909      	cmp	r1, #9
 8019b2a:	bf88      	it	hi
 8019b2c:	390a      	subhi	r1, #10
 8019b2e:	8704      	strh	r4, [r0, #56]	; 0x38
 8019b30:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019b32:	b18a      	cbz	r2, 8019b58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8019b34:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8019b36:	3a01      	subs	r2, #1
 8019b38:	3101      	adds	r1, #1
 8019b3a:	b292      	uxth	r2, r2
 8019b3c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019b40:	8701      	strh	r1, [r0, #56]	; 0x38
 8019b42:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019b44:	b901      	cbnz	r1, 8019b48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8019b46:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019b48:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019b4a:	3901      	subs	r1, #1
 8019b4c:	b289      	uxth	r1, r1
 8019b4e:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019b50:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019b54:	844c      	strh	r4, [r1, #34]	; 0x22
 8019b56:	e7ec      	b.n	8019b32 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8019b58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b5c:	f7ff bf4b 	b.w	80199f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08019b60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019b60:	b570      	push	{r4, r5, r6, lr}
 8019b62:	2500      	movs	r5, #0
 8019b64:	4295      	cmp	r5, r2
 8019b66:	d011      	beq.n	8019b8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019b68:	8bc4      	ldrh	r4, [r0, #30]
 8019b6a:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019b6e:	4414      	add	r4, r2
 8019b70:	3c01      	subs	r4, #1
 8019b72:	1b64      	subs	r4, r4, r5
 8019b74:	b2a4      	uxth	r4, r4
 8019b76:	2c01      	cmp	r4, #1
 8019b78:	bf88      	it	hi
 8019b7a:	3c02      	subhi	r4, #2
 8019b7c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019b80:	8b64      	ldrh	r4, [r4, #26]
 8019b82:	42b4      	cmp	r4, r6
 8019b84:	d117      	bne.n	8019bb6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019b86:	3501      	adds	r5, #1
 8019b88:	b2ad      	uxth	r5, r5
 8019b8a:	e7eb      	b.n	8019b64 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019b8c:	2400      	movs	r4, #0
 8019b8e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019b92:	4413      	add	r3, r2
 8019b94:	b2a2      	uxth	r2, r4
 8019b96:	429a      	cmp	r2, r3
 8019b98:	da0f      	bge.n	8019bba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019b9a:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8019b9c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019ba0:	4432      	add	r2, r6
 8019ba2:	b292      	uxth	r2, r2
 8019ba4:	2a09      	cmp	r2, #9
 8019ba6:	bf88      	it	hi
 8019ba8:	3a0a      	subhi	r2, #10
 8019baa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019bae:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8019bb0:	3401      	adds	r4, #1
 8019bb2:	42aa      	cmp	r2, r5
 8019bb4:	d0ee      	beq.n	8019b94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8019bb6:	2000      	movs	r0, #0
 8019bb8:	bd70      	pop	{r4, r5, r6, pc}
 8019bba:	2001      	movs	r0, #1
 8019bbc:	e7fc      	b.n	8019bb8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019bbe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019bbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bc2:	4605      	mov	r5, r0
 8019bc4:	4616      	mov	r6, r2
 8019bc6:	1c8c      	adds	r4, r1, #2
 8019bc8:	8809      	ldrh	r1, [r1, #0]
 8019bca:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019bce:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019bd2:	42b3      	cmp	r3, r6
 8019bd4:	d124      	bne.n	8019c20 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019bd6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019bda:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019bde:	f001 070f 	and.w	r7, r1, #15
 8019be2:	f8cd 8000 	str.w	r8, [sp]
 8019be6:	464b      	mov	r3, r9
 8019be8:	4652      	mov	r2, sl
 8019bea:	4621      	mov	r1, r4
 8019bec:	4628      	mov	r0, r5
 8019bee:	f7ff ffb7 	bl	8019b60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019bf2:	4683      	mov	fp, r0
 8019bf4:	b168      	cbz	r0, 8019c12 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019bf6:	eb0a 0109 	add.w	r1, sl, r9
 8019bfa:	4441      	add	r1, r8
 8019bfc:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019c00:	463a      	mov	r2, r7
 8019c02:	4649      	mov	r1, r9
 8019c04:	4628      	mov	r0, r5
 8019c06:	f7ff ff53 	bl	8019ab0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019c0a:	4658      	mov	r0, fp
 8019c0c:	b003      	add	sp, #12
 8019c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c12:	eb07 010a 	add.w	r1, r7, sl
 8019c16:	4449      	add	r1, r9
 8019c18:	4441      	add	r1, r8
 8019c1a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019c1e:	e7d2      	b.n	8019bc6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019c20:	f04f 0b00 	mov.w	fp, #0
 8019c24:	e7f1      	b.n	8019c0a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019c26 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019c26:	b570      	push	{r4, r5, r6, lr}
 8019c28:	8810      	ldrh	r0, [r2, #0]
 8019c2a:	4298      	cmp	r0, r3
 8019c2c:	d817      	bhi.n	8019c5e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019c2e:	1e48      	subs	r0, r1, #1
 8019c30:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019c34:	4298      	cmp	r0, r3
 8019c36:	d312      	bcc.n	8019c5e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019c38:	2400      	movs	r4, #0
 8019c3a:	428c      	cmp	r4, r1
 8019c3c:	d20f      	bcs.n	8019c5e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019c3e:	1860      	adds	r0, r4, r1
 8019c40:	1040      	asrs	r0, r0, #1
 8019c42:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019c46:	0085      	lsls	r5, r0, #2
 8019c48:	42b3      	cmp	r3, r6
 8019c4a:	d902      	bls.n	8019c52 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019c4c:	3001      	adds	r0, #1
 8019c4e:	b284      	uxth	r4, r0
 8019c50:	e7f3      	b.n	8019c3a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019c52:	d201      	bcs.n	8019c58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8019c54:	b281      	uxth	r1, r0
 8019c56:	e7f0      	b.n	8019c3a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019c58:	442a      	add	r2, r5
 8019c5a:	8850      	ldrh	r0, [r2, #2]
 8019c5c:	bd70      	pop	{r4, r5, r6, pc}
 8019c5e:	2000      	movs	r0, #0
 8019c60:	e7fc      	b.n	8019c5c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019c62 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c66:	4604      	mov	r4, r0
 8019c68:	260b      	movs	r6, #11
 8019c6a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8019c6c:	886f      	ldrh	r7, [r5, #2]
 8019c6e:	087f      	lsrs	r7, r7, #1
 8019c70:	3e01      	subs	r6, #1
 8019c72:	d013      	beq.n	8019c9c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019c74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019c76:	462a      	mov	r2, r5
 8019c78:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019c7c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019c80:	4639      	mov	r1, r7
 8019c82:	4643      	mov	r3, r8
 8019c84:	4620      	mov	r0, r4
 8019c86:	f7ff ffce 	bl	8019c26 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019c8a:	b138      	cbz	r0, 8019c9c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019c8c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019c90:	4642      	mov	r2, r8
 8019c92:	4620      	mov	r0, r4
 8019c94:	f7ff ff93 	bl	8019bbe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019c98:	2800      	cmp	r0, #0
 8019c9a:	d1e9      	bne.n	8019c70 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019ca0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019ca0:	b570      	push	{r4, r5, r6, lr}
 8019ca2:	694a      	ldr	r2, [r1, #20]
 8019ca4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019ca6:	684b      	ldr	r3, [r1, #4]
 8019ca8:	1b54      	subs	r4, r2, r5
 8019caa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8019cac:	f000 8107 	beq.w	8019ebe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 8019cb0:	1b9b      	subs	r3, r3, r6
 8019cb2:	d003      	beq.n	8019cbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019cb4:	2210      	movs	r2, #16
 8019cb6:	4363      	muls	r3, r4
 8019cb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8019cbc:	680c      	ldr	r4, [r1, #0]
 8019cbe:	698a      	ldr	r2, [r1, #24]
 8019cc0:	1b65      	subs	r5, r4, r5
 8019cc2:	f000 80fe 	beq.w	8019ec2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 8019cc6:	1b92      	subs	r2, r2, r6
 8019cc8:	d003      	beq.n	8019cd2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019cca:	2410      	movs	r4, #16
 8019ccc:	436a      	muls	r2, r5
 8019cce:	fb92 f2f4 	sdiv	r2, r2, r4
 8019cd2:	1a9b      	subs	r3, r3, r2
 8019cd4:	ee07 3a90 	vmov	s15, r3
 8019cd8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8019f00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8019cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019ce4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019ce8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019cec:	460a      	mov	r2, r1
 8019cee:	eeb1 6a43 	vneg.f32	s12, s6
 8019cf2:	4603      	mov	r3, r0
 8019cf4:	f100 040c 	add.w	r4, r0, #12
 8019cf8:	edd2 7a02 	vldr	s15, [r2, #8]
 8019cfc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019d00:	ece3 6a01 	vstmia	r3!, {s13}
 8019d04:	edd2 7a03 	vldr	s15, [r2, #12]
 8019d08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019d0c:	edc3 7a02 	vstr	s15, [r3, #8]
 8019d10:	edd2 7a04 	vldr	s15, [r2, #16]
 8019d14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019d18:	429c      	cmp	r4, r3
 8019d1a:	edc3 7a05 	vstr	s15, [r3, #20]
 8019d1e:	f102 0214 	add.w	r2, r2, #20
 8019d22:	d1e9      	bne.n	8019cf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019d24:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019d26:	698b      	ldr	r3, [r1, #24]
 8019d28:	edd0 4a02 	vldr	s9, [r0, #8]
 8019d2c:	1a9b      	subs	r3, r3, r2
 8019d2e:	ee07 3a90 	vmov	s15, r3
 8019d32:	684b      	ldr	r3, [r1, #4]
 8019d34:	edd0 3a00 	vldr	s7, [r0]
 8019d38:	1a9b      	subs	r3, r3, r2
 8019d3a:	edd0 6a01 	vldr	s13, [r0, #4]
 8019d3e:	ee07 3a10 	vmov	s14, r3
 8019d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d46:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019d4a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019d4e:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019d52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d56:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019d5a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019d62:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019d66:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8019d6a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019d6c:	694a      	ldr	r2, [r1, #20]
 8019d6e:	ed90 5a05 	vldr	s10, [r0, #20]
 8019d72:	1b13      	subs	r3, r2, r4
 8019d74:	ee07 3a10 	vmov	s14, r3
 8019d78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d80:	680b      	ldr	r3, [r1, #0]
 8019d82:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8019d86:	1b1b      	subs	r3, r3, r4
 8019d88:	ee07 3a10 	vmov	s14, r3
 8019d8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d90:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d94:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019d98:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019d9c:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8019da0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019da2:	698b      	ldr	r3, [r1, #24]
 8019da4:	ed90 2a03 	vldr	s4, [r0, #12]
 8019da8:	1a9b      	subs	r3, r3, r2
 8019daa:	ee06 3a90 	vmov	s13, r3
 8019dae:	684b      	ldr	r3, [r1, #4]
 8019db0:	edd0 5a04 	vldr	s11, [r0, #16]
 8019db4:	1a9b      	subs	r3, r3, r2
 8019db6:	ee07 3a10 	vmov	s14, r3
 8019dba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019dbe:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019dc2:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019dc6:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019dca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019dce:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019dd2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019dd6:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019dda:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019dde:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019de2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019de4:	694a      	ldr	r2, [r1, #20]
 8019de6:	ed90 1a07 	vldr	s2, [r0, #28]
 8019dea:	1b13      	subs	r3, r2, r4
 8019dec:	ee07 3a10 	vmov	s14, r3
 8019df0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019df4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019df8:	680b      	ldr	r3, [r1, #0]
 8019dfa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019dfe:	1b1b      	subs	r3, r3, r4
 8019e00:	ee07 3a10 	vmov	s14, r3
 8019e04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e08:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e0c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019e10:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019e14:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8019e18:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019e1a:	698b      	ldr	r3, [r1, #24]
 8019e1c:	edd0 5a08 	vldr	s11, [r0, #32]
 8019e20:	1a9b      	subs	r3, r3, r2
 8019e22:	ee07 3a10 	vmov	s14, r3
 8019e26:	684b      	ldr	r3, [r1, #4]
 8019e28:	edd0 2a06 	vldr	s5, [r0, #24]
 8019e2c:	1a9b      	subs	r3, r3, r2
 8019e2e:	ee01 3a90 	vmov	s3, r3
 8019e32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e36:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019e3a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e3e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8019e42:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019e46:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019e4a:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019e4e:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019e52:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019e56:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019e5a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019e5c:	694a      	ldr	r2, [r1, #20]
 8019e5e:	1b13      	subs	r3, r2, r4
 8019e60:	ee03 3a10 	vmov	s6, r3
 8019e64:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019e68:	ee23 3a04 	vmul.f32	s6, s6, s8
 8019e6c:	680b      	ldr	r3, [r1, #0]
 8019e6e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019e72:	1b1b      	subs	r3, r3, r4
 8019e74:	ee03 3a10 	vmov	s6, r3
 8019e78:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019e7c:	ee23 4a04 	vmul.f32	s8, s6, s8
 8019e80:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019e84:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019e88:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019e8c:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019e90:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e98:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8019e9c:	dd13      	ble.n	8019ec6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019ea2:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019ea6:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019eaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eb2:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019eb4:	dd15      	ble.n	8019ee2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019eba:	6403      	str	r3, [r0, #64]	; 0x40
 8019ebc:	bd70      	pop	{r4, r5, r6, pc}
 8019ebe:	4623      	mov	r3, r4
 8019ec0:	e6fc      	b.n	8019cbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019ec2:	462a      	mov	r2, r5
 8019ec4:	e705      	b.n	8019cd2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019ec6:	d502      	bpl.n	8019ece <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8019ec8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019ecc:	e7e9      	b.n	8019ea2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8019ece:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019ed2:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019ed6:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ede:	dade      	bge.n	8019e9e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8019ee0:	e7f2      	b.n	8019ec8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8019ee2:	d502      	bpl.n	8019eea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8019ee4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019ee8:	e7e7      	b.n	8019eba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8019eea:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019eee:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019ef2:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019efa:	dadc      	bge.n	8019eb6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8019efc:	e7f2      	b.n	8019ee4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8019efe:	bf00      	nop
 8019f00:	3d800000 	.word	0x3d800000

08019f04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f08:	2714      	movs	r7, #20
 8019f0a:	435f      	muls	r7, r3
 8019f0c:	eb02 0c07 	add.w	ip, r2, r7
 8019f10:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019f14:	f115 0e0f 	adds.w	lr, r5, #15
 8019f18:	f100 80a2 	bmi.w	801a060 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019f1c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019f20:	2614      	movs	r6, #20
 8019f22:	9c08      	ldr	r4, [sp, #32]
 8019f24:	f8c0 e014 	str.w	lr, [r0, #20]
 8019f28:	4366      	muls	r6, r4
 8019f2a:	eb02 0806 	add.w	r8, r2, r6
 8019f2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019f32:	f115 040f 	adds.w	r4, r5, #15
 8019f36:	f100 809f 	bmi.w	801a078 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019f3a:	1124      	asrs	r4, r4, #4
 8019f3c:	eba4 040e 	sub.w	r4, r4, lr
 8019f40:	6184      	str	r4, [r0, #24]
 8019f42:	2c00      	cmp	r4, #0
 8019f44:	f000 808a 	beq.w	801a05c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019f48:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019f4c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019f50:	5995      	ldr	r5, [r2, r6]
 8019f52:	eba4 0809 	sub.w	r8, r4, r9
 8019f56:	59d4      	ldr	r4, [r2, r7]
 8019f58:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019f5c:	eba5 0a04 	sub.w	sl, r5, r4
 8019f60:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8019f64:	fb0e fe05 	mul.w	lr, lr, r5
 8019f68:	fb0a ee19 	mls	lr, sl, r9, lr
 8019f6c:	fb08 e404 	mla	r4, r8, r4, lr
 8019f70:	3c01      	subs	r4, #1
 8019f72:	19a4      	adds	r4, r4, r6
 8019f74:	f100 808c 	bmi.w	801a090 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019f78:	fb94 fef6 	sdiv	lr, r4, r6
 8019f7c:	fb06 441e 	mls	r4, r6, lr, r4
 8019f80:	f8c0 e000 	str.w	lr, [r0]
 8019f84:	6104      	str	r4, [r0, #16]
 8019f86:	2d00      	cmp	r5, #0
 8019f88:	f2c0 8095 	blt.w	801a0b6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019f8c:	fb95 f4f6 	sdiv	r4, r5, r6
 8019f90:	fb06 5514 	mls	r5, r6, r4, r5
 8019f94:	6044      	str	r4, [r0, #4]
 8019f96:	6085      	str	r5, [r0, #8]
 8019f98:	60c6      	str	r6, [r0, #12]
 8019f9a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8019f9e:	6945      	ldr	r5, [r0, #20]
 8019fa0:	59d2      	ldr	r2, [r2, r7]
 8019fa2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019fa6:	ee07 4a10 	vmov	s14, r4
 8019faa:	6804      	ldr	r4, [r0, #0]
 8019fac:	eddf 6a4a 	vldr	s13, [pc, #296]	; 801a0d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8019fb0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019fb4:	ee07 2a90 	vmov	s15, r2
 8019fb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019fc0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019fc4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8019fc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019fcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019fd0:	edd3 6a00 	vldr	s13, [r3]
 8019fd4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019fd8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8019fdc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019fe0:	edc0 6a07 	vstr	s13, [r0, #28]
 8019fe4:	edd0 6a01 	vldr	s13, [r0, #4]
 8019fe8:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8019fec:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8019ff0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019ff4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019ff8:	ed80 6a08 	vstr	s12, [r0, #32]
 8019ffc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8019ffe:	6242      	str	r2, [r0, #36]	; 0x24
 801a000:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801a004:	ed93 6a03 	vldr	s12, [r3, #12]
 801a008:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a00c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a010:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a014:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801a018:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a01c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801a020:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a024:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801a028:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a02a:	6302      	str	r2, [r0, #48]	; 0x30
 801a02c:	ed93 6a06 	vldr	s12, [r3, #24]
 801a030:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801a034:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a038:	eeb0 7a46 	vmov.f32	s14, s12
 801a03c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801a040:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a044:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a048:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801a04c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801a050:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a054:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801a058:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801a05a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a060:	2410      	movs	r4, #16
 801a062:	f1c5 0501 	rsb	r5, r5, #1
 801a066:	f015 050f 	ands.w	r5, r5, #15
 801a06a:	fb9e fef4 	sdiv	lr, lr, r4
 801a06e:	bf18      	it	ne
 801a070:	2501      	movne	r5, #1
 801a072:	ebae 0e05 	sub.w	lr, lr, r5
 801a076:	e753      	b.n	8019f20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a078:	f04f 0910 	mov.w	r9, #16
 801a07c:	f1c5 0501 	rsb	r5, r5, #1
 801a080:	f015 050f 	ands.w	r5, r5, #15
 801a084:	fb94 f4f9 	sdiv	r4, r4, r9
 801a088:	bf18      	it	ne
 801a08a:	2501      	movne	r5, #1
 801a08c:	1b64      	subs	r4, r4, r5
 801a08e:	e755      	b.n	8019f3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a090:	4264      	negs	r4, r4
 801a092:	fb94 fef6 	sdiv	lr, r4, r6
 801a096:	fb06 441e 	mls	r4, r6, lr, r4
 801a09a:	f1ce 0800 	rsb	r8, lr, #0
 801a09e:	f8c0 8000 	str.w	r8, [r0]
 801a0a2:	6104      	str	r4, [r0, #16]
 801a0a4:	2c00      	cmp	r4, #0
 801a0a6:	f43f af6e 	beq.w	8019f86 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a0aa:	ea6f 0e0e 	mvn.w	lr, lr
 801a0ae:	1b34      	subs	r4, r6, r4
 801a0b0:	f8c0 e000 	str.w	lr, [r0]
 801a0b4:	e766      	b.n	8019f84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a0b6:	426d      	negs	r5, r5
 801a0b8:	fb95 f4f6 	sdiv	r4, r5, r6
 801a0bc:	fb06 5514 	mls	r5, r6, r4, r5
 801a0c0:	f1c4 0e00 	rsb	lr, r4, #0
 801a0c4:	f8c0 e004 	str.w	lr, [r0, #4]
 801a0c8:	6085      	str	r5, [r0, #8]
 801a0ca:	2d00      	cmp	r5, #0
 801a0cc:	f43f af64 	beq.w	8019f98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a0d0:	43e4      	mvns	r4, r4
 801a0d2:	1b75      	subs	r5, r6, r5
 801a0d4:	6044      	str	r4, [r0, #4]
 801a0d6:	e75e      	b.n	8019f96 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a0d8:	3d800000 	.word	0x3d800000

0801a0dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a0dc:	4b01      	ldr	r3, [pc, #4]	; (801a0e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a0de:	6018      	str	r0, [r3, #0]
 801a0e0:	4770      	bx	lr
 801a0e2:	bf00      	nop
 801a0e4:	2004f730 	.word	0x2004f730

0801a0e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a0e8:	4b06      	ldr	r3, [pc, #24]	; (801a104 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a0ea:	881a      	ldrh	r2, [r3, #0]
 801a0ec:	4282      	cmp	r2, r0
 801a0ee:	d807      	bhi.n	801a100 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a0f0:	4b05      	ldr	r3, [pc, #20]	; (801a108 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a0f2:	881b      	ldrh	r3, [r3, #0]
 801a0f4:	4413      	add	r3, r2
 801a0f6:	4298      	cmp	r0, r3
 801a0f8:	bfac      	ite	ge
 801a0fa:	2000      	movge	r0, #0
 801a0fc:	2001      	movlt	r0, #1
 801a0fe:	4770      	bx	lr
 801a100:	2000      	movs	r0, #0
 801a102:	4770      	bx	lr
 801a104:	2004f750 	.word	0x2004f750
 801a108:	2004f754 	.word	0x2004f754

0801a10c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a10c:	b508      	push	{r3, lr}
 801a10e:	4601      	mov	r1, r0
 801a110:	f7ff ffea 	bl	801a0e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a114:	b118      	cbz	r0, 801a11e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a116:	4b02      	ldr	r3, [pc, #8]	; (801a120 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a11e:	bd08      	pop	{r3, pc}
 801a120:	2004f734 	.word	0x2004f734

0801a124 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a124:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a126:	4c24      	ldr	r4, [pc, #144]	; (801a1b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a128:	6823      	ldr	r3, [r4, #0]
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d042      	beq.n	801a1b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a12e:	4a23      	ldr	r2, [pc, #140]	; (801a1bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a130:	4d23      	ldr	r5, [pc, #140]	; (801a1c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a132:	8811      	ldrh	r1, [r2, #0]
 801a134:	f8b5 c000 	ldrh.w	ip, [r5]
 801a138:	4822      	ldr	r0, [pc, #136]	; (801a1c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a13a:	4461      	add	r1, ip
 801a13c:	1c4a      	adds	r2, r1, #1
 801a13e:	f022 0201 	bic.w	r2, r2, #1
 801a142:	008f      	lsls	r7, r1, #2
 801a144:	0412      	lsls	r2, r2, #16
 801a146:	19de      	adds	r6, r3, r7
 801a148:	0c12      	lsrs	r2, r2, #16
 801a14a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a14e:	6006      	str	r6, [r0, #0]
 801a150:	4e1d      	ldr	r6, [pc, #116]	; (801a1c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a152:	19da      	adds	r2, r3, r7
 801a154:	6032      	str	r2, [r6, #0]
 801a156:	220e      	movs	r2, #14
 801a158:	fb02 f20c 	mul.w	r2, r2, ip
 801a15c:	3203      	adds	r2, #3
 801a15e:	f022 0203 	bic.w	r2, r2, #3
 801a162:	443a      	add	r2, r7
 801a164:	4f19      	ldr	r7, [pc, #100]	; (801a1cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a166:	4413      	add	r3, r2
 801a168:	603b      	str	r3, [r7, #0]
 801a16a:	2300      	movs	r3, #0
 801a16c:	4f18      	ldr	r7, [pc, #96]	; (801a1d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a16e:	469c      	mov	ip, r3
 801a170:	803b      	strh	r3, [r7, #0]
 801a172:	4f18      	ldr	r7, [pc, #96]	; (801a1d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a174:	683f      	ldr	r7, [r7, #0]
 801a176:	1aba      	subs	r2, r7, r2
 801a178:	4f17      	ldr	r7, [pc, #92]	; (801a1d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a17a:	603a      	str	r2, [r7, #0]
 801a17c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801a180:	4a16      	ldr	r2, [pc, #88]	; (801a1dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a182:	8013      	strh	r3, [r2, #0]
 801a184:	428b      	cmp	r3, r1
 801a186:	d10d      	bne.n	801a1a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a188:	2300      	movs	r3, #0
 801a18a:	240e      	movs	r4, #14
 801a18c:	882d      	ldrh	r5, [r5, #0]
 801a18e:	6830      	ldr	r0, [r6, #0]
 801a190:	429d      	cmp	r5, r3
 801a192:	d90f      	bls.n	801a1b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a194:	fb04 0203 	mla	r2, r4, r3, r0
 801a198:	7b11      	ldrb	r1, [r2, #12]
 801a19a:	3301      	adds	r3, #1
 801a19c:	f36f 1145 	bfc	r1, #5, #1
 801a1a0:	7311      	strb	r1, [r2, #12]
 801a1a2:	e7f5      	b.n	801a190 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a1a4:	6822      	ldr	r2, [r4, #0]
 801a1a6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a1aa:	6802      	ldr	r2, [r0, #0]
 801a1ac:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a1b0:	3301      	adds	r3, #1
 801a1b2:	e7e7      	b.n	801a184 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1b6:	bf00      	nop
 801a1b8:	2004f734 	.word	0x2004f734
 801a1bc:	2004f750 	.word	0x2004f750
 801a1c0:	2004f754 	.word	0x2004f754
 801a1c4:	2004f748 	.word	0x2004f748
 801a1c8:	2004f738 	.word	0x2004f738
 801a1cc:	2004f740 	.word	0x2004f740
 801a1d0:	2004f752 	.word	0x2004f752
 801a1d4:	2004f73c 	.word	0x2004f73c
 801a1d8:	2004f74c 	.word	0x2004f74c
 801a1dc:	2004f744 	.word	0x2004f744

0801a1e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a1e0:	4b06      	ldr	r3, [pc, #24]	; (801a1fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	b943      	cbnz	r3, 801a1f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a1e6:	b139      	cbz	r1, 801a1f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a1e8:	4b05      	ldr	r3, [pc, #20]	; (801a200 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a1ea:	801a      	strh	r2, [r3, #0]
 801a1ec:	4b05      	ldr	r3, [pc, #20]	; (801a204 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a1ee:	6019      	str	r1, [r3, #0]
 801a1f0:	4b05      	ldr	r3, [pc, #20]	; (801a208 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a1f2:	6018      	str	r0, [r3, #0]
 801a1f4:	f7ff bf96 	b.w	801a124 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a1f8:	4770      	bx	lr
 801a1fa:	bf00      	nop
 801a1fc:	2004f740 	.word	0x2004f740
 801a200:	2004f754 	.word	0x2004f754
 801a204:	2004f73c 	.word	0x2004f73c
 801a208:	2004f734 	.word	0x2004f734

0801a20c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a20c:	b470      	push	{r4, r5, r6}
 801a20e:	4c07      	ldr	r4, [pc, #28]	; (801a22c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a210:	4605      	mov	r5, r0
 801a212:	6826      	ldr	r6, [r4, #0]
 801a214:	4610      	mov	r0, r2
 801a216:	9a03      	ldr	r2, [sp, #12]
 801a218:	b936      	cbnz	r6, 801a228 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a21a:	6025      	str	r5, [r4, #0]
 801a21c:	4c04      	ldr	r4, [pc, #16]	; (801a230 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a21e:	8021      	strh	r1, [r4, #0]
 801a220:	bc70      	pop	{r4, r5, r6}
 801a222:	4619      	mov	r1, r3
 801a224:	f7ff bfdc 	b.w	801a1e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a228:	bc70      	pop	{r4, r5, r6}
 801a22a:	4770      	bx	lr
 801a22c:	2004f758 	.word	0x2004f758
 801a230:	2004f750 	.word	0x2004f750

0801a234 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a234:	4a12      	ldr	r2, [pc, #72]	; (801a280 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a236:	8803      	ldrh	r3, [r0, #0]
 801a238:	8812      	ldrh	r2, [r2, #0]
 801a23a:	4293      	cmp	r3, r2
 801a23c:	d207      	bcs.n	801a24e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801a23e:	2114      	movs	r1, #20
 801a240:	4a10      	ldr	r2, [pc, #64]	; (801a284 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801a242:	6812      	ldr	r2, [r2, #0]
 801a244:	fb01 2303 	mla	r3, r1, r3, r2
 801a248:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801a24c:	4770      	bx	lr
 801a24e:	490e      	ldr	r1, [pc, #56]	; (801a288 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a250:	8809      	ldrh	r1, [r1, #0]
 801a252:	4411      	add	r1, r2
 801a254:	428b      	cmp	r3, r1
 801a256:	da04      	bge.n	801a262 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801a258:	1a9b      	subs	r3, r3, r2
 801a25a:	4a0c      	ldr	r2, [pc, #48]	; (801a28c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a25c:	210e      	movs	r1, #14
 801a25e:	6812      	ldr	r2, [r2, #0]
 801a260:	e7f0      	b.n	801a244 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801a262:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a266:	4293      	cmp	r3, r2
 801a268:	d108      	bne.n	801a27c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801a26a:	4b09      	ldr	r3, [pc, #36]	; (801a290 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a26c:	781b      	ldrb	r3, [r3, #0]
 801a26e:	b91b      	cbnz	r3, 801a278 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a270:	4b08      	ldr	r3, [pc, #32]	; (801a294 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a272:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a276:	4770      	bx	lr
 801a278:	4b07      	ldr	r3, [pc, #28]	; (801a298 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a27a:	e7fa      	b.n	801a272 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801a27c:	2000      	movs	r0, #0
 801a27e:	4770      	bx	lr
 801a280:	2004f750 	.word	0x2004f750
 801a284:	2004f758 	.word	0x2004f758
 801a288:	2004f754 	.word	0x2004f754
 801a28c:	2004f738 	.word	0x2004f738
 801a290:	2004f6c0 	.word	0x2004f6c0
 801a294:	2004f6c2 	.word	0x2004f6c2
 801a298:	2004f6c4 	.word	0x2004f6c4

0801a29c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a29c:	4a12      	ldr	r2, [pc, #72]	; (801a2e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801a29e:	8803      	ldrh	r3, [r0, #0]
 801a2a0:	8812      	ldrh	r2, [r2, #0]
 801a2a2:	4293      	cmp	r3, r2
 801a2a4:	d207      	bcs.n	801a2b6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801a2a6:	2114      	movs	r1, #20
 801a2a8:	4a10      	ldr	r2, [pc, #64]	; (801a2ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801a2aa:	6812      	ldr	r2, [r2, #0]
 801a2ac:	fb01 2303 	mla	r3, r1, r3, r2
 801a2b0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801a2b4:	4770      	bx	lr
 801a2b6:	490e      	ldr	r1, [pc, #56]	; (801a2f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a2b8:	8809      	ldrh	r1, [r1, #0]
 801a2ba:	4411      	add	r1, r2
 801a2bc:	428b      	cmp	r3, r1
 801a2be:	da04      	bge.n	801a2ca <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801a2c0:	1a9b      	subs	r3, r3, r2
 801a2c2:	4a0c      	ldr	r2, [pc, #48]	; (801a2f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a2c4:	210e      	movs	r1, #14
 801a2c6:	6812      	ldr	r2, [r2, #0]
 801a2c8:	e7f0      	b.n	801a2ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801a2ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a2ce:	4293      	cmp	r3, r2
 801a2d0:	d108      	bne.n	801a2e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a2d2:	4b09      	ldr	r3, [pc, #36]	; (801a2f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a2d4:	781b      	ldrb	r3, [r3, #0]
 801a2d6:	b91b      	cbnz	r3, 801a2e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a2d8:	4b08      	ldr	r3, [pc, #32]	; (801a2fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a2da:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a2de:	4770      	bx	lr
 801a2e0:	4b07      	ldr	r3, [pc, #28]	; (801a300 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a2e2:	e7fa      	b.n	801a2da <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a2e4:	2000      	movs	r0, #0
 801a2e6:	4770      	bx	lr
 801a2e8:	2004f750 	.word	0x2004f750
 801a2ec:	2004f758 	.word	0x2004f758
 801a2f0:	2004f754 	.word	0x2004f754
 801a2f4:	2004f738 	.word	0x2004f738
 801a2f8:	2004f6c0 	.word	0x2004f6c0
 801a2fc:	2004f6c4 	.word	0x2004f6c4
 801a300:	2004f6c2 	.word	0x2004f6c2

0801a304 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801a304:	b510      	push	{r4, lr}
 801a306:	4a1f      	ldr	r2, [pc, #124]	; (801a384 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801a308:	880b      	ldrh	r3, [r1, #0]
 801a30a:	8812      	ldrh	r2, [r2, #0]
 801a30c:	4293      	cmp	r3, r2
 801a30e:	d213      	bcs.n	801a338 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801a310:	2114      	movs	r1, #20
 801a312:	4a1d      	ldr	r2, [pc, #116]	; (801a388 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801a314:	6812      	ldr	r2, [r2, #0]
 801a316:	fb01 2303 	mla	r3, r1, r3, r2
 801a31a:	8a1a      	ldrh	r2, [r3, #16]
 801a31c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a320:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801a324:	8a5b      	ldrh	r3, [r3, #18]
 801a326:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a32a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a32e:	8004      	strh	r4, [r0, #0]
 801a330:	8041      	strh	r1, [r0, #2]
 801a332:	8082      	strh	r2, [r0, #4]
 801a334:	80c3      	strh	r3, [r0, #6]
 801a336:	e00e      	b.n	801a356 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801a338:	4914      	ldr	r1, [pc, #80]	; (801a38c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801a33a:	8809      	ldrh	r1, [r1, #0]
 801a33c:	4411      	add	r1, r2
 801a33e:	428b      	cmp	r3, r1
 801a340:	da0a      	bge.n	801a358 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801a342:	210e      	movs	r1, #14
 801a344:	1a9b      	subs	r3, r3, r2
 801a346:	4a12      	ldr	r2, [pc, #72]	; (801a390 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801a348:	6812      	ldr	r2, [r2, #0]
 801a34a:	fb01 2303 	mla	r3, r1, r3, r2
 801a34e:	681a      	ldr	r2, [r3, #0]
 801a350:	6002      	str	r2, [r0, #0]
 801a352:	685a      	ldr	r2, [r3, #4]
 801a354:	6042      	str	r2, [r0, #4]
 801a356:	bd10      	pop	{r4, pc}
 801a358:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a35c:	4293      	cmp	r3, r2
 801a35e:	d10b      	bne.n	801a378 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801a360:	4b0c      	ldr	r3, [pc, #48]	; (801a394 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801a362:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a366:	4b0c      	ldr	r3, [pc, #48]	; (801a398 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801a368:	8081      	strh	r1, [r0, #4]
 801a36a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a36e:	2300      	movs	r3, #0
 801a370:	80c2      	strh	r2, [r0, #6]
 801a372:	8003      	strh	r3, [r0, #0]
 801a374:	8043      	strh	r3, [r0, #2]
 801a376:	e7ee      	b.n	801a356 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801a378:	2300      	movs	r3, #0
 801a37a:	8003      	strh	r3, [r0, #0]
 801a37c:	8043      	strh	r3, [r0, #2]
 801a37e:	8083      	strh	r3, [r0, #4]
 801a380:	e7d8      	b.n	801a334 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801a382:	bf00      	nop
 801a384:	2004f750 	.word	0x2004f750
 801a388:	2004f758 	.word	0x2004f758
 801a38c:	2004f754 	.word	0x2004f754
 801a390:	2004f738 	.word	0x2004f738
 801a394:	2004f6bc 	.word	0x2004f6bc
 801a398:	2004f6be 	.word	0x2004f6be

0801a39c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801a39c:	4a17      	ldr	r2, [pc, #92]	; (801a3fc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801a39e:	8803      	ldrh	r3, [r0, #0]
 801a3a0:	8812      	ldrh	r2, [r2, #0]
 801a3a2:	4293      	cmp	r3, r2
 801a3a4:	d213      	bcs.n	801a3ce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801a3a6:	2114      	movs	r1, #20
 801a3a8:	4a15      	ldr	r2, [pc, #84]	; (801a400 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801a3aa:	6812      	ldr	r2, [r2, #0]
 801a3ac:	fb01 2303 	mla	r3, r1, r3, r2
 801a3b0:	8a1a      	ldrh	r2, [r3, #16]
 801a3b2:	8919      	ldrh	r1, [r3, #8]
 801a3b4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a3b8:	428a      	cmp	r2, r1
 801a3ba:	db1d      	blt.n	801a3f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801a3bc:	8a58      	ldrh	r0, [r3, #18]
 801a3be:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801a3c2:	895b      	ldrh	r3, [r3, #10]
 801a3c4:	4298      	cmp	r0, r3
 801a3c6:	bfac      	ite	ge
 801a3c8:	2000      	movge	r0, #0
 801a3ca:	2001      	movlt	r0, #1
 801a3cc:	4770      	bx	lr
 801a3ce:	490d      	ldr	r1, [pc, #52]	; (801a404 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801a3d0:	8809      	ldrh	r1, [r1, #0]
 801a3d2:	4411      	add	r1, r2
 801a3d4:	428b      	cmp	r3, r1
 801a3d6:	da0d      	bge.n	801a3f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801a3d8:	210e      	movs	r1, #14
 801a3da:	1a9b      	subs	r3, r3, r2
 801a3dc:	4a0a      	ldr	r2, [pc, #40]	; (801a408 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801a3de:	6812      	ldr	r2, [r2, #0]
 801a3e0:	fb01 2303 	mla	r3, r1, r3, r2
 801a3e4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801a3e8:	891a      	ldrh	r2, [r3, #8]
 801a3ea:	4291      	cmp	r1, r2
 801a3ec:	db04      	blt.n	801a3f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801a3ee:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801a3f2:	e7e6      	b.n	801a3c2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801a3f4:	2000      	movs	r0, #0
 801a3f6:	4770      	bx	lr
 801a3f8:	2001      	movs	r0, #1
 801a3fa:	4770      	bx	lr
 801a3fc:	2004f750 	.word	0x2004f750
 801a400:	2004f758 	.word	0x2004f758
 801a404:	2004f754 	.word	0x2004f754
 801a408:	2004f738 	.word	0x2004f738

0801a40c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a40c:	4a12      	ldr	r2, [pc, #72]	; (801a458 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a40e:	8803      	ldrh	r3, [r0, #0]
 801a410:	8811      	ldrh	r1, [r2, #0]
 801a412:	428b      	cmp	r3, r1
 801a414:	d20b      	bcs.n	801a42e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a416:	4a11      	ldr	r2, [pc, #68]	; (801a45c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a418:	6812      	ldr	r2, [r2, #0]
 801a41a:	b112      	cbz	r2, 801a422 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a41c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a420:	b9c0      	cbnz	r0, 801a454 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a422:	4a0f      	ldr	r2, [pc, #60]	; (801a460 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a424:	6811      	ldr	r1, [r2, #0]
 801a426:	2214      	movs	r2, #20
 801a428:	4353      	muls	r3, r2
 801a42a:	58c8      	ldr	r0, [r1, r3]
 801a42c:	4770      	bx	lr
 801a42e:	4a0d      	ldr	r2, [pc, #52]	; (801a464 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a430:	8812      	ldrh	r2, [r2, #0]
 801a432:	440a      	add	r2, r1
 801a434:	4293      	cmp	r3, r2
 801a436:	da04      	bge.n	801a442 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a438:	4a08      	ldr	r2, [pc, #32]	; (801a45c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a43a:	6812      	ldr	r2, [r2, #0]
 801a43c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a440:	4770      	bx	lr
 801a442:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a446:	4293      	cmp	r3, r2
 801a448:	d103      	bne.n	801a452 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a44a:	4b07      	ldr	r3, [pc, #28]	; (801a468 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801a450:	4770      	bx	lr
 801a452:	2000      	movs	r0, #0
 801a454:	4770      	bx	lr
 801a456:	bf00      	nop
 801a458:	2004f750 	.word	0x2004f750
 801a45c:	2004f734 	.word	0x2004f734
 801a460:	2004f758 	.word	0x2004f758
 801a464:	2004f754 	.word	0x2004f754
 801a468:	2004f6c8 	.word	0x2004f6c8

0801a46c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a46c:	4b24      	ldr	r3, [pc, #144]	; (801a500 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a46e:	8802      	ldrh	r2, [r0, #0]
 801a470:	8818      	ldrh	r0, [r3, #0]
 801a472:	4282      	cmp	r2, r0
 801a474:	d221      	bcs.n	801a4ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a476:	4b23      	ldr	r3, [pc, #140]	; (801a504 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a478:	6819      	ldr	r1, [r3, #0]
 801a47a:	2314      	movs	r3, #20
 801a47c:	fb03 1302 	mla	r3, r3, r2, r1
 801a480:	6858      	ldr	r0, [r3, #4]
 801a482:	2800      	cmp	r0, #0
 801a484:	d03a      	beq.n	801a4fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a486:	4920      	ldr	r1, [pc, #128]	; (801a508 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a488:	6809      	ldr	r1, [r1, #0]
 801a48a:	2900      	cmp	r1, #0
 801a48c:	d036      	beq.n	801a4fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a48e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a492:	2900      	cmp	r1, #0
 801a494:	d032      	beq.n	801a4fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a496:	891a      	ldrh	r2, [r3, #8]
 801a498:	8958      	ldrh	r0, [r3, #10]
 801a49a:	4350      	muls	r0, r2
 801a49c:	7c5a      	ldrb	r2, [r3, #17]
 801a49e:	7cdb      	ldrb	r3, [r3, #19]
 801a4a0:	0952      	lsrs	r2, r2, #5
 801a4a2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a4a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a4aa:	2b0b      	cmp	r3, #11
 801a4ac:	bf18      	it	ne
 801a4ae:	0040      	lslne	r0, r0, #1
 801a4b0:	3003      	adds	r0, #3
 801a4b2:	f020 0003 	bic.w	r0, r0, #3
 801a4b6:	4408      	add	r0, r1
 801a4b8:	4770      	bx	lr
 801a4ba:	4b14      	ldr	r3, [pc, #80]	; (801a50c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a4bc:	881b      	ldrh	r3, [r3, #0]
 801a4be:	4403      	add	r3, r0
 801a4c0:	429a      	cmp	r2, r3
 801a4c2:	da1a      	bge.n	801a4fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a4c4:	210e      	movs	r1, #14
 801a4c6:	4b12      	ldr	r3, [pc, #72]	; (801a510 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a4c8:	1a10      	subs	r0, r2, r0
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	fb01 3000 	mla	r0, r1, r0, r3
 801a4d0:	7b03      	ldrb	r3, [r0, #12]
 801a4d2:	f003 031f 	and.w	r3, r3, #31
 801a4d6:	2b0b      	cmp	r3, #11
 801a4d8:	d10b      	bne.n	801a4f2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a4da:	8903      	ldrh	r3, [r0, #8]
 801a4dc:	8940      	ldrh	r0, [r0, #10]
 801a4de:	4358      	muls	r0, r3
 801a4e0:	4b09      	ldr	r3, [pc, #36]	; (801a508 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a4e2:	3003      	adds	r0, #3
 801a4e4:	6819      	ldr	r1, [r3, #0]
 801a4e6:	f020 0303 	bic.w	r3, r0, #3
 801a4ea:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a4ee:	4418      	add	r0, r3
 801a4f0:	4770      	bx	lr
 801a4f2:	2b0d      	cmp	r3, #13
 801a4f4:	d101      	bne.n	801a4fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a4f6:	300d      	adds	r0, #13
 801a4f8:	4770      	bx	lr
 801a4fa:	2000      	movs	r0, #0
 801a4fc:	4770      	bx	lr
 801a4fe:	bf00      	nop
 801a500:	2004f750 	.word	0x2004f750
 801a504:	2004f758 	.word	0x2004f758
 801a508:	2004f734 	.word	0x2004f734
 801a50c:	2004f754 	.word	0x2004f754
 801a510:	2004f738 	.word	0x2004f738

0801a514 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a514:	b510      	push	{r4, lr}
 801a516:	4a17      	ldr	r2, [pc, #92]	; (801a574 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801a518:	8803      	ldrh	r3, [r0, #0]
 801a51a:	8812      	ldrh	r2, [r2, #0]
 801a51c:	4293      	cmp	r3, r2
 801a51e:	d20c      	bcs.n	801a53a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801a520:	2114      	movs	r1, #20
 801a522:	4a15      	ldr	r2, [pc, #84]	; (801a578 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801a524:	6812      	ldr	r2, [r2, #0]
 801a526:	fb01 2303 	mla	r3, r1, r3, r2
 801a52a:	7c58      	ldrb	r0, [r3, #17]
 801a52c:	0942      	lsrs	r2, r0, #5
 801a52e:	7cd8      	ldrb	r0, [r3, #19]
 801a530:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801a534:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801a538:	bd10      	pop	{r4, pc}
 801a53a:	4910      	ldr	r1, [pc, #64]	; (801a57c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801a53c:	8809      	ldrh	r1, [r1, #0]
 801a53e:	4411      	add	r1, r2
 801a540:	428b      	cmp	r3, r1
 801a542:	da09      	bge.n	801a558 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801a544:	210e      	movs	r1, #14
 801a546:	1a9b      	subs	r3, r3, r2
 801a548:	4a0d      	ldr	r2, [pc, #52]	; (801a580 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801a54a:	6812      	ldr	r2, [r2, #0]
 801a54c:	fb01 2303 	mla	r3, r1, r3, r2
 801a550:	7b18      	ldrb	r0, [r3, #12]
 801a552:	f000 001f 	and.w	r0, r0, #31
 801a556:	e7ef      	b.n	801a538 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a558:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a55c:	4293      	cmp	r3, r2
 801a55e:	d106      	bne.n	801a56e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801a560:	f7f3 ff1c 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 801a564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a568:	6803      	ldr	r3, [r0, #0]
 801a56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a56c:	4718      	bx	r3
 801a56e:	2000      	movs	r0, #0
 801a570:	e7e2      	b.n	801a538 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a572:	bf00      	nop
 801a574:	2004f750 	.word	0x2004f750
 801a578:	2004f758 	.word	0x2004f758
 801a57c:	2004f754 	.word	0x2004f754
 801a580:	2004f738 	.word	0x2004f738

0801a584 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801a584:	2010      	movs	r0, #16
 801a586:	4770      	bx	lr

0801a588 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801a588:	2000      	movs	r0, #0
 801a58a:	4770      	bx	lr

0801a58c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801a58c:	4b02      	ldr	r3, [pc, #8]	; (801a598 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801a58e:	8818      	ldrh	r0, [r3, #0]
 801a590:	0040      	lsls	r0, r0, #1
 801a592:	b280      	uxth	r0, r0
 801a594:	4770      	bx	lr
 801a596:	bf00      	nop
 801a598:	2004f6c2 	.word	0x2004f6c2

0801a59c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a59c:	2bff      	cmp	r3, #255	; 0xff
 801a59e:	d050      	beq.n	801a642 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801a5a0:	2a0b      	cmp	r2, #11
 801a5a2:	d04a      	beq.n	801a63a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a5a4:	d80e      	bhi.n	801a5c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801a5a6:	2a03      	cmp	r2, #3
 801a5a8:	d03f      	beq.n	801a62a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801a5aa:	d804      	bhi.n	801a5b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a5ac:	2a01      	cmp	r2, #1
 801a5ae:	d03e      	beq.n	801a62e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801a5b0:	d93f      	bls.n	801a632 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a5b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801a5b4:	4770      	bx	lr
 801a5b6:	2a09      	cmp	r2, #9
 801a5b8:	d03f      	beq.n	801a63a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a5ba:	d83c      	bhi.n	801a636 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a5bc:	2a08      	cmp	r2, #8
 801a5be:	d03a      	beq.n	801a636 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a5c0:	2000      	movs	r0, #0
 801a5c2:	4770      	bx	lr
 801a5c4:	2a2f      	cmp	r2, #47	; 0x2f
 801a5c6:	d024      	beq.n	801a612 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801a5c8:	d80d      	bhi.n	801a5e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801a5ca:	2a2d      	cmp	r2, #45	; 0x2d
 801a5cc:	d014      	beq.n	801a5f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801a5ce:	d826      	bhi.n	801a61e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801a5d0:	2a2c      	cmp	r2, #44	; 0x2c
 801a5d2:	d1f5      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a5d4:	684b      	ldr	r3, [r1, #4]
 801a5d6:	781b      	ldrb	r3, [r3, #0]
 801a5d8:	2b01      	cmp	r3, #1
 801a5da:	d018      	beq.n	801a60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801a5dc:	d323      	bcc.n	801a626 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801a5de:	2b02      	cmp	r3, #2
 801a5e0:	d1ee      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a5e2:	6880      	ldr	r0, [r0, #8]
 801a5e4:	4770      	bx	lr
 801a5e6:	2a31      	cmp	r2, #49	; 0x31
 801a5e8:	d004      	beq.n	801a5f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801a5ea:	d328      	bcc.n	801a63e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801a5ec:	2a32      	cmp	r2, #50	; 0x32
 801a5ee:	d026      	beq.n	801a63e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801a5f0:	2a33      	cmp	r2, #51	; 0x33
 801a5f2:	d1e5      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a5f4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801a5f6:	4770      	bx	lr
 801a5f8:	684b      	ldr	r3, [r1, #4]
 801a5fa:	781b      	ldrb	r3, [r3, #0]
 801a5fc:	2b01      	cmp	r3, #1
 801a5fe:	d004      	beq.n	801a60a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a600:	d30b      	bcc.n	801a61a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a602:	2b02      	cmp	r3, #2
 801a604:	d1dc      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a606:	6900      	ldr	r0, [r0, #16]
 801a608:	4770      	bx	lr
 801a60a:	6a00      	ldr	r0, [r0, #32]
 801a60c:	4770      	bx	lr
 801a60e:	6980      	ldr	r0, [r0, #24]
 801a610:	4770      	bx	lr
 801a612:	684b      	ldr	r3, [r1, #4]
 801a614:	781b      	ldrb	r3, [r3, #0]
 801a616:	2b00      	cmp	r3, #0
 801a618:	d1d2      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a61a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a61c:	4770      	bx	lr
 801a61e:	684b      	ldr	r3, [r1, #4]
 801a620:	781b      	ldrb	r3, [r3, #0]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d1cc      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a626:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a628:	4770      	bx	lr
 801a62a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801a62c:	4770      	bx	lr
 801a62e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a630:	4770      	bx	lr
 801a632:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801a634:	4770      	bx	lr
 801a636:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801a638:	4770      	bx	lr
 801a63a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801a63c:	4770      	bx	lr
 801a63e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801a640:	4770      	bx	lr
 801a642:	2a0b      	cmp	r2, #11
 801a644:	d049      	beq.n	801a6da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801a646:	d80e      	bhi.n	801a666 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801a648:	2a03      	cmp	r2, #3
 801a64a:	d040      	beq.n	801a6ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801a64c:	d804      	bhi.n	801a658 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801a64e:	2a01      	cmp	r2, #1
 801a650:	d03f      	beq.n	801a6d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801a652:	d940      	bls.n	801a6d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801a654:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801a656:	4770      	bx	lr
 801a658:	2a09      	cmp	r2, #9
 801a65a:	d03e      	beq.n	801a6da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801a65c:	d801      	bhi.n	801a662 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801a65e:	2a08      	cmp	r2, #8
 801a660:	d1ae      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a662:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801a664:	4770      	bx	lr
 801a666:	2a2f      	cmp	r2, #47	; 0x2f
 801a668:	d024      	beq.n	801a6b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801a66a:	d80d      	bhi.n	801a688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801a66c:	2a2d      	cmp	r2, #45	; 0x2d
 801a66e:	d014      	beq.n	801a69a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801a670:	d826      	bhi.n	801a6c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801a672:	2a2c      	cmp	r2, #44	; 0x2c
 801a674:	d1a4      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a676:	684b      	ldr	r3, [r1, #4]
 801a678:	781b      	ldrb	r3, [r3, #0]
 801a67a:	2b01      	cmp	r3, #1
 801a67c:	d018      	beq.n	801a6b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801a67e:	d324      	bcc.n	801a6ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801a680:	2b02      	cmp	r3, #2
 801a682:	d19d      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a684:	68c0      	ldr	r0, [r0, #12]
 801a686:	4770      	bx	lr
 801a688:	2a31      	cmp	r2, #49	; 0x31
 801a68a:	d004      	beq.n	801a696 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801a68c:	d327      	bcc.n	801a6de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801a68e:	2a32      	cmp	r2, #50	; 0x32
 801a690:	d025      	beq.n	801a6de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801a692:	2a33      	cmp	r2, #51	; 0x33
 801a694:	d194      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a696:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801a698:	4770      	bx	lr
 801a69a:	684b      	ldr	r3, [r1, #4]
 801a69c:	781b      	ldrb	r3, [r3, #0]
 801a69e:	2b01      	cmp	r3, #1
 801a6a0:	d004      	beq.n	801a6ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801a6a2:	d30b      	bcc.n	801a6bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801a6a4:	2b02      	cmp	r3, #2
 801a6a6:	d18b      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a6a8:	6940      	ldr	r0, [r0, #20]
 801a6aa:	4770      	bx	lr
 801a6ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801a6ae:	4770      	bx	lr
 801a6b0:	69c0      	ldr	r0, [r0, #28]
 801a6b2:	4770      	bx	lr
 801a6b4:	684b      	ldr	r3, [r1, #4]
 801a6b6:	781b      	ldrb	r3, [r3, #0]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d181      	bne.n	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a6bc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a6be:	4770      	bx	lr
 801a6c0:	684b      	ldr	r3, [r1, #4]
 801a6c2:	781b      	ldrb	r3, [r3, #0]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	f47f af7b 	bne.w	801a5c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a6ca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a6cc:	4770      	bx	lr
 801a6ce:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801a6d0:	4770      	bx	lr
 801a6d2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801a6d4:	4770      	bx	lr
 801a6d6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801a6d8:	4770      	bx	lr
 801a6da:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801a6dc:	4770      	bx	lr
 801a6de:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801a6e0:	4770      	bx	lr

0801a6e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a6e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6e6:	b087      	sub	sp, #28
 801a6e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a6ea:	9101      	str	r1, [sp, #4]
 801a6ec:	9205      	str	r2, [sp, #20]
 801a6ee:	6841      	ldr	r1, [r0, #4]
 801a6f0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a6f4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801a6f8:	9202      	str	r2, [sp, #8]
 801a6fa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a6fe:	fb01 2404 	mla	r4, r1, r4, r2
 801a702:	6802      	ldr	r2, [r0, #0]
 801a704:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a708:	f8de 2000 	ldr.w	r2, [lr]
 801a70c:	9203      	str	r2, [sp, #12]
 801a70e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a712:	3204      	adds	r2, #4
 801a714:	9204      	str	r2, [sp, #16]
 801a716:	9a02      	ldr	r2, [sp, #8]
 801a718:	43d6      	mvns	r6, r2
 801a71a:	b2f6      	uxtb	r6, r6
 801a71c:	9a01      	ldr	r2, [sp, #4]
 801a71e:	2a00      	cmp	r2, #0
 801a720:	dc03      	bgt.n	801a72a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a722:	9a05      	ldr	r2, [sp, #20]
 801a724:	2a00      	cmp	r2, #0
 801a726:	f340 8129 	ble.w	801a97c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a72a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a72c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801a730:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a736:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801a73a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a73e:	2b00      	cmp	r3, #0
 801a740:	dd0e      	ble.n	801a760 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a742:	1408      	asrs	r0, r1, #16
 801a744:	d405      	bmi.n	801a752 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a746:	4560      	cmp	r0, ip
 801a748:	da03      	bge.n	801a752 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a74a:	1410      	asrs	r0, r2, #16
 801a74c:	d401      	bmi.n	801a752 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a74e:	42b8      	cmp	r0, r7
 801a750:	db07      	blt.n	801a762 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a752:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a754:	3b01      	subs	r3, #1
 801a756:	4401      	add	r1, r0
 801a758:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a75a:	3402      	adds	r4, #2
 801a75c:	4402      	add	r2, r0
 801a75e:	e7ee      	b.n	801a73e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a760:	d071      	beq.n	801a846 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a762:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a764:	1e58      	subs	r0, r3, #1
 801a766:	fb05 1500 	mla	r5, r5, r0, r1
 801a76a:	142d      	asrs	r5, r5, #16
 801a76c:	d45f      	bmi.n	801a82e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a76e:	4565      	cmp	r5, ip
 801a770:	da5d      	bge.n	801a82e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a772:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a774:	fb05 2000 	mla	r0, r5, r0, r2
 801a778:	1400      	asrs	r0, r0, #16
 801a77a:	d458      	bmi.n	801a82e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a77c:	42b8      	cmp	r0, r7
 801a77e:	da56      	bge.n	801a82e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a780:	4699      	mov	r9, r3
 801a782:	46a2      	mov	sl, r4
 801a784:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801a788:	f1b9 0f00 	cmp.w	r9, #0
 801a78c:	dd57      	ble.n	801a83e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801a78e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a792:	9803      	ldr	r0, [sp, #12]
 801a794:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a798:	fb07 000c 	mla	r0, r7, ip, r0
 801a79c:	140d      	asrs	r5, r1, #16
 801a79e:	5d40      	ldrb	r0, [r0, r5]
 801a7a0:	9d04      	ldr	r5, [sp, #16]
 801a7a2:	f109 39ff 	add.w	r9, r9, #4294967295
 801a7a6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a7aa:	f8ba 5000 	ldrh.w	r5, [sl]
 801a7ae:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a7b2:	122f      	asrs	r7, r5, #8
 801a7b4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a7b8:	fb17 f706 	smulbb	r7, r7, r6
 801a7bc:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801a7c0:	00ed      	lsls	r5, r5, #3
 801a7c2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a7c6:	b2ed      	uxtb	r5, r5
 801a7c8:	fb18 f806 	smulbb	r8, r8, r6
 801a7cc:	fb15 f506 	smulbb	r5, r5, r6
 801a7d0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a7d4:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801a7d8:	10c7      	asrs	r7, r0, #3
 801a7da:	00c0      	lsls	r0, r0, #3
 801a7dc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a7e0:	b2c0      	uxtb	r0, r0
 801a7e2:	fb07 870b 	mla	r7, r7, fp, r8
 801a7e6:	fb00 500b 	mla	r0, r0, fp, r5
 801a7ea:	fa1f fc8c 	uxth.w	ip, ip
 801a7ee:	b280      	uxth	r0, r0
 801a7f0:	b2bf      	uxth	r7, r7
 801a7f2:	f10c 0501 	add.w	r5, ip, #1
 801a7f6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a7fa:	f107 0801 	add.w	r8, r7, #1
 801a7fe:	1c45      	adds	r5, r0, #1
 801a800:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a804:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801a808:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a80a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a80e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a812:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a816:	ea45 0c0c 	orr.w	ip, r5, ip
 801a81a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a81e:	4401      	add	r1, r0
 801a820:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a822:	ea4c 0c08 	orr.w	ip, ip, r8
 801a826:	f82a cb02 	strh.w	ip, [sl], #2
 801a82a:	4402      	add	r2, r0
 801a82c:	e7ac      	b.n	801a788 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a82e:	f04f 0800 	mov.w	r8, #0
 801a832:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801a836:	eb03 0008 	add.w	r0, r3, r8
 801a83a:	2800      	cmp	r0, #0
 801a83c:	dc41      	bgt.n	801a8c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a83e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a842:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a846:	9b01      	ldr	r3, [sp, #4]
 801a848:	2b00      	cmp	r3, #0
 801a84a:	f340 8097 	ble.w	801a97c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a84e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a852:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a856:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a85a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a85e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a862:	eef0 6a62 	vmov.f32	s13, s5
 801a866:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a86a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a86e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a872:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a876:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a87a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a87e:	eef0 6a43 	vmov.f32	s13, s6
 801a882:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a886:	ee12 2a90 	vmov	r2, s5
 801a88a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a88e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a890:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a894:	fb92 f3f3 	sdiv	r3, r2, r3
 801a898:	ee13 2a10 	vmov	r2, s6
 801a89c:	9313      	str	r3, [sp, #76]	; 0x4c
 801a89e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a8a0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a8a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8a8:	9314      	str	r3, [sp, #80]	; 0x50
 801a8aa:	9b01      	ldr	r3, [sp, #4]
 801a8ac:	9a05      	ldr	r2, [sp, #20]
 801a8ae:	3b01      	subs	r3, #1
 801a8b0:	9301      	str	r3, [sp, #4]
 801a8b2:	eeb0 3a67 	vmov.f32	s6, s15
 801a8b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a8b8:	eef0 2a47 	vmov.f32	s5, s14
 801a8bc:	bf08      	it	eq
 801a8be:	4613      	moveq	r3, r2
 801a8c0:	e72c      	b.n	801a71c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a8c2:	140f      	asrs	r7, r1, #16
 801a8c4:	d453      	bmi.n	801a96e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a8c6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a8ca:	42bd      	cmp	r5, r7
 801a8cc:	dd4f      	ble.n	801a96e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a8ce:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a8d2:	d44c      	bmi.n	801a96e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a8d4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a8d8:	4560      	cmp	r0, ip
 801a8da:	dd48      	ble.n	801a96e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a8dc:	9803      	ldr	r0, [sp, #12]
 801a8de:	b22d      	sxth	r5, r5
 801a8e0:	fb0c 0505 	mla	r5, ip, r5, r0
 801a8e4:	5de8      	ldrb	r0, [r5, r7]
 801a8e6:	9d04      	ldr	r5, [sp, #16]
 801a8e8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a8ec:	f06f 0501 	mvn.w	r5, #1
 801a8f0:	fb05 fb08 	mul.w	fp, r5, r8
 801a8f4:	f834 500b 	ldrh.w	r5, [r4, fp]
 801a8f8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a8fc:	122f      	asrs	r7, r5, #8
 801a8fe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a902:	fb17 f706 	smulbb	r7, r7, r6
 801a906:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a90a:	00ed      	lsls	r5, r5, #3
 801a90c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a910:	b2ed      	uxtb	r5, r5
 801a912:	fb19 f906 	smulbb	r9, r9, r6
 801a916:	fb15 f506 	smulbb	r5, r5, r6
 801a91a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a91e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801a922:	10c7      	asrs	r7, r0, #3
 801a924:	00c0      	lsls	r0, r0, #3
 801a926:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a92a:	b2c0      	uxtb	r0, r0
 801a92c:	fb07 970a 	mla	r7, r7, sl, r9
 801a930:	fb00 500a 	mla	r0, r0, sl, r5
 801a934:	fa1f fc8c 	uxth.w	ip, ip
 801a938:	b2bf      	uxth	r7, r7
 801a93a:	b280      	uxth	r0, r0
 801a93c:	f10c 0501 	add.w	r5, ip, #1
 801a940:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a944:	f107 0901 	add.w	r9, r7, #1
 801a948:	1c45      	adds	r5, r0, #1
 801a94a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a94e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801a952:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a956:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a95a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a95e:	ea45 0c0c 	orr.w	ip, r5, ip
 801a962:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a966:	ea4c 0c09 	orr.w	ip, ip, r9
 801a96a:	f824 c00b 	strh.w	ip, [r4, fp]
 801a96e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a970:	f108 38ff 	add.w	r8, r8, #4294967295
 801a974:	4401      	add	r1, r0
 801a976:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a978:	4402      	add	r2, r0
 801a97a:	e75c      	b.n	801a836 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a97c:	b007      	add	sp, #28
 801a97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a982 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a98a:	b085      	sub	sp, #20
 801a98c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a98e:	4693      	mov	fp, r2
 801a990:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a994:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801a998:	6870      	ldr	r0, [r6, #4]
 801a99a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a99c:	fb00 2404 	mla	r4, r0, r4, r2
 801a9a0:	6832      	ldr	r2, [r6, #0]
 801a9a2:	9100      	str	r1, [sp, #0]
 801a9a4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a9a8:	682a      	ldr	r2, [r5, #0]
 801a9aa:	9201      	str	r2, [sp, #4]
 801a9ac:	686a      	ldr	r2, [r5, #4]
 801a9ae:	3204      	adds	r2, #4
 801a9b0:	9202      	str	r2, [sp, #8]
 801a9b2:	9a00      	ldr	r2, [sp, #0]
 801a9b4:	2a00      	cmp	r2, #0
 801a9b6:	dc03      	bgt.n	801a9c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a9b8:	f1bb 0f00 	cmp.w	fp, #0
 801a9bc:	f340 80a0 	ble.w	801ab00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a9c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a9c2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a9c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a9ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a9cc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a9d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	dd0c      	ble.n	801a9f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a9d8:	1406      	asrs	r6, r0, #16
 801a9da:	d405      	bmi.n	801a9e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a9dc:	454e      	cmp	r6, r9
 801a9de:	da03      	bge.n	801a9e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a9e0:	1416      	asrs	r6, r2, #16
 801a9e2:	d401      	bmi.n	801a9e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a9e4:	4546      	cmp	r6, r8
 801a9e6:	db05      	blt.n	801a9f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a9e8:	4470      	add	r0, lr
 801a9ea:	4462      	add	r2, ip
 801a9ec:	3b01      	subs	r3, #1
 801a9ee:	3402      	adds	r4, #2
 801a9f0:	e7f0      	b.n	801a9d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a9f2:	d00f      	beq.n	801aa14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a9f4:	1e5e      	subs	r6, r3, #1
 801a9f6:	fb0e 0706 	mla	r7, lr, r6, r0
 801a9fa:	143f      	asrs	r7, r7, #16
 801a9fc:	d541      	bpl.n	801aa82 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801a9fe:	4698      	mov	r8, r3
 801aa00:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801aa04:	9603      	str	r6, [sp, #12]
 801aa06:	f1b8 0f00 	cmp.w	r8, #0
 801aa0a:	dc59      	bgt.n	801aac0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801aa0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aa10:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801aa14:	9b00      	ldr	r3, [sp, #0]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	dd72      	ble.n	801ab00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801aa1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aa1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aa22:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aa26:	eeb0 6a62 	vmov.f32	s12, s5
 801aa2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aa2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aa32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa36:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aa3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aa3e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801aa42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aa46:	eeb0 6a43 	vmov.f32	s12, s6
 801aa4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aa4e:	ee12 2a90 	vmov	r2, s5
 801aa52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aa56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa5c:	fb92 fef3 	sdiv	lr, r2, r3
 801aa60:	ee13 2a10 	vmov	r2, s6
 801aa64:	fb92 fcf3 	sdiv	ip, r2, r3
 801aa68:	9b00      	ldr	r3, [sp, #0]
 801aa6a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801aa6e:	3b01      	subs	r3, #1
 801aa70:	9300      	str	r3, [sp, #0]
 801aa72:	eeb0 3a67 	vmov.f32	s6, s15
 801aa76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa78:	eef0 2a47 	vmov.f32	s5, s14
 801aa7c:	bf08      	it	eq
 801aa7e:	465b      	moveq	r3, fp
 801aa80:	e797      	b.n	801a9b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801aa82:	454f      	cmp	r7, r9
 801aa84:	dabb      	bge.n	801a9fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aa86:	fb0c 2606 	mla	r6, ip, r6, r2
 801aa8a:	1436      	asrs	r6, r6, #16
 801aa8c:	d4b7      	bmi.n	801a9fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aa8e:	4546      	cmp	r6, r8
 801aa90:	dab5      	bge.n	801a9fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aa92:	461e      	mov	r6, r3
 801aa94:	46a0      	mov	r8, r4
 801aa96:	2e00      	cmp	r6, #0
 801aa98:	ddb8      	ble.n	801aa0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801aa9a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801aa9e:	9901      	ldr	r1, [sp, #4]
 801aaa0:	1417      	asrs	r7, r2, #16
 801aaa2:	fb0a 1707 	mla	r7, sl, r7, r1
 801aaa6:	ea4f 4920 	mov.w	r9, r0, asr #16
 801aaaa:	f817 7009 	ldrb.w	r7, [r7, r9]
 801aaae:	9902      	ldr	r1, [sp, #8]
 801aab0:	4470      	add	r0, lr
 801aab2:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801aab6:	4462      	add	r2, ip
 801aab8:	f828 7b02 	strh.w	r7, [r8], #2
 801aabc:	3e01      	subs	r6, #1
 801aabe:	e7ea      	b.n	801aa96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801aac0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801aac4:	d417      	bmi.n	801aaf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801aac6:	68ae      	ldr	r6, [r5, #8]
 801aac8:	454e      	cmp	r6, r9
 801aaca:	dd14      	ble.n	801aaf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801aacc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801aad0:	d411      	bmi.n	801aaf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801aad2:	68ef      	ldr	r7, [r5, #12]
 801aad4:	4557      	cmp	r7, sl
 801aad6:	dd0e      	ble.n	801aaf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801aad8:	f06f 0101 	mvn.w	r1, #1
 801aadc:	9f01      	ldr	r7, [sp, #4]
 801aade:	b236      	sxth	r6, r6
 801aae0:	fb0a 7606 	mla	r6, sl, r6, r7
 801aae4:	9f02      	ldr	r7, [sp, #8]
 801aae6:	f816 6009 	ldrb.w	r6, [r6, r9]
 801aaea:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801aaee:	fb01 f608 	mul.w	r6, r1, r8
 801aaf2:	9903      	ldr	r1, [sp, #12]
 801aaf4:	538f      	strh	r7, [r1, r6]
 801aaf6:	4470      	add	r0, lr
 801aaf8:	4462      	add	r2, ip
 801aafa:	f108 38ff 	add.w	r8, r8, #4294967295
 801aafe:	e782      	b.n	801aa06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ab00:	b005      	add	sp, #20
 801ab02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ab06 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ab06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab0a:	b087      	sub	sp, #28
 801ab0c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ab0e:	9102      	str	r1, [sp, #8]
 801ab10:	9205      	str	r2, [sp, #20]
 801ab12:	6861      	ldr	r1, [r4, #4]
 801ab14:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ab18:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801ab1c:	9203      	str	r2, [sp, #12]
 801ab1e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ab22:	fb01 2000 	mla	r0, r1, r0, r2
 801ab26:	6822      	ldr	r2, [r4, #0]
 801ab28:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801ab2c:	9200      	str	r2, [sp, #0]
 801ab2e:	f8dc 2000 	ldr.w	r2, [ip]
 801ab32:	9204      	str	r2, [sp, #16]
 801ab34:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ab38:	3204      	adds	r2, #4
 801ab3a:	9201      	str	r2, [sp, #4]
 801ab3c:	9a03      	ldr	r2, [sp, #12]
 801ab3e:	43d5      	mvns	r5, r2
 801ab40:	b2ed      	uxtb	r5, r5
 801ab42:	9a02      	ldr	r2, [sp, #8]
 801ab44:	2a00      	cmp	r2, #0
 801ab46:	dc03      	bgt.n	801ab50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ab48:	9a05      	ldr	r2, [sp, #20]
 801ab4a:	2a00      	cmp	r2, #0
 801ab4c:	f340 812c 	ble.w	801ada8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ab50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ab52:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ab56:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ab5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ab5c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ab60:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	dd10      	ble.n	801ab8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ab68:	140c      	asrs	r4, r1, #16
 801ab6a:	d405      	bmi.n	801ab78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ab6c:	4574      	cmp	r4, lr
 801ab6e:	da03      	bge.n	801ab78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ab70:	1414      	asrs	r4, r2, #16
 801ab72:	d401      	bmi.n	801ab78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ab74:	42bc      	cmp	r4, r7
 801ab76:	db09      	blt.n	801ab8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ab78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ab7a:	9800      	ldr	r0, [sp, #0]
 801ab7c:	4421      	add	r1, r4
 801ab7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ab80:	3002      	adds	r0, #2
 801ab82:	4422      	add	r2, r4
 801ab84:	3b01      	subs	r3, #1
 801ab86:	9000      	str	r0, [sp, #0]
 801ab88:	e7ec      	b.n	801ab64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ab8a:	d071      	beq.n	801ac70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801ab8c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ab8e:	1e5c      	subs	r4, r3, #1
 801ab90:	fb06 1604 	mla	r6, r6, r4, r1
 801ab94:	1436      	asrs	r6, r6, #16
 801ab96:	d45d      	bmi.n	801ac54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ab98:	4576      	cmp	r6, lr
 801ab9a:	da5b      	bge.n	801ac54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ab9c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ab9e:	fb06 2404 	mla	r4, r6, r4, r2
 801aba2:	1424      	asrs	r4, r4, #16
 801aba4:	d456      	bmi.n	801ac54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801aba6:	42bc      	cmp	r4, r7
 801aba8:	da54      	bge.n	801ac54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801abaa:	4698      	mov	r8, r3
 801abac:	f8dd 9000 	ldr.w	r9, [sp]
 801abb0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801abb4:	f1b8 0f00 	cmp.w	r8, #0
 801abb8:	dd54      	ble.n	801ac64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801abba:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801abbe:	9804      	ldr	r0, [sp, #16]
 801abc0:	1414      	asrs	r4, r2, #16
 801abc2:	fb07 0404 	mla	r4, r7, r4, r0
 801abc6:	140e      	asrs	r6, r1, #16
 801abc8:	f814 e006 	ldrb.w	lr, [r4, r6]
 801abcc:	9801      	ldr	r0, [sp, #4]
 801abce:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801abd2:	eb00 0b0e 	add.w	fp, r0, lr
 801abd6:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801abda:	f8b9 4000 	ldrh.w	r4, [r9]
 801abde:	fb16 f60a 	smulbb	r6, r6, sl
 801abe2:	1227      	asrs	r7, r4, #8
 801abe4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801abe8:	fb07 6705 	mla	r7, r7, r5, r6
 801abec:	f89b b001 	ldrb.w	fp, [fp, #1]
 801abf0:	10e6      	asrs	r6, r4, #3
 801abf2:	00e4      	lsls	r4, r4, #3
 801abf4:	b2e4      	uxtb	r4, r4
 801abf6:	fb1b fb0a 	smulbb	fp, fp, sl
 801abfa:	fb14 f405 	smulbb	r4, r4, r5
 801abfe:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801ac02:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ac06:	fb06 b605 	mla	r6, r6, r5, fp
 801ac0a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801ac0e:	b2bf      	uxth	r7, r7
 801ac10:	b2b6      	uxth	r6, r6
 801ac12:	fa1f fe8e 	uxth.w	lr, lr
 801ac16:	1c7c      	adds	r4, r7, #1
 801ac18:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ac1c:	f106 0b01 	add.w	fp, r6, #1
 801ac20:	f10e 0401 	add.w	r4, lr, #1
 801ac24:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ac26:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801ac2a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ac2e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ac32:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ac36:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ac3a:	4327      	orrs	r7, r4
 801ac3c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ac40:	4401      	add	r1, r0
 801ac42:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ac44:	ea47 070b 	orr.w	r7, r7, fp
 801ac48:	f829 7b02 	strh.w	r7, [r9], #2
 801ac4c:	4402      	add	r2, r0
 801ac4e:	f108 38ff 	add.w	r8, r8, #4294967295
 801ac52:	e7af      	b.n	801abb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ac54:	f04f 0e00 	mov.w	lr, #0
 801ac58:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801ac5c:	eb03 040e 	add.w	r4, r3, lr
 801ac60:	2c00      	cmp	r4, #0
 801ac62:	dc43      	bgt.n	801acec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ac64:	9a00      	ldr	r2, [sp, #0]
 801ac66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ac6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ac6e:	9300      	str	r3, [sp, #0]
 801ac70:	9b02      	ldr	r3, [sp, #8]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	f340 8098 	ble.w	801ada8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ac78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ac7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ac80:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ac84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ac88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ac8c:	eef0 6a62 	vmov.f32	s13, s5
 801ac90:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ac94:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac98:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ac9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aca0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aca4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801aca8:	eef0 6a43 	vmov.f32	s13, s6
 801acac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801acb0:	ee12 2a90 	vmov	r2, s5
 801acb4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801acb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801acbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801acc2:	ee13 2a10 	vmov	r2, s6
 801acc6:	9313      	str	r3, [sp, #76]	; 0x4c
 801acc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acca:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801acce:	fb92 f3f3 	sdiv	r3, r2, r3
 801acd2:	9314      	str	r3, [sp, #80]	; 0x50
 801acd4:	9b02      	ldr	r3, [sp, #8]
 801acd6:	9a05      	ldr	r2, [sp, #20]
 801acd8:	3b01      	subs	r3, #1
 801acda:	9302      	str	r3, [sp, #8]
 801acdc:	eeb0 3a67 	vmov.f32	s6, s15
 801ace0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ace2:	eef0 2a47 	vmov.f32	s5, s14
 801ace6:	bf08      	it	eq
 801ace8:	4613      	moveq	r3, r2
 801acea:	e72a      	b.n	801ab42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801acec:	140f      	asrs	r7, r1, #16
 801acee:	d454      	bmi.n	801ad9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801acf0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801acf4:	42be      	cmp	r6, r7
 801acf6:	dd50      	ble.n	801ad9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801acf8:	ea5f 4822 	movs.w	r8, r2, asr #16
 801acfc:	d44d      	bmi.n	801ad9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801acfe:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801ad02:	4544      	cmp	r4, r8
 801ad04:	dd49      	ble.n	801ad9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ad06:	f06f 0001 	mvn.w	r0, #1
 801ad0a:	9c04      	ldr	r4, [sp, #16]
 801ad0c:	b236      	sxth	r6, r6
 801ad0e:	fb08 4606 	mla	r6, r8, r6, r4
 801ad12:	f816 8007 	ldrb.w	r8, [r6, r7]
 801ad16:	9c01      	ldr	r4, [sp, #4]
 801ad18:	fb00 fa0e 	mul.w	sl, r0, lr
 801ad1c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ad20:	eb04 0b08 	add.w	fp, r4, r8
 801ad24:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801ad28:	9800      	ldr	r0, [sp, #0]
 801ad2a:	fb16 f609 	smulbb	r6, r6, r9
 801ad2e:	f830 400a 	ldrh.w	r4, [r0, sl]
 801ad32:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ad36:	1227      	asrs	r7, r4, #8
 801ad38:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ad3c:	fb07 6705 	mla	r7, r7, r5, r6
 801ad40:	10e6      	asrs	r6, r4, #3
 801ad42:	00e4      	lsls	r4, r4, #3
 801ad44:	b2e4      	uxtb	r4, r4
 801ad46:	fb1b fb09 	smulbb	fp, fp, r9
 801ad4a:	9801      	ldr	r0, [sp, #4]
 801ad4c:	fb14 f405 	smulbb	r4, r4, r5
 801ad50:	f810 8008 	ldrb.w	r8, [r0, r8]
 801ad54:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ad58:	fb06 b605 	mla	r6, r6, r5, fp
 801ad5c:	fb08 4809 	mla	r8, r8, r9, r4
 801ad60:	b2bf      	uxth	r7, r7
 801ad62:	b2b6      	uxth	r6, r6
 801ad64:	fa1f f888 	uxth.w	r8, r8
 801ad68:	1c7c      	adds	r4, r7, #1
 801ad6a:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ad6e:	f106 0b01 	add.w	fp, r6, #1
 801ad72:	f108 0401 	add.w	r4, r8, #1
 801ad76:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801ad7a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ad7e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ad82:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ad86:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ad8a:	4327      	orrs	r7, r4
 801ad8c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ad90:	9800      	ldr	r0, [sp, #0]
 801ad92:	ea47 070b 	orr.w	r7, r7, fp
 801ad96:	f820 700a 	strh.w	r7, [r0, sl]
 801ad9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ad9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ada0:	4401      	add	r1, r0
 801ada2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ada4:	4402      	add	r2, r0
 801ada6:	e759      	b.n	801ac5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ada8:	b007      	add	sp, #28
 801adaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801adb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801adb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adb8:	b085      	sub	sp, #20
 801adba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801adbc:	9203      	str	r2, [sp, #12]
 801adbe:	6870      	ldr	r0, [r6, #4]
 801adc0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801adc4:	fb00 2404 	mla	r4, r0, r4, r2
 801adc8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801adca:	6832      	ldr	r2, [r6, #0]
 801adcc:	686f      	ldr	r7, [r5, #4]
 801adce:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801add2:	682a      	ldr	r2, [r5, #0]
 801add4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801add8:	9101      	str	r1, [sp, #4]
 801adda:	9202      	str	r2, [sp, #8]
 801addc:	3704      	adds	r7, #4
 801adde:	9a01      	ldr	r2, [sp, #4]
 801ade0:	2a00      	cmp	r2, #0
 801ade2:	dc03      	bgt.n	801adec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ade4:	9a03      	ldr	r2, [sp, #12]
 801ade6:	2a00      	cmp	r2, #0
 801ade8:	f340 80cc 	ble.w	801af84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801adec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801adee:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801adf2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801adf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801adf8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801adfc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	dd0d      	ble.n	801ae20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ae04:	1406      	asrs	r6, r0, #16
 801ae06:	d405      	bmi.n	801ae14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ae08:	454e      	cmp	r6, r9
 801ae0a:	da03      	bge.n	801ae14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ae0c:	1416      	asrs	r6, r2, #16
 801ae0e:	d401      	bmi.n	801ae14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ae10:	4546      	cmp	r6, r8
 801ae12:	db06      	blt.n	801ae22 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae14:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ae16:	4460      	add	r0, ip
 801ae18:	4432      	add	r2, r6
 801ae1a:	3b01      	subs	r3, #1
 801ae1c:	3402      	adds	r4, #2
 801ae1e:	e7ef      	b.n	801ae00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ae20:	d00f      	beq.n	801ae42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ae22:	1e5e      	subs	r6, r3, #1
 801ae24:	fb0c 0e06 	mla	lr, ip, r6, r0
 801ae28:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801ae2c:	d543      	bpl.n	801aeb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801ae2e:	4698      	mov	r8, r3
 801ae30:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801ae34:	f1b8 0f00 	cmp.w	r8, #0
 801ae38:	dc71      	bgt.n	801af1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801ae3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae3e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ae42:	9b01      	ldr	r3, [sp, #4]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	f340 809d 	ble.w	801af84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ae4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ae52:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ae56:	eeb0 6a62 	vmov.f32	s12, s5
 801ae5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ae5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ae62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae66:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ae6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ae6e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ae72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ae76:	eeb0 6a43 	vmov.f32	s12, s6
 801ae7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ae7e:	ee12 2a90 	vmov	r2, s5
 801ae82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ae86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae8c:	fb92 fcf3 	sdiv	ip, r2, r3
 801ae90:	ee13 2a10 	vmov	r2, s6
 801ae94:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae98:	9312      	str	r3, [sp, #72]	; 0x48
 801ae9a:	9b01      	ldr	r3, [sp, #4]
 801ae9c:	9a03      	ldr	r2, [sp, #12]
 801ae9e:	3b01      	subs	r3, #1
 801aea0:	9301      	str	r3, [sp, #4]
 801aea2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801aea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aea8:	eeb0 3a67 	vmov.f32	s6, s15
 801aeac:	bf08      	it	eq
 801aeae:	4613      	moveq	r3, r2
 801aeb0:	eef0 2a47 	vmov.f32	s5, s14
 801aeb4:	e793      	b.n	801adde <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801aeb6:	45ce      	cmp	lr, r9
 801aeb8:	dab9      	bge.n	801ae2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801aeba:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aebc:	fb01 2606 	mla	r6, r1, r6, r2
 801aec0:	1436      	asrs	r6, r6, #16
 801aec2:	d4b4      	bmi.n	801ae2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801aec4:	4546      	cmp	r6, r8
 801aec6:	dab2      	bge.n	801ae2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801aec8:	4698      	mov	r8, r3
 801aeca:	46a2      	mov	sl, r4
 801aecc:	f1b8 0f00 	cmp.w	r8, #0
 801aed0:	ddb3      	ble.n	801ae3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801aed2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801aed6:	9902      	ldr	r1, [sp, #8]
 801aed8:	1416      	asrs	r6, r2, #16
 801aeda:	fb09 1606 	mla	r6, r9, r6, r1
 801aede:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801aee2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801aee6:	4929      	ldr	r1, [pc, #164]	; (801af8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801aee8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801aeec:	eb07 0b0e 	add.w	fp, r7, lr
 801aef0:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801aef4:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801aef8:	00f6      	lsls	r6, r6, #3
 801aefa:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801aefe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801af02:	ea49 0606 	orr.w	r6, r9, r6
 801af06:	f817 900e 	ldrb.w	r9, [r7, lr]
 801af0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801af0c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801af10:	f82a 6b02 	strh.w	r6, [sl], #2
 801af14:	4460      	add	r0, ip
 801af16:	440a      	add	r2, r1
 801af18:	f108 38ff 	add.w	r8, r8, #4294967295
 801af1c:	e7d6      	b.n	801aecc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801af1e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801af22:	d429      	bmi.n	801af78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801af24:	68ae      	ldr	r6, [r5, #8]
 801af26:	454e      	cmp	r6, r9
 801af28:	dd26      	ble.n	801af78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801af2a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801af2e:	d423      	bmi.n	801af78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801af30:	68e9      	ldr	r1, [r5, #12]
 801af32:	4559      	cmp	r1, fp
 801af34:	dd20      	ble.n	801af78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801af36:	9902      	ldr	r1, [sp, #8]
 801af38:	fa0f fe86 	sxth.w	lr, r6
 801af3c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801af40:	f06f 0101 	mvn.w	r1, #1
 801af44:	f81e e009 	ldrb.w	lr, [lr, r9]
 801af48:	fb01 f908 	mul.w	r9, r1, r8
 801af4c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801af50:	eb07 060e 	add.w	r6, r7, lr
 801af54:	f896 b002 	ldrb.w	fp, [r6, #2]
 801af58:	7876      	ldrb	r6, [r6, #1]
 801af5a:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801af5e:	00f6      	lsls	r6, r6, #3
 801af60:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801af64:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801af68:	ea4b 0606 	orr.w	r6, fp, r6
 801af6c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801af70:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801af74:	f82a 6009 	strh.w	r6, [sl, r9]
 801af78:	9912      	ldr	r1, [sp, #72]	; 0x48
 801af7a:	4460      	add	r0, ip
 801af7c:	440a      	add	r2, r1
 801af7e:	f108 38ff 	add.w	r8, r8, #4294967295
 801af82:	e757      	b.n	801ae34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801af84:	b005      	add	sp, #20
 801af86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af8a:	bf00      	nop
 801af8c:	fffff800 	.word	0xfffff800

0801af90 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801af90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801af94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af98:	b087      	sub	sp, #28
 801af9a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801af9c:	468b      	mov	fp, r1
 801af9e:	9204      	str	r2, [sp, #16]
 801afa0:	6841      	ldr	r1, [r0, #4]
 801afa2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801afa6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801afaa:	9205      	str	r2, [sp, #20]
 801afac:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801afb0:	fb01 2404 	mla	r4, r1, r4, r2
 801afb4:	6802      	ldr	r2, [r0, #0]
 801afb6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801afba:	f8dc 2000 	ldr.w	r2, [ip]
 801afbe:	9201      	str	r2, [sp, #4]
 801afc0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801afc4:	3204      	adds	r2, #4
 801afc6:	9202      	str	r2, [sp, #8]
 801afc8:	f1bb 0f00 	cmp.w	fp, #0
 801afcc:	dc03      	bgt.n	801afd6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801afce:	9a04      	ldr	r2, [sp, #16]
 801afd0:	2a00      	cmp	r2, #0
 801afd2:	f340 8138 	ble.w	801b246 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801afd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801afd8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801afdc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801afe0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801afe2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801afe6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801afea:	2b00      	cmp	r3, #0
 801afec:	dd0e      	ble.n	801b00c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801afee:	1402      	asrs	r2, r0, #16
 801aff0:	d405      	bmi.n	801affe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801aff2:	42ba      	cmp	r2, r7
 801aff4:	da03      	bge.n	801affe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801aff6:	140a      	asrs	r2, r1, #16
 801aff8:	d401      	bmi.n	801affe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801affa:	42b2      	cmp	r2, r6
 801affc:	db07      	blt.n	801b00e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801affe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b000:	3b01      	subs	r3, #1
 801b002:	4410      	add	r0, r2
 801b004:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b006:	3402      	adds	r4, #2
 801b008:	4411      	add	r1, r2
 801b00a:	e7ee      	b.n	801afea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b00c:	d019      	beq.n	801b042 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b00e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b010:	1e5a      	subs	r2, r3, #1
 801b012:	fb05 0502 	mla	r5, r5, r2, r0
 801b016:	142d      	asrs	r5, r5, #16
 801b018:	d409      	bmi.n	801b02e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b01a:	42bd      	cmp	r5, r7
 801b01c:	da07      	bge.n	801b02e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b01e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b020:	fb05 1202 	mla	r2, r5, r2, r1
 801b024:	1412      	asrs	r2, r2, #16
 801b026:	d402      	bmi.n	801b02e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b028:	42b2      	cmp	r2, r6
 801b02a:	f2c0 80ac 	blt.w	801b186 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801b02e:	f04f 0e00 	mov.w	lr, #0
 801b032:	eb03 020e 	add.w	r2, r3, lr
 801b036:	2a00      	cmp	r2, #0
 801b038:	dc3e      	bgt.n	801b0b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b03a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b03e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b042:	f1bb 0f00 	cmp.w	fp, #0
 801b046:	f340 80fe 	ble.w	801b246 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b04a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b04e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b052:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b056:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b05a:	eeb0 6a62 	vmov.f32	s12, s5
 801b05e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b062:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b066:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b06a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b06e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b072:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b076:	eeb0 6a43 	vmov.f32	s12, s6
 801b07a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b07e:	ee12 2a90 	vmov	r2, s5
 801b082:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b088:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b08c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b090:	ee13 2a10 	vmov	r2, s6
 801b094:	9313      	str	r3, [sp, #76]	; 0x4c
 801b096:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b098:	f1bb 0b01 	subs.w	fp, fp, #1
 801b09c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0a0:	9a04      	ldr	r2, [sp, #16]
 801b0a2:	9314      	str	r3, [sp, #80]	; 0x50
 801b0a4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b0a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0aa:	eeb0 3a67 	vmov.f32	s6, s15
 801b0ae:	bf08      	it	eq
 801b0b0:	4613      	moveq	r3, r2
 801b0b2:	eef0 2a47 	vmov.f32	s5, s14
 801b0b6:	e787      	b.n	801afc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b0b8:	1406      	asrs	r6, r0, #16
 801b0ba:	d45d      	bmi.n	801b178 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b0bc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801b0c0:	42b5      	cmp	r5, r6
 801b0c2:	dd59      	ble.n	801b178 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b0c4:	140f      	asrs	r7, r1, #16
 801b0c6:	d457      	bmi.n	801b178 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b0c8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b0cc:	42ba      	cmp	r2, r7
 801b0ce:	dd53      	ble.n	801b178 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b0d0:	9a01      	ldr	r2, [sp, #4]
 801b0d2:	b22d      	sxth	r5, r5
 801b0d4:	fb07 2505 	mla	r5, r7, r5, r2
 801b0d8:	5daa      	ldrb	r2, [r5, r6]
 801b0da:	9d02      	ldr	r5, [sp, #8]
 801b0dc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b0e0:	0e2e      	lsrs	r6, r5, #24
 801b0e2:	d049      	beq.n	801b178 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b0e4:	f06f 0201 	mvn.w	r2, #1
 801b0e8:	fb02 f20e 	mul.w	r2, r2, lr
 801b0ec:	f834 8002 	ldrh.w	r8, [r4, r2]
 801b0f0:	9203      	str	r2, [sp, #12]
 801b0f2:	9a05      	ldr	r2, [sp, #20]
 801b0f4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b0f8:	4356      	muls	r6, r2
 801b0fa:	1c72      	adds	r2, r6, #1
 801b0fc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b100:	1212      	asrs	r2, r2, #8
 801b102:	fa1f f982 	uxth.w	r9, r2
 801b106:	43d2      	mvns	r2, r2
 801b108:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b10c:	fb16 f609 	smulbb	r6, r6, r9
 801b110:	b2ed      	uxtb	r5, r5
 801b112:	ea4f 2728 	mov.w	r7, r8, asr #8
 801b116:	fb15 f509 	smulbb	r5, r5, r9
 801b11a:	b2d2      	uxtb	r2, r2
 801b11c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b120:	fb07 6702 	mla	r7, r7, r2, r6
 801b124:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801b128:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b12c:	fb1a fa09 	smulbb	sl, sl, r9
 801b130:	fa5f f888 	uxtb.w	r8, r8
 801b134:	fb08 5502 	mla	r5, r8, r2, r5
 801b138:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b13c:	fb06 a602 	mla	r6, r6, r2, sl
 801b140:	b2bf      	uxth	r7, r7
 801b142:	b2ad      	uxth	r5, r5
 801b144:	1c7a      	adds	r2, r7, #1
 801b146:	f105 0a01 	add.w	sl, r5, #1
 801b14a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b14e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b152:	b2b6      	uxth	r6, r6
 801b154:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b158:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b15c:	ea4a 0707 	orr.w	r7, sl, r7
 801b160:	f106 0a01 	add.w	sl, r6, #1
 801b164:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b168:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b16c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b170:	9a03      	ldr	r2, [sp, #12]
 801b172:	ea47 070a 	orr.w	r7, r7, sl
 801b176:	52a7      	strh	r7, [r4, r2]
 801b178:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b17a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b17e:	4410      	add	r0, r2
 801b180:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b182:	4411      	add	r1, r2
 801b184:	e755      	b.n	801b032 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b186:	f04f 0800 	mov.w	r8, #0
 801b18a:	eba3 0208 	sub.w	r2, r3, r8
 801b18e:	2a00      	cmp	r2, #0
 801b190:	f77f af53 	ble.w	801b03a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801b194:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801b198:	9f01      	ldr	r7, [sp, #4]
 801b19a:	140a      	asrs	r2, r1, #16
 801b19c:	fb06 7202 	mla	r2, r6, r2, r7
 801b1a0:	1405      	asrs	r5, r0, #16
 801b1a2:	5d52      	ldrb	r2, [r2, r5]
 801b1a4:	9d02      	ldr	r5, [sp, #8]
 801b1a6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b1aa:	0e2e      	lsrs	r6, r5, #24
 801b1ac:	d044      	beq.n	801b238 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b1ae:	9a05      	ldr	r2, [sp, #20]
 801b1b0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801b1b4:	4356      	muls	r6, r2
 801b1b6:	1c72      	adds	r2, r6, #1
 801b1b8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b1bc:	1212      	asrs	r2, r2, #8
 801b1be:	fa1f f982 	uxth.w	r9, r2
 801b1c2:	43d2      	mvns	r2, r2
 801b1c4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b1c8:	fb16 f609 	smulbb	r6, r6, r9
 801b1cc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b1d0:	b2ed      	uxtb	r5, r5
 801b1d2:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b1d6:	fb15 f509 	smulbb	r5, r5, r9
 801b1da:	b2d2      	uxtb	r2, r2
 801b1dc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b1e0:	fb07 6702 	mla	r7, r7, r2, r6
 801b1e4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b1e8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b1ec:	fb1a fa09 	smulbb	sl, sl, r9
 801b1f0:	fa5f fe8e 	uxtb.w	lr, lr
 801b1f4:	fb0e 5502 	mla	r5, lr, r2, r5
 801b1f8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b1fc:	fb06 a602 	mla	r6, r6, r2, sl
 801b200:	b2bf      	uxth	r7, r7
 801b202:	b2ad      	uxth	r5, r5
 801b204:	1c7a      	adds	r2, r7, #1
 801b206:	f105 0a01 	add.w	sl, r5, #1
 801b20a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b20e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b212:	b2b6      	uxth	r6, r6
 801b214:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b218:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b21c:	ea4a 0707 	orr.w	r7, sl, r7
 801b220:	f106 0a01 	add.w	sl, r6, #1
 801b224:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b228:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b22c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b230:	ea47 070a 	orr.w	r7, r7, sl
 801b234:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801b238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b23a:	f108 0801 	add.w	r8, r8, #1
 801b23e:	4410      	add	r0, r2
 801b240:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b242:	4411      	add	r1, r2
 801b244:	e7a1      	b.n	801b18a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b246:	b007      	add	sp, #28
 801b248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b24c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b24c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b254:	b085      	sub	sp, #20
 801b256:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b258:	468b      	mov	fp, r1
 801b25a:	6841      	ldr	r1, [r0, #4]
 801b25c:	9203      	str	r2, [sp, #12]
 801b25e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b262:	fb01 2404 	mla	r4, r1, r4, r2
 801b266:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801b26a:	6802      	ldr	r2, [r0, #0]
 801b26c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b270:	f8de 2000 	ldr.w	r2, [lr]
 801b274:	9200      	str	r2, [sp, #0]
 801b276:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b27a:	3204      	adds	r2, #4
 801b27c:	9201      	str	r2, [sp, #4]
 801b27e:	f1bb 0f00 	cmp.w	fp, #0
 801b282:	dc03      	bgt.n	801b28c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b284:	9a03      	ldr	r2, [sp, #12]
 801b286:	2a00      	cmp	r2, #0
 801b288:	f340 8153 	ble.w	801b532 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801b28c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b28e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b292:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b296:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b298:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801b29c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	dd0e      	ble.n	801b2c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2a4:	1408      	asrs	r0, r1, #16
 801b2a6:	d405      	bmi.n	801b2b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b2a8:	42b8      	cmp	r0, r7
 801b2aa:	da03      	bge.n	801b2b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b2ac:	1410      	asrs	r0, r2, #16
 801b2ae:	d401      	bmi.n	801b2b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b2b0:	42b0      	cmp	r0, r6
 801b2b2:	db07      	blt.n	801b2c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b2b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b2b6:	3b01      	subs	r3, #1
 801b2b8:	4401      	add	r1, r0
 801b2ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b2bc:	3402      	adds	r4, #2
 801b2be:	4402      	add	r2, r0
 801b2c0:	e7ee      	b.n	801b2a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b2c2:	d017      	beq.n	801b2f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b2c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b2c6:	1e58      	subs	r0, r3, #1
 801b2c8:	fb05 1500 	mla	r5, r5, r0, r1
 801b2cc:	142d      	asrs	r5, r5, #16
 801b2ce:	d409      	bmi.n	801b2e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b2d0:	42bd      	cmp	r5, r7
 801b2d2:	da07      	bge.n	801b2e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b2d4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b2d6:	fb05 2000 	mla	r0, r5, r0, r2
 801b2da:	1400      	asrs	r0, r0, #16
 801b2dc:	d402      	bmi.n	801b2e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b2de:	42b0      	cmp	r0, r6
 801b2e0:	f2c0 80bc 	blt.w	801b45c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801b2e4:	2600      	movs	r6, #0
 801b2e6:	1998      	adds	r0, r3, r6
 801b2e8:	2800      	cmp	r0, #0
 801b2ea:	dc3e      	bgt.n	801b36a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b2ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b2f0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b2f4:	f1bb 0f00 	cmp.w	fp, #0
 801b2f8:	f340 811b 	ble.w	801b532 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801b2fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b300:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b304:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b308:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b30c:	eeb0 6a62 	vmov.f32	s12, s5
 801b310:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b314:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b318:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b31c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b320:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b324:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b328:	eeb0 6a43 	vmov.f32	s12, s6
 801b32c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b330:	ee12 2a90 	vmov	r2, s5
 801b334:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b33a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b33e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b342:	ee13 2a10 	vmov	r2, s6
 801b346:	9311      	str	r3, [sp, #68]	; 0x44
 801b348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b34a:	f1bb 0b01 	subs.w	fp, fp, #1
 801b34e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b352:	9a03      	ldr	r2, [sp, #12]
 801b354:	9312      	str	r3, [sp, #72]	; 0x48
 801b356:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b35a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b35c:	eeb0 3a67 	vmov.f32	s6, s15
 801b360:	bf08      	it	eq
 801b362:	4613      	moveq	r3, r2
 801b364:	eef0 2a47 	vmov.f32	s5, s14
 801b368:	e789      	b.n	801b27e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b36a:	140f      	asrs	r7, r1, #16
 801b36c:	d426      	bmi.n	801b3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b36e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b372:	42bd      	cmp	r5, r7
 801b374:	dd22      	ble.n	801b3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b376:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b37a:	d41f      	bmi.n	801b3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b37c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b380:	4560      	cmp	r0, ip
 801b382:	dd1b      	ble.n	801b3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b384:	9800      	ldr	r0, [sp, #0]
 801b386:	b22d      	sxth	r5, r5
 801b388:	fb0c 0505 	mla	r5, ip, r5, r0
 801b38c:	5de8      	ldrb	r0, [r5, r7]
 801b38e:	9d01      	ldr	r5, [sp, #4]
 801b390:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801b394:	0e07      	lsrs	r7, r0, #24
 801b396:	2fff      	cmp	r7, #255	; 0xff
 801b398:	d116      	bne.n	801b3c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b39a:	f06f 0501 	mvn.w	r5, #1
 801b39e:	fb05 f706 	mul.w	r7, r5, r6
 801b3a2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801b3a6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b3aa:	0945      	lsrs	r5, r0, #5
 801b3ac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b3b0:	ea4c 0505 	orr.w	r5, ip, r5
 801b3b4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b3b8:	4305      	orrs	r5, r0
 801b3ba:	53e5      	strh	r5, [r4, r7]
 801b3bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b3be:	3e01      	subs	r6, #1
 801b3c0:	4401      	add	r1, r0
 801b3c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b3c4:	4402      	add	r2, r0
 801b3c6:	e78e      	b.n	801b2e6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b3c8:	b2fd      	uxtb	r5, r7
 801b3ca:	2f00      	cmp	r7, #0
 801b3cc:	d0f6      	beq.n	801b3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b3ce:	f06f 0701 	mvn.w	r7, #1
 801b3d2:	fa1f f985 	uxth.w	r9, r5
 801b3d6:	43ed      	mvns	r5, r5
 801b3d8:	4377      	muls	r7, r6
 801b3da:	f834 8007 	ldrh.w	r8, [r4, r7]
 801b3de:	9702      	str	r7, [sp, #8]
 801b3e0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b3e4:	fb17 f709 	smulbb	r7, r7, r9
 801b3e8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b3ec:	b2c0      	uxtb	r0, r0
 801b3ee:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801b3f2:	fb10 f009 	smulbb	r0, r0, r9
 801b3f6:	b2ed      	uxtb	r5, r5
 801b3f8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b3fc:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b400:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801b404:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b408:	fb1a fa09 	smulbb	sl, sl, r9
 801b40c:	fa5f f888 	uxtb.w	r8, r8
 801b410:	fb08 0005 	mla	r0, r8, r5, r0
 801b414:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b418:	fb07 a705 	mla	r7, r7, r5, sl
 801b41c:	b280      	uxth	r0, r0
 801b41e:	fa1f fc8c 	uxth.w	ip, ip
 801b422:	f100 0a01 	add.w	sl, r0, #1
 801b426:	f10c 0501 	add.w	r5, ip, #1
 801b42a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b42e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b432:	b2bf      	uxth	r7, r7
 801b434:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b438:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b43c:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b440:	f107 0a01 	add.w	sl, r7, #1
 801b444:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b448:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b44c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b450:	9802      	ldr	r0, [sp, #8]
 801b452:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b456:	f824 c000 	strh.w	ip, [r4, r0]
 801b45a:	e7af      	b.n	801b3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b45c:	f04f 0800 	mov.w	r8, #0
 801b460:	eba3 0008 	sub.w	r0, r3, r8
 801b464:	2800      	cmp	r0, #0
 801b466:	f77f af41 	ble.w	801b2ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b46a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801b46e:	9f00      	ldr	r7, [sp, #0]
 801b470:	1410      	asrs	r0, r2, #16
 801b472:	fb06 7000 	mla	r0, r6, r0, r7
 801b476:	140d      	asrs	r5, r1, #16
 801b478:	5d40      	ldrb	r0, [r0, r5]
 801b47a:	9d01      	ldr	r5, [sp, #4]
 801b47c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b480:	0e2e      	lsrs	r6, r5, #24
 801b482:	2eff      	cmp	r6, #255	; 0xff
 801b484:	d112      	bne.n	801b4ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801b486:	482c      	ldr	r0, [pc, #176]	; (801b538 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801b488:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b48c:	0968      	lsrs	r0, r5, #5
 801b48e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b492:	4330      	orrs	r0, r6
 801b494:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b498:	4328      	orrs	r0, r5
 801b49a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801b49e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b4a0:	f108 0801 	add.w	r8, r8, #1
 801b4a4:	4401      	add	r1, r0
 801b4a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b4a8:	4402      	add	r2, r0
 801b4aa:	e7d9      	b.n	801b460 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b4ac:	b2f0      	uxtb	r0, r6
 801b4ae:	2e00      	cmp	r6, #0
 801b4b0:	d0f5      	beq.n	801b49e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b4b2:	fa1f f980 	uxth.w	r9, r0
 801b4b6:	43c0      	mvns	r0, r0
 801b4b8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b4bc:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801b4c0:	fb16 f609 	smulbb	r6, r6, r9
 801b4c4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b4c8:	b2ed      	uxtb	r5, r5
 801b4ca:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b4ce:	fb15 f509 	smulbb	r5, r5, r9
 801b4d2:	b2c0      	uxtb	r0, r0
 801b4d4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b4d8:	fb07 6700 	mla	r7, r7, r0, r6
 801b4dc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b4e0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b4e4:	fb1a fa09 	smulbb	sl, sl, r9
 801b4e8:	fa5f fc8c 	uxtb.w	ip, ip
 801b4ec:	fb0c 5500 	mla	r5, ip, r0, r5
 801b4f0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b4f4:	fb06 a600 	mla	r6, r6, r0, sl
 801b4f8:	b2bf      	uxth	r7, r7
 801b4fa:	b2ad      	uxth	r5, r5
 801b4fc:	1c78      	adds	r0, r7, #1
 801b4fe:	f105 0a01 	add.w	sl, r5, #1
 801b502:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801b506:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b50a:	b2b6      	uxth	r6, r6
 801b50c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b510:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b514:	ea4a 0707 	orr.w	r7, sl, r7
 801b518:	f106 0a01 	add.w	sl, r6, #1
 801b51c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b520:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b524:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b528:	ea47 070a 	orr.w	r7, r7, sl
 801b52c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801b530:	e7b5      	b.n	801b49e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b532:	b005      	add	sp, #20
 801b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b538:	fffff800 	.word	0xfffff800

0801b53c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b53c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b544:	b087      	sub	sp, #28
 801b546:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b548:	468b      	mov	fp, r1
 801b54a:	9204      	str	r2, [sp, #16]
 801b54c:	6861      	ldr	r1, [r4, #4]
 801b54e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b552:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801b556:	9205      	str	r2, [sp, #20]
 801b558:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801b55c:	fb01 2000 	mla	r0, r1, r0, r2
 801b560:	6822      	ldr	r2, [r4, #0]
 801b562:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b566:	f8de 2000 	ldr.w	r2, [lr]
 801b56a:	9201      	str	r2, [sp, #4]
 801b56c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b570:	9202      	str	r2, [sp, #8]
 801b572:	f1bb 0f00 	cmp.w	fp, #0
 801b576:	dc03      	bgt.n	801b580 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801b578:	9a04      	ldr	r2, [sp, #16]
 801b57a:	2a00      	cmp	r2, #0
 801b57c:	f340 8142 	ble.w	801b804 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801b580:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b582:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b586:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b58a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b58c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801b590:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b594:	2b00      	cmp	r3, #0
 801b596:	dd0e      	ble.n	801b5b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b598:	140c      	asrs	r4, r1, #16
 801b59a:	d405      	bmi.n	801b5a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b59c:	42bc      	cmp	r4, r7
 801b59e:	da03      	bge.n	801b5a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b5a0:	1414      	asrs	r4, r2, #16
 801b5a2:	d401      	bmi.n	801b5a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b5a4:	42b4      	cmp	r4, r6
 801b5a6:	db07      	blt.n	801b5b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b5a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b5aa:	3b01      	subs	r3, #1
 801b5ac:	4421      	add	r1, r4
 801b5ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b5b0:	3002      	adds	r0, #2
 801b5b2:	4422      	add	r2, r4
 801b5b4:	e7ee      	b.n	801b594 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801b5b6:	d019      	beq.n	801b5ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801b5b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b5ba:	1e5c      	subs	r4, r3, #1
 801b5bc:	fb05 1504 	mla	r5, r5, r4, r1
 801b5c0:	142d      	asrs	r5, r5, #16
 801b5c2:	d409      	bmi.n	801b5d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b5c4:	42bd      	cmp	r5, r7
 801b5c6:	da07      	bge.n	801b5d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b5c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b5ca:	fb05 2404 	mla	r4, r5, r4, r2
 801b5ce:	1424      	asrs	r4, r4, #16
 801b5d0:	d402      	bmi.n	801b5d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b5d2:	42b4      	cmp	r4, r6
 801b5d4:	f2c0 80b1 	blt.w	801b73a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801b5d8:	f04f 0800 	mov.w	r8, #0
 801b5dc:	eb03 0408 	add.w	r4, r3, r8
 801b5e0:	2c00      	cmp	r4, #0
 801b5e2:	dc3e      	bgt.n	801b662 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b5e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b5e8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b5ec:	f1bb 0f00 	cmp.w	fp, #0
 801b5f0:	f340 8108 	ble.w	801b804 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801b5f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b5f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b5fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b600:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b604:	eeb0 6a62 	vmov.f32	s12, s5
 801b608:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b60c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b610:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b614:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b618:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b61c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b620:	eeb0 6a43 	vmov.f32	s12, s6
 801b624:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b628:	ee12 2a90 	vmov	r2, s5
 801b62c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b630:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b632:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b636:	fb92 f3f3 	sdiv	r3, r2, r3
 801b63a:	ee13 2a10 	vmov	r2, s6
 801b63e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b640:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b642:	f1bb 0b01 	subs.w	fp, fp, #1
 801b646:	fb92 f3f3 	sdiv	r3, r2, r3
 801b64a:	9a04      	ldr	r2, [sp, #16]
 801b64c:	9314      	str	r3, [sp, #80]	; 0x50
 801b64e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b652:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b654:	eeb0 3a67 	vmov.f32	s6, s15
 801b658:	bf08      	it	eq
 801b65a:	4613      	moveq	r3, r2
 801b65c:	eef0 2a47 	vmov.f32	s5, s14
 801b660:	e787      	b.n	801b572 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b662:	140e      	asrs	r6, r1, #16
 801b664:	d462      	bmi.n	801b72c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b666:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b66a:	42b5      	cmp	r5, r6
 801b66c:	dd5e      	ble.n	801b72c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b66e:	1417      	asrs	r7, r2, #16
 801b670:	d45c      	bmi.n	801b72c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b672:	f8de 400c 	ldr.w	r4, [lr, #12]
 801b676:	42bc      	cmp	r4, r7
 801b678:	dd58      	ble.n	801b72c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b67a:	b22d      	sxth	r5, r5
 801b67c:	fb07 6505 	mla	r5, r7, r5, r6
 801b680:	9c02      	ldr	r4, [sp, #8]
 801b682:	5d66      	ldrb	r6, [r4, r5]
 801b684:	2e00      	cmp	r6, #0
 801b686:	d051      	beq.n	801b72c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b688:	9c01      	ldr	r4, [sp, #4]
 801b68a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801b68e:	f06f 0401 	mvn.w	r4, #1
 801b692:	fb04 f408 	mul.w	r4, r4, r8
 801b696:	5b05      	ldrh	r5, [r0, r4]
 801b698:	9403      	str	r4, [sp, #12]
 801b69a:	9c05      	ldr	r4, [sp, #20]
 801b69c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b6a0:	4366      	muls	r6, r4
 801b6a2:	1c74      	adds	r4, r6, #1
 801b6a4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b6a8:	1224      	asrs	r4, r4, #8
 801b6aa:	b2a7      	uxth	r7, r4
 801b6ac:	43e4      	mvns	r4, r4
 801b6ae:	122e      	asrs	r6, r5, #8
 801b6b0:	b2e4      	uxtb	r4, r4
 801b6b2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b6b6:	fb16 f604 	smulbb	r6, r6, r4
 801b6ba:	00ed      	lsls	r5, r5, #3
 801b6bc:	b2ed      	uxtb	r5, r5
 801b6be:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801b6c2:	fb15 f504 	smulbb	r5, r5, r4
 801b6c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b6ca:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b6ce:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b6d2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801b6d6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b6da:	fb1a fa04 	smulbb	sl, sl, r4
 801b6de:	fa5f f989 	uxtb.w	r9, r9
 801b6e2:	fb09 5507 	mla	r5, r9, r7, r5
 801b6e6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b6ea:	fb06 a607 	mla	r6, r6, r7, sl
 801b6ee:	fa1f fc8c 	uxth.w	ip, ip
 801b6f2:	b2ad      	uxth	r5, r5
 801b6f4:	f10c 0401 	add.w	r4, ip, #1
 801b6f8:	f105 0a01 	add.w	sl, r5, #1
 801b6fc:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b700:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b704:	b2b6      	uxth	r6, r6
 801b706:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b70a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b70e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b712:	f106 0a01 	add.w	sl, r6, #1
 801b716:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b71a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b71e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b722:	9c03      	ldr	r4, [sp, #12]
 801b724:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b728:	f820 c004 	strh.w	ip, [r0, r4]
 801b72c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b72e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b732:	4421      	add	r1, r4
 801b734:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b736:	4422      	add	r2, r4
 801b738:	e750      	b.n	801b5dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b73a:	f04f 0900 	mov.w	r9, #0
 801b73e:	eba3 0409 	sub.w	r4, r3, r9
 801b742:	2c00      	cmp	r4, #0
 801b744:	f77f af4e 	ble.w	801b5e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b748:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801b74c:	140d      	asrs	r5, r1, #16
 801b74e:	1414      	asrs	r4, r2, #16
 801b750:	fb06 5404 	mla	r4, r6, r4, r5
 801b754:	9d02      	ldr	r5, [sp, #8]
 801b756:	5d2e      	ldrb	r6, [r5, r4]
 801b758:	2e00      	cmp	r6, #0
 801b75a:	d04c      	beq.n	801b7f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b75c:	9d01      	ldr	r5, [sp, #4]
 801b75e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801b762:	9c05      	ldr	r4, [sp, #20]
 801b764:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b768:	4366      	muls	r6, r4
 801b76a:	1c74      	adds	r4, r6, #1
 801b76c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b770:	1224      	asrs	r4, r4, #8
 801b772:	b2a7      	uxth	r7, r4
 801b774:	43e4      	mvns	r4, r4
 801b776:	122e      	asrs	r6, r5, #8
 801b778:	b2e4      	uxtb	r4, r4
 801b77a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b77e:	fb16 f604 	smulbb	r6, r6, r4
 801b782:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b786:	00ed      	lsls	r5, r5, #3
 801b788:	b2ed      	uxtb	r5, r5
 801b78a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801b78e:	fb15 f504 	smulbb	r5, r5, r4
 801b792:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b796:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b79a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b79e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801b7a2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b7a6:	fb1a fa04 	smulbb	sl, sl, r4
 801b7aa:	fa5f f888 	uxtb.w	r8, r8
 801b7ae:	fb08 5507 	mla	r5, r8, r7, r5
 801b7b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b7b6:	fb06 a607 	mla	r6, r6, r7, sl
 801b7ba:	fa1f fc8c 	uxth.w	ip, ip
 801b7be:	b2ad      	uxth	r5, r5
 801b7c0:	f10c 0401 	add.w	r4, ip, #1
 801b7c4:	f105 0a01 	add.w	sl, r5, #1
 801b7c8:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b7cc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b7d0:	b2b6      	uxth	r6, r6
 801b7d2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b7d6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b7da:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b7de:	f106 0a01 	add.w	sl, r6, #1
 801b7e2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b7e6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b7ea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b7ee:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b7f2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b7f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b7f8:	f109 0901 	add.w	r9, r9, #1
 801b7fc:	4421      	add	r1, r4
 801b7fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b800:	4422      	add	r2, r4
 801b802:	e79c      	b.n	801b73e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b804:	b007      	add	sp, #28
 801b806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b80a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b80e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b812:	b085      	sub	sp, #20
 801b814:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b816:	468b      	mov	fp, r1
 801b818:	6861      	ldr	r1, [r4, #4]
 801b81a:	9203      	str	r2, [sp, #12]
 801b81c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801b820:	fb01 2000 	mla	r0, r1, r0, r2
 801b824:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b828:	6822      	ldr	r2, [r4, #0]
 801b82a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b82e:	f8d8 2000 	ldr.w	r2, [r8]
 801b832:	9200      	str	r2, [sp, #0]
 801b834:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b838:	9201      	str	r2, [sp, #4]
 801b83a:	f1bb 0f00 	cmp.w	fp, #0
 801b83e:	dc03      	bgt.n	801b848 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b840:	9a03      	ldr	r2, [sp, #12]
 801b842:	2a00      	cmp	r2, #0
 801b844:	f340 8146 	ble.w	801bad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b848:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b84a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b84e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b852:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b854:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b858:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	dd0e      	ble.n	801b87e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b860:	140c      	asrs	r4, r1, #16
 801b862:	d405      	bmi.n	801b870 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b864:	42bc      	cmp	r4, r7
 801b866:	da03      	bge.n	801b870 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b868:	1414      	asrs	r4, r2, #16
 801b86a:	d401      	bmi.n	801b870 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b86c:	42b4      	cmp	r4, r6
 801b86e:	db07      	blt.n	801b880 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b870:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b872:	3b01      	subs	r3, #1
 801b874:	4421      	add	r1, r4
 801b876:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b878:	3002      	adds	r0, #2
 801b87a:	4422      	add	r2, r4
 801b87c:	e7ee      	b.n	801b85c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b87e:	d017      	beq.n	801b8b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b880:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b882:	1e5c      	subs	r4, r3, #1
 801b884:	fb05 1504 	mla	r5, r5, r4, r1
 801b888:	142d      	asrs	r5, r5, #16
 801b88a:	d409      	bmi.n	801b8a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b88c:	42bd      	cmp	r5, r7
 801b88e:	da07      	bge.n	801b8a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b890:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b892:	fb05 2404 	mla	r4, r5, r4, r2
 801b896:	1424      	asrs	r4, r4, #16
 801b898:	d402      	bmi.n	801b8a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b89a:	42b4      	cmp	r4, r6
 801b89c:	f2c0 80b3 	blt.w	801ba06 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801b8a0:	2600      	movs	r6, #0
 801b8a2:	199c      	adds	r4, r3, r6
 801b8a4:	2c00      	cmp	r4, #0
 801b8a6:	dc3e      	bgt.n	801b926 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b8a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b8b0:	f1bb 0f00 	cmp.w	fp, #0
 801b8b4:	f340 810e 	ble.w	801bad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b8b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b8c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8c8:	eeb0 6a62 	vmov.f32	s12, s5
 801b8cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b8e0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b8e4:	eeb0 6a43 	vmov.f32	s12, s6
 801b8e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b8ec:	ee12 2a90 	vmov	r2, s5
 801b8f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b8f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8fe:	ee13 2a10 	vmov	r2, s6
 801b902:	9311      	str	r3, [sp, #68]	; 0x44
 801b904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b906:	f1bb 0b01 	subs.w	fp, fp, #1
 801b90a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b90e:	9a03      	ldr	r2, [sp, #12]
 801b910:	9312      	str	r3, [sp, #72]	; 0x48
 801b912:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b918:	eeb0 3a67 	vmov.f32	s6, s15
 801b91c:	bf08      	it	eq
 801b91e:	4613      	moveq	r3, r2
 801b920:	eef0 2a47 	vmov.f32	s5, s14
 801b924:	e789      	b.n	801b83a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b926:	140f      	asrs	r7, r1, #16
 801b928:	d418      	bmi.n	801b95c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b92a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b92e:	42bd      	cmp	r5, r7
 801b930:	dd14      	ble.n	801b95c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b932:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b936:	d411      	bmi.n	801b95c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b938:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801b93c:	4564      	cmp	r4, ip
 801b93e:	dd0d      	ble.n	801b95c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b940:	b22d      	sxth	r5, r5
 801b942:	fb0c 7505 	mla	r5, ip, r5, r7
 801b946:	9c01      	ldr	r4, [sp, #4]
 801b948:	5d64      	ldrb	r4, [r4, r5]
 801b94a:	2cff      	cmp	r4, #255	; 0xff
 801b94c:	d10c      	bne.n	801b968 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b94e:	9c00      	ldr	r4, [sp, #0]
 801b950:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801b954:	f06f 0401 	mvn.w	r4, #1
 801b958:	4374      	muls	r4, r6
 801b95a:	5305      	strh	r5, [r0, r4]
 801b95c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b95e:	3e01      	subs	r6, #1
 801b960:	4421      	add	r1, r4
 801b962:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b964:	4422      	add	r2, r4
 801b966:	e79c      	b.n	801b8a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b968:	2c00      	cmp	r4, #0
 801b96a:	d0f7      	beq.n	801b95c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b96c:	9f00      	ldr	r7, [sp, #0]
 801b96e:	fa1f fc84 	uxth.w	ip, r4
 801b972:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801b976:	f06f 0501 	mvn.w	r5, #1
 801b97a:	43e4      	mvns	r4, r4
 801b97c:	4375      	muls	r5, r6
 801b97e:	9502      	str	r5, [sp, #8]
 801b980:	5b45      	ldrh	r5, [r0, r5]
 801b982:	b2e4      	uxtb	r4, r4
 801b984:	122f      	asrs	r7, r5, #8
 801b986:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b98a:	fb17 f704 	smulbb	r7, r7, r4
 801b98e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b992:	00ed      	lsls	r5, r5, #3
 801b994:	b2ed      	uxtb	r5, r5
 801b996:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801b99a:	fb15 f504 	smulbb	r5, r5, r4
 801b99e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b9a2:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801b9a6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b9aa:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801b9ae:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b9b2:	fb1a fa04 	smulbb	sl, sl, r4
 801b9b6:	fa5f f989 	uxtb.w	r9, r9
 801b9ba:	fb09 550c 	mla	r5, r9, ip, r5
 801b9be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b9c2:	fb07 a70c 	mla	r7, r7, ip, sl
 801b9c6:	fa1f fe8e 	uxth.w	lr, lr
 801b9ca:	b2ad      	uxth	r5, r5
 801b9cc:	f10e 0401 	add.w	r4, lr, #1
 801b9d0:	f105 0a01 	add.w	sl, r5, #1
 801b9d4:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801b9d8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b9dc:	b2bf      	uxth	r7, r7
 801b9de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b9e2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b9e6:	ea4a 0e0e 	orr.w	lr, sl, lr
 801b9ea:	f107 0a01 	add.w	sl, r7, #1
 801b9ee:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b9f2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b9f6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b9fa:	9c02      	ldr	r4, [sp, #8]
 801b9fc:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ba00:	f820 e004 	strh.w	lr, [r0, r4]
 801ba04:	e7aa      	b.n	801b95c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ba06:	f04f 0900 	mov.w	r9, #0
 801ba0a:	eba3 0409 	sub.w	r4, r3, r9
 801ba0e:	2c00      	cmp	r4, #0
 801ba10:	f77f af4a 	ble.w	801b8a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ba14:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ba18:	1414      	asrs	r4, r2, #16
 801ba1a:	140d      	asrs	r5, r1, #16
 801ba1c:	fb06 5504 	mla	r5, r6, r4, r5
 801ba20:	9c01      	ldr	r4, [sp, #4]
 801ba22:	5d64      	ldrb	r4, [r4, r5]
 801ba24:	2cff      	cmp	r4, #255	; 0xff
 801ba26:	d10b      	bne.n	801ba40 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ba28:	9c00      	ldr	r4, [sp, #0]
 801ba2a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801ba2e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801ba32:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ba34:	f109 0901 	add.w	r9, r9, #1
 801ba38:	4421      	add	r1, r4
 801ba3a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ba3c:	4422      	add	r2, r4
 801ba3e:	e7e4      	b.n	801ba0a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ba40:	2c00      	cmp	r4, #0
 801ba42:	d0f6      	beq.n	801ba32 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801ba44:	b2a7      	uxth	r7, r4
 801ba46:	43e4      	mvns	r4, r4
 801ba48:	9e00      	ldr	r6, [sp, #0]
 801ba4a:	b2e4      	uxtb	r4, r4
 801ba4c:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801ba50:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801ba54:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ba58:	122e      	asrs	r6, r5, #8
 801ba5a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ba5e:	fb16 f604 	smulbb	r6, r6, r4
 801ba62:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ba66:	00ed      	lsls	r5, r5, #3
 801ba68:	b2ed      	uxtb	r5, r5
 801ba6a:	fb15 f504 	smulbb	r5, r5, r4
 801ba6e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ba72:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ba76:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ba7a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ba7e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ba82:	fb1a fa04 	smulbb	sl, sl, r4
 801ba86:	fa5f fe8e 	uxtb.w	lr, lr
 801ba8a:	fb0e 5507 	mla	r5, lr, r7, r5
 801ba8e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ba92:	fb06 a607 	mla	r6, r6, r7, sl
 801ba96:	fa1f fc8c 	uxth.w	ip, ip
 801ba9a:	b2ad      	uxth	r5, r5
 801ba9c:	f10c 0401 	add.w	r4, ip, #1
 801baa0:	f105 0a01 	add.w	sl, r5, #1
 801baa4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801baa8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801baac:	b2b6      	uxth	r6, r6
 801baae:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bab2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bab6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801baba:	f106 0a01 	add.w	sl, r6, #1
 801babe:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bac2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bac6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801baca:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bace:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801bad2:	e7ae      	b.n	801ba32 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801bad4:	b005      	add	sp, #20
 801bad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bada <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bade:	b085      	sub	sp, #20
 801bae0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bae2:	9100      	str	r1, [sp, #0]
 801bae4:	9203      	str	r2, [sp, #12]
 801bae6:	6841      	ldr	r1, [r0, #4]
 801bae8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801baec:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801baf0:	9201      	str	r2, [sp, #4]
 801baf2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801baf6:	fb01 2404 	mla	r4, r1, r4, r2
 801bafa:	6802      	ldr	r2, [r0, #0]
 801bafc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bb00:	f8de 2000 	ldr.w	r2, [lr]
 801bb04:	9202      	str	r2, [sp, #8]
 801bb06:	9a01      	ldr	r2, [sp, #4]
 801bb08:	43d6      	mvns	r6, r2
 801bb0a:	b2f6      	uxtb	r6, r6
 801bb0c:	9a00      	ldr	r2, [sp, #0]
 801bb0e:	2a00      	cmp	r2, #0
 801bb10:	dc03      	bgt.n	801bb1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801bb12:	9a03      	ldr	r2, [sp, #12]
 801bb14:	2a00      	cmp	r2, #0
 801bb16:	f340 8124 	ble.w	801bd62 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801bb1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bb1c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801bb20:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bb24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bb26:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801bb2a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	dd0e      	ble.n	801bb50 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bb32:	1408      	asrs	r0, r1, #16
 801bb34:	d405      	bmi.n	801bb42 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bb36:	4560      	cmp	r0, ip
 801bb38:	da03      	bge.n	801bb42 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bb3a:	1410      	asrs	r0, r2, #16
 801bb3c:	d401      	bmi.n	801bb42 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bb3e:	42b8      	cmp	r0, r7
 801bb40:	db07      	blt.n	801bb52 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bb42:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bb44:	3b01      	subs	r3, #1
 801bb46:	4401      	add	r1, r0
 801bb48:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bb4a:	3402      	adds	r4, #2
 801bb4c:	4402      	add	r2, r0
 801bb4e:	e7ee      	b.n	801bb2e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801bb50:	d06e      	beq.n	801bc30 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801bb52:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bb54:	1e58      	subs	r0, r3, #1
 801bb56:	fb05 1500 	mla	r5, r5, r0, r1
 801bb5a:	142d      	asrs	r5, r5, #16
 801bb5c:	d45c      	bmi.n	801bc18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bb5e:	4565      	cmp	r5, ip
 801bb60:	da5a      	bge.n	801bc18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bb62:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bb64:	fb05 2000 	mla	r0, r5, r0, r2
 801bb68:	1400      	asrs	r0, r0, #16
 801bb6a:	d455      	bmi.n	801bc18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bb6c:	42b8      	cmp	r0, r7
 801bb6e:	da53      	bge.n	801bc18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bb70:	4699      	mov	r9, r3
 801bb72:	46a2      	mov	sl, r4
 801bb74:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801bb78:	f1b9 0f00 	cmp.w	r9, #0
 801bb7c:	dd54      	ble.n	801bc28 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bb7e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801bb82:	140d      	asrs	r5, r1, #16
 801bb84:	1410      	asrs	r0, r2, #16
 801bb86:	fb07 5000 	mla	r0, r7, r0, r5
 801bb8a:	9d02      	ldr	r5, [sp, #8]
 801bb8c:	f109 39ff 	add.w	r9, r9, #4294967295
 801bb90:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801bb94:	f8ba 5000 	ldrh.w	r5, [sl]
 801bb98:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801bb9c:	122f      	asrs	r7, r5, #8
 801bb9e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bba2:	fb17 f706 	smulbb	r7, r7, r6
 801bba6:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801bbaa:	00ed      	lsls	r5, r5, #3
 801bbac:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801bbb0:	b2ed      	uxtb	r5, r5
 801bbb2:	fb18 f806 	smulbb	r8, r8, r6
 801bbb6:	fb15 f506 	smulbb	r5, r5, r6
 801bbba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bbbe:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801bbc2:	10c7      	asrs	r7, r0, #3
 801bbc4:	00c0      	lsls	r0, r0, #3
 801bbc6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bbca:	b2c0      	uxtb	r0, r0
 801bbcc:	fb07 870b 	mla	r7, r7, fp, r8
 801bbd0:	fb00 500b 	mla	r0, r0, fp, r5
 801bbd4:	fa1f fc8c 	uxth.w	ip, ip
 801bbd8:	b280      	uxth	r0, r0
 801bbda:	b2bf      	uxth	r7, r7
 801bbdc:	f10c 0501 	add.w	r5, ip, #1
 801bbe0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bbe4:	f107 0801 	add.w	r8, r7, #1
 801bbe8:	1c45      	adds	r5, r0, #1
 801bbea:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801bbee:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801bbf2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bbf4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bbf8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bbfc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801bc00:	ea45 0c0c 	orr.w	ip, r5, ip
 801bc04:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801bc08:	4401      	add	r1, r0
 801bc0a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bc0c:	ea4c 0c08 	orr.w	ip, ip, r8
 801bc10:	f82a cb02 	strh.w	ip, [sl], #2
 801bc14:	4402      	add	r2, r0
 801bc16:	e7af      	b.n	801bb78 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bc18:	f04f 0800 	mov.w	r8, #0
 801bc1c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801bc20:	eb03 0008 	add.w	r0, r3, r8
 801bc24:	2800      	cmp	r0, #0
 801bc26:	dc41      	bgt.n	801bcac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801bc28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc2c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bc30:	9b00      	ldr	r3, [sp, #0]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	f340 8095 	ble.w	801bd62 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801bc38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc44:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bc48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bc4c:	eef0 6a62 	vmov.f32	s13, s5
 801bc50:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc54:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bc58:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bc5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bc64:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801bc68:	eef0 6a43 	vmov.f32	s13, s6
 801bc6c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bc70:	ee12 2a90 	vmov	r2, s5
 801bc74:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bc78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc82:	ee13 2a10 	vmov	r2, s6
 801bc86:	9311      	str	r3, [sp, #68]	; 0x44
 801bc88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc8a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801bc8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc92:	9312      	str	r3, [sp, #72]	; 0x48
 801bc94:	9b00      	ldr	r3, [sp, #0]
 801bc96:	9a03      	ldr	r2, [sp, #12]
 801bc98:	3b01      	subs	r3, #1
 801bc9a:	9300      	str	r3, [sp, #0]
 801bc9c:	eeb0 3a67 	vmov.f32	s6, s15
 801bca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bca2:	eef0 2a47 	vmov.f32	s5, s14
 801bca6:	bf08      	it	eq
 801bca8:	4613      	moveq	r3, r2
 801bcaa:	e72f      	b.n	801bb0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801bcac:	140f      	asrs	r7, r1, #16
 801bcae:	d451      	bmi.n	801bd54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801bcb0:	f8de 5008 	ldr.w	r5, [lr, #8]
 801bcb4:	42bd      	cmp	r5, r7
 801bcb6:	dd4d      	ble.n	801bd54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801bcb8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bcbc:	d44a      	bmi.n	801bd54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801bcbe:	f8de 000c 	ldr.w	r0, [lr, #12]
 801bcc2:	4560      	cmp	r0, ip
 801bcc4:	dd46      	ble.n	801bd54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801bcc6:	b22d      	sxth	r5, r5
 801bcc8:	fb0c 7505 	mla	r5, ip, r5, r7
 801bccc:	9802      	ldr	r0, [sp, #8]
 801bcce:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801bcd2:	f06f 0501 	mvn.w	r5, #1
 801bcd6:	fb05 fb08 	mul.w	fp, r5, r8
 801bcda:	f834 500b 	ldrh.w	r5, [r4, fp]
 801bcde:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801bce2:	122f      	asrs	r7, r5, #8
 801bce4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bce8:	fb17 f706 	smulbb	r7, r7, r6
 801bcec:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801bcf0:	00ed      	lsls	r5, r5, #3
 801bcf2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801bcf6:	b2ed      	uxtb	r5, r5
 801bcf8:	fb19 f906 	smulbb	r9, r9, r6
 801bcfc:	fb15 f506 	smulbb	r5, r5, r6
 801bd00:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bd04:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801bd08:	10c7      	asrs	r7, r0, #3
 801bd0a:	00c0      	lsls	r0, r0, #3
 801bd0c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bd10:	b2c0      	uxtb	r0, r0
 801bd12:	fb07 970a 	mla	r7, r7, sl, r9
 801bd16:	fb00 500a 	mla	r0, r0, sl, r5
 801bd1a:	fa1f fc8c 	uxth.w	ip, ip
 801bd1e:	b2bf      	uxth	r7, r7
 801bd20:	b280      	uxth	r0, r0
 801bd22:	f10c 0501 	add.w	r5, ip, #1
 801bd26:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bd2a:	f107 0901 	add.w	r9, r7, #1
 801bd2e:	1c45      	adds	r5, r0, #1
 801bd30:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801bd34:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801bd38:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bd3c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bd40:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bd44:	ea45 0c0c 	orr.w	ip, r5, ip
 801bd48:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bd4c:	ea4c 0c09 	orr.w	ip, ip, r9
 801bd50:	f824 c00b 	strh.w	ip, [r4, fp]
 801bd54:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bd56:	f108 38ff 	add.w	r8, r8, #4294967295
 801bd5a:	4401      	add	r1, r0
 801bd5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bd5e:	4402      	add	r2, r0
 801bd60:	e75e      	b.n	801bc20 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bd62:	b005      	add	sp, #20
 801bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bd68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd70:	b085      	sub	sp, #20
 801bd72:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bd74:	4693      	mov	fp, r2
 801bd76:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bd7a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801bd7e:	6870      	ldr	r0, [r6, #4]
 801bd80:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801bd82:	fb00 2404 	mla	r4, r0, r4, r2
 801bd86:	6832      	ldr	r2, [r6, #0]
 801bd88:	9101      	str	r1, [sp, #4]
 801bd8a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bd8e:	682a      	ldr	r2, [r5, #0]
 801bd90:	9202      	str	r2, [sp, #8]
 801bd92:	9a01      	ldr	r2, [sp, #4]
 801bd94:	2a00      	cmp	r2, #0
 801bd96:	dc03      	bgt.n	801bda0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801bd98:	f1bb 0f00 	cmp.w	fp, #0
 801bd9c:	f340 809a 	ble.w	801bed4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801bda0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bda2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801bda6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bdaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bdac:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801bdb0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	dd0c      	ble.n	801bdd2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bdb8:	1406      	asrs	r6, r0, #16
 801bdba:	d405      	bmi.n	801bdc8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bdbc:	454e      	cmp	r6, r9
 801bdbe:	da03      	bge.n	801bdc8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bdc0:	1416      	asrs	r6, r2, #16
 801bdc2:	d401      	bmi.n	801bdc8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bdc4:	4546      	cmp	r6, r8
 801bdc6:	db05      	blt.n	801bdd4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bdc8:	4470      	add	r0, lr
 801bdca:	4462      	add	r2, ip
 801bdcc:	3b01      	subs	r3, #1
 801bdce:	3402      	adds	r4, #2
 801bdd0:	e7f0      	b.n	801bdb4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801bdd2:	d00f      	beq.n	801bdf4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801bdd4:	1e5e      	subs	r6, r3, #1
 801bdd6:	fb0e 0706 	mla	r7, lr, r6, r0
 801bdda:	143f      	asrs	r7, r7, #16
 801bddc:	d541      	bpl.n	801be62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801bdde:	4698      	mov	r8, r3
 801bde0:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801bde4:	9603      	str	r6, [sp, #12]
 801bde6:	f1b8 0f00 	cmp.w	r8, #0
 801bdea:	dc56      	bgt.n	801be9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801bdec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bdf0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bdf4:	9b01      	ldr	r3, [sp, #4]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	dd6c      	ble.n	801bed4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801bdfa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bdfe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be02:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801be06:	eeb0 6a62 	vmov.f32	s12, s5
 801be0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be16:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be1e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801be22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be26:	eeb0 6a43 	vmov.f32	s12, s6
 801be2a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be2e:	ee12 2a90 	vmov	r2, s5
 801be32:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be3c:	fb92 fef3 	sdiv	lr, r2, r3
 801be40:	ee13 2a10 	vmov	r2, s6
 801be44:	fb92 fcf3 	sdiv	ip, r2, r3
 801be48:	9b01      	ldr	r3, [sp, #4]
 801be4a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801be4e:	3b01      	subs	r3, #1
 801be50:	9301      	str	r3, [sp, #4]
 801be52:	eeb0 3a67 	vmov.f32	s6, s15
 801be56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be58:	eef0 2a47 	vmov.f32	s5, s14
 801be5c:	bf08      	it	eq
 801be5e:	465b      	moveq	r3, fp
 801be60:	e797      	b.n	801bd92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801be62:	454f      	cmp	r7, r9
 801be64:	dabb      	bge.n	801bdde <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801be66:	fb0c 2606 	mla	r6, ip, r6, r2
 801be6a:	1436      	asrs	r6, r6, #16
 801be6c:	d4b7      	bmi.n	801bdde <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801be6e:	4546      	cmp	r6, r8
 801be70:	dab5      	bge.n	801bdde <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801be72:	461e      	mov	r6, r3
 801be74:	46a0      	mov	r8, r4
 801be76:	2e00      	cmp	r6, #0
 801be78:	ddb8      	ble.n	801bdec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801be7a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801be7e:	1417      	asrs	r7, r2, #16
 801be80:	ea4f 4920 	mov.w	r9, r0, asr #16
 801be84:	fb0a 9707 	mla	r7, sl, r7, r9
 801be88:	9902      	ldr	r1, [sp, #8]
 801be8a:	4470      	add	r0, lr
 801be8c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801be90:	4462      	add	r2, ip
 801be92:	f828 7b02 	strh.w	r7, [r8], #2
 801be96:	3e01      	subs	r6, #1
 801be98:	e7ed      	b.n	801be76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801be9a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801be9e:	d414      	bmi.n	801beca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801bea0:	68ae      	ldr	r6, [r5, #8]
 801bea2:	454e      	cmp	r6, r9
 801bea4:	dd11      	ble.n	801beca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801bea6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801beaa:	d40e      	bmi.n	801beca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801beac:	68ef      	ldr	r7, [r5, #12]
 801beae:	4557      	cmp	r7, sl
 801beb0:	dd0b      	ble.n	801beca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801beb2:	f06f 0101 	mvn.w	r1, #1
 801beb6:	b236      	sxth	r6, r6
 801beb8:	fb0a 9606 	mla	r6, sl, r6, r9
 801bebc:	9f02      	ldr	r7, [sp, #8]
 801bebe:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801bec2:	fb01 f608 	mul.w	r6, r1, r8
 801bec6:	9903      	ldr	r1, [sp, #12]
 801bec8:	538f      	strh	r7, [r1, r6]
 801beca:	4470      	add	r0, lr
 801becc:	4462      	add	r2, ip
 801bece:	f108 38ff 	add.w	r8, r8, #4294967295
 801bed2:	e788      	b.n	801bde6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bed4:	b005      	add	sp, #20
 801bed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801beda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801beda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bee2:	b087      	sub	sp, #28
 801bee4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bee6:	468b      	mov	fp, r1
 801bee8:	9203      	str	r2, [sp, #12]
 801beea:	6841      	ldr	r1, [r0, #4]
 801beec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bef0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801bef4:	9204      	str	r2, [sp, #16]
 801bef6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801befa:	fb01 2505 	mla	r5, r1, r5, r2
 801befe:	6802      	ldr	r2, [r0, #0]
 801bf00:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801bf04:	f8d9 2000 	ldr.w	r2, [r9]
 801bf08:	9201      	str	r2, [sp, #4]
 801bf0a:	f1bb 0f00 	cmp.w	fp, #0
 801bf0e:	dc03      	bgt.n	801bf18 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bf10:	9a03      	ldr	r2, [sp, #12]
 801bf12:	2a00      	cmp	r2, #0
 801bf14:	f340 8159 	ble.w	801c1ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801bf18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf1a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801bf1e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bf22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bf24:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801bf28:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	dd0e      	ble.n	801bf4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bf30:	1402      	asrs	r2, r0, #16
 801bf32:	d405      	bmi.n	801bf40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf34:	42ba      	cmp	r2, r7
 801bf36:	da03      	bge.n	801bf40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf38:	140a      	asrs	r2, r1, #16
 801bf3a:	d401      	bmi.n	801bf40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf3c:	42b2      	cmp	r2, r6
 801bf3e:	db07      	blt.n	801bf50 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bf40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bf42:	3b01      	subs	r3, #1
 801bf44:	4410      	add	r0, r2
 801bf46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bf48:	3502      	adds	r5, #2
 801bf4a:	4411      	add	r1, r2
 801bf4c:	e7ee      	b.n	801bf2c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bf4e:	d017      	beq.n	801bf80 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801bf50:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bf52:	1e5a      	subs	r2, r3, #1
 801bf54:	fb04 0402 	mla	r4, r4, r2, r0
 801bf58:	1424      	asrs	r4, r4, #16
 801bf5a:	d409      	bmi.n	801bf70 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bf5c:	42bc      	cmp	r4, r7
 801bf5e:	da07      	bge.n	801bf70 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bf60:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf62:	fb04 1202 	mla	r2, r4, r2, r1
 801bf66:	1412      	asrs	r2, r2, #16
 801bf68:	d402      	bmi.n	801bf70 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bf6a:	42b2      	cmp	r2, r6
 801bf6c:	f2c0 80bf 	blt.w	801c0ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801bf70:	2700      	movs	r7, #0
 801bf72:	19da      	adds	r2, r3, r7
 801bf74:	2a00      	cmp	r2, #0
 801bf76:	dc3e      	bgt.n	801bff6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bf78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf7c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801bf80:	f1bb 0f00 	cmp.w	fp, #0
 801bf84:	f340 8121 	ble.w	801c1ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801bf88:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf90:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf98:	eeb0 6a62 	vmov.f32	s12, s5
 801bf9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bfa0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfa4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bfa8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bfac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfb0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bfb4:	eeb0 6a43 	vmov.f32	s12, s6
 801bfb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bfbc:	ee12 2a90 	vmov	r2, s5
 801bfc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bfc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bfc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bfca:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfce:	ee13 2a10 	vmov	r2, s6
 801bfd2:	9313      	str	r3, [sp, #76]	; 0x4c
 801bfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bfd6:	f1bb 0b01 	subs.w	fp, fp, #1
 801bfda:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfde:	9a03      	ldr	r2, [sp, #12]
 801bfe0:	9314      	str	r3, [sp, #80]	; 0x50
 801bfe2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bfe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bfe8:	eeb0 3a67 	vmov.f32	s6, s15
 801bfec:	bf08      	it	eq
 801bfee:	4613      	moveq	r3, r2
 801bff0:	eef0 2a47 	vmov.f32	s5, s14
 801bff4:	e789      	b.n	801bf0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801bff6:	1406      	asrs	r6, r0, #16
 801bff8:	d42d      	bmi.n	801c056 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bffa:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801bffe:	42b4      	cmp	r4, r6
 801c000:	dd29      	ble.n	801c056 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c002:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801c006:	d426      	bmi.n	801c056 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c008:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c00c:	4562      	cmp	r2, ip
 801c00e:	dd22      	ble.n	801c056 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c010:	b224      	sxth	r4, r4
 801c012:	fb0c 6404 	mla	r4, ip, r4, r6
 801c016:	9a01      	ldr	r2, [sp, #4]
 801c018:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801c01c:	0e22      	lsrs	r2, r4, #24
 801c01e:	d01a      	beq.n	801c056 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c020:	9e04      	ldr	r6, [sp, #16]
 801c022:	4372      	muls	r2, r6
 801c024:	1c56      	adds	r6, r2, #1
 801c026:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c02a:	1212      	asrs	r2, r2, #8
 801c02c:	0a26      	lsrs	r6, r4, #8
 801c02e:	2aff      	cmp	r2, #255	; 0xff
 801c030:	9605      	str	r6, [sp, #20]
 801c032:	d116      	bne.n	801c062 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801c034:	f06f 0201 	mvn.w	r2, #1
 801c038:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c03c:	fb02 fc07 	mul.w	ip, r2, r7
 801c040:	0962      	lsrs	r2, r4, #5
 801c042:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c046:	f026 0607 	bic.w	r6, r6, #7
 801c04a:	4316      	orrs	r6, r2
 801c04c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c050:	4326      	orrs	r6, r4
 801c052:	f825 600c 	strh.w	r6, [r5, ip]
 801c056:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c058:	3f01      	subs	r7, #1
 801c05a:	4410      	add	r0, r2
 801c05c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c05e:	4411      	add	r1, r2
 801c060:	e787      	b.n	801bf72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c062:	f06f 0601 	mvn.w	r6, #1
 801c066:	fa1f fa82 	uxth.w	sl, r2
 801c06a:	43d2      	mvns	r2, r2
 801c06c:	437e      	muls	r6, r7
 801c06e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801c072:	f835 8006 	ldrh.w	r8, [r5, r6]
 801c076:	fb1c fc0a 	smulbb	ip, ip, sl
 801c07a:	b2e4      	uxtb	r4, r4
 801c07c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801c080:	fb14 f40a 	smulbb	r4, r4, sl
 801c084:	b2d2      	uxtb	r2, r2
 801c086:	9602      	str	r6, [sp, #8]
 801c088:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c08c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801c090:	fb0e ce02 	mla	lr, lr, r2, ip
 801c094:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801c098:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c09c:	fb16 f60a 	smulbb	r6, r6, sl
 801c0a0:	fa5f f888 	uxtb.w	r8, r8
 801c0a4:	fb08 4402 	mla	r4, r8, r2, r4
 801c0a8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c0ac:	fb0c 6c02 	mla	ip, ip, r2, r6
 801c0b0:	fa1f fe8e 	uxth.w	lr, lr
 801c0b4:	b2a4      	uxth	r4, r4
 801c0b6:	f10e 0201 	add.w	r2, lr, #1
 801c0ba:	1c66      	adds	r6, r4, #1
 801c0bc:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c0c0:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801c0c4:	fa1f fc8c 	uxth.w	ip, ip
 801c0c8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c0cc:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801c0d0:	ea46 0e0e 	orr.w	lr, r6, lr
 801c0d4:	f10c 0601 	add.w	r6, ip, #1
 801c0d8:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801c0dc:	0976      	lsrs	r6, r6, #5
 801c0de:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c0e2:	9a02      	ldr	r2, [sp, #8]
 801c0e4:	ea4e 0e06 	orr.w	lr, lr, r6
 801c0e8:	f825 e002 	strh.w	lr, [r5, r2]
 801c0ec:	e7b3      	b.n	801c056 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c0ee:	f04f 0800 	mov.w	r8, #0
 801c0f2:	eba3 0208 	sub.w	r2, r3, r8
 801c0f6:	2a00      	cmp	r2, #0
 801c0f8:	f77f af3e 	ble.w	801bf78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c0fc:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801c100:	1404      	asrs	r4, r0, #16
 801c102:	140a      	asrs	r2, r1, #16
 801c104:	fb06 4202 	mla	r2, r6, r2, r4
 801c108:	9c01      	ldr	r4, [sp, #4]
 801c10a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801c10e:	0e22      	lsrs	r2, r4, #24
 801c110:	d016      	beq.n	801c140 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801c112:	9e04      	ldr	r6, [sp, #16]
 801c114:	4372      	muls	r2, r6
 801c116:	1c56      	adds	r6, r2, #1
 801c118:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c11c:	1212      	asrs	r2, r2, #8
 801c11e:	2aff      	cmp	r2, #255	; 0xff
 801c120:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801c124:	d113      	bne.n	801c14e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801c126:	0962      	lsrs	r2, r4, #5
 801c128:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c12c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c130:	f026 0607 	bic.w	r6, r6, #7
 801c134:	4316      	orrs	r6, r2
 801c136:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c13a:	4326      	orrs	r6, r4
 801c13c:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801c140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c142:	f108 0801 	add.w	r8, r8, #1
 801c146:	4410      	add	r0, r2
 801c148:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c14a:	4411      	add	r1, r2
 801c14c:	e7d1      	b.n	801c0f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801c14e:	fa1f fa82 	uxth.w	sl, r2
 801c152:	43d2      	mvns	r2, r2
 801c154:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801c158:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801c15c:	fb17 f70a 	smulbb	r7, r7, sl
 801c160:	b2e4      	uxtb	r4, r4
 801c162:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c166:	fb14 f40a 	smulbb	r4, r4, sl
 801c16a:	b2d2      	uxtb	r2, r2
 801c16c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c170:	fb0c 7c02 	mla	ip, ip, r2, r7
 801c174:	b2f6      	uxtb	r6, r6
 801c176:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c17a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c17e:	fb16 f60a 	smulbb	r6, r6, sl
 801c182:	fa5f fe8e 	uxtb.w	lr, lr
 801c186:	fb0e 4402 	mla	r4, lr, r2, r4
 801c18a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c18e:	fb07 6702 	mla	r7, r7, r2, r6
 801c192:	fa1f fc8c 	uxth.w	ip, ip
 801c196:	b2a4      	uxth	r4, r4
 801c198:	f10c 0201 	add.w	r2, ip, #1
 801c19c:	1c66      	adds	r6, r4, #1
 801c19e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c1a2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801c1a6:	b2bf      	uxth	r7, r7
 801c1a8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c1ac:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c1b0:	ea46 0c0c 	orr.w	ip, r6, ip
 801c1b4:	1c7e      	adds	r6, r7, #1
 801c1b6:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801c1ba:	0976      	lsrs	r6, r6, #5
 801c1bc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c1c0:	ea4c 0c06 	orr.w	ip, ip, r6
 801c1c4:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801c1c8:	e7ba      	b.n	801c140 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801c1ca:	b007      	add	sp, #28
 801c1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c1d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c1d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1d8:	b085      	sub	sp, #20
 801c1da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c1dc:	468b      	mov	fp, r1
 801c1de:	6841      	ldr	r1, [r0, #4]
 801c1e0:	9203      	str	r2, [sp, #12]
 801c1e2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c1e6:	fb01 2404 	mla	r4, r1, r4, r2
 801c1ea:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801c1ee:	6802      	ldr	r2, [r0, #0]
 801c1f0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c1f4:	f8d8 2000 	ldr.w	r2, [r8]
 801c1f8:	9201      	str	r2, [sp, #4]
 801c1fa:	f1bb 0f00 	cmp.w	fp, #0
 801c1fe:	dc03      	bgt.n	801c208 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c200:	9a03      	ldr	r2, [sp, #12]
 801c202:	2a00      	cmp	r2, #0
 801c204:	f340 814f 	ble.w	801c4a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801c208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c20a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801c20e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c212:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c214:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801c218:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	dd0e      	ble.n	801c23e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c220:	1408      	asrs	r0, r1, #16
 801c222:	d405      	bmi.n	801c230 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c224:	42b8      	cmp	r0, r7
 801c226:	da03      	bge.n	801c230 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c228:	1410      	asrs	r0, r2, #16
 801c22a:	d401      	bmi.n	801c230 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c22c:	42b0      	cmp	r0, r6
 801c22e:	db07      	blt.n	801c240 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c230:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c232:	3b01      	subs	r3, #1
 801c234:	4401      	add	r1, r0
 801c236:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c238:	3402      	adds	r4, #2
 801c23a:	4402      	add	r2, r0
 801c23c:	e7ee      	b.n	801c21c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c23e:	d017      	beq.n	801c270 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c240:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c242:	1e58      	subs	r0, r3, #1
 801c244:	fb05 1500 	mla	r5, r5, r0, r1
 801c248:	142d      	asrs	r5, r5, #16
 801c24a:	d409      	bmi.n	801c260 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c24c:	42bd      	cmp	r5, r7
 801c24e:	da07      	bge.n	801c260 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c250:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c252:	fb05 2000 	mla	r0, r5, r0, r2
 801c256:	1400      	asrs	r0, r0, #16
 801c258:	d402      	bmi.n	801c260 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c25a:	42b0      	cmp	r0, r6
 801c25c:	f2c0 80ba 	blt.w	801c3d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c260:	2600      	movs	r6, #0
 801c262:	1998      	adds	r0, r3, r6
 801c264:	2800      	cmp	r0, #0
 801c266:	dc3e      	bgt.n	801c2e6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c268:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c26c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c270:	f1bb 0f00 	cmp.w	fp, #0
 801c274:	f340 8117 	ble.w	801c4a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801c278:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c27c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c280:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c284:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c288:	eeb0 6a62 	vmov.f32	s12, s5
 801c28c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c290:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c294:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c298:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c29c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c2a0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c2a4:	eeb0 6a43 	vmov.f32	s12, s6
 801c2a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c2ac:	ee12 2a90 	vmov	r2, s5
 801c2b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c2b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c2ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2be:	ee13 2a10 	vmov	r2, s6
 801c2c2:	9311      	str	r3, [sp, #68]	; 0x44
 801c2c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2c6:	f1bb 0b01 	subs.w	fp, fp, #1
 801c2ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2ce:	9a03      	ldr	r2, [sp, #12]
 801c2d0:	9312      	str	r3, [sp, #72]	; 0x48
 801c2d2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c2d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2d8:	eeb0 3a67 	vmov.f32	s6, s15
 801c2dc:	bf08      	it	eq
 801c2de:	4613      	moveq	r3, r2
 801c2e0:	eef0 2a47 	vmov.f32	s5, s14
 801c2e4:	e789      	b.n	801c1fa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801c2e6:	140f      	asrs	r7, r1, #16
 801c2e8:	d424      	bmi.n	801c334 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c2ea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c2ee:	42bd      	cmp	r5, r7
 801c2f0:	dd20      	ble.n	801c334 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c2f2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c2f6:	d41d      	bmi.n	801c334 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c2f8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801c2fc:	4560      	cmp	r0, ip
 801c2fe:	dd19      	ble.n	801c334 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c300:	b22d      	sxth	r5, r5
 801c302:	fb0c 7505 	mla	r5, ip, r5, r7
 801c306:	9801      	ldr	r0, [sp, #4]
 801c308:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c30c:	0e07      	lsrs	r7, r0, #24
 801c30e:	2fff      	cmp	r7, #255	; 0xff
 801c310:	d116      	bne.n	801c340 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c312:	f06f 0501 	mvn.w	r5, #1
 801c316:	fb05 f706 	mul.w	r7, r5, r6
 801c31a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801c31e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801c322:	0945      	lsrs	r5, r0, #5
 801c324:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c328:	ea4c 0505 	orr.w	r5, ip, r5
 801c32c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c330:	4305      	orrs	r5, r0
 801c332:	53e5      	strh	r5, [r4, r7]
 801c334:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c336:	3e01      	subs	r6, #1
 801c338:	4401      	add	r1, r0
 801c33a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c33c:	4402      	add	r2, r0
 801c33e:	e790      	b.n	801c262 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c340:	b2fd      	uxtb	r5, r7
 801c342:	2f00      	cmp	r7, #0
 801c344:	d0f6      	beq.n	801c334 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c346:	f06f 0701 	mvn.w	r7, #1
 801c34a:	fa1f f985 	uxth.w	r9, r5
 801c34e:	43ed      	mvns	r5, r5
 801c350:	4377      	muls	r7, r6
 801c352:	f834 e007 	ldrh.w	lr, [r4, r7]
 801c356:	9702      	str	r7, [sp, #8]
 801c358:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c35c:	fb17 f709 	smulbb	r7, r7, r9
 801c360:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c364:	b2c0      	uxtb	r0, r0
 801c366:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c36a:	fb10 f009 	smulbb	r0, r0, r9
 801c36e:	b2ed      	uxtb	r5, r5
 801c370:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c374:	fb0c 7c05 	mla	ip, ip, r5, r7
 801c378:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c37c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c380:	fb1a fa09 	smulbb	sl, sl, r9
 801c384:	fa5f fe8e 	uxtb.w	lr, lr
 801c388:	fb0e 0005 	mla	r0, lr, r5, r0
 801c38c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c390:	fb07 a705 	mla	r7, r7, r5, sl
 801c394:	b280      	uxth	r0, r0
 801c396:	fa1f fc8c 	uxth.w	ip, ip
 801c39a:	f100 0a01 	add.w	sl, r0, #1
 801c39e:	f10c 0501 	add.w	r5, ip, #1
 801c3a2:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c3a6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c3aa:	b2bf      	uxth	r7, r7
 801c3ac:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c3b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c3b4:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c3b8:	f107 0a01 	add.w	sl, r7, #1
 801c3bc:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c3c0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c3c4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c3c8:	9802      	ldr	r0, [sp, #8]
 801c3ca:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c3ce:	f824 c000 	strh.w	ip, [r4, r0]
 801c3d2:	e7af      	b.n	801c334 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c3d4:	f04f 0e00 	mov.w	lr, #0
 801c3d8:	eba3 000e 	sub.w	r0, r3, lr
 801c3dc:	2800      	cmp	r0, #0
 801c3de:	f77f af43 	ble.w	801c268 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c3e2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801c3e6:	140d      	asrs	r5, r1, #16
 801c3e8:	1410      	asrs	r0, r2, #16
 801c3ea:	fb06 5000 	mla	r0, r6, r0, r5
 801c3ee:	9d01      	ldr	r5, [sp, #4]
 801c3f0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801c3f4:	0e2e      	lsrs	r6, r5, #24
 801c3f6:	2eff      	cmp	r6, #255	; 0xff
 801c3f8:	d112      	bne.n	801c420 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801c3fa:	482c      	ldr	r0, [pc, #176]	; (801c4ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801c3fc:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801c400:	0968      	lsrs	r0, r5, #5
 801c402:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c406:	4330      	orrs	r0, r6
 801c408:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c40c:	4328      	orrs	r0, r5
 801c40e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801c412:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c414:	f10e 0e01 	add.w	lr, lr, #1
 801c418:	4401      	add	r1, r0
 801c41a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c41c:	4402      	add	r2, r0
 801c41e:	e7db      	b.n	801c3d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c420:	b2f0      	uxtb	r0, r6
 801c422:	2e00      	cmp	r6, #0
 801c424:	d0f5      	beq.n	801c412 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801c426:	fa1f f980 	uxth.w	r9, r0
 801c42a:	43c0      	mvns	r0, r0
 801c42c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c430:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801c434:	fb16 f609 	smulbb	r6, r6, r9
 801c438:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c43c:	b2ed      	uxtb	r5, r5
 801c43e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c442:	fb15 f509 	smulbb	r5, r5, r9
 801c446:	b2c0      	uxtb	r0, r0
 801c448:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c44c:	fb07 6700 	mla	r7, r7, r0, r6
 801c450:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c454:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c458:	fb1a fa09 	smulbb	sl, sl, r9
 801c45c:	fa5f fc8c 	uxtb.w	ip, ip
 801c460:	fb0c 5500 	mla	r5, ip, r0, r5
 801c464:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c468:	fb06 a600 	mla	r6, r6, r0, sl
 801c46c:	b2bf      	uxth	r7, r7
 801c46e:	b2ad      	uxth	r5, r5
 801c470:	1c78      	adds	r0, r7, #1
 801c472:	f105 0a01 	add.w	sl, r5, #1
 801c476:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801c47a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c47e:	b2b6      	uxth	r6, r6
 801c480:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c484:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c488:	ea4a 0707 	orr.w	r7, sl, r7
 801c48c:	f106 0a01 	add.w	sl, r6, #1
 801c490:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c494:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c498:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c49c:	ea47 070a 	orr.w	r7, r7, sl
 801c4a0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801c4a4:	e7b5      	b.n	801c412 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801c4a6:	b005      	add	sp, #20
 801c4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4ac:	fffff800 	.word	0xfffff800

0801c4b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c4b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4b8:	b087      	sub	sp, #28
 801c4ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c4bc:	468b      	mov	fp, r1
 801c4be:	9203      	str	r2, [sp, #12]
 801c4c0:	6841      	ldr	r1, [r0, #4]
 801c4c2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c4c6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801c4ca:	9204      	str	r2, [sp, #16]
 801c4cc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c4d0:	fb01 2404 	mla	r4, r1, r4, r2
 801c4d4:	6802      	ldr	r2, [r0, #0]
 801c4d6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c4da:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801c4de:	3201      	adds	r2, #1
 801c4e0:	f022 0201 	bic.w	r2, r2, #1
 801c4e4:	9200      	str	r2, [sp, #0]
 801c4e6:	f8d9 2000 	ldr.w	r2, [r9]
 801c4ea:	9201      	str	r2, [sp, #4]
 801c4ec:	f1bb 0f00 	cmp.w	fp, #0
 801c4f0:	dc03      	bgt.n	801c4fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c4f2:	9a03      	ldr	r2, [sp, #12]
 801c4f4:	2a00      	cmp	r2, #0
 801c4f6:	f340 816a 	ble.w	801c7ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c4fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4fc:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801c500:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c506:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801c50a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c50e:	2b00      	cmp	r3, #0
 801c510:	dd0e      	ble.n	801c530 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c512:	1402      	asrs	r2, r0, #16
 801c514:	d405      	bmi.n	801c522 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c516:	42ba      	cmp	r2, r7
 801c518:	da03      	bge.n	801c522 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c51a:	140a      	asrs	r2, r1, #16
 801c51c:	d401      	bmi.n	801c522 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c51e:	42b2      	cmp	r2, r6
 801c520:	db07      	blt.n	801c532 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c522:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c524:	3b01      	subs	r3, #1
 801c526:	4410      	add	r0, r2
 801c528:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c52a:	3402      	adds	r4, #2
 801c52c:	4411      	add	r1, r2
 801c52e:	e7ee      	b.n	801c50e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c530:	d017      	beq.n	801c562 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c532:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c534:	1e5a      	subs	r2, r3, #1
 801c536:	fb05 0502 	mla	r5, r5, r2, r0
 801c53a:	142d      	asrs	r5, r5, #16
 801c53c:	d409      	bmi.n	801c552 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c53e:	42bd      	cmp	r5, r7
 801c540:	da07      	bge.n	801c552 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c542:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c544:	fb05 1202 	mla	r2, r5, r2, r1
 801c548:	1412      	asrs	r2, r2, #16
 801c54a:	d402      	bmi.n	801c552 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c54c:	42b2      	cmp	r2, r6
 801c54e:	f2c0 80c8 	blt.w	801c6e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801c552:	2700      	movs	r7, #0
 801c554:	19da      	adds	r2, r3, r7
 801c556:	2a00      	cmp	r2, #0
 801c558:	dc3e      	bgt.n	801c5d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c55a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c55e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c562:	f1bb 0f00 	cmp.w	fp, #0
 801c566:	f340 8132 	ble.w	801c7ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c56a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c56e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c572:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c576:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c57a:	eeb0 6a62 	vmov.f32	s12, s5
 801c57e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c582:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c586:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c58a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c58e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c592:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c596:	eeb0 6a43 	vmov.f32	s12, s6
 801c59a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c59e:	ee12 2a90 	vmov	r2, s5
 801c5a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5b0:	ee13 2a10 	vmov	r2, s6
 801c5b4:	9313      	str	r3, [sp, #76]	; 0x4c
 801c5b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5b8:	f1bb 0b01 	subs.w	fp, fp, #1
 801c5bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5c0:	9a03      	ldr	r2, [sp, #12]
 801c5c2:	9314      	str	r3, [sp, #80]	; 0x50
 801c5c4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c5c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5ca:	eeb0 3a67 	vmov.f32	s6, s15
 801c5ce:	bf08      	it	eq
 801c5d0:	4613      	moveq	r3, r2
 801c5d2:	eef0 2a47 	vmov.f32	s5, s14
 801c5d6:	e789      	b.n	801c4ec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c5d8:	1405      	asrs	r5, r0, #16
 801c5da:	d436      	bmi.n	801c64a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c5dc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801c5e0:	42aa      	cmp	r2, r5
 801c5e2:	dd32      	ble.n	801c64a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c5e4:	140e      	asrs	r6, r1, #16
 801c5e6:	d430      	bmi.n	801c64a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c5e8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c5ec:	42b2      	cmp	r2, r6
 801c5ee:	dd2c      	ble.n	801c64a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c5f0:	9a00      	ldr	r2, [sp, #0]
 801c5f2:	fb06 5502 	mla	r5, r6, r2, r5
 801c5f6:	9e01      	ldr	r6, [sp, #4]
 801c5f8:	086a      	lsrs	r2, r5, #1
 801c5fa:	5cb2      	ldrb	r2, [r6, r2]
 801c5fc:	07ee      	lsls	r6, r5, #31
 801c5fe:	bf54      	ite	pl
 801c600:	f002 020f 	andpl.w	r2, r2, #15
 801c604:	1112      	asrmi	r2, r2, #4
 801c606:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c60a:	b2d2      	uxtb	r2, r2
 801c60c:	b1ea      	cbz	r2, 801c64a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c60e:	9d04      	ldr	r5, [sp, #16]
 801c610:	436a      	muls	r2, r5
 801c612:	1c55      	adds	r5, r2, #1
 801c614:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801c618:	4d6e      	ldr	r5, [pc, #440]	; (801c7d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801c61a:	1212      	asrs	r2, r2, #8
 801c61c:	682d      	ldr	r5, [r5, #0]
 801c61e:	2aff      	cmp	r2, #255	; 0xff
 801c620:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801c624:	9605      	str	r6, [sp, #20]
 801c626:	d116      	bne.n	801c656 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c628:	f06f 0201 	mvn.w	r2, #1
 801c62c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c630:	fb02 fc07 	mul.w	ip, r2, r7
 801c634:	096a      	lsrs	r2, r5, #5
 801c636:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c63a:	f026 0607 	bic.w	r6, r6, #7
 801c63e:	4316      	orrs	r6, r2
 801c640:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c644:	432e      	orrs	r6, r5
 801c646:	f824 600c 	strh.w	r6, [r4, ip]
 801c64a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c64c:	3f01      	subs	r7, #1
 801c64e:	4410      	add	r0, r2
 801c650:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c652:	4411      	add	r1, r2
 801c654:	e77e      	b.n	801c554 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c656:	f06f 0601 	mvn.w	r6, #1
 801c65a:	fa1f fa82 	uxth.w	sl, r2
 801c65e:	43d2      	mvns	r2, r2
 801c660:	437e      	muls	r6, r7
 801c662:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801c666:	f834 8006 	ldrh.w	r8, [r4, r6]
 801c66a:	fb1c fc0a 	smulbb	ip, ip, sl
 801c66e:	b2ed      	uxtb	r5, r5
 801c670:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801c674:	fb15 f50a 	smulbb	r5, r5, sl
 801c678:	b2d2      	uxtb	r2, r2
 801c67a:	9602      	str	r6, [sp, #8]
 801c67c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c680:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801c684:	fb0e ce02 	mla	lr, lr, r2, ip
 801c688:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801c68c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c690:	fb16 f60a 	smulbb	r6, r6, sl
 801c694:	fa5f f888 	uxtb.w	r8, r8
 801c698:	fb08 5502 	mla	r5, r8, r2, r5
 801c69c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c6a0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801c6a4:	fa1f fe8e 	uxth.w	lr, lr
 801c6a8:	b2ad      	uxth	r5, r5
 801c6aa:	f10e 0201 	add.w	r2, lr, #1
 801c6ae:	1c6e      	adds	r6, r5, #1
 801c6b0:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c6b4:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801c6b8:	fa1f fc8c 	uxth.w	ip, ip
 801c6bc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c6c0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801c6c4:	ea46 0e0e 	orr.w	lr, r6, lr
 801c6c8:	f10c 0601 	add.w	r6, ip, #1
 801c6cc:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801c6d0:	0976      	lsrs	r6, r6, #5
 801c6d2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c6d6:	9a02      	ldr	r2, [sp, #8]
 801c6d8:	ea4e 0e06 	orr.w	lr, lr, r6
 801c6dc:	f824 e002 	strh.w	lr, [r4, r2]
 801c6e0:	e7b3      	b.n	801c64a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c6e2:	f04f 0800 	mov.w	r8, #0
 801c6e6:	eba3 0208 	sub.w	r2, r3, r8
 801c6ea:	2a00      	cmp	r2, #0
 801c6ec:	f77f af35 	ble.w	801c55a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c6f0:	9e00      	ldr	r6, [sp, #0]
 801c6f2:	1402      	asrs	r2, r0, #16
 801c6f4:	140d      	asrs	r5, r1, #16
 801c6f6:	fb06 2505 	mla	r5, r6, r5, r2
 801c6fa:	9e01      	ldr	r6, [sp, #4]
 801c6fc:	086a      	lsrs	r2, r5, #1
 801c6fe:	5cb2      	ldrb	r2, [r6, r2]
 801c700:	07ed      	lsls	r5, r5, #31
 801c702:	bf54      	ite	pl
 801c704:	f002 020f 	andpl.w	r2, r2, #15
 801c708:	1112      	asrmi	r2, r2, #4
 801c70a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c70e:	b2d2      	uxtb	r2, r2
 801c710:	b1c2      	cbz	r2, 801c744 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c712:	9d04      	ldr	r5, [sp, #16]
 801c714:	436a      	muls	r2, r5
 801c716:	1c55      	adds	r5, r2, #1
 801c718:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801c71c:	4d2d      	ldr	r5, [pc, #180]	; (801c7d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801c71e:	1212      	asrs	r2, r2, #8
 801c720:	682e      	ldr	r6, [r5, #0]
 801c722:	2aff      	cmp	r2, #255	; 0xff
 801c724:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801c728:	d113      	bne.n	801c752 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c72a:	0972      	lsrs	r2, r6, #5
 801c72c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801c730:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c734:	f025 0507 	bic.w	r5, r5, #7
 801c738:	4315      	orrs	r5, r2
 801c73a:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c73e:	4335      	orrs	r5, r6
 801c740:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801c744:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c746:	f108 0801 	add.w	r8, r8, #1
 801c74a:	4410      	add	r0, r2
 801c74c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c74e:	4411      	add	r1, r2
 801c750:	e7c9      	b.n	801c6e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801c752:	fa1f fa82 	uxth.w	sl, r2
 801c756:	43d2      	mvns	r2, r2
 801c758:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801c75c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c760:	fb17 f70a 	smulbb	r7, r7, sl
 801c764:	b2f6      	uxtb	r6, r6
 801c766:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c76a:	fb16 f60a 	smulbb	r6, r6, sl
 801c76e:	b2d2      	uxtb	r2, r2
 801c770:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c774:	fb0c 7c02 	mla	ip, ip, r2, r7
 801c778:	b2ed      	uxtb	r5, r5
 801c77a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c77e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c782:	fb15 f50a 	smulbb	r5, r5, sl
 801c786:	fa5f fe8e 	uxtb.w	lr, lr
 801c78a:	fb0e 6602 	mla	r6, lr, r2, r6
 801c78e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c792:	fb07 5702 	mla	r7, r7, r2, r5
 801c796:	fa1f fc8c 	uxth.w	ip, ip
 801c79a:	b2b6      	uxth	r6, r6
 801c79c:	f10c 0201 	add.w	r2, ip, #1
 801c7a0:	1c75      	adds	r5, r6, #1
 801c7a2:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c7a6:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801c7aa:	b2bf      	uxth	r7, r7
 801c7ac:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c7b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c7b4:	ea45 0c0c 	orr.w	ip, r5, ip
 801c7b8:	1c7d      	adds	r5, r7, #1
 801c7ba:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801c7be:	096d      	lsrs	r5, r5, #5
 801c7c0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c7c4:	ea4c 0c05 	orr.w	ip, ip, r5
 801c7c8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801c7cc:	e7ba      	b.n	801c744 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c7ce:	b007      	add	sp, #28
 801c7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7d4:	2004f6d8 	.word	0x2004f6d8

0801c7d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c7d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e0:	b087      	sub	sp, #28
 801c7e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c7e4:	9101      	str	r1, [sp, #4]
 801c7e6:	6841      	ldr	r1, [r0, #4]
 801c7e8:	9205      	str	r2, [sp, #20]
 801c7ea:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c7ee:	fb01 2404 	mla	r4, r1, r4, r2
 801c7f2:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801c7f6:	6802      	ldr	r2, [r0, #0]
 801c7f8:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 801caec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801c7fc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c800:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c804:	3201      	adds	r2, #1
 801c806:	f022 0201 	bic.w	r2, r2, #1
 801c80a:	9202      	str	r2, [sp, #8]
 801c80c:	f8db 2000 	ldr.w	r2, [fp]
 801c810:	9203      	str	r2, [sp, #12]
 801c812:	9a01      	ldr	r2, [sp, #4]
 801c814:	2a00      	cmp	r2, #0
 801c816:	dc03      	bgt.n	801c820 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c818:	9a05      	ldr	r2, [sp, #20]
 801c81a:	2a00      	cmp	r2, #0
 801c81c:	f340 8162 	ble.w	801cae4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c820:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c822:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801c826:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c82a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c82c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801c830:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c834:	2b00      	cmp	r3, #0
 801c836:	dd0e      	ble.n	801c856 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c838:	1402      	asrs	r2, r0, #16
 801c83a:	d405      	bmi.n	801c848 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c83c:	42ba      	cmp	r2, r7
 801c83e:	da03      	bge.n	801c848 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c840:	140a      	asrs	r2, r1, #16
 801c842:	d401      	bmi.n	801c848 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c844:	42b2      	cmp	r2, r6
 801c846:	db07      	blt.n	801c858 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c84a:	3b01      	subs	r3, #1
 801c84c:	4410      	add	r0, r2
 801c84e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c850:	3402      	adds	r4, #2
 801c852:	4411      	add	r1, r2
 801c854:	e7ee      	b.n	801c834 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c856:	d017      	beq.n	801c888 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c858:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c85a:	1e5a      	subs	r2, r3, #1
 801c85c:	fb05 0502 	mla	r5, r5, r2, r0
 801c860:	142d      	asrs	r5, r5, #16
 801c862:	d409      	bmi.n	801c878 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c864:	42bd      	cmp	r5, r7
 801c866:	da07      	bge.n	801c878 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c868:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c86a:	fb05 1202 	mla	r2, r5, r2, r1
 801c86e:	1412      	asrs	r2, r2, #16
 801c870:	d402      	bmi.n	801c878 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c872:	42b2      	cmp	r2, r6
 801c874:	f2c0 80c3 	blt.w	801c9fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801c878:	2500      	movs	r5, #0
 801c87a:	195a      	adds	r2, r3, r5
 801c87c:	2a00      	cmp	r2, #0
 801c87e:	dc3f      	bgt.n	801c900 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c880:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c884:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c888:	9b01      	ldr	r3, [sp, #4]
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	f340 812a 	ble.w	801cae4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c890:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c894:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c898:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c89c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c8a0:	eeb0 6a62 	vmov.f32	s12, s5
 801c8a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c8a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c8ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c8b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c8b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c8b8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c8bc:	eeb0 6a43 	vmov.f32	s12, s6
 801c8c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c8c4:	ee12 2a90 	vmov	r2, s5
 801c8c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c8cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c8ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c8d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8d6:	ee13 2a10 	vmov	r2, s6
 801c8da:	9313      	str	r3, [sp, #76]	; 0x4c
 801c8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c8de:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c8e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8e6:	9314      	str	r3, [sp, #80]	; 0x50
 801c8e8:	9b01      	ldr	r3, [sp, #4]
 801c8ea:	9a05      	ldr	r2, [sp, #20]
 801c8ec:	3b01      	subs	r3, #1
 801c8ee:	9301      	str	r3, [sp, #4]
 801c8f0:	eeb0 3a67 	vmov.f32	s6, s15
 801c8f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c8f6:	eef0 2a47 	vmov.f32	s5, s14
 801c8fa:	bf08      	it	eq
 801c8fc:	4613      	moveq	r3, r2
 801c8fe:	e788      	b.n	801c812 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c900:	1406      	asrs	r6, r0, #16
 801c902:	d42c      	bmi.n	801c95e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c904:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c908:	42b2      	cmp	r2, r6
 801c90a:	dd28      	ble.n	801c95e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c90c:	140f      	asrs	r7, r1, #16
 801c90e:	d426      	bmi.n	801c95e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c910:	f8db 200c 	ldr.w	r2, [fp, #12]
 801c914:	42ba      	cmp	r2, r7
 801c916:	dd22      	ble.n	801c95e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c918:	9a02      	ldr	r2, [sp, #8]
 801c91a:	fb07 6602 	mla	r6, r7, r2, r6
 801c91e:	9f03      	ldr	r7, [sp, #12]
 801c920:	0872      	lsrs	r2, r6, #1
 801c922:	5cba      	ldrb	r2, [r7, r2]
 801c924:	07f6      	lsls	r6, r6, #31
 801c926:	bf54      	ite	pl
 801c928:	f002 020f 	andpl.w	r2, r2, #15
 801c92c:	1112      	asrmi	r2, r2, #4
 801c92e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c932:	b2d2      	uxtb	r2, r2
 801c934:	2aff      	cmp	r2, #255	; 0xff
 801c936:	d118      	bne.n	801c96a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c938:	f06f 0601 	mvn.w	r6, #1
 801c93c:	f8d8 2000 	ldr.w	r2, [r8]
 801c940:	fb06 f705 	mul.w	r7, r6, r5
 801c944:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801c948:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801c94c:	0956      	lsrs	r6, r2, #5
 801c94e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c952:	ea4c 0606 	orr.w	r6, ip, r6
 801c956:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c95a:	4316      	orrs	r6, r2
 801c95c:	53e6      	strh	r6, [r4, r7]
 801c95e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c960:	3d01      	subs	r5, #1
 801c962:	4410      	add	r0, r2
 801c964:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c966:	4411      	add	r1, r2
 801c968:	e787      	b.n	801c87a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c96a:	2a00      	cmp	r2, #0
 801c96c:	d0f7      	beq.n	801c95e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c96e:	f06f 0601 	mvn.w	r6, #1
 801c972:	fa1f f982 	uxth.w	r9, r2
 801c976:	43d2      	mvns	r2, r2
 801c978:	436e      	muls	r6, r5
 801c97a:	f8d8 c000 	ldr.w	ip, [r8]
 801c97e:	f834 e006 	ldrh.w	lr, [r4, r6]
 801c982:	9604      	str	r6, [sp, #16]
 801c984:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801c988:	fb16 f609 	smulbb	r6, r6, r9
 801c98c:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801c990:	fa5f fc8c 	uxtb.w	ip, ip
 801c994:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c998:	fb1c fc09 	smulbb	ip, ip, r9
 801c99c:	b2d2      	uxtb	r2, r2
 801c99e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c9a2:	fb07 6702 	mla	r7, r7, r2, r6
 801c9a6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c9aa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c9ae:	fb1a fa09 	smulbb	sl, sl, r9
 801c9b2:	fa5f fe8e 	uxtb.w	lr, lr
 801c9b6:	fb0e cc02 	mla	ip, lr, r2, ip
 801c9ba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c9be:	fb06 a602 	mla	r6, r6, r2, sl
 801c9c2:	b2bf      	uxth	r7, r7
 801c9c4:	fa1f fc8c 	uxth.w	ip, ip
 801c9c8:	1c7a      	adds	r2, r7, #1
 801c9ca:	f10c 0a01 	add.w	sl, ip, #1
 801c9ce:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c9d2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801c9d6:	b2b6      	uxth	r6, r6
 801c9d8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c9dc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c9e0:	ea4a 0707 	orr.w	r7, sl, r7
 801c9e4:	f106 0a01 	add.w	sl, r6, #1
 801c9e8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c9ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c9f0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c9f4:	9a04      	ldr	r2, [sp, #16]
 801c9f6:	ea47 070a 	orr.w	r7, r7, sl
 801c9fa:	52a7      	strh	r7, [r4, r2]
 801c9fc:	e7af      	b.n	801c95e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c9fe:	f04f 0e00 	mov.w	lr, #0
 801ca02:	eba3 020e 	sub.w	r2, r3, lr
 801ca06:	2a00      	cmp	r2, #0
 801ca08:	f77f af3a 	ble.w	801c880 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ca0c:	9e02      	ldr	r6, [sp, #8]
 801ca0e:	1402      	asrs	r2, r0, #16
 801ca10:	140d      	asrs	r5, r1, #16
 801ca12:	fb06 2505 	mla	r5, r6, r5, r2
 801ca16:	9e03      	ldr	r6, [sp, #12]
 801ca18:	086a      	lsrs	r2, r5, #1
 801ca1a:	5cb2      	ldrb	r2, [r6, r2]
 801ca1c:	07ed      	lsls	r5, r5, #31
 801ca1e:	bf54      	ite	pl
 801ca20:	f002 020f 	andpl.w	r2, r2, #15
 801ca24:	1112      	asrmi	r2, r2, #4
 801ca26:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ca2a:	b2d2      	uxtb	r2, r2
 801ca2c:	2aff      	cmp	r2, #255	; 0xff
 801ca2e:	d115      	bne.n	801ca5c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801ca30:	f8d8 5000 	ldr.w	r5, [r8]
 801ca34:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801ca38:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801ca3c:	096a      	lsrs	r2, r5, #5
 801ca3e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ca42:	4332      	orrs	r2, r6
 801ca44:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ca48:	432a      	orrs	r2, r5
 801ca4a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801ca4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ca50:	f10e 0e01 	add.w	lr, lr, #1
 801ca54:	4410      	add	r0, r2
 801ca56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca58:	4411      	add	r1, r2
 801ca5a:	e7d2      	b.n	801ca02 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801ca5c:	2a00      	cmp	r2, #0
 801ca5e:	d0f6      	beq.n	801ca4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801ca60:	fa1f f982 	uxth.w	r9, r2
 801ca64:	43d2      	mvns	r2, r2
 801ca66:	f8d8 7000 	ldr.w	r7, [r8]
 801ca6a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ca6e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801ca72:	fb15 f509 	smulbb	r5, r5, r9
 801ca76:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ca7a:	b2ff      	uxtb	r7, r7
 801ca7c:	ea4f 262c 	mov.w	r6, ip, asr #8
 801ca80:	fb17 f709 	smulbb	r7, r7, r9
 801ca84:	b2d2      	uxtb	r2, r2
 801ca86:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ca8a:	fb06 5602 	mla	r6, r6, r2, r5
 801ca8e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801ca92:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ca96:	fb1a fa09 	smulbb	sl, sl, r9
 801ca9a:	fa5f fc8c 	uxtb.w	ip, ip
 801ca9e:	fb0c 7702 	mla	r7, ip, r2, r7
 801caa2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801caa6:	fb05 a502 	mla	r5, r5, r2, sl
 801caaa:	b2b6      	uxth	r6, r6
 801caac:	b2bf      	uxth	r7, r7
 801caae:	1c72      	adds	r2, r6, #1
 801cab0:	f107 0a01 	add.w	sl, r7, #1
 801cab4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801cab8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cabc:	b2ad      	uxth	r5, r5
 801cabe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cac2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801cac6:	ea4a 0606 	orr.w	r6, sl, r6
 801caca:	f105 0a01 	add.w	sl, r5, #1
 801cace:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cad2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cad6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cada:	ea46 060a 	orr.w	r6, r6, sl
 801cade:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801cae2:	e7b4      	b.n	801ca4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801cae4:	b007      	add	sp, #28
 801cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801caea:	bf00      	nop
 801caec:	2004f6d8 	.word	0x2004f6d8

0801caf0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801caf0:	4770      	bx	lr

0801caf2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801caf2:	4770      	bx	lr

0801caf4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801caf4:	4770      	bx	lr

0801caf6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801caf6:	4770      	bx	lr

0801caf8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801caf8:	4770      	bx	lr

0801cafa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cafa:	4770      	bx	lr

0801cafc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cafc:	4770      	bx	lr

0801cafe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cafe:	4770      	bx	lr

0801cb00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cb00:	4770      	bx	lr

0801cb02 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801cb02:	4770      	bx	lr

0801cb04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cb04:	4770      	bx	lr

0801cb06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cb06:	4770      	bx	lr

0801cb08 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cb08:	4770      	bx	lr

0801cb0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801cb0a:	4770      	bx	lr

0801cb0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cb0c:	4770      	bx	lr

0801cb0e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cb0e:	4770      	bx	lr

0801cb10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cb10:	4770      	bx	lr

0801cb12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cb12:	4770      	bx	lr

0801cb14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cb14:	4770      	bx	lr

0801cb16 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cb16:	4770      	bx	lr

0801cb18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cb18:	4770      	bx	lr

0801cb1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cb1a:	4770      	bx	lr

0801cb1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cb1c:	4770      	bx	lr

0801cb1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cb1e:	4770      	bx	lr

0801cb20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cb20:	4770      	bx	lr

0801cb22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801cb22:	4770      	bx	lr

0801cb24 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cb24:	4770      	bx	lr

0801cb26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801cb26:	4770      	bx	lr

0801cb28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801cb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb2c:	b088      	sub	sp, #32
 801cb2e:	ac08      	add	r4, sp, #32
 801cb30:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801cb34:	4606      	mov	r6, r0
 801cb36:	4620      	mov	r0, r4
 801cb38:	4688      	mov	r8, r1
 801cb3a:	4691      	mov	r9, r2
 801cb3c:	f7fd fc66 	bl	801a40c <_ZNK8touchgfx6Bitmap7getDataEv>
 801cb40:	6833      	ldr	r3, [r6, #0]
 801cb42:	4605      	mov	r5, r0
 801cb44:	4620      	mov	r0, r4
 801cb46:	699f      	ldr	r7, [r3, #24]
 801cb48:	f7fd fb74 	bl	801a234 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cb4c:	4682      	mov	sl, r0
 801cb4e:	4620      	mov	r0, r4
 801cb50:	f7fd fba4 	bl	801a29c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cb54:	9500      	str	r5, [sp, #0]
 801cb56:	e9cd a001 	strd	sl, r0, [sp, #4]
 801cb5a:	464b      	mov	r3, r9
 801cb5c:	a806      	add	r0, sp, #24
 801cb5e:	4642      	mov	r2, r8
 801cb60:	4631      	mov	r1, r6
 801cb62:	47b8      	blx	r7
 801cb64:	4628      	mov	r0, r5
 801cb66:	b008      	add	sp, #32
 801cb68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801cb6c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801cb6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cb70:	2300      	movs	r3, #0
 801cb72:	9300      	str	r3, [sp, #0]
 801cb74:	4b3d      	ldr	r3, [pc, #244]	; (801cc6c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801cb76:	781b      	ldrb	r3, [r3, #0]
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	d137      	bne.n	801cbec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801cb7c:	4a3c      	ldr	r2, [pc, #240]	; (801cc70 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801cb7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801cb82:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d132      	bne.n	801cbf0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801cb8a:	4b3a      	ldr	r3, [pc, #232]	; (801cc74 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801cb8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cb90:	6808      	ldr	r0, [r1, #0]
 801cb92:	6849      	ldr	r1, [r1, #4]
 801cb94:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cb98:	ac02      	add	r4, sp, #8
 801cb9a:	ab02      	add	r3, sp, #8
 801cb9c:	c303      	stmia	r3!, {r0, r1}
 801cb9e:	4669      	mov	r1, sp
 801cba0:	4620      	mov	r0, r4
 801cba2:	f7fa fd05 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cba6:	4668      	mov	r0, sp
 801cba8:	f7fa fcda 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cbac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cbb0:	f8bd 2000 	ldrh.w	r2, [sp]
 801cbb4:	4d30      	ldr	r5, [pc, #192]	; (801cc78 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801cbb6:	4413      	add	r3, r2
 801cbb8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801cbbc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cbc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cbc4:	6828      	ldr	r0, [r5, #0]
 801cbc6:	4413      	add	r3, r2
 801cbc8:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cbcc:	6803      	ldr	r3, [r0, #0]
 801cbce:	462f      	mov	r7, r5
 801cbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbd2:	4798      	blx	r3
 801cbd4:	f010 0f01 	tst.w	r0, #1
 801cbd8:	d00c      	beq.n	801cbf4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801cbda:	e894 0006 	ldmia.w	r4, {r1, r2}
 801cbde:	6828      	ldr	r0, [r5, #0]
 801cbe0:	6803      	ldr	r3, [r0, #0]
 801cbe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cbe4:	4798      	blx	r3
 801cbe6:	b004      	add	sp, #16
 801cbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbec:	4a21      	ldr	r2, [pc, #132]	; (801cc74 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801cbee:	e7c6      	b.n	801cb7e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801cbf0:	4b1f      	ldr	r3, [pc, #124]	; (801cc70 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801cbf2:	e7cb      	b.n	801cb8c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801cbf4:	6838      	ldr	r0, [r7, #0]
 801cbf6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801cbfa:	6803      	ldr	r3, [r0, #0]
 801cbfc:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801cc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc02:	4798      	blx	r3
 801cc04:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801cc08:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cc0c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801cc10:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801cc14:	fb16 3602 	smlabb	r6, r6, r2, r3
 801cc18:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801cc1c:	6838      	ldr	r0, [r7, #0]
 801cc1e:	6803      	ldr	r3, [r0, #0]
 801cc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc22:	4798      	blx	r3
 801cc24:	4a12      	ldr	r2, [pc, #72]	; (801cc70 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801cc26:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801cc2a:	4691      	mov	r9, r2
 801cc2c:	8813      	ldrh	r3, [r2, #0]
 801cc2e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801cc32:	435d      	muls	r5, r3
 801cc34:	fb03 1404 	mla	r4, r3, r4, r1
 801cc38:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cc3c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801cc40:	6838      	ldr	r0, [r7, #0]
 801cc42:	42ac      	cmp	r4, r5
 801cc44:	6803      	ldr	r3, [r0, #0]
 801cc46:	d20e      	bcs.n	801cc66 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801cc48:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801cc4c:	4632      	mov	r2, r6
 801cc4e:	4643      	mov	r3, r8
 801cc50:	4621      	mov	r1, r4
 801cc52:	47d0      	blx	sl
 801cc54:	f8b9 3000 	ldrh.w	r3, [r9]
 801cc58:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cc5c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801cc60:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801cc64:	e7ec      	b.n	801cc40 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801cc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc68:	4798      	blx	r3
 801cc6a:	e7bc      	b.n	801cbe6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801cc6c:	2004f6c0 	.word	0x2004f6c0
 801cc70:	2004f6c2 	.word	0x2004f6c2
 801cc74:	2004f6c4 	.word	0x2004f6c4
 801cc78:	2004f6c8 	.word	0x2004f6c8

0801cc7c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc80:	b08b      	sub	sp, #44	; 0x2c
 801cc82:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801cc86:	460f      	mov	r7, r1
 801cc88:	4616      	mov	r6, r2
 801cc8a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801cc8e:	f1bb 0f00 	cmp.w	fp, #0
 801cc92:	d049      	beq.n	801cd28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801cc94:	6810      	ldr	r0, [r2, #0]
 801cc96:	6851      	ldr	r1, [r2, #4]
 801cc98:	ad06      	add	r5, sp, #24
 801cc9a:	c503      	stmia	r5!, {r0, r1}
 801cc9c:	6818      	ldr	r0, [r3, #0]
 801cc9e:	6859      	ldr	r1, [r3, #4]
 801cca0:	ad08      	add	r5, sp, #32
 801cca2:	c503      	stmia	r5!, {r0, r1}
 801cca4:	a806      	add	r0, sp, #24
 801cca6:	f7fa fc5b 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ccaa:	4631      	mov	r1, r6
 801ccac:	a808      	add	r0, sp, #32
 801ccae:	f7fa fc7f 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ccb2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ccb6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ccba:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801ccbe:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801ccc2:	fb16 2103 	smlabb	r1, r6, r3, r2
 801ccc6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801ccca:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ccce:	4f60      	ldr	r7, [pc, #384]	; (801ce50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801ccd0:	440a      	add	r2, r1
 801ccd2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ccd6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ccda:	6838      	ldr	r0, [r7, #0]
 801ccdc:	4413      	add	r3, r2
 801ccde:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801cce2:	6803      	ldr	r3, [r0, #0]
 801cce4:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801cce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ccea:	4798      	blx	r3
 801ccec:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ccf0:	46b9      	mov	r9, r7
 801ccf2:	d01c      	beq.n	801cd2e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801ccf4:	f010 0f04 	tst.w	r0, #4
 801ccf8:	d01d      	beq.n	801cd36 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801ccfa:	2700      	movs	r7, #0
 801ccfc:	f8d9 0000 	ldr.w	r0, [r9]
 801cd00:	b2ad      	uxth	r5, r5
 801cd02:	6801      	ldr	r1, [r0, #0]
 801cd04:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801cd08:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801cd0c:	f8cd b00c 	str.w	fp, [sp, #12]
 801cd10:	9402      	str	r4, [sp, #8]
 801cd12:	fa1f f488 	uxth.w	r4, r8
 801cd16:	9501      	str	r5, [sp, #4]
 801cd18:	9400      	str	r4, [sp, #0]
 801cd1a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801cd1c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801cd20:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cd24:	4631      	mov	r1, r6
 801cd26:	47a0      	blx	r4
 801cd28:	b00b      	add	sp, #44	; 0x2c
 801cd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd2e:	b914      	cbnz	r4, 801cd36 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801cd30:	f010 0f01 	tst.w	r0, #1
 801cd34:	e7e0      	b.n	801ccf8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801cd36:	f8d9 0000 	ldr.w	r0, [r9]
 801cd3a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801cd3e:	6803      	ldr	r3, [r0, #0]
 801cd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd42:	4798      	blx	r3
 801cd44:	4b43      	ldr	r3, [pc, #268]	; (801ce54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801cd46:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801cd4a:	881a      	ldrh	r2, [r3, #0]
 801cd4c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801cd50:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801cd54:	fb02 1404 	mla	r4, r2, r4, r1
 801cd58:	469a      	mov	sl, r3
 801cd5a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cd5e:	fb05 f502 	mul.w	r5, r5, r2
 801cd62:	d059      	beq.n	801ce18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801cd64:	469e      	mov	lr, r3
 801cd66:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801cd6a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801cd6e:	fa1f f28b 	uxth.w	r2, fp
 801cd72:	fa1f f989 	uxth.w	r9, r9
 801cd76:	42ac      	cmp	r4, r5
 801cd78:	d264      	bcs.n	801ce44 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801cd7a:	eb04 0a07 	add.w	sl, r4, r7
 801cd7e:	4554      	cmp	r4, sl
 801cd80:	d23d      	bcs.n	801cdfe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801cd82:	8821      	ldrh	r1, [r4, #0]
 801cd84:	f836 3b02 	ldrh.w	r3, [r6], #2
 801cd88:	1208      	asrs	r0, r1, #8
 801cd8a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cd8e:	fb10 f009 	smulbb	r0, r0, r9
 801cd92:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801cd96:	00c9      	lsls	r1, r1, #3
 801cd98:	b2c9      	uxtb	r1, r1
 801cd9a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801cd9e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801cda2:	fb11 f109 	smulbb	r1, r1, r9
 801cda6:	fb1b fb09 	smulbb	fp, fp, r9
 801cdaa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cdae:	fb0c 0c02 	mla	ip, ip, r2, r0
 801cdb2:	10d8      	asrs	r0, r3, #3
 801cdb4:	00db      	lsls	r3, r3, #3
 801cdb6:	b2db      	uxtb	r3, r3
 801cdb8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801cdbc:	fb03 1302 	mla	r3, r3, r2, r1
 801cdc0:	fb00 b002 	mla	r0, r0, r2, fp
 801cdc4:	fa1f fc8c 	uxth.w	ip, ip
 801cdc8:	f10c 0b01 	add.w	fp, ip, #1
 801cdcc:	b29b      	uxth	r3, r3
 801cdce:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cdd2:	b280      	uxth	r0, r0
 801cdd4:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801cdd8:	f103 0c01 	add.w	ip, r3, #1
 801cddc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801cde0:	1c43      	adds	r3, r0, #1
 801cde2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cde6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801cdea:	0940      	lsrs	r0, r0, #5
 801cdec:	ea4c 0c0b 	orr.w	ip, ip, fp
 801cdf0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801cdf4:	ea4c 0c00 	orr.w	ip, ip, r0
 801cdf8:	f824 cb02 	strh.w	ip, [r4], #2
 801cdfc:	e7bf      	b.n	801cd7e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801cdfe:	f8be 3000 	ldrh.w	r3, [lr]
 801ce02:	eba3 0308 	sub.w	r3, r3, r8
 801ce06:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ce0a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ce0e:	eba3 0308 	sub.w	r3, r3, r8
 801ce12:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801ce16:	e7ae      	b.n	801cd76 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801ce18:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801ce1c:	f8d9 0000 	ldr.w	r0, [r9]
 801ce20:	42ac      	cmp	r4, r5
 801ce22:	6803      	ldr	r3, [r0, #0]
 801ce24:	d20e      	bcs.n	801ce44 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801ce26:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801ce2a:	4632      	mov	r2, r6
 801ce2c:	463b      	mov	r3, r7
 801ce2e:	4621      	mov	r1, r4
 801ce30:	47c0      	blx	r8
 801ce32:	f8ba 3000 	ldrh.w	r3, [sl]
 801ce36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ce3a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ce3e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801ce42:	e7eb      	b.n	801ce1c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801ce44:	4b02      	ldr	r3, [pc, #8]	; (801ce50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801ce46:	6818      	ldr	r0, [r3, #0]
 801ce48:	6803      	ldr	r3, [r0, #0]
 801ce4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce4c:	4798      	blx	r3
 801ce4e:	e76b      	b.n	801cd28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ce50:	2004f6c8 	.word	0x2004f6c8
 801ce54:	2004f6c2 	.word	0x2004f6c2

0801ce58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ce58:	b510      	push	{r4, lr}
 801ce5a:	4604      	mov	r4, r0
 801ce5c:	2104      	movs	r1, #4
 801ce5e:	f009 faa9 	bl	80263b4 <_ZdlPvj>
 801ce62:	4620      	mov	r0, r4
 801ce64:	bd10      	pop	{r4, pc}

0801ce66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801ce66:	b510      	push	{r4, lr}
 801ce68:	4604      	mov	r4, r0
 801ce6a:	2104      	movs	r1, #4
 801ce6c:	f009 faa2 	bl	80263b4 <_ZdlPvj>
 801ce70:	4620      	mov	r0, r4
 801ce72:	bd10      	pop	{r4, pc}

0801ce74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ce74:	b510      	push	{r4, lr}
 801ce76:	4604      	mov	r4, r0
 801ce78:	2104      	movs	r1, #4
 801ce7a:	f009 fa9b 	bl	80263b4 <_ZdlPvj>
 801ce7e:	4620      	mov	r0, r4
 801ce80:	bd10      	pop	{r4, pc}

0801ce82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801ce82:	b510      	push	{r4, lr}
 801ce84:	4604      	mov	r4, r0
 801ce86:	2104      	movs	r1, #4
 801ce88:	f009 fa94 	bl	80263b4 <_ZdlPvj>
 801ce8c:	4620      	mov	r0, r4
 801ce8e:	bd10      	pop	{r4, pc}

0801ce90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ce90:	b510      	push	{r4, lr}
 801ce92:	4604      	mov	r4, r0
 801ce94:	2104      	movs	r1, #4
 801ce96:	f009 fa8d 	bl	80263b4 <_ZdlPvj>
 801ce9a:	4620      	mov	r0, r4
 801ce9c:	bd10      	pop	{r4, pc}

0801ce9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ce9e:	b510      	push	{r4, lr}
 801cea0:	4604      	mov	r4, r0
 801cea2:	2104      	movs	r1, #4
 801cea4:	f009 fa86 	bl	80263b4 <_ZdlPvj>
 801cea8:	4620      	mov	r0, r4
 801ceaa:	bd10      	pop	{r4, pc}

0801ceac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ceac:	b510      	push	{r4, lr}
 801ceae:	4604      	mov	r4, r0
 801ceb0:	2104      	movs	r1, #4
 801ceb2:	f009 fa7f 	bl	80263b4 <_ZdlPvj>
 801ceb6:	4620      	mov	r0, r4
 801ceb8:	bd10      	pop	{r4, pc}

0801ceba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ceba:	b510      	push	{r4, lr}
 801cebc:	4604      	mov	r4, r0
 801cebe:	2104      	movs	r1, #4
 801cec0:	f009 fa78 	bl	80263b4 <_ZdlPvj>
 801cec4:	4620      	mov	r0, r4
 801cec6:	bd10      	pop	{r4, pc}

0801cec8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cec8:	b510      	push	{r4, lr}
 801ceca:	4604      	mov	r4, r0
 801cecc:	2104      	movs	r1, #4
 801cece:	f009 fa71 	bl	80263b4 <_ZdlPvj>
 801ced2:	4620      	mov	r0, r4
 801ced4:	bd10      	pop	{r4, pc}

0801ced6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ced6:	b510      	push	{r4, lr}
 801ced8:	4604      	mov	r4, r0
 801ceda:	2104      	movs	r1, #4
 801cedc:	f009 fa6a 	bl	80263b4 <_ZdlPvj>
 801cee0:	4620      	mov	r0, r4
 801cee2:	bd10      	pop	{r4, pc}

0801cee4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cee4:	b510      	push	{r4, lr}
 801cee6:	4604      	mov	r4, r0
 801cee8:	2104      	movs	r1, #4
 801ceea:	f009 fa63 	bl	80263b4 <_ZdlPvj>
 801ceee:	4620      	mov	r0, r4
 801cef0:	bd10      	pop	{r4, pc}

0801cef2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cef2:	b510      	push	{r4, lr}
 801cef4:	4604      	mov	r4, r0
 801cef6:	2104      	movs	r1, #4
 801cef8:	f009 fa5c 	bl	80263b4 <_ZdlPvj>
 801cefc:	4620      	mov	r0, r4
 801cefe:	bd10      	pop	{r4, pc}

0801cf00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cf00:	b510      	push	{r4, lr}
 801cf02:	4604      	mov	r4, r0
 801cf04:	2104      	movs	r1, #4
 801cf06:	f009 fa55 	bl	80263b4 <_ZdlPvj>
 801cf0a:	4620      	mov	r0, r4
 801cf0c:	bd10      	pop	{r4, pc}

0801cf0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801cf0e:	b510      	push	{r4, lr}
 801cf10:	4604      	mov	r4, r0
 801cf12:	2104      	movs	r1, #4
 801cf14:	f009 fa4e 	bl	80263b4 <_ZdlPvj>
 801cf18:	4620      	mov	r0, r4
 801cf1a:	bd10      	pop	{r4, pc}

0801cf1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cf1c:	b510      	push	{r4, lr}
 801cf1e:	4604      	mov	r4, r0
 801cf20:	2104      	movs	r1, #4
 801cf22:	f009 fa47 	bl	80263b4 <_ZdlPvj>
 801cf26:	4620      	mov	r0, r4
 801cf28:	bd10      	pop	{r4, pc}

0801cf2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cf2a:	b510      	push	{r4, lr}
 801cf2c:	4604      	mov	r4, r0
 801cf2e:	2104      	movs	r1, #4
 801cf30:	f009 fa40 	bl	80263b4 <_ZdlPvj>
 801cf34:	4620      	mov	r0, r4
 801cf36:	bd10      	pop	{r4, pc}

0801cf38 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cf38:	b510      	push	{r4, lr}
 801cf3a:	4604      	mov	r4, r0
 801cf3c:	2104      	movs	r1, #4
 801cf3e:	f009 fa39 	bl	80263b4 <_ZdlPvj>
 801cf42:	4620      	mov	r0, r4
 801cf44:	bd10      	pop	{r4, pc}

0801cf46 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801cf46:	b510      	push	{r4, lr}
 801cf48:	4604      	mov	r4, r0
 801cf4a:	2104      	movs	r1, #4
 801cf4c:	f009 fa32 	bl	80263b4 <_ZdlPvj>
 801cf50:	4620      	mov	r0, r4
 801cf52:	bd10      	pop	{r4, pc}

0801cf54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cf54:	b510      	push	{r4, lr}
 801cf56:	4604      	mov	r4, r0
 801cf58:	2104      	movs	r1, #4
 801cf5a:	f009 fa2b 	bl	80263b4 <_ZdlPvj>
 801cf5e:	4620      	mov	r0, r4
 801cf60:	bd10      	pop	{r4, pc}

0801cf62 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cf62:	b510      	push	{r4, lr}
 801cf64:	4604      	mov	r4, r0
 801cf66:	2104      	movs	r1, #4
 801cf68:	f009 fa24 	bl	80263b4 <_ZdlPvj>
 801cf6c:	4620      	mov	r0, r4
 801cf6e:	bd10      	pop	{r4, pc}

0801cf70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cf70:	b510      	push	{r4, lr}
 801cf72:	4604      	mov	r4, r0
 801cf74:	2104      	movs	r1, #4
 801cf76:	f009 fa1d 	bl	80263b4 <_ZdlPvj>
 801cf7a:	4620      	mov	r0, r4
 801cf7c:	bd10      	pop	{r4, pc}

0801cf7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cf7e:	b510      	push	{r4, lr}
 801cf80:	4604      	mov	r4, r0
 801cf82:	2104      	movs	r1, #4
 801cf84:	f009 fa16 	bl	80263b4 <_ZdlPvj>
 801cf88:	4620      	mov	r0, r4
 801cf8a:	bd10      	pop	{r4, pc}

0801cf8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cf8c:	b510      	push	{r4, lr}
 801cf8e:	4604      	mov	r4, r0
 801cf90:	2104      	movs	r1, #4
 801cf92:	f009 fa0f 	bl	80263b4 <_ZdlPvj>
 801cf96:	4620      	mov	r0, r4
 801cf98:	bd10      	pop	{r4, pc}

0801cf9a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cf9a:	b510      	push	{r4, lr}
 801cf9c:	4604      	mov	r4, r0
 801cf9e:	2104      	movs	r1, #4
 801cfa0:	f009 fa08 	bl	80263b4 <_ZdlPvj>
 801cfa4:	4620      	mov	r0, r4
 801cfa6:	bd10      	pop	{r4, pc}

0801cfa8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801cfa8:	b510      	push	{r4, lr}
 801cfaa:	4604      	mov	r4, r0
 801cfac:	2104      	movs	r1, #4
 801cfae:	f009 fa01 	bl	80263b4 <_ZdlPvj>
 801cfb2:	4620      	mov	r0, r4
 801cfb4:	bd10      	pop	{r4, pc}

0801cfb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801cfb6:	b510      	push	{r4, lr}
 801cfb8:	4604      	mov	r4, r0
 801cfba:	2104      	movs	r1, #4
 801cfbc:	f009 f9fa 	bl	80263b4 <_ZdlPvj>
 801cfc0:	4620      	mov	r0, r4
 801cfc2:	bd10      	pop	{r4, pc}

0801cfc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801cfc4:	b510      	push	{r4, lr}
 801cfc6:	4604      	mov	r4, r0
 801cfc8:	2104      	movs	r1, #4
 801cfca:	f009 f9f3 	bl	80263b4 <_ZdlPvj>
 801cfce:	4620      	mov	r0, r4
 801cfd0:	bd10      	pop	{r4, pc}

0801cfd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801cfd2:	b510      	push	{r4, lr}
 801cfd4:	4604      	mov	r4, r0
 801cfd6:	2104      	movs	r1, #4
 801cfd8:	f009 f9ec 	bl	80263b4 <_ZdlPvj>
 801cfdc:	4620      	mov	r0, r4
 801cfde:	bd10      	pop	{r4, pc}

0801cfe0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801cfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfe4:	469b      	mov	fp, r3
 801cfe6:	4616      	mov	r6, r2
 801cfe8:	b091      	sub	sp, #68	; 0x44
 801cfea:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cfee:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801cff2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cff6:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801cffa:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801cffe:	4604      	mov	r4, r0
 801d000:	460d      	mov	r5, r1
 801d002:	4640      	mov	r0, r8
 801d004:	4659      	mov	r1, fp
 801d006:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d00a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d00e:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801d012:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801d016:	f7f6 fd57 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 801d01a:	4631      	mov	r1, r6
 801d01c:	4640      	mov	r0, r8
 801d01e:	f7f6 fd53 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 801d022:	4b74      	ldr	r3, [pc, #464]	; (801d1f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801d024:	8818      	ldrh	r0, [r3, #0]
 801d026:	4b74      	ldr	r3, [pc, #464]	; (801d1f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801d028:	b202      	sxth	r2, r0
 801d02a:	8819      	ldrh	r1, [r3, #0]
 801d02c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801d030:	b20e      	sxth	r6, r1
 801d032:	2b00      	cmp	r3, #0
 801d034:	da07      	bge.n	801d046 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801d036:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801d03a:	4463      	add	r3, ip
 801d03c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d040:	2300      	movs	r3, #0
 801d042:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801d046:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801d04a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d04e:	1ad2      	subs	r2, r2, r3
 801d050:	4594      	cmp	ip, r2
 801d052:	bfc4      	itt	gt
 801d054:	1ac2      	subgt	r2, r0, r3
 801d056:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801d05a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d05e:	2a00      	cmp	r2, #0
 801d060:	da07      	bge.n	801d072 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801d062:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801d066:	4462      	add	r2, ip
 801d068:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801d06c:	2200      	movs	r2, #0
 801d06e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801d072:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801d076:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801d07a:	eba6 060a 	sub.w	r6, r6, sl
 801d07e:	42b2      	cmp	r2, r6
 801d080:	bfc4      	itt	gt
 801d082:	eba1 020a 	subgt.w	r2, r1, sl
 801d086:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801d08a:	4a5c      	ldr	r2, [pc, #368]	; (801d1fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801d08c:	7812      	ldrb	r2, [r2, #0]
 801d08e:	b9a2      	cbnz	r2, 801d0ba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801d090:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801d094:	4286      	cmp	r6, r0
 801d096:	4640      	mov	r0, r8
 801d098:	9303      	str	r3, [sp, #12]
 801d09a:	bf14      	ite	ne
 801d09c:	2600      	movne	r6, #0
 801d09e:	2601      	moveq	r6, #1
 801d0a0:	f7f6 fd55 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d0a4:	9b03      	ldr	r3, [sp, #12]
 801d0a6:	b160      	cbz	r0, 801d0c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801d0a8:	2300      	movs	r3, #0
 801d0aa:	8023      	strh	r3, [r4, #0]
 801d0ac:	8063      	strh	r3, [r4, #2]
 801d0ae:	80a3      	strh	r3, [r4, #4]
 801d0b0:	4620      	mov	r0, r4
 801d0b2:	80e3      	strh	r3, [r4, #6]
 801d0b4:	b011      	add	sp, #68	; 0x44
 801d0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0ba:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d0be:	428e      	cmp	r6, r1
 801d0c0:	e7e9      	b.n	801d096 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801d0c2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801d0c6:	a90e      	add	r1, sp, #56	; 0x38
 801d0c8:	9205      	str	r2, [sp, #20]
 801d0ca:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801d0ce:	900e      	str	r0, [sp, #56]	; 0x38
 801d0d0:	9206      	str	r2, [sp, #24]
 801d0d2:	f8bb 2000 	ldrh.w	r2, [fp]
 801d0d6:	a80c      	add	r0, sp, #48	; 0x30
 801d0d8:	1a9b      	subs	r3, r3, r2
 801d0da:	b21b      	sxth	r3, r3
 801d0dc:	9303      	str	r3, [sp, #12]
 801d0de:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801d0e2:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801d0e6:	ebaa 0a03 	sub.w	sl, sl, r3
 801d0ea:	fa0f f38a 	sxth.w	r3, sl
 801d0ee:	9304      	str	r3, [sp, #16]
 801d0f0:	9b03      	ldr	r3, [sp, #12]
 801d0f2:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801d0f6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801d0fa:	9b04      	ldr	r3, [sp, #16]
 801d0fc:	f8df b104 	ldr.w	fp, [pc, #260]	; 801d204 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801d100:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d104:	9b05      	ldr	r3, [sp, #20]
 801d106:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801d10a:	9b06      	ldr	r3, [sp, #24]
 801d10c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d110:	f7fa fa4e 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d114:	4640      	mov	r0, r8
 801d116:	f7fa fa23 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d11a:	a80e      	add	r0, sp, #56	; 0x38
 801d11c:	f7fa fa20 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d120:	4b37      	ldr	r3, [pc, #220]	; (801d200 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801d122:	4628      	mov	r0, r5
 801d124:	881b      	ldrh	r3, [r3, #0]
 801d126:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801d12a:	9307      	str	r3, [sp, #28]
 801d12c:	682b      	ldr	r3, [r5, #0]
 801d12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d130:	4798      	blx	r3
 801d132:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801d136:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d13a:	4681      	mov	r9, r0
 801d13c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801d140:	f8db 0000 	ldr.w	r0, [fp]
 801d144:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801d146:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d14a:	6803      	ldr	r3, [r0, #0]
 801d14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d14e:	4798      	blx	r3
 801d150:	4607      	mov	r7, r0
 801d152:	f8db 0000 	ldr.w	r0, [fp]
 801d156:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d15a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d15e:	6803      	ldr	r3, [r0, #0]
 801d160:	9109      	str	r1, [sp, #36]	; 0x24
 801d162:	9208      	str	r2, [sp, #32]
 801d164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d166:	4798      	blx	r3
 801d168:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d16c:	f010 0f01 	tst.w	r0, #1
 801d170:	d012      	beq.n	801d198 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801d172:	f8db 0000 	ldr.w	r0, [fp]
 801d176:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d17a:	6803      	ldr	r3, [r0, #0]
 801d17c:	9200      	str	r2, [sp, #0]
 801d17e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801d180:	e898 0006 	ldmia.w	r8, {r1, r2}
 801d184:	462b      	mov	r3, r5
 801d186:	47b0      	blx	r6
 801d188:	9b03      	ldr	r3, [sp, #12]
 801d18a:	8023      	strh	r3, [r4, #0]
 801d18c:	9b04      	ldr	r3, [sp, #16]
 801d18e:	8063      	strh	r3, [r4, #2]
 801d190:	9b05      	ldr	r3, [sp, #20]
 801d192:	80a3      	strh	r3, [r4, #4]
 801d194:	9b06      	ldr	r3, [sp, #24]
 801d196:	e78b      	b.n	801d0b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801d198:	fb09 f202 	mul.w	r2, r9, r2
 801d19c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d1a0:	440f      	add	r7, r1
 801d1a2:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801d1a6:	b166      	cbz	r6, 801d1c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801d1a8:	9a07      	ldr	r2, [sp, #28]
 801d1aa:	4592      	cmp	sl, r2
 801d1ac:	d109      	bne.n	801d1c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801d1ae:	f8db 0000 	ldr.w	r0, [fp]
 801d1b2:	fb09 f303 	mul.w	r3, r9, r3
 801d1b6:	6802      	ldr	r2, [r0, #0]
 801d1b8:	4629      	mov	r1, r5
 801d1ba:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801d1bc:	463a      	mov	r2, r7
 801d1be:	47b0      	blx	r6
 801d1c0:	e7e2      	b.n	801d188 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801d1c2:	fb0a f303 	mul.w	r3, sl, r3
 801d1c6:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801d204 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801d1ca:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801d1ce:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801d1d2:	4545      	cmp	r5, r8
 801d1d4:	d2d8      	bcs.n	801d188 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801d1d6:	f8db 0000 	ldr.w	r0, [fp]
 801d1da:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d1de:	6802      	ldr	r2, [r0, #0]
 801d1e0:	4629      	mov	r1, r5
 801d1e2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801d1e6:	005b      	lsls	r3, r3, #1
 801d1e8:	463a      	mov	r2, r7
 801d1ea:	47d0      	blx	sl
 801d1ec:	444f      	add	r7, r9
 801d1ee:	4435      	add	r5, r6
 801d1f0:	e7ef      	b.n	801d1d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801d1f2:	bf00      	nop
 801d1f4:	2004f6bc 	.word	0x2004f6bc
 801d1f8:	2004f6be 	.word	0x2004f6be
 801d1fc:	2004f6c0 	.word	0x2004f6c0
 801d200:	2004f6c2 	.word	0x2004f6c2
 801d204:	2004f6c8 	.word	0x2004f6c8

0801d208 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d20a:	4606      	mov	r6, r0
 801d20c:	b087      	sub	sp, #28
 801d20e:	460c      	mov	r4, r1
 801d210:	4617      	mov	r7, r2
 801d212:	461d      	mov	r5, r3
 801d214:	b333      	cbz	r3, 801d264 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d216:	4608      	mov	r0, r1
 801d218:	f7f6 fc99 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d21c:	bb10      	cbnz	r0, 801d264 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d21e:	6820      	ldr	r0, [r4, #0]
 801d220:	6861      	ldr	r1, [r4, #4]
 801d222:	ab04      	add	r3, sp, #16
 801d224:	4c1b      	ldr	r4, [pc, #108]	; (801d294 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801d226:	c303      	stmia	r3!, {r0, r1}
 801d228:	a804      	add	r0, sp, #16
 801d22a:	f7fa f999 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d22e:	6820      	ldr	r0, [r4, #0]
 801d230:	6803      	ldr	r3, [r0, #0]
 801d232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d234:	4798      	blx	r3
 801d236:	2dff      	cmp	r5, #255	; 0xff
 801d238:	d016      	beq.n	801d268 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d23a:	f010 0f08 	tst.w	r0, #8
 801d23e:	6820      	ldr	r0, [r4, #0]
 801d240:	d015      	beq.n	801d26e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801d242:	2400      	movs	r4, #0
 801d244:	6801      	ldr	r1, [r0, #0]
 801d246:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801d24a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d24e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d252:	9401      	str	r4, [sp, #4]
 801d254:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d258:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d25c:	9400      	str	r4, [sp, #0]
 801d25e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801d260:	4639      	mov	r1, r7
 801d262:	47a0      	blx	r4
 801d264:	b007      	add	sp, #28
 801d266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d268:	f010 0f02 	tst.w	r0, #2
 801d26c:	e7e7      	b.n	801d23e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801d26e:	6803      	ldr	r3, [r0, #0]
 801d270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d272:	4798      	blx	r3
 801d274:	4b08      	ldr	r3, [pc, #32]	; (801d298 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801d276:	4601      	mov	r1, r0
 801d278:	881a      	ldrh	r2, [r3, #0]
 801d27a:	e9cd 7500 	strd	r7, r5, [sp]
 801d27e:	6833      	ldr	r3, [r6, #0]
 801d280:	4630      	mov	r0, r6
 801d282:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801d284:	ab04      	add	r3, sp, #16
 801d286:	47a8      	blx	r5
 801d288:	6820      	ldr	r0, [r4, #0]
 801d28a:	6803      	ldr	r3, [r0, #0]
 801d28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d28e:	4798      	blx	r3
 801d290:	e7e8      	b.n	801d264 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d292:	bf00      	nop
 801d294:	2004f6c8 	.word	0x2004f6c8
 801d298:	2004f6c2 	.word	0x2004f6c2

0801d29c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2a0:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801d2a4:	4688      	mov	r8, r1
 801d2a6:	4614      	mov	r4, r2
 801d2a8:	461d      	mov	r5, r3
 801d2aa:	9e08      	ldr	r6, [sp, #32]
 801d2ac:	2f00      	cmp	r7, #0
 801d2ae:	f000 80a9 	beq.w	801d404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d2b2:	4618      	mov	r0, r3
 801d2b4:	f7f6 fc4b 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d2b8:	2800      	cmp	r0, #0
 801d2ba:	f040 80a3 	bne.w	801d404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d2be:	f9b5 1000 	ldrsh.w	r1, [r5]
 801d2c2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801d2c6:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801d2ca:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801d2ce:	fb04 1303 	mla	r3, r4, r3, r1
 801d2d2:	4365      	muls	r5, r4
 801d2d4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801d2d8:	2fff      	cmp	r7, #255	; 0xff
 801d2da:	eba4 0200 	sub.w	r2, r4, r0
 801d2de:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801d2e2:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801d2e6:	d04a      	beq.n	801d37e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801d2e8:	b2bc      	uxth	r4, r7
 801d2ea:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801d2ee:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801d2f2:	fa5f f788 	uxtb.w	r7, r8
 801d2f6:	b2f3      	uxtb	r3, r6
 801d2f8:	fb0e fe04 	mul.w	lr, lr, r4
 801d2fc:	4367      	muls	r7, r4
 801d2fe:	4363      	muls	r3, r4
 801d300:	0040      	lsls	r0, r0, #1
 801d302:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801d306:	fa1f fc8c 	uxth.w	ip, ip
 801d30a:	42a9      	cmp	r1, r5
 801d30c:	d27a      	bcs.n	801d404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d30e:	eb01 0900 	add.w	r9, r1, r0
 801d312:	4549      	cmp	r1, r9
 801d314:	d231      	bcs.n	801d37a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801d316:	880a      	ldrh	r2, [r1, #0]
 801d318:	1214      	asrs	r4, r2, #8
 801d31a:	10d6      	asrs	r6, r2, #3
 801d31c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d320:	00d2      	lsls	r2, r2, #3
 801d322:	b2d2      	uxtb	r2, r2
 801d324:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801d328:	fb14 f40c 	smulbb	r4, r4, ip
 801d32c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d330:	fb12 f20c 	smulbb	r2, r2, ip
 801d334:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d338:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801d33c:	4474      	add	r4, lr
 801d33e:	fb16 f60c 	smulbb	r6, r6, ip
 801d342:	b2a4      	uxth	r4, r4
 801d344:	441a      	add	r2, r3
 801d346:	b292      	uxth	r2, r2
 801d348:	f104 0a01 	add.w	sl, r4, #1
 801d34c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d350:	f102 0a01 	add.w	sl, r2, #1
 801d354:	443e      	add	r6, r7
 801d356:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801d35a:	b2b6      	uxth	r6, r6
 801d35c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d360:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d364:	4322      	orrs	r2, r4
 801d366:	1c74      	adds	r4, r6, #1
 801d368:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801d36c:	0976      	lsrs	r6, r6, #5
 801d36e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d372:	4332      	orrs	r2, r6
 801d374:	f821 2b02 	strh.w	r2, [r1], #2
 801d378:	e7cb      	b.n	801d312 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801d37a:	4441      	add	r1, r8
 801d37c:	e7c5      	b.n	801d30a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801d37e:	4f22      	ldr	r7, [pc, #136]	; (801d408 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801d380:	0973      	lsrs	r3, r6, #5
 801d382:	ea08 0707 	and.w	r7, r8, r7
 801d386:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d38a:	433b      	orrs	r3, r7
 801d38c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d390:	4333      	orrs	r3, r6
 801d392:	07e7      	lsls	r7, r4, #31
 801d394:	b29b      	uxth	r3, r3
 801d396:	d50b      	bpl.n	801d3b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801d398:	0040      	lsls	r0, r0, #1
 801d39a:	0052      	lsls	r2, r2, #1
 801d39c:	42a9      	cmp	r1, r5
 801d39e:	d231      	bcs.n	801d404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d3a0:	180c      	adds	r4, r1, r0
 801d3a2:	42a1      	cmp	r1, r4
 801d3a4:	d202      	bcs.n	801d3ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801d3a6:	f821 3b02 	strh.w	r3, [r1], #2
 801d3aa:	e7fa      	b.n	801d3a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801d3ac:	4411      	add	r1, r2
 801d3ae:	e7f5      	b.n	801d39c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801d3b0:	078e      	lsls	r6, r1, #30
 801d3b2:	d008      	beq.n	801d3c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801d3b4:	460a      	mov	r2, r1
 801d3b6:	0066      	lsls	r6, r4, #1
 801d3b8:	42aa      	cmp	r2, r5
 801d3ba:	d202      	bcs.n	801d3c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801d3bc:	8013      	strh	r3, [r2, #0]
 801d3be:	4432      	add	r2, r6
 801d3c0:	e7fa      	b.n	801d3b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801d3c2:	3102      	adds	r1, #2
 801d3c4:	3801      	subs	r0, #1
 801d3c6:	07c2      	lsls	r2, r0, #31
 801d3c8:	d50b      	bpl.n	801d3e2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801d3ca:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801d3ce:	3a01      	subs	r2, #1
 801d3d0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801d3d4:	0066      	lsls	r6, r4, #1
 801d3d6:	42aa      	cmp	r2, r5
 801d3d8:	d202      	bcs.n	801d3e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801d3da:	8013      	strh	r3, [r2, #0]
 801d3dc:	4432      	add	r2, r6
 801d3de:	e7fa      	b.n	801d3d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801d3e0:	3801      	subs	r0, #1
 801d3e2:	b178      	cbz	r0, 801d404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d3e4:	1040      	asrs	r0, r0, #1
 801d3e6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801d3ea:	0080      	lsls	r0, r0, #2
 801d3ec:	0064      	lsls	r4, r4, #1
 801d3ee:	42a9      	cmp	r1, r5
 801d3f0:	d208      	bcs.n	801d404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d3f2:	460a      	mov	r2, r1
 801d3f4:	180e      	adds	r6, r1, r0
 801d3f6:	42b2      	cmp	r2, r6
 801d3f8:	d202      	bcs.n	801d400 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801d3fa:	f842 3b04 	str.w	r3, [r2], #4
 801d3fe:	e7fa      	b.n	801d3f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801d400:	4421      	add	r1, r4
 801d402:	e7f4      	b.n	801d3ee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801d404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d408:	00fff800 	.word	0x00fff800

0801d40c <_ZN8touchgfx8LCD16bppC1Ev>:
 801d40c:	2200      	movs	r2, #0
 801d40e:	4910      	ldr	r1, [pc, #64]	; (801d450 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801d410:	6042      	str	r2, [r0, #4]
 801d412:	6001      	str	r1, [r0, #0]
 801d414:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d418:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d41c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d420:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d424:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d428:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d42c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d430:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d434:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d438:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d43c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801d440:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801d444:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801d448:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801d44c:	4770      	bx	lr
 801d44e:	bf00      	nop
 801d450:	080299fc 	.word	0x080299fc

0801d454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d458:	460d      	mov	r5, r1
 801d45a:	4604      	mov	r4, r0
 801d45c:	4699      	mov	r9, r3
 801d45e:	b08d      	sub	sp, #52	; 0x34
 801d460:	6808      	ldr	r0, [r1, #0]
 801d462:	6849      	ldr	r1, [r1, #4]
 801d464:	ab08      	add	r3, sp, #32
 801d466:	c303      	stmia	r3!, {r0, r1}
 801d468:	6810      	ldr	r0, [r2, #0]
 801d46a:	6851      	ldr	r1, [r2, #4]
 801d46c:	ab0a      	add	r3, sp, #40	; 0x28
 801d46e:	c303      	stmia	r3!, {r0, r1}
 801d470:	a808      	add	r0, sp, #32
 801d472:	f7fa f875 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d476:	4629      	mov	r1, r5
 801d478:	a80a      	add	r0, sp, #40	; 0x28
 801d47a:	f7fa f899 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d47e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d482:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d486:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d48a:	4d63      	ldr	r5, [pc, #396]	; (801d618 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d48c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d490:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d494:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d498:	6828      	ldr	r0, [r5, #0]
 801d49a:	440a      	add	r2, r1
 801d49c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d4a0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d4a4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801d4a8:	4413      	add	r3, r2
 801d4aa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d4ae:	6803      	ldr	r3, [r0, #0]
 801d4b0:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4b6:	4798      	blx	r3
 801d4b8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d4bc:	d119      	bne.n	801d4f2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801d4be:	f010 0f20 	tst.w	r0, #32
 801d4c2:	6828      	ldr	r0, [r5, #0]
 801d4c4:	d018      	beq.n	801d4f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801d4c6:	2500      	movs	r5, #0
 801d4c8:	6801      	ldr	r1, [r0, #0]
 801d4ca:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801d4ce:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d4d2:	b2b6      	uxth	r6, r6
 801d4d4:	9502      	str	r5, [sp, #8]
 801d4d6:	fa1f f588 	uxth.w	r5, r8
 801d4da:	9601      	str	r6, [sp, #4]
 801d4dc:	9500      	str	r5, [sp, #0]
 801d4de:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801d4e0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d4e4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d4e8:	4621      	mov	r1, r4
 801d4ea:	47a8      	blx	r5
 801d4ec:	b00d      	add	sp, #52	; 0x34
 801d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d4f6:	e7e4      	b.n	801d4c2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d4f8:	6803      	ldr	r3, [r0, #0]
 801d4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4fc:	4798      	blx	r3
 801d4fe:	4947      	ldr	r1, [pc, #284]	; (801d61c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801d500:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d504:	468a      	mov	sl, r1
 801d506:	880b      	ldrh	r3, [r1, #0]
 801d508:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801d50c:	fb03 5202 	mla	r2, r3, r2, r5
 801d510:	4373      	muls	r3, r6
 801d512:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d516:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d51a:	9307      	str	r3, [sp, #28]
 801d51c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d520:	9306      	str	r3, [sp, #24]
 801d522:	9b07      	ldr	r3, [sp, #28]
 801d524:	4298      	cmp	r0, r3
 801d526:	d270      	bcs.n	801d60a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801d528:	4621      	mov	r1, r4
 801d52a:	9b06      	ldr	r3, [sp, #24]
 801d52c:	eb00 0b03 	add.w	fp, r0, r3
 801d530:	4558      	cmp	r0, fp
 801d532:	d25d      	bcs.n	801d5f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801d534:	f851 4b04 	ldr.w	r4, [r1], #4
 801d538:	0e23      	lsrs	r3, r4, #24
 801d53a:	d014      	beq.n	801d566 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d53c:	2bff      	cmp	r3, #255	; 0xff
 801d53e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801d542:	d112      	bne.n	801d56a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d544:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d548:	d10f      	bne.n	801d56a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d54a:	0963      	lsrs	r3, r4, #5
 801d54c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801d550:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d554:	f02c 0c07 	bic.w	ip, ip, #7
 801d558:	ea43 0c0c 	orr.w	ip, r3, ip
 801d55c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d560:	ea4c 0404 	orr.w	r4, ip, r4
 801d564:	8004      	strh	r4, [r0, #0]
 801d566:	3002      	adds	r0, #2
 801d568:	e7e2      	b.n	801d530 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801d56a:	fb09 f303 	mul.w	r3, r9, r3
 801d56e:	1c5a      	adds	r2, r3, #1
 801d570:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801d574:	1212      	asrs	r2, r2, #8
 801d576:	b293      	uxth	r3, r2
 801d578:	43d2      	mvns	r2, r2
 801d57a:	8807      	ldrh	r7, [r0, #0]
 801d57c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801d580:	fb1e fe03 	smulbb	lr, lr, r3
 801d584:	123e      	asrs	r6, r7, #8
 801d586:	fa5f fc8c 	uxtb.w	ip, ip
 801d58a:	b2e4      	uxtb	r4, r4
 801d58c:	fb1c fc03 	smulbb	ip, ip, r3
 801d590:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d594:	fb14 f403 	smulbb	r4, r4, r3
 801d598:	b2d2      	uxtb	r2, r2
 801d59a:	10fd      	asrs	r5, r7, #3
 801d59c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d5a0:	00ff      	lsls	r7, r7, #3
 801d5a2:	fb06 e602 	mla	r6, r6, r2, lr
 801d5a6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d5aa:	b2ff      	uxtb	r7, r7
 801d5ac:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d5b0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d5b4:	fb05 c502 	mla	r5, r5, r2, ip
 801d5b8:	fb07 4702 	mla	r7, r7, r2, r4
 801d5bc:	b2b6      	uxth	r6, r6
 801d5be:	f106 0e01 	add.w	lr, r6, #1
 801d5c2:	b2ad      	uxth	r5, r5
 801d5c4:	b2bf      	uxth	r7, r7
 801d5c6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801d5ca:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801d5ce:	f105 0c01 	add.w	ip, r5, #1
 801d5d2:	1c7e      	adds	r6, r7, #1
 801d5d4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d5d8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d5dc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d5e0:	096d      	lsrs	r5, r5, #5
 801d5e2:	ea46 060e 	orr.w	r6, r6, lr
 801d5e6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d5ea:	432e      	orrs	r6, r5
 801d5ec:	8006      	strh	r6, [r0, #0]
 801d5ee:	e7ba      	b.n	801d566 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d5f0:	f8ba 3000 	ldrh.w	r3, [sl]
 801d5f4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801d5f8:	eba3 0308 	sub.w	r3, r3, r8
 801d5fc:	eba4 0408 	sub.w	r4, r4, r8
 801d600:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d604:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d608:	e78b      	b.n	801d522 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801d60a:	4b03      	ldr	r3, [pc, #12]	; (801d618 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d60c:	6818      	ldr	r0, [r3, #0]
 801d60e:	6803      	ldr	r3, [r0, #0]
 801d610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d612:	4798      	blx	r3
 801d614:	e76a      	b.n	801d4ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801d616:	bf00      	nop
 801d618:	2004f6c8 	.word	0x2004f6c8
 801d61c:	2004f6c2 	.word	0x2004f6c2

0801d620 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801d620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d624:	b085      	sub	sp, #20
 801d626:	466d      	mov	r5, sp
 801d628:	4616      	mov	r6, r2
 801d62a:	460c      	mov	r4, r1
 801d62c:	6810      	ldr	r0, [r2, #0]
 801d62e:	6851      	ldr	r1, [r2, #4]
 801d630:	c503      	stmia	r5!, {r0, r1}
 801d632:	6818      	ldr	r0, [r3, #0]
 801d634:	6859      	ldr	r1, [r3, #4]
 801d636:	c503      	stmia	r5!, {r0, r1}
 801d638:	4668      	mov	r0, sp
 801d63a:	f7f9 ff91 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d63e:	4631      	mov	r1, r6
 801d640:	a802      	add	r0, sp, #8
 801d642:	f7f9 ffb5 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d646:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801d64a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801d64e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801d652:	4d28      	ldr	r5, [pc, #160]	; (801d6f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801d654:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d658:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d65c:	f8bd 1000 	ldrh.w	r1, [sp]
 801d660:	6828      	ldr	r0, [r5, #0]
 801d662:	440a      	add	r2, r1
 801d664:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d668:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d66c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d670:	4413      	add	r3, r2
 801d672:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d676:	6803      	ldr	r3, [r0, #0]
 801d678:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801d67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d67e:	4798      	blx	r3
 801d680:	4e1d      	ldr	r6, [pc, #116]	; (801d6f8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801d682:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d686:	8833      	ldrh	r3, [r6, #0]
 801d688:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d68c:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801d6fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801d690:	fb03 1202 	mla	r2, r3, r2, r1
 801d694:	fb08 f303 	mul.w	r3, r8, r3
 801d698:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d69c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d6a0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801d6a4:	4298      	cmp	r0, r3
 801d6a6:	d21d      	bcs.n	801d6e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801d6a8:	eb00 080c 	add.w	r8, r0, ip
 801d6ac:	4540      	cmp	r0, r8
 801d6ae:	d20f      	bcs.n	801d6d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801d6b0:	f854 1b04 	ldr.w	r1, [r4], #4
 801d6b4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801d6b8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801d6bc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d6c0:	ea42 0209 	orr.w	r2, r2, r9
 801d6c4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801d6c8:	430a      	orrs	r2, r1
 801d6ca:	f820 2b02 	strh.w	r2, [r0], #2
 801d6ce:	e7ed      	b.n	801d6ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801d6d0:	8832      	ldrh	r2, [r6, #0]
 801d6d2:	1bd2      	subs	r2, r2, r7
 801d6d4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d6d8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d6dc:	1bd2      	subs	r2, r2, r7
 801d6de:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801d6e2:	e7df      	b.n	801d6a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801d6e4:	6828      	ldr	r0, [r5, #0]
 801d6e6:	6803      	ldr	r3, [r0, #0]
 801d6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d6ea:	4798      	blx	r3
 801d6ec:	b005      	add	sp, #20
 801d6ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6f2:	bf00      	nop
 801d6f4:	2004f6c8 	.word	0x2004f6c8
 801d6f8:	2004f6c2 	.word	0x2004f6c2
 801d6fc:	fffff800 	.word	0xfffff800

0801d700 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801d700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d704:	460e      	mov	r6, r1
 801d706:	4604      	mov	r4, r0
 801d708:	461d      	mov	r5, r3
 801d70a:	b08e      	sub	sp, #56	; 0x38
 801d70c:	6808      	ldr	r0, [r1, #0]
 801d70e:	6849      	ldr	r1, [r1, #4]
 801d710:	ab0a      	add	r3, sp, #40	; 0x28
 801d712:	c303      	stmia	r3!, {r0, r1}
 801d714:	6810      	ldr	r0, [r2, #0]
 801d716:	6851      	ldr	r1, [r2, #4]
 801d718:	ab0c      	add	r3, sp, #48	; 0x30
 801d71a:	c303      	stmia	r3!, {r0, r1}
 801d71c:	a80a      	add	r0, sp, #40	; 0x28
 801d71e:	f7f9 ff1f 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d722:	4631      	mov	r1, r6
 801d724:	a80c      	add	r0, sp, #48	; 0x30
 801d726:	f7f9 ff43 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d72a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d72e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d732:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d736:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d8e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801d73a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d73e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d742:	440c      	add	r4, r1
 801d744:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d748:	f8d8 0000 	ldr.w	r0, [r8]
 801d74c:	440a      	add	r2, r1
 801d74e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d752:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d756:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d75a:	4413      	add	r3, r2
 801d75c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d760:	6803      	ldr	r3, [r0, #0]
 801d762:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801d766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d768:	4798      	blx	r3
 801d76a:	2dff      	cmp	r5, #255	; 0xff
 801d76c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801d8ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801d770:	d124      	bne.n	801d7bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801d772:	f010 0f01 	tst.w	r0, #1
 801d776:	f8d8 0000 	ldr.w	r0, [r8]
 801d77a:	d022      	beq.n	801d7c2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801d77c:	2100      	movs	r1, #0
 801d77e:	f04f 0e01 	mov.w	lr, #1
 801d782:	f8d0 c000 	ldr.w	ip, [r0]
 801d786:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801d78a:	f8cd e018 	str.w	lr, [sp, #24]
 801d78e:	f8b9 e000 	ldrh.w	lr, [r9]
 801d792:	b2b6      	uxth	r6, r6
 801d794:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d798:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d79c:	b2bf      	uxth	r7, r7
 801d79e:	9102      	str	r1, [sp, #8]
 801d7a0:	9503      	str	r5, [sp, #12]
 801d7a2:	9601      	str	r6, [sp, #4]
 801d7a4:	9700      	str	r7, [sp, #0]
 801d7a6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d7aa:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d7ae:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801d7b2:	4621      	mov	r1, r4
 801d7b4:	47a8      	blx	r5
 801d7b6:	b00e      	add	sp, #56	; 0x38
 801d7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d7bc:	f010 0f04 	tst.w	r0, #4
 801d7c0:	e7d9      	b.n	801d776 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801d7c2:	6803      	ldr	r3, [r0, #0]
 801d7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d7c6:	4798      	blx	r3
 801d7c8:	f8b9 3000 	ldrh.w	r3, [r9]
 801d7cc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d7d0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d7d4:	435e      	muls	r6, r3
 801d7d6:	fb03 1202 	mla	r2, r3, r2, r1
 801d7da:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d7de:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d7e2:	ebac 0c07 	sub.w	ip, ip, r7
 801d7e6:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801d7ea:	2dff      	cmp	r5, #255	; 0xff
 801d7ec:	eba3 0707 	sub.w	r7, r3, r7
 801d7f0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d7f4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d7f8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801d7fc:	d049      	beq.n	801d892 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801d7fe:	43eb      	mvns	r3, r5
 801d800:	fa1f f985 	uxth.w	r9, r5
 801d804:	b2db      	uxtb	r3, r3
 801d806:	42b0      	cmp	r0, r6
 801d808:	d266      	bcs.n	801d8d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d80a:	eb00 0a0e 	add.w	sl, r0, lr
 801d80e:	4550      	cmp	r0, sl
 801d810:	4621      	mov	r1, r4
 801d812:	f104 0403 	add.w	r4, r4, #3
 801d816:	d25b      	bcs.n	801d8d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801d818:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d81c:	8802      	ldrh	r2, [r0, #0]
 801d81e:	fb11 f109 	smulbb	r1, r1, r9
 801d822:	ea4f 2822 	mov.w	r8, r2, asr #8
 801d826:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801d82a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801d82e:	fb08 1803 	mla	r8, r8, r3, r1
 801d832:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801d836:	10d5      	asrs	r5, r2, #3
 801d838:	fb11 f109 	smulbb	r1, r1, r9
 801d83c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d840:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d844:	fb05 1503 	mla	r5, r5, r3, r1
 801d848:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d84c:	00d2      	lsls	r2, r2, #3
 801d84e:	fb11 f109 	smulbb	r1, r1, r9
 801d852:	b2d2      	uxtb	r2, r2
 801d854:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d858:	fb02 1203 	mla	r2, r2, r3, r1
 801d85c:	fa1f f888 	uxth.w	r8, r8
 801d860:	b292      	uxth	r2, r2
 801d862:	f108 0101 	add.w	r1, r8, #1
 801d866:	b2ad      	uxth	r5, r5
 801d868:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801d86c:	1c51      	adds	r1, r2, #1
 801d86e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d872:	1c69      	adds	r1, r5, #1
 801d874:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d878:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801d87c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d880:	096d      	lsrs	r5, r5, #5
 801d882:	ea42 0208 	orr.w	r2, r2, r8
 801d886:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d88a:	432a      	orrs	r2, r5
 801d88c:	f820 2b02 	strh.w	r2, [r0], #2
 801d890:	e7bd      	b.n	801d80e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801d892:	4a14      	ldr	r2, [pc, #80]	; (801d8e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801d894:	42b0      	cmp	r0, r6
 801d896:	d21f      	bcs.n	801d8d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d898:	eb00 050e 	add.w	r5, r0, lr
 801d89c:	42a8      	cmp	r0, r5
 801d89e:	4621      	mov	r1, r4
 801d8a0:	f104 0403 	add.w	r4, r4, #3
 801d8a4:	d210      	bcs.n	801d8c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801d8a6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801d8aa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d8ae:	00db      	lsls	r3, r3, #3
 801d8b0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801d8b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d8b8:	430b      	orrs	r3, r1
 801d8ba:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d8be:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801d8c2:	f820 3b02 	strh.w	r3, [r0], #2
 801d8c6:	e7e9      	b.n	801d89c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801d8c8:	4438      	add	r0, r7
 801d8ca:	eb01 040c 	add.w	r4, r1, ip
 801d8ce:	e7e1      	b.n	801d894 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801d8d0:	4438      	add	r0, r7
 801d8d2:	eb01 040c 	add.w	r4, r1, ip
 801d8d6:	e796      	b.n	801d806 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801d8d8:	4b03      	ldr	r3, [pc, #12]	; (801d8e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801d8da:	6818      	ldr	r0, [r3, #0]
 801d8dc:	6803      	ldr	r3, [r0, #0]
 801d8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d8e0:	4798      	blx	r3
 801d8e2:	e768      	b.n	801d7b6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801d8e4:	fffff800 	.word	0xfffff800
 801d8e8:	2004f6c8 	.word	0x2004f6c8
 801d8ec:	2004f6c2 	.word	0x2004f6c2

0801d8f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d8f0:	b4f0      	push	{r4, r5, r6, r7}
 801d8f2:	4616      	mov	r6, r2
 801d8f4:	2e01      	cmp	r6, #1
 801d8f6:	461c      	mov	r4, r3
 801d8f8:	460d      	mov	r5, r1
 801d8fa:	9a04      	ldr	r2, [sp, #16]
 801d8fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d900:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801d904:	d012      	beq.n	801d92c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801d906:	d303      	bcc.n	801d910 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801d908:	2e02      	cmp	r6, #2
 801d90a:	d00a      	beq.n	801d922 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801d90c:	bcf0      	pop	{r4, r5, r6, r7}
 801d90e:	4770      	bx	lr
 801d910:	6805      	ldr	r5, [r0, #0]
 801d912:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801d916:	68ed      	ldr	r5, [r5, #12]
 801d918:	4613      	mov	r3, r2
 801d91a:	46ac      	mov	ip, r5
 801d91c:	4622      	mov	r2, r4
 801d91e:	bcf0      	pop	{r4, r5, r6, r7}
 801d920:	4760      	bx	ip
 801d922:	4621      	mov	r1, r4
 801d924:	4628      	mov	r0, r5
 801d926:	bcf0      	pop	{r4, r5, r6, r7}
 801d928:	f7ff bd94 	b.w	801d454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d92c:	4621      	mov	r1, r4
 801d92e:	4628      	mov	r0, r5
 801d930:	bcf0      	pop	{r4, r5, r6, r7}
 801d932:	f7ff bee5 	b.w	801d700 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801d938 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d93c:	4616      	mov	r6, r2
 801d93e:	4681      	mov	r9, r0
 801d940:	b093      	sub	sp, #76	; 0x4c
 801d942:	6810      	ldr	r0, [r2, #0]
 801d944:	4688      	mov	r8, r1
 801d946:	6851      	ldr	r1, [r2, #4]
 801d948:	ac0e      	add	r4, sp, #56	; 0x38
 801d94a:	c403      	stmia	r4!, {r0, r1}
 801d94c:	6818      	ldr	r0, [r3, #0]
 801d94e:	6859      	ldr	r1, [r3, #4]
 801d950:	ac10      	add	r4, sp, #64	; 0x40
 801d952:	c403      	stmia	r4!, {r0, r1}
 801d954:	a80e      	add	r0, sp, #56	; 0x38
 801d956:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801d95a:	f7f9 fe01 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d95e:	4631      	mov	r1, r6
 801d960:	a810      	add	r0, sp, #64	; 0x40
 801d962:	f7f9 fe25 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d966:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d96a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d96e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d972:	4e62      	ldr	r6, [pc, #392]	; (801dafc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801d974:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d978:	4489      	add	r9, r1
 801d97a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d97e:	6830      	ldr	r0, [r6, #0]
 801d980:	440a      	add	r2, r1
 801d982:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d986:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d98a:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801d98e:	4413      	add	r3, r2
 801d990:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d994:	6803      	ldr	r3, [r0, #0]
 801d996:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801d99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d99c:	4798      	blx	r3
 801d99e:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d9a2:	4f57      	ldr	r7, [pc, #348]	; (801db00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d9a4:	6830      	ldr	r0, [r6, #0]
 801d9a6:	d01d      	beq.n	801d9e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d9a8:	2200      	movs	r2, #0
 801d9aa:	6801      	ldr	r1, [r0, #0]
 801d9ac:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d9b0:	220b      	movs	r2, #11
 801d9b2:	9207      	str	r2, [sp, #28]
 801d9b4:	883a      	ldrh	r2, [r7, #0]
 801d9b6:	b2a4      	uxth	r4, r4
 801d9b8:	9206      	str	r2, [sp, #24]
 801d9ba:	2201      	movs	r2, #1
 801d9bc:	e9cd a204 	strd	sl, r2, [sp, #16]
 801d9c0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d9c4:	b2ad      	uxth	r5, r5
 801d9c6:	9203      	str	r2, [sp, #12]
 801d9c8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d9cc:	9502      	str	r5, [sp, #8]
 801d9ce:	9200      	str	r2, [sp, #0]
 801d9d0:	9401      	str	r4, [sp, #4]
 801d9d2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d9d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d9d8:	4642      	mov	r2, r8
 801d9da:	4649      	mov	r1, r9
 801d9dc:	47a0      	blx	r4
 801d9de:	b013      	add	sp, #76	; 0x4c
 801d9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9e4:	6803      	ldr	r3, [r0, #0]
 801d9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9e8:	4798      	blx	r3
 801d9ea:	f04f 0e04 	mov.w	lr, #4
 801d9ee:	883b      	ldrh	r3, [r7, #0]
 801d9f0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801d9f4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801d9f8:	435d      	muls	r5, r3
 801d9fa:	fb03 1202 	mla	r2, r3, r2, r1
 801d9fe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801da02:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801da06:	920c      	str	r2, [sp, #48]	; 0x30
 801da08:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801da0c:	1b12      	subs	r2, r2, r4
 801da0e:	920d      	str	r2, [sp, #52]	; 0x34
 801da10:	0062      	lsls	r2, r4, #1
 801da12:	1b1c      	subs	r4, r3, r4
 801da14:	0063      	lsls	r3, r4, #1
 801da16:	920a      	str	r2, [sp, #40]	; 0x28
 801da18:	930b      	str	r3, [sp, #44]	; 0x2c
 801da1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da1c:	4298      	cmp	r0, r3
 801da1e:	d266      	bcs.n	801daee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801da20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da22:	eb00 0b03 	add.w	fp, r0, r3
 801da26:	4558      	cmp	r0, fp
 801da28:	d25c      	bcs.n	801dae4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801da2a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801da2e:	fb1e e303 	smlabb	r3, lr, r3, lr
 801da32:	f858 2003 	ldr.w	r2, [r8, r3]
 801da36:	0e11      	lsrs	r1, r2, #24
 801da38:	d012      	beq.n	801da60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801da3a:	29ff      	cmp	r1, #255	; 0xff
 801da3c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801da40:	d110      	bne.n	801da64 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801da42:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801da46:	d10d      	bne.n	801da64 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801da48:	0953      	lsrs	r3, r2, #5
 801da4a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801da4e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801da52:	f027 0707 	bic.w	r7, r7, #7
 801da56:	431f      	orrs	r7, r3
 801da58:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801da5c:	433a      	orrs	r2, r7
 801da5e:	8002      	strh	r2, [r0, #0]
 801da60:	3002      	adds	r0, #2
 801da62:	e7e0      	b.n	801da26 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801da64:	fb0a f101 	mul.w	r1, sl, r1
 801da68:	1c4b      	adds	r3, r1, #1
 801da6a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801da6e:	121b      	asrs	r3, r3, #8
 801da70:	b299      	uxth	r1, r3
 801da72:	43db      	mvns	r3, r3
 801da74:	8806      	ldrh	r6, [r0, #0]
 801da76:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801da7a:	b2d2      	uxtb	r2, r2
 801da7c:	fb1c fc01 	smulbb	ip, ip, r1
 801da80:	fb12 f201 	smulbb	r2, r2, r1
 801da84:	1235      	asrs	r5, r6, #8
 801da86:	10f4      	asrs	r4, r6, #3
 801da88:	00f6      	lsls	r6, r6, #3
 801da8a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801da8e:	b2f6      	uxtb	r6, r6
 801da90:	b2ff      	uxtb	r7, r7
 801da92:	b2db      	uxtb	r3, r3
 801da94:	fb17 f701 	smulbb	r7, r7, r1
 801da98:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801da9c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801daa0:	fb05 c503 	mla	r5, r5, r3, ip
 801daa4:	fb06 2203 	mla	r2, r6, r3, r2
 801daa8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801daac:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801dab0:	fb04 7403 	mla	r4, r4, r3, r7
 801dab4:	b2ad      	uxth	r5, r5
 801dab6:	b292      	uxth	r2, r2
 801dab8:	f105 0c01 	add.w	ip, r5, #1
 801dabc:	1c57      	adds	r7, r2, #1
 801dabe:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801dac2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801dac6:	b2a4      	uxth	r4, r4
 801dac8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801dacc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801dad0:	433d      	orrs	r5, r7
 801dad2:	1c67      	adds	r7, r4, #1
 801dad4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801dad8:	0964      	lsrs	r4, r4, #5
 801dada:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801dade:	4325      	orrs	r5, r4
 801dae0:	8005      	strh	r5, [r0, #0]
 801dae2:	e7bd      	b.n	801da60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801dae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dae6:	4418      	add	r0, r3
 801dae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801daea:	4499      	add	r9, r3
 801daec:	e795      	b.n	801da1a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801daee:	4b03      	ldr	r3, [pc, #12]	; (801dafc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801daf0:	6818      	ldr	r0, [r3, #0]
 801daf2:	6803      	ldr	r3, [r0, #0]
 801daf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801daf6:	4798      	blx	r3
 801daf8:	e771      	b.n	801d9de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801dafa:	bf00      	nop
 801dafc:	2004f6c8 	.word	0x2004f6c8
 801db00:	2004f6c2 	.word	0x2004f6c2

0801db04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801db04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db08:	b087      	sub	sp, #28
 801db0a:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801db0e:	4680      	mov	r8, r0
 801db10:	460d      	mov	r5, r1
 801db12:	4614      	mov	r4, r2
 801db14:	2e00      	cmp	r6, #0
 801db16:	f000 80b9 	beq.w	801dc8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801db1a:	6810      	ldr	r0, [r2, #0]
 801db1c:	6851      	ldr	r1, [r2, #4]
 801db1e:	af02      	add	r7, sp, #8
 801db20:	c703      	stmia	r7!, {r0, r1}
 801db22:	6818      	ldr	r0, [r3, #0]
 801db24:	6859      	ldr	r1, [r3, #4]
 801db26:	af04      	add	r7, sp, #16
 801db28:	c703      	stmia	r7!, {r0, r1}
 801db2a:	a802      	add	r0, sp, #8
 801db2c:	f7f9 fd18 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801db30:	4621      	mov	r1, r4
 801db32:	a804      	add	r0, sp, #16
 801db34:	f7f9 fd3c 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801db38:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801db3c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801db40:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801db44:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801db48:	fb14 2103 	smlabb	r1, r4, r3, r2
 801db4c:	eb08 0401 	add.w	r4, r8, r1
 801db50:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801db54:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801db58:	440a      	add	r2, r1
 801db5a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801db5e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801db62:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801db66:	4413      	add	r3, r2
 801db68:	f8ad 3012 	strh.w	r3, [sp, #18]
 801db6c:	4b49      	ldr	r3, [pc, #292]	; (801dc94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801db6e:	6818      	ldr	r0, [r3, #0]
 801db70:	6803      	ldr	r3, [r0, #0]
 801db72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db74:	4798      	blx	r3
 801db76:	4b48      	ldr	r3, [pc, #288]	; (801dc98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801db78:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801db7c:	881a      	ldrh	r2, [r3, #0]
 801db7e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801db82:	2eff      	cmp	r6, #255	; 0xff
 801db84:	fb02 c101 	mla	r1, r2, r1, ip
 801db88:	fb02 f207 	mul.w	r2, r2, r7
 801db8c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801db90:	f105 0104 	add.w	r1, r5, #4
 801db94:	461d      	mov	r5, r3
 801db96:	d05a      	beq.n	801dc4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801db98:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801db9c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801dba0:	b2b6      	uxth	r6, r6
 801dba2:	fa1f fe8e 	uxth.w	lr, lr
 801dba6:	9301      	str	r3, [sp, #4]
 801dba8:	4282      	cmp	r2, r0
 801dbaa:	d96a      	bls.n	801dc82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801dbac:	eb00 0b0a 	add.w	fp, r0, sl
 801dbb0:	4583      	cmp	fp, r0
 801dbb2:	d940      	bls.n	801dc36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801dbb4:	8805      	ldrh	r5, [r0, #0]
 801dbb6:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dbba:	122f      	asrs	r7, r5, #8
 801dbbc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dbc0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801dbc4:	fb17 f70e 	smulbb	r7, r7, lr
 801dbc8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801dbcc:	00ed      	lsls	r5, r5, #3
 801dbce:	b2ed      	uxtb	r5, r5
 801dbd0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801dbd4:	fb15 f50e 	smulbb	r5, r5, lr
 801dbd8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dbdc:	fb0c 7c06 	mla	ip, ip, r6, r7
 801dbe0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801dbe4:	10df      	asrs	r7, r3, #3
 801dbe6:	00db      	lsls	r3, r3, #3
 801dbe8:	fb19 f90e 	smulbb	r9, r9, lr
 801dbec:	b2db      	uxtb	r3, r3
 801dbee:	fb03 5306 	mla	r3, r3, r6, r5
 801dbf2:	fa1f fc8c 	uxth.w	ip, ip
 801dbf6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801dbfa:	fb07 9706 	mla	r7, r7, r6, r9
 801dbfe:	f10c 0901 	add.w	r9, ip, #1
 801dc02:	b29b      	uxth	r3, r3
 801dc04:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801dc08:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801dc0c:	f103 0c01 	add.w	ip, r3, #1
 801dc10:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801dc14:	b2bf      	uxth	r7, r7
 801dc16:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801dc1a:	ea4c 0c09 	orr.w	ip, ip, r9
 801dc1e:	f107 0901 	add.w	r9, r7, #1
 801dc22:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801dc26:	097f      	lsrs	r7, r7, #5
 801dc28:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801dc2c:	ea4c 0c07 	orr.w	ip, ip, r7
 801dc30:	f820 cb02 	strh.w	ip, [r0], #2
 801dc34:	e7bc      	b.n	801dbb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801dc36:	9b01      	ldr	r3, [sp, #4]
 801dc38:	881b      	ldrh	r3, [r3, #0]
 801dc3a:	eba3 0308 	sub.w	r3, r3, r8
 801dc3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dc42:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801dc46:	eba3 0308 	sub.w	r3, r3, r8
 801dc4a:	441c      	add	r4, r3
 801dc4c:	e7ac      	b.n	801dba8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801dc4e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801dc52:	4282      	cmp	r2, r0
 801dc54:	d915      	bls.n	801dc82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801dc56:	eb00 060a 	add.w	r6, r0, sl
 801dc5a:	4286      	cmp	r6, r0
 801dc5c:	d906      	bls.n	801dc6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801dc5e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dc62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801dc66:	f820 3b02 	strh.w	r3, [r0], #2
 801dc6a:	e7f6      	b.n	801dc5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801dc6c:	882b      	ldrh	r3, [r5, #0]
 801dc6e:	eba3 0308 	sub.w	r3, r3, r8
 801dc72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dc76:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801dc7a:	eba3 0308 	sub.w	r3, r3, r8
 801dc7e:	441c      	add	r4, r3
 801dc80:	e7e7      	b.n	801dc52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801dc82:	4b04      	ldr	r3, [pc, #16]	; (801dc94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801dc84:	6818      	ldr	r0, [r3, #0]
 801dc86:	6803      	ldr	r3, [r0, #0]
 801dc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc8a:	4798      	blx	r3
 801dc8c:	b007      	add	sp, #28
 801dc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc92:	bf00      	nop
 801dc94:	2004f6c8 	.word	0x2004f6c8
 801dc98:	2004f6c2 	.word	0x2004f6c2

0801dc9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dca0:	b091      	sub	sp, #68	; 0x44
 801dca2:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801dca6:	4680      	mov	r8, r0
 801dca8:	460f      	mov	r7, r1
 801dcaa:	4614      	mov	r4, r2
 801dcac:	2d00      	cmp	r5, #0
 801dcae:	d051      	beq.n	801dd54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801dcb0:	6810      	ldr	r0, [r2, #0]
 801dcb2:	6851      	ldr	r1, [r2, #4]
 801dcb4:	ae0c      	add	r6, sp, #48	; 0x30
 801dcb6:	c603      	stmia	r6!, {r0, r1}
 801dcb8:	6818      	ldr	r0, [r3, #0]
 801dcba:	6859      	ldr	r1, [r3, #4]
 801dcbc:	ae0e      	add	r6, sp, #56	; 0x38
 801dcbe:	c603      	stmia	r6!, {r0, r1}
 801dcc0:	a80c      	add	r0, sp, #48	; 0x30
 801dcc2:	f7f9 fc4d 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dcc6:	4621      	mov	r1, r4
 801dcc8:	a80e      	add	r0, sp, #56	; 0x38
 801dcca:	f7f9 fc71 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dcce:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801dcd2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801dcd6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801dcda:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 801deb8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801dcde:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dce2:	eb08 0401 	add.w	r4, r8, r1
 801dce6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801dcea:	f8d9 0000 	ldr.w	r0, [r9]
 801dcee:	440a      	add	r2, r1
 801dcf0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801dcf4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801dcf8:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801dcfc:	4413      	add	r3, r2
 801dcfe:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801dd02:	6803      	ldr	r3, [r0, #0]
 801dd04:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801dd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd0a:	4798      	blx	r3
 801dd0c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801dd10:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801debc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801dd14:	f8d9 0000 	ldr.w	r0, [r9]
 801dd18:	d01f      	beq.n	801dd5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801dd1a:	2200      	movs	r2, #0
 801dd1c:	6801      	ldr	r1, [r0, #0]
 801dd1e:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801dd22:	220b      	movs	r2, #11
 801dd24:	9207      	str	r2, [sp, #28]
 801dd26:	f8b8 2000 	ldrh.w	r2, [r8]
 801dd2a:	b2b6      	uxth	r6, r6
 801dd2c:	9206      	str	r2, [sp, #24]
 801dd2e:	2201      	movs	r2, #1
 801dd30:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801dd34:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801dd38:	9601      	str	r6, [sp, #4]
 801dd3a:	9203      	str	r2, [sp, #12]
 801dd3c:	fa1f f28a 	uxth.w	r2, sl
 801dd40:	9202      	str	r2, [sp, #8]
 801dd42:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801dd46:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801dd4a:	9200      	str	r2, [sp, #0]
 801dd4c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801dd4e:	463a      	mov	r2, r7
 801dd50:	4621      	mov	r1, r4
 801dd52:	47a8      	blx	r5
 801dd54:	b011      	add	sp, #68	; 0x44
 801dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd5a:	6803      	ldr	r3, [r0, #0]
 801dd5c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801dd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd62:	4798      	blx	r3
 801dd64:	f8b8 2000 	ldrh.w	r2, [r8]
 801dd68:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801dd6c:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801dd70:	2dff      	cmp	r5, #255	; 0xff
 801dd72:	fb02 1303 	mla	r3, r2, r3, r1
 801dd76:	fb0a fa02 	mul.w	sl, sl, r2
 801dd7a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dd7e:	d062      	beq.n	801de46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801dd80:	ea6f 0c05 	mvn.w	ip, r5
 801dd84:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801dd88:	930a      	str	r3, [sp, #40]	; 0x28
 801dd8a:	b2ad      	uxth	r5, r5
 801dd8c:	fa5f fc8c 	uxtb.w	ip, ip
 801dd90:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801dd94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd96:	4298      	cmp	r0, r3
 801dd98:	f080 8085 	bcs.w	801dea6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801dd9c:	eb00 0b09 	add.w	fp, r0, r9
 801dda0:	4558      	cmp	r0, fp
 801dda2:	d246      	bcs.n	801de32 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801dda4:	2303      	movs	r3, #3
 801dda6:	2204      	movs	r2, #4
 801dda8:	f814 eb01 	ldrb.w	lr, [r4], #1
 801ddac:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801ddb0:	eb07 0a0e 	add.w	sl, r7, lr
 801ddb4:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801ddb8:	8803      	ldrh	r3, [r0, #0]
 801ddba:	fb18 f805 	smulbb	r8, r8, r5
 801ddbe:	1219      	asrs	r1, r3, #8
 801ddc0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ddc4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801ddc8:	fb01 810c 	mla	r1, r1, ip, r8
 801ddcc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ddd0:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ddd4:	fb1e fe05 	smulbb	lr, lr, r5
 801ddd8:	fb18 f805 	smulbb	r8, r8, r5
 801dddc:	10da      	asrs	r2, r3, #3
 801ddde:	00db      	lsls	r3, r3, #3
 801dde0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801dde4:	b2db      	uxtb	r3, r3
 801dde6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801ddea:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801ddee:	fb02 820c 	mla	r2, r2, ip, r8
 801ddf2:	fb03 e30c 	mla	r3, r3, ip, lr
 801ddf6:	b289      	uxth	r1, r1
 801ddf8:	b292      	uxth	r2, r2
 801ddfa:	b29b      	uxth	r3, r3
 801ddfc:	f101 0801 	add.w	r8, r1, #1
 801de00:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801de04:	f103 0e01 	add.w	lr, r3, #1
 801de08:	f102 0801 	add.w	r8, r2, #1
 801de0c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801de10:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801de14:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801de18:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801de1c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801de20:	ea4e 0101 	orr.w	r1, lr, r1
 801de24:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801de28:	ea41 0108 	orr.w	r1, r1, r8
 801de2c:	f820 1b02 	strh.w	r1, [r0], #2
 801de30:	e7b6      	b.n	801dda0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801de32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de34:	881b      	ldrh	r3, [r3, #0]
 801de36:	1b9b      	subs	r3, r3, r6
 801de38:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801de3c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801de40:	1b9b      	subs	r3, r3, r6
 801de42:	441c      	add	r4, r3
 801de44:	e7a6      	b.n	801dd94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801de46:	2203      	movs	r2, #3
 801de48:	2504      	movs	r5, #4
 801de4a:	491a      	ldr	r1, [pc, #104]	; (801deb4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801de4c:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801de50:	4550      	cmp	r0, sl
 801de52:	d228      	bcs.n	801dea6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801de54:	eb00 0c09 	add.w	ip, r0, r9
 801de58:	4560      	cmp	r0, ip
 801de5a:	4623      	mov	r3, r4
 801de5c:	d219      	bcs.n	801de92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801de5e:	f893 e000 	ldrb.w	lr, [r3]
 801de62:	3401      	adds	r4, #1
 801de64:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801de68:	eb07 0b0e 	add.w	fp, r7, lr
 801de6c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801de70:	f89b b001 	ldrb.w	fp, [fp, #1]
 801de74:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801de78:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801de7c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801de80:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801de84:	ea43 030b 	orr.w	r3, r3, fp
 801de88:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801de8c:	f820 3b02 	strh.w	r3, [r0], #2
 801de90:	e7e2      	b.n	801de58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801de92:	f8b8 3000 	ldrh.w	r3, [r8]
 801de96:	1b9b      	subs	r3, r3, r6
 801de98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801de9c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dea0:	1b9b      	subs	r3, r3, r6
 801dea2:	441c      	add	r4, r3
 801dea4:	e7d4      	b.n	801de50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801dea6:	4b04      	ldr	r3, [pc, #16]	; (801deb8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801dea8:	6818      	ldr	r0, [r3, #0]
 801deaa:	6803      	ldr	r3, [r0, #0]
 801deac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801deae:	4798      	blx	r3
 801deb0:	e750      	b.n	801dd54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801deb2:	bf00      	nop
 801deb4:	fffff800 	.word	0xfffff800
 801deb8:	2004f6c8 	.word	0x2004f6c8
 801debc:	2004f6c2 	.word	0x2004f6c2

0801dec0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801dec0:	b430      	push	{r4, r5}
 801dec2:	780d      	ldrb	r5, [r1, #0]
 801dec4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801dec8:	2d01      	cmp	r5, #1
 801deca:	d00a      	beq.n	801dee2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801decc:	d305      	bcc.n	801deda <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801dece:	2d02      	cmp	r5, #2
 801ded0:	d10b      	bne.n	801deea <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801ded2:	9402      	str	r4, [sp, #8]
 801ded4:	bc30      	pop	{r4, r5}
 801ded6:	f7ff be15 	b.w	801db04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801deda:	9402      	str	r4, [sp, #8]
 801dedc:	bc30      	pop	{r4, r5}
 801dede:	f7ff bd2b 	b.w	801d938 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801dee2:	9402      	str	r4, [sp, #8]
 801dee4:	bc30      	pop	{r4, r5}
 801dee6:	f7ff bed9 	b.w	801dc9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801deea:	bc30      	pop	{r4, r5}
 801deec:	4770      	bx	lr
	...

0801def0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801def0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801def4:	4617      	mov	r7, r2
 801def6:	4604      	mov	r4, r0
 801def8:	460e      	mov	r6, r1
 801defa:	b087      	sub	sp, #28
 801defc:	6810      	ldr	r0, [r2, #0]
 801defe:	6851      	ldr	r1, [r2, #4]
 801df00:	ad02      	add	r5, sp, #8
 801df02:	c503      	stmia	r5!, {r0, r1}
 801df04:	6818      	ldr	r0, [r3, #0]
 801df06:	6859      	ldr	r1, [r3, #4]
 801df08:	ad04      	add	r5, sp, #16
 801df0a:	c503      	stmia	r5!, {r0, r1}
 801df0c:	a802      	add	r0, sp, #8
 801df0e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801df12:	f7f9 fb25 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df16:	4639      	mov	r1, r7
 801df18:	a804      	add	r0, sp, #16
 801df1a:	f7f9 fb49 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df1e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801df22:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801df26:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801df2a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801df2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801df32:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801df36:	440e      	add	r6, r1
 801df38:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801df3c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801df40:	440a      	add	r2, r1
 801df42:	f8ad 2010 	strh.w	r2, [sp, #16]
 801df46:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801df4a:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 801e138 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801df4e:	4413      	add	r3, r2
 801df50:	f8ad 3012 	strh.w	r3, [sp, #18]
 801df54:	4b77      	ldr	r3, [pc, #476]	; (801e134 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801df56:	6818      	ldr	r0, [r3, #0]
 801df58:	6803      	ldr	r3, [r0, #0]
 801df5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df5c:	4798      	blx	r3
 801df5e:	f8b9 b000 	ldrh.w	fp, [r9]
 801df62:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801df66:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801df6a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801df6e:	fb0b 2303 	mla	r3, fp, r3, r2
 801df72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801df76:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801df7a:	fb05 f50b 	mul.w	r5, r5, fp
 801df7e:	9300      	str	r3, [sp, #0]
 801df80:	d069      	beq.n	801e056 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801df82:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801df86:	4558      	cmp	r0, fp
 801df88:	f080 80cc 	bcs.w	801e124 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801df8c:	4631      	mov	r1, r6
 801df8e:	9b00      	ldr	r3, [sp, #0]
 801df90:	18c3      	adds	r3, r0, r3
 801df92:	9301      	str	r3, [sp, #4]
 801df94:	9b01      	ldr	r3, [sp, #4]
 801df96:	4298      	cmp	r0, r3
 801df98:	d24f      	bcs.n	801e03a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801df9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801df9e:	2a00      	cmp	r2, #0
 801dfa0:	d048      	beq.n	801e034 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dfa2:	fb0a f202 	mul.w	r2, sl, r2
 801dfa6:	1c53      	adds	r3, r2, #1
 801dfa8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dfac:	121b      	asrs	r3, r3, #8
 801dfae:	d041      	beq.n	801e034 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dfb0:	b29e      	uxth	r6, r3
 801dfb2:	43db      	mvns	r3, r3
 801dfb4:	8802      	ldrh	r2, [r0, #0]
 801dfb6:	b2db      	uxtb	r3, r3
 801dfb8:	1215      	asrs	r5, r2, #8
 801dfba:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dfbe:	f8b4 c000 	ldrh.w	ip, [r4]
 801dfc2:	fb15 f503 	smulbb	r5, r5, r3
 801dfc6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801dfca:	00d2      	lsls	r2, r2, #3
 801dfcc:	b2d2      	uxtb	r2, r2
 801dfce:	ea4f 272c 	mov.w	r7, ip, asr #8
 801dfd2:	fb12 f203 	smulbb	r2, r2, r3
 801dfd6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dfda:	fb07 5706 	mla	r7, r7, r6, r5
 801dfde:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801dfe2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801dfe6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dfea:	fb1e fe03 	smulbb	lr, lr, r3
 801dfee:	fa5f fc8c 	uxtb.w	ip, ip
 801dff2:	fb0c 2c06 	mla	ip, ip, r6, r2
 801dff6:	b2bf      	uxth	r7, r7
 801dff8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dffc:	fb05 e506 	mla	r5, r5, r6, lr
 801e000:	f107 0e01 	add.w	lr, r7, #1
 801e004:	fa1f fc8c 	uxth.w	ip, ip
 801e008:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801e00c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801e010:	f10c 0701 	add.w	r7, ip, #1
 801e014:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e018:	b2ad      	uxth	r5, r5
 801e01a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e01e:	ea47 070e 	orr.w	r7, r7, lr
 801e022:	f105 0e01 	add.w	lr, r5, #1
 801e026:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801e02a:	096d      	lsrs	r5, r5, #5
 801e02c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e030:	432f      	orrs	r7, r5
 801e032:	8007      	strh	r7, [r0, #0]
 801e034:	3002      	adds	r0, #2
 801e036:	3402      	adds	r4, #2
 801e038:	e7ac      	b.n	801df94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801e03a:	f8b9 3000 	ldrh.w	r3, [r9]
 801e03e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801e042:	eba3 0308 	sub.w	r3, r3, r8
 801e046:	eba6 0608 	sub.w	r6, r6, r8
 801e04a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801e04e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e052:	440e      	add	r6, r1
 801e054:	e797      	b.n	801df86 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801e056:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801e05a:	42a8      	cmp	r0, r5
 801e05c:	d262      	bcs.n	801e124 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801e05e:	4631      	mov	r1, r6
 801e060:	9b00      	ldr	r3, [sp, #0]
 801e062:	eb00 0b03 	add.w	fp, r0, r3
 801e066:	4558      	cmp	r0, fp
 801e068:	d24e      	bcs.n	801e108 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801e06a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e06e:	b12b      	cbz	r3, 801e07c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801e070:	2bff      	cmp	r3, #255	; 0xff
 801e072:	f8b4 e000 	ldrh.w	lr, [r4]
 801e076:	d104      	bne.n	801e082 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801e078:	f8a0 e000 	strh.w	lr, [r0]
 801e07c:	3002      	adds	r0, #2
 801e07e:	3402      	adds	r4, #2
 801e080:	e7f1      	b.n	801e066 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801e082:	b29f      	uxth	r7, r3
 801e084:	43db      	mvns	r3, r3
 801e086:	8802      	ldrh	r2, [r0, #0]
 801e088:	b2db      	uxtb	r3, r3
 801e08a:	1216      	asrs	r6, r2, #8
 801e08c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e090:	fb16 f603 	smulbb	r6, r6, r3
 801e094:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801e098:	00d2      	lsls	r2, r2, #3
 801e09a:	b2d2      	uxtb	r2, r2
 801e09c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e0a0:	fb1a fa03 	smulbb	sl, sl, r3
 801e0a4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e0a8:	fb12 f303 	smulbb	r3, r2, r3
 801e0ac:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e0b0:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e0b4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e0b8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e0bc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e0c0:	fa5f fe8e 	uxtb.w	lr, lr
 801e0c4:	fb06 a607 	mla	r6, r6, r7, sl
 801e0c8:	fb0e 3307 	mla	r3, lr, r7, r3
 801e0cc:	fa1f fc8c 	uxth.w	ip, ip
 801e0d0:	f10c 0201 	add.w	r2, ip, #1
 801e0d4:	b2b6      	uxth	r6, r6
 801e0d6:	b29b      	uxth	r3, r3
 801e0d8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e0dc:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801e0e0:	f106 0a01 	add.w	sl, r6, #1
 801e0e4:	f103 0c01 	add.w	ip, r3, #1
 801e0e8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e0ec:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801e0f0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e0f4:	0976      	lsrs	r6, r6, #5
 801e0f6:	ea4c 0c02 	orr.w	ip, ip, r2
 801e0fa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e0fe:	ea4c 0c06 	orr.w	ip, ip, r6
 801e102:	f8a0 c000 	strh.w	ip, [r0]
 801e106:	e7b9      	b.n	801e07c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801e108:	f8b9 3000 	ldrh.w	r3, [r9]
 801e10c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801e110:	eba3 0308 	sub.w	r3, r3, r8
 801e114:	eba6 0608 	sub.w	r6, r6, r8
 801e118:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801e11c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e120:	440e      	add	r6, r1
 801e122:	e79a      	b.n	801e05a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801e124:	4b03      	ldr	r3, [pc, #12]	; (801e134 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801e126:	6818      	ldr	r0, [r3, #0]
 801e128:	6803      	ldr	r3, [r0, #0]
 801e12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e12c:	4798      	blx	r3
 801e12e:	b007      	add	sp, #28
 801e130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e134:	2004f6c8 	.word	0x2004f6c8
 801e138:	2004f6c2 	.word	0x2004f6c2

0801e13c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e140:	b089      	sub	sp, #36	; 0x24
 801e142:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801e146:	4682      	mov	sl, r0
 801e148:	460f      	mov	r7, r1
 801e14a:	4691      	mov	r9, r2
 801e14c:	4698      	mov	r8, r3
 801e14e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e150:	2e00      	cmp	r6, #0
 801e152:	d036      	beq.n	801e1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e154:	4608      	mov	r0, r1
 801e156:	f7fc f86d 	bl	801a234 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e15a:	4605      	mov	r5, r0
 801e15c:	4638      	mov	r0, r7
 801e15e:	f7fc f89d 	bl	801a29c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e162:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e166:	4638      	mov	r0, r7
 801e168:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e16c:	f8ad 500c 	strh.w	r5, [sp, #12]
 801e170:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e174:	f7fc f94a 	bl	801a40c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e178:	4605      	mov	r5, r0
 801e17a:	4638      	mov	r0, r7
 801e17c:	f7fc f976 	bl	801a46c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e180:	4681      	mov	r9, r0
 801e182:	4638      	mov	r0, r7
 801e184:	f7fc f9c6 	bl	801a514 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e188:	280b      	cmp	r0, #11
 801e18a:	d81a      	bhi.n	801e1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e18c:	e8df f000 	tbb	[pc, r0]
 801e190:	1906aebd 	.word	0x1906aebd
 801e194:	19191919 	.word	0x19191919
 801e198:	b5191919 	.word	0xb5191919
 801e19c:	4bb0      	ldr	r3, [pc, #704]	; (801e460 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801e19e:	6818      	ldr	r0, [r3, #0]
 801e1a0:	6803      	ldr	r3, [r0, #0]
 801e1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1a4:	4798      	blx	r3
 801e1a6:	2eff      	cmp	r6, #255	; 0xff
 801e1a8:	d121      	bne.n	801e1ee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801e1aa:	0683      	lsls	r3, r0, #26
 801e1ac:	d41f      	bmi.n	801e1ee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801e1ae:	4638      	mov	r0, r7
 801e1b0:	f7fc f8f4 	bl	801a39c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e1b4:	b940      	cbnz	r0, 801e1c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801e1b6:	4623      	mov	r3, r4
 801e1b8:	aa02      	add	r2, sp, #8
 801e1ba:	4629      	mov	r1, r5
 801e1bc:	4650      	mov	r0, sl
 801e1be:	f7ff fa2f 	bl	801d620 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801e1c2:	b009      	add	sp, #36	; 0x24
 801e1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1c8:	f10d 0818 	add.w	r8, sp, #24
 801e1cc:	4639      	mov	r1, r7
 801e1ce:	4640      	mov	r0, r8
 801e1d0:	af04      	add	r7, sp, #16
 801e1d2:	f7fc f897 	bl	801a304 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e1d6:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e1da:	e887 0003 	stmia.w	r7, {r0, r1}
 801e1de:	4638      	mov	r0, r7
 801e1e0:	4621      	mov	r1, r4
 801e1e2:	f7f5 fc71 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 801e1e6:	4638      	mov	r0, r7
 801e1e8:	f7f5 fcb1 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e1ec:	b130      	cbz	r0, 801e1fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801e1ee:	4633      	mov	r3, r6
 801e1f0:	4622      	mov	r2, r4
 801e1f2:	a902      	add	r1, sp, #8
 801e1f4:	4628      	mov	r0, r5
 801e1f6:	f7ff f92d 	bl	801d454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e1fa:	e7e2      	b.n	801e1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e1fc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e200:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e204:	4293      	cmp	r3, r2
 801e206:	dd12      	ble.n	801e22e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801e208:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e20c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e210:	1a9b      	subs	r3, r3, r2
 801e212:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e216:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e21a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e21e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e222:	4642      	mov	r2, r8
 801e224:	4633      	mov	r3, r6
 801e226:	a902      	add	r1, sp, #8
 801e228:	4628      	mov	r0, r5
 801e22a:	f7ff f913 	bl	801d454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e22e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e232:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e236:	4293      	cmp	r3, r2
 801e238:	dd12      	ble.n	801e260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801e23a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e23e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e242:	1a9b      	subs	r3, r3, r2
 801e244:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e248:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e24c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e250:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e254:	23ff      	movs	r3, #255	; 0xff
 801e256:	4642      	mov	r2, r8
 801e258:	a902      	add	r1, sp, #8
 801e25a:	4628      	mov	r0, r5
 801e25c:	f7ff f8fa 	bl	801d454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e260:	463b      	mov	r3, r7
 801e262:	aa02      	add	r2, sp, #8
 801e264:	4629      	mov	r1, r5
 801e266:	4650      	mov	r0, sl
 801e268:	f7ff f9da 	bl	801d620 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801e26c:	88a2      	ldrh	r2, [r4, #4]
 801e26e:	8823      	ldrh	r3, [r4, #0]
 801e270:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e274:	4413      	add	r3, r2
 801e276:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e27a:	b29b      	uxth	r3, r3
 801e27c:	440a      	add	r2, r1
 801e27e:	b292      	uxth	r2, r2
 801e280:	b211      	sxth	r1, r2
 801e282:	b218      	sxth	r0, r3
 801e284:	4288      	cmp	r0, r1
 801e286:	dd12      	ble.n	801e2ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801e288:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e28c:	1a9b      	subs	r3, r3, r2
 801e28e:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801e292:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e296:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e29a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e29e:	23ff      	movs	r3, #255	; 0xff
 801e2a0:	4642      	mov	r2, r8
 801e2a2:	a902      	add	r1, sp, #8
 801e2a4:	4628      	mov	r0, r5
 801e2a6:	f8ad 601a 	strh.w	r6, [sp, #26]
 801e2aa:	f7ff f8d3 	bl	801d454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e2ae:	88e2      	ldrh	r2, [r4, #6]
 801e2b0:	8863      	ldrh	r3, [r4, #2]
 801e2b2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e2b6:	4413      	add	r3, r2
 801e2b8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e2bc:	b29b      	uxth	r3, r3
 801e2be:	440a      	add	r2, r1
 801e2c0:	b292      	uxth	r2, r2
 801e2c2:	b211      	sxth	r1, r2
 801e2c4:	b218      	sxth	r0, r3
 801e2c6:	4288      	cmp	r0, r1
 801e2c8:	f77f af7b 	ble.w	801e1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e2cc:	f9b4 6000 	ldrsh.w	r6, [r4]
 801e2d0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e2d4:	1a9b      	subs	r3, r3, r2
 801e2d6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e2da:	f8ad 6018 	strh.w	r6, [sp, #24]
 801e2de:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e2e2:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e2e6:	23ff      	movs	r3, #255	; 0xff
 801e2e8:	4642      	mov	r2, r8
 801e2ea:	e782      	b.n	801e1f2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801e2ec:	4633      	mov	r3, r6
 801e2ee:	4622      	mov	r2, r4
 801e2f0:	a902      	add	r1, sp, #8
 801e2f2:	4628      	mov	r0, r5
 801e2f4:	f7ff fa04 	bl	801d700 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801e2f8:	e763      	b.n	801e1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e2fa:	9600      	str	r6, [sp, #0]
 801e2fc:	4623      	mov	r3, r4
 801e2fe:	aa02      	add	r2, sp, #8
 801e300:	4649      	mov	r1, r9
 801e302:	4628      	mov	r0, r5
 801e304:	f7ff fddc 	bl	801dec0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e308:	e75b      	b.n	801e1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e30a:	4638      	mov	r0, r7
 801e30c:	f7fc f846 	bl	801a39c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e310:	b950      	cbnz	r0, 801e328 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801e312:	e9cd 6000 	strd	r6, r0, [sp]
 801e316:	f8da 3000 	ldr.w	r3, [sl]
 801e31a:	aa02      	add	r2, sp, #8
 801e31c:	68de      	ldr	r6, [r3, #12]
 801e31e:	4629      	mov	r1, r5
 801e320:	4623      	mov	r3, r4
 801e322:	4650      	mov	r0, sl
 801e324:	47b0      	blx	r6
 801e326:	e74c      	b.n	801e1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e328:	f10d 0818 	add.w	r8, sp, #24
 801e32c:	4639      	mov	r1, r7
 801e32e:	4640      	mov	r0, r8
 801e330:	af04      	add	r7, sp, #16
 801e332:	f7fb ffe7 	bl	801a304 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e336:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e33a:	e887 0003 	stmia.w	r7, {r0, r1}
 801e33e:	4638      	mov	r0, r7
 801e340:	4621      	mov	r1, r4
 801e342:	f7f5 fbc1 	bl	8013ac8 <_ZN8touchgfx4RectaNERKS0_>
 801e346:	4638      	mov	r0, r7
 801e348:	f7f5 fc01 	bl	8013b4e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e34c:	b138      	cbz	r0, 801e35e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801e34e:	4623      	mov	r3, r4
 801e350:	9600      	str	r6, [sp, #0]
 801e352:	aa02      	add	r2, sp, #8
 801e354:	4649      	mov	r1, r9
 801e356:	4628      	mov	r0, r5
 801e358:	f7ff fdca 	bl	801def0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e35c:	e731      	b.n	801e1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e35e:	e9cd 6000 	strd	r6, r0, [sp]
 801e362:	f8da 3000 	ldr.w	r3, [sl]
 801e366:	aa02      	add	r2, sp, #8
 801e368:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801e36c:	4629      	mov	r1, r5
 801e36e:	463b      	mov	r3, r7
 801e370:	4650      	mov	r0, sl
 801e372:	47d8      	blx	fp
 801e374:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e378:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e37c:	4293      	cmp	r3, r2
 801e37e:	dd13      	ble.n	801e3a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801e380:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e384:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e388:	1a9b      	subs	r3, r3, r2
 801e38a:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e38e:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e392:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e396:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e39a:	9600      	str	r6, [sp, #0]
 801e39c:	4643      	mov	r3, r8
 801e39e:	aa02      	add	r2, sp, #8
 801e3a0:	4649      	mov	r1, r9
 801e3a2:	4628      	mov	r0, r5
 801e3a4:	f7ff fda4 	bl	801def0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e3a8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e3ac:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e3b0:	4293      	cmp	r3, r2
 801e3b2:	dd13      	ble.n	801e3dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801e3b4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e3b8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e3bc:	1a9b      	subs	r3, r3, r2
 801e3be:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e3c2:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e3c6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e3ca:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e3ce:	9600      	str	r6, [sp, #0]
 801e3d0:	4643      	mov	r3, r8
 801e3d2:	aa02      	add	r2, sp, #8
 801e3d4:	4649      	mov	r1, r9
 801e3d6:	4628      	mov	r0, r5
 801e3d8:	f7ff fd8a 	bl	801def0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e3dc:	88a2      	ldrh	r2, [r4, #4]
 801e3de:	8823      	ldrh	r3, [r4, #0]
 801e3e0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e3e4:	4413      	add	r3, r2
 801e3e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e3ea:	b29b      	uxth	r3, r3
 801e3ec:	440a      	add	r2, r1
 801e3ee:	b292      	uxth	r2, r2
 801e3f0:	b211      	sxth	r1, r2
 801e3f2:	b218      	sxth	r0, r3
 801e3f4:	4288      	cmp	r0, r1
 801e3f6:	dd13      	ble.n	801e420 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801e3f8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e3fc:	1a9b      	subs	r3, r3, r2
 801e3fe:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801e402:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e406:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e40a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e40e:	9600      	str	r6, [sp, #0]
 801e410:	4643      	mov	r3, r8
 801e412:	aa02      	add	r2, sp, #8
 801e414:	4649      	mov	r1, r9
 801e416:	4628      	mov	r0, r5
 801e418:	f8ad 701a 	strh.w	r7, [sp, #26]
 801e41c:	f7ff fd68 	bl	801def0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e420:	88e2      	ldrh	r2, [r4, #6]
 801e422:	8863      	ldrh	r3, [r4, #2]
 801e424:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e428:	4413      	add	r3, r2
 801e42a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e42e:	b29b      	uxth	r3, r3
 801e430:	440a      	add	r2, r1
 801e432:	b292      	uxth	r2, r2
 801e434:	b211      	sxth	r1, r2
 801e436:	b218      	sxth	r0, r3
 801e438:	4288      	cmp	r0, r1
 801e43a:	f77f aec2 	ble.w	801e1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e43e:	f9b4 7000 	ldrsh.w	r7, [r4]
 801e442:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e446:	1a9b      	subs	r3, r3, r2
 801e448:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e44c:	f8ad 7018 	strh.w	r7, [sp, #24]
 801e450:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e454:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e458:	9600      	str	r6, [sp, #0]
 801e45a:	4643      	mov	r3, r8
 801e45c:	e779      	b.n	801e352 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801e45e:	bf00      	nop
 801e460:	2004f6c8 	.word	0x2004f6c8

0801e464 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801e464:	b180      	cbz	r0, 801e488 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801e466:	2903      	cmp	r1, #3
 801e468:	d81c      	bhi.n	801e4a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e46a:	e8df f001 	tbb	[pc, r1]
 801e46e:	1d02      	.short	0x1d02
 801e470:	1f08      	.short	0x1f08
 801e472:	4b10      	ldr	r3, [pc, #64]	; (801e4b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e474:	8818      	ldrh	r0, [r3, #0]
 801e476:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e47a:	4240      	negs	r0, r0
 801e47c:	4770      	bx	lr
 801e47e:	4b0d      	ldr	r3, [pc, #52]	; (801e4b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e480:	8818      	ldrh	r0, [r3, #0]
 801e482:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e486:	4770      	bx	lr
 801e488:	2903      	cmp	r1, #3
 801e48a:	d80b      	bhi.n	801e4a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e48c:	a301      	add	r3, pc, #4	; (adr r3, 801e494 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801e48e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e492:	bf00      	nop
 801e494:	0801e4a9 	.word	0x0801e4a9
 801e498:	0801e47f 	.word	0x0801e47f
 801e49c:	0801e4ad 	.word	0x0801e4ad
 801e4a0:	0801e473 	.word	0x0801e473
 801e4a4:	2000      	movs	r0, #0
 801e4a6:	4770      	bx	lr
 801e4a8:	2001      	movs	r0, #1
 801e4aa:	4770      	bx	lr
 801e4ac:	f04f 30ff 	mov.w	r0, #4294967295
 801e4b0:	4770      	bx	lr
 801e4b2:	bf00      	nop
 801e4b4:	2004f6c2 	.word	0x2004f6c2

0801e4b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801e4b8:	b180      	cbz	r0, 801e4dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801e4ba:	2903      	cmp	r1, #3
 801e4bc:	d81c      	bhi.n	801e4f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e4be:	e8df f001 	tbb	[pc, r1]
 801e4c2:	021d      	.short	0x021d
 801e4c4:	071f      	.short	0x071f
 801e4c6:	4b10      	ldr	r3, [pc, #64]	; (801e508 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e4c8:	8818      	ldrh	r0, [r3, #0]
 801e4ca:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e4ce:	4770      	bx	lr
 801e4d0:	4b0d      	ldr	r3, [pc, #52]	; (801e508 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e4d2:	8818      	ldrh	r0, [r3, #0]
 801e4d4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e4d8:	4240      	negs	r0, r0
 801e4da:	4770      	bx	lr
 801e4dc:	2903      	cmp	r1, #3
 801e4de:	d80b      	bhi.n	801e4f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e4e0:	a301      	add	r3, pc, #4	; (adr r3, 801e4e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801e4e2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e4e6:	bf00      	nop
 801e4e8:	0801e4c7 	.word	0x0801e4c7
 801e4ec:	0801e501 	.word	0x0801e501
 801e4f0:	0801e4d1 	.word	0x0801e4d1
 801e4f4:	0801e4fd 	.word	0x0801e4fd
 801e4f8:	2000      	movs	r0, #0
 801e4fa:	4770      	bx	lr
 801e4fc:	2001      	movs	r0, #1
 801e4fe:	4770      	bx	lr
 801e500:	f04f 30ff 	mov.w	r0, #4294967295
 801e504:	4770      	bx	lr
 801e506:	bf00      	nop
 801e508:	2004f6c2 	.word	0x2004f6c2

0801e50c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e510:	b099      	sub	sp, #100	; 0x64
 801e512:	910b      	str	r1, [sp, #44]	; 0x2c
 801e514:	a914      	add	r1, sp, #80	; 0x50
 801e516:	e881 000c 	stmia.w	r1, {r2, r3}
 801e51a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801e51e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801e522:	f891 900d 	ldrb.w	r9, [r1, #13]
 801e526:	9309      	str	r3, [sp, #36]	; 0x24
 801e528:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801e52c:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801e530:	9310      	str	r3, [sp, #64]	; 0x40
 801e532:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801e536:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801e53a:	930c      	str	r3, [sp, #48]	; 0x30
 801e53c:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801e540:	798f      	ldrb	r7, [r1, #6]
 801e542:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801e546:	431f      	orrs	r7, r3
 801e548:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801e54c:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801e550:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801e554:	f000 8194 	beq.w	801e880 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e558:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801e55c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801e560:	f891 9007 	ldrb.w	r9, [r1, #7]
 801e564:	ea59 0903 	orrs.w	r9, r9, r3
 801e568:	f000 818a 	beq.w	801e880 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e56c:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e570:	b29b      	uxth	r3, r3
 801e572:	2d00      	cmp	r5, #0
 801e574:	f000 812f 	beq.w	801e7d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 801e578:	1aed      	subs	r5, r5, r3
 801e57a:	b2ad      	uxth	r5, r5
 801e57c:	042b      	lsls	r3, r5, #16
 801e57e:	d502      	bpl.n	801e586 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e580:	1b64      	subs	r4, r4, r5
 801e582:	2500      	movs	r5, #0
 801e584:	b224      	sxth	r4, r4
 801e586:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e58a:	a814      	add	r0, sp, #80	; 0x50
 801e58c:	428c      	cmp	r4, r1
 801e58e:	b28b      	uxth	r3, r1
 801e590:	bfbf      	itttt	lt
 801e592:	18ed      	addlt	r5, r5, r3
 801e594:	1b2c      	sublt	r4, r5, r4
 801e596:	b2a5      	uxthlt	r5, r4
 801e598:	460c      	movlt	r4, r1
 801e59a:	8891      	ldrh	r1, [r2, #4]
 801e59c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e5a0:	440b      	add	r3, r1
 801e5a2:	b21b      	sxth	r3, r3
 801e5a4:	930f      	str	r3, [sp, #60]	; 0x3c
 801e5a6:	88d3      	ldrh	r3, [r2, #6]
 801e5a8:	8852      	ldrh	r2, [r2, #2]
 801e5aa:	4621      	mov	r1, r4
 801e5ac:	4413      	add	r3, r2
 801e5ae:	b21b      	sxth	r3, r3
 801e5b0:	930d      	str	r3, [sp, #52]	; 0x34
 801e5b2:	4bbd      	ldr	r3, [pc, #756]	; (801e8a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801e5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e5b6:	f893 b000 	ldrb.w	fp, [r3]
 801e5ba:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e5be:	f1dc 0300 	rsbs	r3, ip, #0
 801e5c2:	eb43 030c 	adc.w	r3, r3, ip
 801e5c6:	930e      	str	r3, [sp, #56]	; 0x38
 801e5c8:	4653      	mov	r3, sl
 801e5ca:	f7f8 fe43 	bl	8017254 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e5ce:	4621      	mov	r1, r4
 801e5d0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801e5d4:	4653      	mov	r3, sl
 801e5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e5d8:	a814      	add	r0, sp, #80	; 0x50
 801e5da:	f7f8 fe58 	bl	801728e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e5de:	a918      	add	r1, sp, #96	; 0x60
 801e5e0:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e5e4:	a817      	add	r0, sp, #92	; 0x5c
 801e5e6:	f7f8 ff79 	bl	80174dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e5ea:	f1ba 0f00 	cmp.w	sl, #0
 801e5ee:	f040 80f5 	bne.w	801e7dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801e5f2:	f1bb 0f01 	cmp.w	fp, #1
 801e5f6:	f040 80f9 	bne.w	801e7ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 801e5fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	f040 8144 	bne.w	801e88a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 801e602:	b2ba      	uxth	r2, r7
 801e604:	b905      	cbnz	r5, 801e608 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801e606:	b16e      	cbz	r6, 801e624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801e608:	4631      	mov	r1, r6
 801e60a:	fb06 5302 	mla	r3, r6, r2, r5
 801e60e:	fb08 f303 	mul.w	r3, r8, r3
 801e612:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801e614:	f003 0607 	and.w	r6, r3, #7
 801e618:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801e61c:	9328      	str	r3, [sp, #160]	; 0xa0
 801e61e:	eba9 0301 	sub.w	r3, r9, r1
 801e622:	930a      	str	r3, [sp, #40]	; 0x28
 801e624:	4651      	mov	r1, sl
 801e626:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e628:	f7ff ff1c 	bl	801e464 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801e62c:	4681      	mov	r9, r0
 801e62e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e630:	f7ff ff42 	bl	801e4b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801e634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e636:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e638:	4683      	mov	fp, r0
 801e63a:	eba3 0a01 	sub.w	sl, r3, r1
 801e63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e640:	459a      	cmp	sl, r3
 801e642:	bfa8      	it	ge
 801e644:	469a      	movge	sl, r3
 801e646:	f1ba 0f00 	cmp.w	sl, #0
 801e64a:	f340 8119 	ble.w	801e880 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e64e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e650:	1b64      	subs	r4, r4, r5
 801e652:	1b1c      	subs	r4, r3, r4
 801e654:	42bc      	cmp	r4, r7
 801e656:	bfd4      	ite	le
 801e658:	ebc5 0504 	rsble	r5, r5, r4
 801e65c:	ebc5 0507 	rsbgt	r5, r5, r7
 801e660:	2d00      	cmp	r5, #0
 801e662:	f340 810d 	ble.w	801e880 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e666:	1b52      	subs	r2, r2, r5
 801e668:	fb08 f302 	mul.w	r3, r8, r2
 801e66c:	930f      	str	r3, [sp, #60]	; 0x3c
 801e66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e670:	2b00      	cmp	r3, #0
 801e672:	f040 8115 	bne.w	801e8a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 801e676:	4b8d      	ldr	r3, [pc, #564]	; (801e8ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801e678:	6818      	ldr	r0, [r3, #0]
 801e67a:	6803      	ldr	r3, [r0, #0]
 801e67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e67e:	4798      	blx	r3
 801e680:	2301      	movs	r3, #1
 801e682:	fa03 f308 	lsl.w	r3, r3, r8
 801e686:	4a8a      	ldr	r2, [pc, #552]	; (801e8b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801e688:	3b01      	subs	r3, #1
 801e68a:	b2db      	uxtb	r3, r3
 801e68c:	8811      	ldrh	r1, [r2, #0]
 801e68e:	930e      	str	r3, [sp, #56]	; 0x38
 801e690:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e694:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e698:	fb01 2303 	mla	r3, r1, r3, r2
 801e69c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e6a0:	930a      	str	r3, [sp, #40]	; 0x28
 801e6a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e6a4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e6a8:	9313      	str	r3, [sp, #76]	; 0x4c
 801e6aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e6ac:	0a19      	lsrs	r1, r3, #8
 801e6ae:	b2cb      	uxtb	r3, r1
 801e6b0:	9312      	str	r3, [sp, #72]	; 0x48
 801e6b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e6b4:	b2db      	uxtb	r3, r3
 801e6b6:	9311      	str	r3, [sp, #68]	; 0x44
 801e6b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e6ba:	095a      	lsrs	r2, r3, #5
 801e6bc:	4b7d      	ldr	r3, [pc, #500]	; (801e8b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e6be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e6c2:	400b      	ands	r3, r1
 801e6c4:	4313      	orrs	r3, r2
 801e6c6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e6c8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e6cc:	4313      	orrs	r3, r2
 801e6ce:	b29b      	uxth	r3, r3
 801e6d0:	9310      	str	r3, [sp, #64]	; 0x40
 801e6d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e6d4:	781a      	ldrb	r2, [r3, #0]
 801e6d6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801e6da:	fb05 b919 	mls	r9, r5, r9, fp
 801e6de:	fb03 fb05 	mul.w	fp, r3, r5
 801e6e2:	4132      	asrs	r2, r6
 801e6e4:	b2d2      	uxtb	r2, r2
 801e6e6:	930d      	str	r3, [sp, #52]	; 0x34
 801e6e8:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801e6ec:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e6f0:	f0c0 80f3 	bcc.w	801e8da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801e6f4:	46ae      	mov	lr, r5
 801e6f6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801e6fa:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e6fe:	f0c0 80db 	bcc.w	801e8b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801e702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e704:	4013      	ands	r3, r2
 801e706:	d055      	beq.n	801e7b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801e708:	20ff      	movs	r0, #255	; 0xff
 801e70a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e70c:	fb90 f1f1 	sdiv	r1, r0, r1
 801e710:	434b      	muls	r3, r1
 801e712:	2bfe      	cmp	r3, #254	; 0xfe
 801e714:	dd03      	ble.n	801e71e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801e716:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e718:	4281      	cmp	r1, r0
 801e71a:	f000 80c3 	beq.w	801e8a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e71e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e720:	f8bc 4000 	ldrh.w	r4, [ip]
 801e724:	fb11 f303 	smulbb	r3, r1, r3
 801e728:	b29b      	uxth	r3, r3
 801e72a:	1c59      	adds	r1, r3, #1
 801e72c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e730:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e734:	b29f      	uxth	r7, r3
 801e736:	43db      	mvns	r3, r3
 801e738:	b2db      	uxtb	r3, r3
 801e73a:	9309      	str	r3, [sp, #36]	; 0x24
 801e73c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e73e:	1220      	asrs	r0, r4, #8
 801e740:	fb13 f907 	smulbb	r9, r3, r7
 801e744:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e74a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e74e:	fb00 9003 	mla	r0, r0, r3, r9
 801e752:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e754:	10e1      	asrs	r1, r4, #3
 801e756:	fb13 f907 	smulbb	r9, r3, r7
 801e75a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e760:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801e764:	fb01 9103 	mla	r1, r1, r3, r9
 801e768:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e76a:	00e4      	lsls	r4, r4, #3
 801e76c:	fb13 f707 	smulbb	r7, r3, r7
 801e770:	b2e4      	uxtb	r4, r4
 801e772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e774:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e778:	fb04 7403 	mla	r4, r4, r3, r7
 801e77c:	b280      	uxth	r0, r0
 801e77e:	b2a4      	uxth	r4, r4
 801e780:	1c43      	adds	r3, r0, #1
 801e782:	f104 0901 	add.w	r9, r4, #1
 801e786:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e78a:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801e78e:	b289      	uxth	r1, r1
 801e790:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801e794:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e798:	ea49 0000 	orr.w	r0, r9, r0
 801e79c:	f101 0901 	add.w	r9, r1, #1
 801e7a0:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801e7a4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e7a8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e7ac:	ea40 0009 	orr.w	r0, r0, r9
 801e7b0:	f8ac 0000 	strh.w	r0, [ip]
 801e7b4:	4446      	add	r6, r8
 801e7b6:	b2b6      	uxth	r6, r6
 801e7b8:	2e07      	cmp	r6, #7
 801e7ba:	bf89      	itett	hi
 801e7bc:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801e7be:	fa42 f208 	asrls.w	r2, r2, r8
 801e7c2:	785a      	ldrbhi	r2, [r3, #1]
 801e7c4:	3301      	addhi	r3, #1
 801e7c6:	bf88      	it	hi
 801e7c8:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801e7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e7cc:	bf94      	ite	ls
 801e7ce:	b2d2      	uxtbls	r2, r2
 801e7d0:	2600      	movhi	r6, #0
 801e7d2:	449c      	add	ip, r3
 801e7d4:	e791      	b.n	801e6fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801e7d6:	441c      	add	r4, r3
 801e7d8:	b224      	sxth	r4, r4
 801e7da:	e6d4      	b.n	801e586 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e7dc:	f1ba 0f01 	cmp.w	sl, #1
 801e7e0:	f47f af0b 	bne.w	801e5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e7e4:	f1bb 0f01 	cmp.w	fp, #1
 801e7e8:	f47f af07 	bne.w	801e5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e7ec:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801e8ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801e7f0:	f8db 0000 	ldr.w	r0, [fp]
 801e7f4:	6803      	ldr	r3, [r0, #0]
 801e7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7f8:	4798      	blx	r3
 801e7fa:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e7fe:	465a      	mov	r2, fp
 801e800:	d006      	beq.n	801e810 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801e802:	f1b8 0f04 	cmp.w	r8, #4
 801e806:	d13e      	bne.n	801e886 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801e808:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e80a:	3300      	adds	r3, #0
 801e80c:	bf18      	it	ne
 801e80e:	2301      	movne	r3, #1
 801e810:	0580      	lsls	r0, r0, #22
 801e812:	d56b      	bpl.n	801e8ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801e814:	f1b8 0f08 	cmp.w	r8, #8
 801e818:	d168      	bne.n	801e8ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	bf0c      	ite	eq
 801e81e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e822:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e826:	2d00      	cmp	r5, #0
 801e828:	f47f aee7 	bne.w	801e5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e82c:	2e00      	cmp	r6, #0
 801e82e:	f47f aee4 	bne.w	801e5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e832:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e834:	19e3      	adds	r3, r4, r7
 801e836:	4283      	cmp	r3, r0
 801e838:	f73f aedf 	bgt.w	801e5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e83e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e840:	444b      	add	r3, r9
 801e842:	4283      	cmp	r3, r0
 801e844:	f73f aed9 	bgt.w	801e5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e848:	2500      	movs	r5, #0
 801e84a:	6810      	ldr	r0, [r2, #0]
 801e84c:	b2bf      	uxth	r7, r7
 801e84e:	6804      	ldr	r4, [r0, #0]
 801e850:	f1b8 0f08 	cmp.w	r8, #8
 801e854:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e858:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e85a:	bf1c      	itt	ne
 801e85c:	3701      	addne	r7, #1
 801e85e:	f027 0701 	bicne.w	r7, r7, #1
 801e862:	9104      	str	r1, [sp, #16]
 801e864:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e866:	bf18      	it	ne
 801e868:	b2bf      	uxthne	r7, r7
 801e86a:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e86e:	e9cd 7900 	strd	r7, r9, [sp]
 801e872:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801e876:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801e87a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801e87c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e87e:	47a0      	blx	r4
 801e880:	b019      	add	sp, #100	; 0x64
 801e882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e886:	2300      	movs	r3, #0
 801e888:	e7c2      	b.n	801e810 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801e88a:	2208      	movs	r2, #8
 801e88c:	fb92 f3f8 	sdiv	r3, r2, r8
 801e890:	1e5a      	subs	r2, r3, #1
 801e892:	443a      	add	r2, r7
 801e894:	fb92 f2f3 	sdiv	r2, r2, r3
 801e898:	fb12 f203 	smulbb	r2, r2, r3
 801e89c:	b292      	uxth	r2, r2
 801e89e:	e6b1      	b.n	801e604 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801e8a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e8a2:	e6ed      	b.n	801e680 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801e8a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e8a6:	e783      	b.n	801e7b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801e8a8:	2004f6c0 	.word	0x2004f6c0
 801e8ac:	2004f6c8 	.word	0x2004f6c8
 801e8b0:	2004f6c2 	.word	0x2004f6c2
 801e8b4:	00fff800 	.word	0x00fff800
 801e8b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e8ba:	b153      	cbz	r3, 801e8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801e8bc:	441e      	add	r6, r3
 801e8be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e8c0:	b2b6      	uxth	r6, r6
 801e8c2:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801e8c6:	781a      	ldrb	r2, [r3, #0]
 801e8c8:	f006 0607 	and.w	r6, r6, #7
 801e8cc:	4132      	asrs	r2, r6
 801e8ce:	9328      	str	r3, [sp, #160]	; 0xa0
 801e8d0:	b2d2      	uxtb	r2, r2
 801e8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8d4:	445b      	add	r3, fp
 801e8d6:	930a      	str	r3, [sp, #40]	; 0x28
 801e8d8:	e708      	b.n	801e6ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801e8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d1cf      	bne.n	801e880 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e8e0:	4b05      	ldr	r3, [pc, #20]	; (801e8f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 801e8e2:	6818      	ldr	r0, [r3, #0]
 801e8e4:	6803      	ldr	r3, [r0, #0]
 801e8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e8e8:	4798      	blx	r3
 801e8ea:	e7c9      	b.n	801e880 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	f43f ae84 	beq.w	801e5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e8f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e8f6:	e796      	b.n	801e826 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 801e8f8:	2004f6c8 	.word	0x2004f6c8

0801e8fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801e8fc:	b538      	push	{r3, r4, r5, lr}
 801e8fe:	4605      	mov	r5, r0
 801e900:	4c13      	ldr	r4, [pc, #76]	; (801e950 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 801e902:	e8d4 3f8f 	ldab	r3, [r4]
 801e906:	07da      	lsls	r2, r3, #31
 801e908:	d40b      	bmi.n	801e922 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801e90a:	4620      	mov	r0, r4
 801e90c:	f007 fd54 	bl	80263b8 <__cxa_guard_acquire>
 801e910:	b138      	cbz	r0, 801e922 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801e912:	4620      	mov	r0, r4
 801e914:	f007 fd5c 	bl	80263d0 <__cxa_guard_release>
 801e918:	4a0e      	ldr	r2, [pc, #56]	; (801e954 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801e91a:	490f      	ldr	r1, [pc, #60]	; (801e958 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e91c:	480f      	ldr	r0, [pc, #60]	; (801e95c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801e91e:	f007 fd44 	bl	80263aa <__aeabi_atexit>
 801e922:	4c0f      	ldr	r4, [pc, #60]	; (801e960 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e924:	e8d4 3f8f 	ldab	r3, [r4]
 801e928:	07db      	lsls	r3, r3, #31
 801e92a:	d40b      	bmi.n	801e944 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801e92c:	4620      	mov	r0, r4
 801e92e:	f007 fd43 	bl	80263b8 <__cxa_guard_acquire>
 801e932:	b138      	cbz	r0, 801e944 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801e934:	4620      	mov	r0, r4
 801e936:	f007 fd4b 	bl	80263d0 <__cxa_guard_release>
 801e93a:	4a06      	ldr	r2, [pc, #24]	; (801e954 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801e93c:	4909      	ldr	r1, [pc, #36]	; (801e964 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801e93e:	480a      	ldr	r0, [pc, #40]	; (801e968 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801e940:	f007 fd33 	bl	80263aa <__aeabi_atexit>
 801e944:	4b05      	ldr	r3, [pc, #20]	; (801e95c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801e946:	612b      	str	r3, [r5, #16]
 801e948:	4b07      	ldr	r3, [pc, #28]	; (801e968 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801e94a:	616b      	str	r3, [r5, #20]
 801e94c:	bd38      	pop	{r3, r4, r5, pc}
 801e94e:	bf00      	nop
 801e950:	2004f79c 	.word	0x2004f79c
 801e954:	20000000 	.word	0x20000000
 801e958:	0801cb23 	.word	0x0801cb23
 801e95c:	20025864 	.word	0x20025864
 801e960:	2004f7a0 	.word	0x2004f7a0
 801e964:	0801cb21 	.word	0x0801cb21
 801e968:	20025868 	.word	0x20025868

0801e96c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801e96c:	b538      	push	{r3, r4, r5, lr}
 801e96e:	4605      	mov	r5, r0
 801e970:	4c13      	ldr	r4, [pc, #76]	; (801e9c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 801e972:	e8d4 3f8f 	ldab	r3, [r4]
 801e976:	07da      	lsls	r2, r3, #31
 801e978:	d40b      	bmi.n	801e992 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801e97a:	4620      	mov	r0, r4
 801e97c:	f007 fd1c 	bl	80263b8 <__cxa_guard_acquire>
 801e980:	b138      	cbz	r0, 801e992 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801e982:	4620      	mov	r0, r4
 801e984:	f007 fd24 	bl	80263d0 <__cxa_guard_release>
 801e988:	4a0e      	ldr	r2, [pc, #56]	; (801e9c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801e98a:	490f      	ldr	r1, [pc, #60]	; (801e9c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e98c:	480f      	ldr	r0, [pc, #60]	; (801e9cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801e98e:	f007 fd0c 	bl	80263aa <__aeabi_atexit>
 801e992:	4c0f      	ldr	r4, [pc, #60]	; (801e9d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e994:	e8d4 3f8f 	ldab	r3, [r4]
 801e998:	07db      	lsls	r3, r3, #31
 801e99a:	d40b      	bmi.n	801e9b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801e99c:	4620      	mov	r0, r4
 801e99e:	f007 fd0b 	bl	80263b8 <__cxa_guard_acquire>
 801e9a2:	b138      	cbz	r0, 801e9b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801e9a4:	4620      	mov	r0, r4
 801e9a6:	f007 fd13 	bl	80263d0 <__cxa_guard_release>
 801e9aa:	4a06      	ldr	r2, [pc, #24]	; (801e9c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801e9ac:	4909      	ldr	r1, [pc, #36]	; (801e9d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801e9ae:	480a      	ldr	r0, [pc, #40]	; (801e9d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801e9b0:	f007 fcfb 	bl	80263aa <__aeabi_atexit>
 801e9b4:	4b05      	ldr	r3, [pc, #20]	; (801e9cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801e9b6:	60ab      	str	r3, [r5, #8]
 801e9b8:	4b07      	ldr	r3, [pc, #28]	; (801e9d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801e9ba:	60eb      	str	r3, [r5, #12]
 801e9bc:	bd38      	pop	{r3, r4, r5, pc}
 801e9be:	bf00      	nop
 801e9c0:	2004f774 	.word	0x2004f774
 801e9c4:	20000000 	.word	0x20000000
 801e9c8:	0801cb27 	.word	0x0801cb27
 801e9cc:	2002583c 	.word	0x2002583c
 801e9d0:	2004f778 	.word	0x2004f778
 801e9d4:	0801cb25 	.word	0x0801cb25
 801e9d8:	20025840 	.word	0x20025840

0801e9dc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801e9dc:	b510      	push	{r4, lr}
 801e9de:	4604      	mov	r4, r0
 801e9e0:	f7ff ff8c 	bl	801e8fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801e9e4:	4620      	mov	r0, r4
 801e9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9ea:	f7ff bfbf 	b.w	801e96c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801e9f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e9f0:	b538      	push	{r3, r4, r5, lr}
 801e9f2:	4605      	mov	r5, r0
 801e9f4:	4c13      	ldr	r4, [pc, #76]	; (801ea44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 801e9f6:	e8d4 3f8f 	ldab	r3, [r4]
 801e9fa:	07da      	lsls	r2, r3, #31
 801e9fc:	d40b      	bmi.n	801ea16 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801e9fe:	4620      	mov	r0, r4
 801ea00:	f007 fcda 	bl	80263b8 <__cxa_guard_acquire>
 801ea04:	b138      	cbz	r0, 801ea16 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801ea06:	4620      	mov	r0, r4
 801ea08:	f007 fce2 	bl	80263d0 <__cxa_guard_release>
 801ea0c:	4a0e      	ldr	r2, [pc, #56]	; (801ea48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ea0e:	490f      	ldr	r1, [pc, #60]	; (801ea4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ea10:	480f      	ldr	r0, [pc, #60]	; (801ea50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ea12:	f007 fcca 	bl	80263aa <__aeabi_atexit>
 801ea16:	4c0f      	ldr	r4, [pc, #60]	; (801ea54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ea18:	e8d4 3f8f 	ldab	r3, [r4]
 801ea1c:	07db      	lsls	r3, r3, #31
 801ea1e:	d40b      	bmi.n	801ea38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801ea20:	4620      	mov	r0, r4
 801ea22:	f007 fcc9 	bl	80263b8 <__cxa_guard_acquire>
 801ea26:	b138      	cbz	r0, 801ea38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801ea28:	4620      	mov	r0, r4
 801ea2a:	f007 fcd1 	bl	80263d0 <__cxa_guard_release>
 801ea2e:	4a06      	ldr	r2, [pc, #24]	; (801ea48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ea30:	4909      	ldr	r1, [pc, #36]	; (801ea58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ea32:	480a      	ldr	r0, [pc, #40]	; (801ea5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ea34:	f007 fcb9 	bl	80263aa <__aeabi_atexit>
 801ea38:	4b05      	ldr	r3, [pc, #20]	; (801ea50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ea3a:	622b      	str	r3, [r5, #32]
 801ea3c:	4b07      	ldr	r3, [pc, #28]	; (801ea5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ea3e:	626b      	str	r3, [r5, #36]	; 0x24
 801ea40:	bd38      	pop	{r3, r4, r5, pc}
 801ea42:	bf00      	nop
 801ea44:	2004f7a4 	.word	0x2004f7a4
 801ea48:	20000000 	.word	0x20000000
 801ea4c:	0801cb1b 	.word	0x0801cb1b
 801ea50:	2002586c 	.word	0x2002586c
 801ea54:	2004f7a8 	.word	0x2004f7a8
 801ea58:	0801cb19 	.word	0x0801cb19
 801ea5c:	20025870 	.word	0x20025870

0801ea60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ea60:	b538      	push	{r3, r4, r5, lr}
 801ea62:	4605      	mov	r5, r0
 801ea64:	4c13      	ldr	r4, [pc, #76]	; (801eab4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 801ea66:	e8d4 3f8f 	ldab	r3, [r4]
 801ea6a:	07da      	lsls	r2, r3, #31
 801ea6c:	d40b      	bmi.n	801ea86 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801ea6e:	4620      	mov	r0, r4
 801ea70:	f007 fca2 	bl	80263b8 <__cxa_guard_acquire>
 801ea74:	b138      	cbz	r0, 801ea86 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801ea76:	4620      	mov	r0, r4
 801ea78:	f007 fcaa 	bl	80263d0 <__cxa_guard_release>
 801ea7c:	4a0e      	ldr	r2, [pc, #56]	; (801eab8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ea7e:	490f      	ldr	r1, [pc, #60]	; (801eabc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ea80:	480f      	ldr	r0, [pc, #60]	; (801eac0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ea82:	f007 fc92 	bl	80263aa <__aeabi_atexit>
 801ea86:	4c0f      	ldr	r4, [pc, #60]	; (801eac4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ea88:	e8d4 3f8f 	ldab	r3, [r4]
 801ea8c:	07db      	lsls	r3, r3, #31
 801ea8e:	d40b      	bmi.n	801eaa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801ea90:	4620      	mov	r0, r4
 801ea92:	f007 fc91 	bl	80263b8 <__cxa_guard_acquire>
 801ea96:	b138      	cbz	r0, 801eaa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801ea98:	4620      	mov	r0, r4
 801ea9a:	f007 fc99 	bl	80263d0 <__cxa_guard_release>
 801ea9e:	4a06      	ldr	r2, [pc, #24]	; (801eab8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801eaa0:	4909      	ldr	r1, [pc, #36]	; (801eac8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801eaa2:	480a      	ldr	r0, [pc, #40]	; (801eacc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801eaa4:	f007 fc81 	bl	80263aa <__aeabi_atexit>
 801eaa8:	4b05      	ldr	r3, [pc, #20]	; (801eac0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801eaaa:	61ab      	str	r3, [r5, #24]
 801eaac:	4b07      	ldr	r3, [pc, #28]	; (801eacc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801eaae:	61eb      	str	r3, [r5, #28]
 801eab0:	bd38      	pop	{r3, r4, r5, pc}
 801eab2:	bf00      	nop
 801eab4:	2004f77c 	.word	0x2004f77c
 801eab8:	20000000 	.word	0x20000000
 801eabc:	0801cb1f 	.word	0x0801cb1f
 801eac0:	20025844 	.word	0x20025844
 801eac4:	2004f780 	.word	0x2004f780
 801eac8:	0801cb1d 	.word	0x0801cb1d
 801eacc:	20025848 	.word	0x20025848

0801ead0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801ead0:	b510      	push	{r4, lr}
 801ead2:	4604      	mov	r4, r0
 801ead4:	f7ff ff8c 	bl	801e9f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801ead8:	4620      	mov	r0, r4
 801eada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eade:	f7ff bfbf 	b.w	801ea60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801eae4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801eae4:	b538      	push	{r3, r4, r5, lr}
 801eae6:	4605      	mov	r5, r0
 801eae8:	4c13      	ldr	r4, [pc, #76]	; (801eb38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 801eaea:	e8d4 3f8f 	ldab	r3, [r4]
 801eaee:	07da      	lsls	r2, r3, #31
 801eaf0:	d40b      	bmi.n	801eb0a <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801eaf2:	4620      	mov	r0, r4
 801eaf4:	f007 fc60 	bl	80263b8 <__cxa_guard_acquire>
 801eaf8:	b138      	cbz	r0, 801eb0a <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801eafa:	4620      	mov	r0, r4
 801eafc:	f007 fc68 	bl	80263d0 <__cxa_guard_release>
 801eb00:	4a0e      	ldr	r2, [pc, #56]	; (801eb3c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801eb02:	490f      	ldr	r1, [pc, #60]	; (801eb40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801eb04:	480f      	ldr	r0, [pc, #60]	; (801eb44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801eb06:	f007 fc50 	bl	80263aa <__aeabi_atexit>
 801eb0a:	4c0f      	ldr	r4, [pc, #60]	; (801eb48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801eb0c:	e8d4 3f8f 	ldab	r3, [r4]
 801eb10:	07db      	lsls	r3, r3, #31
 801eb12:	d40b      	bmi.n	801eb2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801eb14:	4620      	mov	r0, r4
 801eb16:	f007 fc4f 	bl	80263b8 <__cxa_guard_acquire>
 801eb1a:	b138      	cbz	r0, 801eb2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801eb1c:	4620      	mov	r0, r4
 801eb1e:	f007 fc57 	bl	80263d0 <__cxa_guard_release>
 801eb22:	4a06      	ldr	r2, [pc, #24]	; (801eb3c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801eb24:	4909      	ldr	r1, [pc, #36]	; (801eb4c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801eb26:	480a      	ldr	r0, [pc, #40]	; (801eb50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801eb28:	f007 fc3f 	bl	80263aa <__aeabi_atexit>
 801eb2c:	4b05      	ldr	r3, [pc, #20]	; (801eb44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801eb2e:	632b      	str	r3, [r5, #48]	; 0x30
 801eb30:	4b07      	ldr	r3, [pc, #28]	; (801eb50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801eb32:	636b      	str	r3, [r5, #52]	; 0x34
 801eb34:	bd38      	pop	{r3, r4, r5, pc}
 801eb36:	bf00      	nop
 801eb38:	2004f7b4 	.word	0x2004f7b4
 801eb3c:	20000000 	.word	0x20000000
 801eb40:	0801cb13 	.word	0x0801cb13
 801eb44:	2002587c 	.word	0x2002587c
 801eb48:	2004f7b8 	.word	0x2004f7b8
 801eb4c:	0801cb11 	.word	0x0801cb11
 801eb50:	20025880 	.word	0x20025880

0801eb54 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801eb54:	b538      	push	{r3, r4, r5, lr}
 801eb56:	4605      	mov	r5, r0
 801eb58:	4c13      	ldr	r4, [pc, #76]	; (801eba8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 801eb5a:	e8d4 3f8f 	ldab	r3, [r4]
 801eb5e:	07da      	lsls	r2, r3, #31
 801eb60:	d40b      	bmi.n	801eb7a <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801eb62:	4620      	mov	r0, r4
 801eb64:	f007 fc28 	bl	80263b8 <__cxa_guard_acquire>
 801eb68:	b138      	cbz	r0, 801eb7a <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801eb6a:	4620      	mov	r0, r4
 801eb6c:	f007 fc30 	bl	80263d0 <__cxa_guard_release>
 801eb70:	4a0e      	ldr	r2, [pc, #56]	; (801ebac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801eb72:	490f      	ldr	r1, [pc, #60]	; (801ebb0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801eb74:	480f      	ldr	r0, [pc, #60]	; (801ebb4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801eb76:	f007 fc18 	bl	80263aa <__aeabi_atexit>
 801eb7a:	4c0f      	ldr	r4, [pc, #60]	; (801ebb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801eb7c:	e8d4 3f8f 	ldab	r3, [r4]
 801eb80:	07db      	lsls	r3, r3, #31
 801eb82:	d40b      	bmi.n	801eb9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801eb84:	4620      	mov	r0, r4
 801eb86:	f007 fc17 	bl	80263b8 <__cxa_guard_acquire>
 801eb8a:	b138      	cbz	r0, 801eb9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801eb8c:	4620      	mov	r0, r4
 801eb8e:	f007 fc1f 	bl	80263d0 <__cxa_guard_release>
 801eb92:	4a06      	ldr	r2, [pc, #24]	; (801ebac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801eb94:	4909      	ldr	r1, [pc, #36]	; (801ebbc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801eb96:	480a      	ldr	r0, [pc, #40]	; (801ebc0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801eb98:	f007 fc07 	bl	80263aa <__aeabi_atexit>
 801eb9c:	4b05      	ldr	r3, [pc, #20]	; (801ebb4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801eb9e:	62ab      	str	r3, [r5, #40]	; 0x28
 801eba0:	4b07      	ldr	r3, [pc, #28]	; (801ebc0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801eba2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801eba4:	bd38      	pop	{r3, r4, r5, pc}
 801eba6:	bf00      	nop
 801eba8:	2004f784 	.word	0x2004f784
 801ebac:	20000000 	.word	0x20000000
 801ebb0:	0801cb17 	.word	0x0801cb17
 801ebb4:	2002584c 	.word	0x2002584c
 801ebb8:	2004f788 	.word	0x2004f788
 801ebbc:	0801cb15 	.word	0x0801cb15
 801ebc0:	20025850 	.word	0x20025850

0801ebc4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801ebc4:	b510      	push	{r4, lr}
 801ebc6:	4604      	mov	r4, r0
 801ebc8:	f7ff ff8c 	bl	801eae4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801ebcc:	4620      	mov	r0, r4
 801ebce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ebd2:	f7ff bfbf 	b.w	801eb54 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801ebd8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801ebd8:	b538      	push	{r3, r4, r5, lr}
 801ebda:	4605      	mov	r5, r0
 801ebdc:	4c13      	ldr	r4, [pc, #76]	; (801ec2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 801ebde:	e8d4 3f8f 	ldab	r3, [r4]
 801ebe2:	07da      	lsls	r2, r3, #31
 801ebe4:	d40b      	bmi.n	801ebfe <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801ebe6:	4620      	mov	r0, r4
 801ebe8:	f007 fbe6 	bl	80263b8 <__cxa_guard_acquire>
 801ebec:	b138      	cbz	r0, 801ebfe <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801ebee:	4620      	mov	r0, r4
 801ebf0:	f007 fbee 	bl	80263d0 <__cxa_guard_release>
 801ebf4:	4a0e      	ldr	r2, [pc, #56]	; (801ec30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801ebf6:	490f      	ldr	r1, [pc, #60]	; (801ec34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801ebf8:	480f      	ldr	r0, [pc, #60]	; (801ec38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801ebfa:	f007 fbd6 	bl	80263aa <__aeabi_atexit>
 801ebfe:	4c0f      	ldr	r4, [pc, #60]	; (801ec3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801ec00:	e8d4 3f8f 	ldab	r3, [r4]
 801ec04:	07db      	lsls	r3, r3, #31
 801ec06:	d40b      	bmi.n	801ec20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801ec08:	4620      	mov	r0, r4
 801ec0a:	f007 fbd5 	bl	80263b8 <__cxa_guard_acquire>
 801ec0e:	b138      	cbz	r0, 801ec20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801ec10:	4620      	mov	r0, r4
 801ec12:	f007 fbdd 	bl	80263d0 <__cxa_guard_release>
 801ec16:	4a06      	ldr	r2, [pc, #24]	; (801ec30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801ec18:	4909      	ldr	r1, [pc, #36]	; (801ec40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801ec1a:	480a      	ldr	r0, [pc, #40]	; (801ec44 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801ec1c:	f007 fbc5 	bl	80263aa <__aeabi_atexit>
 801ec20:	4b05      	ldr	r3, [pc, #20]	; (801ec38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801ec22:	652b      	str	r3, [r5, #80]	; 0x50
 801ec24:	4b07      	ldr	r3, [pc, #28]	; (801ec44 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801ec26:	656b      	str	r3, [r5, #84]	; 0x54
 801ec28:	bd38      	pop	{r3, r4, r5, pc}
 801ec2a:	bf00      	nop
 801ec2c:	2004f7bc 	.word	0x2004f7bc
 801ec30:	20000000 	.word	0x20000000
 801ec34:	0801cb03 	.word	0x0801cb03
 801ec38:	20025884 	.word	0x20025884
 801ec3c:	2004f7c0 	.word	0x2004f7c0
 801ec40:	0801cb01 	.word	0x0801cb01
 801ec44:	20025888 	.word	0x20025888

0801ec48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801ec48:	b538      	push	{r3, r4, r5, lr}
 801ec4a:	4605      	mov	r5, r0
 801ec4c:	4c13      	ldr	r4, [pc, #76]	; (801ec9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 801ec4e:	e8d4 3f8f 	ldab	r3, [r4]
 801ec52:	07da      	lsls	r2, r3, #31
 801ec54:	d40b      	bmi.n	801ec6e <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801ec56:	4620      	mov	r0, r4
 801ec58:	f007 fbae 	bl	80263b8 <__cxa_guard_acquire>
 801ec5c:	b138      	cbz	r0, 801ec6e <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801ec5e:	4620      	mov	r0, r4
 801ec60:	f007 fbb6 	bl	80263d0 <__cxa_guard_release>
 801ec64:	4a0e      	ldr	r2, [pc, #56]	; (801eca0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801ec66:	490f      	ldr	r1, [pc, #60]	; (801eca4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801ec68:	480f      	ldr	r0, [pc, #60]	; (801eca8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801ec6a:	f007 fb9e 	bl	80263aa <__aeabi_atexit>
 801ec6e:	4c0f      	ldr	r4, [pc, #60]	; (801ecac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801ec70:	e8d4 3f8f 	ldab	r3, [r4]
 801ec74:	07db      	lsls	r3, r3, #31
 801ec76:	d40b      	bmi.n	801ec90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801ec78:	4620      	mov	r0, r4
 801ec7a:	f007 fb9d 	bl	80263b8 <__cxa_guard_acquire>
 801ec7e:	b138      	cbz	r0, 801ec90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801ec80:	4620      	mov	r0, r4
 801ec82:	f007 fba5 	bl	80263d0 <__cxa_guard_release>
 801ec86:	4a06      	ldr	r2, [pc, #24]	; (801eca0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801ec88:	4909      	ldr	r1, [pc, #36]	; (801ecb0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801ec8a:	480a      	ldr	r0, [pc, #40]	; (801ecb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801ec8c:	f007 fb8d 	bl	80263aa <__aeabi_atexit>
 801ec90:	4b05      	ldr	r3, [pc, #20]	; (801eca8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801ec92:	64ab      	str	r3, [r5, #72]	; 0x48
 801ec94:	4b07      	ldr	r3, [pc, #28]	; (801ecb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801ec96:	64eb      	str	r3, [r5, #76]	; 0x4c
 801ec98:	bd38      	pop	{r3, r4, r5, pc}
 801ec9a:	bf00      	nop
 801ec9c:	2004f7c4 	.word	0x2004f7c4
 801eca0:	20000000 	.word	0x20000000
 801eca4:	0801cb07 	.word	0x0801cb07
 801eca8:	2002588c 	.word	0x2002588c
 801ecac:	2004f7c8 	.word	0x2004f7c8
 801ecb0:	0801cb05 	.word	0x0801cb05
 801ecb4:	20025890 	.word	0x20025890

0801ecb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801ecb8:	b538      	push	{r3, r4, r5, lr}
 801ecba:	4605      	mov	r5, r0
 801ecbc:	4c13      	ldr	r4, [pc, #76]	; (801ed0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 801ecbe:	e8d4 3f8f 	ldab	r3, [r4]
 801ecc2:	07da      	lsls	r2, r3, #31
 801ecc4:	d40b      	bmi.n	801ecde <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801ecc6:	4620      	mov	r0, r4
 801ecc8:	f007 fb76 	bl	80263b8 <__cxa_guard_acquire>
 801eccc:	b138      	cbz	r0, 801ecde <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801ecce:	4620      	mov	r0, r4
 801ecd0:	f007 fb7e 	bl	80263d0 <__cxa_guard_release>
 801ecd4:	4a0e      	ldr	r2, [pc, #56]	; (801ed10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801ecd6:	490f      	ldr	r1, [pc, #60]	; (801ed14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801ecd8:	480f      	ldr	r0, [pc, #60]	; (801ed18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801ecda:	f007 fb66 	bl	80263aa <__aeabi_atexit>
 801ecde:	4c0f      	ldr	r4, [pc, #60]	; (801ed1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801ece0:	e8d4 3f8f 	ldab	r3, [r4]
 801ece4:	07db      	lsls	r3, r3, #31
 801ece6:	d40b      	bmi.n	801ed00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801ece8:	4620      	mov	r0, r4
 801ecea:	f007 fb65 	bl	80263b8 <__cxa_guard_acquire>
 801ecee:	b138      	cbz	r0, 801ed00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801ecf0:	4620      	mov	r0, r4
 801ecf2:	f007 fb6d 	bl	80263d0 <__cxa_guard_release>
 801ecf6:	4a06      	ldr	r2, [pc, #24]	; (801ed10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801ecf8:	4909      	ldr	r1, [pc, #36]	; (801ed20 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801ecfa:	480a      	ldr	r0, [pc, #40]	; (801ed24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801ecfc:	f007 fb55 	bl	80263aa <__aeabi_atexit>
 801ed00:	4b05      	ldr	r3, [pc, #20]	; (801ed18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801ed02:	642b      	str	r3, [r5, #64]	; 0x40
 801ed04:	4b07      	ldr	r3, [pc, #28]	; (801ed24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801ed06:	646b      	str	r3, [r5, #68]	; 0x44
 801ed08:	bd38      	pop	{r3, r4, r5, pc}
 801ed0a:	bf00      	nop
 801ed0c:	2004f78c 	.word	0x2004f78c
 801ed10:	20000000 	.word	0x20000000
 801ed14:	0801cb0b 	.word	0x0801cb0b
 801ed18:	20025854 	.word	0x20025854
 801ed1c:	2004f790 	.word	0x2004f790
 801ed20:	0801cb09 	.word	0x0801cb09
 801ed24:	20025858 	.word	0x20025858

0801ed28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801ed28:	b538      	push	{r3, r4, r5, lr}
 801ed2a:	4605      	mov	r5, r0
 801ed2c:	4c13      	ldr	r4, [pc, #76]	; (801ed7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 801ed2e:	e8d4 3f8f 	ldab	r3, [r4]
 801ed32:	07da      	lsls	r2, r3, #31
 801ed34:	d40b      	bmi.n	801ed4e <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801ed36:	4620      	mov	r0, r4
 801ed38:	f007 fb3e 	bl	80263b8 <__cxa_guard_acquire>
 801ed3c:	b138      	cbz	r0, 801ed4e <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801ed3e:	4620      	mov	r0, r4
 801ed40:	f007 fb46 	bl	80263d0 <__cxa_guard_release>
 801ed44:	4a0e      	ldr	r2, [pc, #56]	; (801ed80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801ed46:	490f      	ldr	r1, [pc, #60]	; (801ed84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801ed48:	480f      	ldr	r0, [pc, #60]	; (801ed88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801ed4a:	f007 fb2e 	bl	80263aa <__aeabi_atexit>
 801ed4e:	4c0f      	ldr	r4, [pc, #60]	; (801ed8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801ed50:	e8d4 3f8f 	ldab	r3, [r4]
 801ed54:	07db      	lsls	r3, r3, #31
 801ed56:	d40b      	bmi.n	801ed70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801ed58:	4620      	mov	r0, r4
 801ed5a:	f007 fb2d 	bl	80263b8 <__cxa_guard_acquire>
 801ed5e:	b138      	cbz	r0, 801ed70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801ed60:	4620      	mov	r0, r4
 801ed62:	f007 fb35 	bl	80263d0 <__cxa_guard_release>
 801ed66:	4a06      	ldr	r2, [pc, #24]	; (801ed80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801ed68:	4909      	ldr	r1, [pc, #36]	; (801ed90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801ed6a:	480a      	ldr	r0, [pc, #40]	; (801ed94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801ed6c:	f007 fb1d 	bl	80263aa <__aeabi_atexit>
 801ed70:	4b05      	ldr	r3, [pc, #20]	; (801ed88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801ed72:	63ab      	str	r3, [r5, #56]	; 0x38
 801ed74:	4b07      	ldr	r3, [pc, #28]	; (801ed94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801ed76:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ed78:	bd38      	pop	{r3, r4, r5, pc}
 801ed7a:	bf00      	nop
 801ed7c:	2004f7ac 	.word	0x2004f7ac
 801ed80:	20000000 	.word	0x20000000
 801ed84:	0801cb0f 	.word	0x0801cb0f
 801ed88:	20025874 	.word	0x20025874
 801ed8c:	2004f7b0 	.word	0x2004f7b0
 801ed90:	0801cb0d 	.word	0x0801cb0d
 801ed94:	20025878 	.word	0x20025878

0801ed98 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801ed98:	b510      	push	{r4, lr}
 801ed9a:	4604      	mov	r4, r0
 801ed9c:	f7ff ff1c 	bl	801ebd8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801eda0:	4620      	mov	r0, r4
 801eda2:	f7ff ff89 	bl	801ecb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801eda6:	4620      	mov	r0, r4
 801eda8:	f7ff ff4e 	bl	801ec48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801edac:	4620      	mov	r0, r4
 801edae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edb2:	f7ff bfb9 	b.w	801ed28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801edb8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801edb8:	b538      	push	{r3, r4, r5, lr}
 801edba:	4605      	mov	r5, r0
 801edbc:	4c13      	ldr	r4, [pc, #76]	; (801ee0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 801edbe:	e8d4 3f8f 	ldab	r3, [r4]
 801edc2:	07da      	lsls	r2, r3, #31
 801edc4:	d40b      	bmi.n	801edde <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801edc6:	4620      	mov	r0, r4
 801edc8:	f007 faf6 	bl	80263b8 <__cxa_guard_acquire>
 801edcc:	b138      	cbz	r0, 801edde <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801edce:	4620      	mov	r0, r4
 801edd0:	f007 fafe 	bl	80263d0 <__cxa_guard_release>
 801edd4:	4a0e      	ldr	r2, [pc, #56]	; (801ee10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801edd6:	490f      	ldr	r1, [pc, #60]	; (801ee14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801edd8:	480f      	ldr	r0, [pc, #60]	; (801ee18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801edda:	f007 fae6 	bl	80263aa <__aeabi_atexit>
 801edde:	4c0f      	ldr	r4, [pc, #60]	; (801ee1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ede0:	e8d4 3f8f 	ldab	r3, [r4]
 801ede4:	07db      	lsls	r3, r3, #31
 801ede6:	d40b      	bmi.n	801ee00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801ede8:	4620      	mov	r0, r4
 801edea:	f007 fae5 	bl	80263b8 <__cxa_guard_acquire>
 801edee:	b138      	cbz	r0, 801ee00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801edf0:	4620      	mov	r0, r4
 801edf2:	f007 faed 	bl	80263d0 <__cxa_guard_release>
 801edf6:	4a06      	ldr	r2, [pc, #24]	; (801ee10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801edf8:	4909      	ldr	r1, [pc, #36]	; (801ee20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801edfa:	480a      	ldr	r0, [pc, #40]	; (801ee24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801edfc:	f007 fad5 	bl	80263aa <__aeabi_atexit>
 801ee00:	4b05      	ldr	r3, [pc, #20]	; (801ee18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ee02:	662b      	str	r3, [r5, #96]	; 0x60
 801ee04:	4b07      	ldr	r3, [pc, #28]	; (801ee24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801ee06:	666b      	str	r3, [r5, #100]	; 0x64
 801ee08:	bd38      	pop	{r3, r4, r5, pc}
 801ee0a:	bf00      	nop
 801ee0c:	2004f794 	.word	0x2004f794
 801ee10:	20000000 	.word	0x20000000
 801ee14:	0801cafb 	.word	0x0801cafb
 801ee18:	2002585c 	.word	0x2002585c
 801ee1c:	2004f798 	.word	0x2004f798
 801ee20:	0801caf9 	.word	0x0801caf9
 801ee24:	20025860 	.word	0x20025860

0801ee28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ee28:	b538      	push	{r3, r4, r5, lr}
 801ee2a:	4605      	mov	r5, r0
 801ee2c:	4c13      	ldr	r4, [pc, #76]	; (801ee7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 801ee2e:	e8d4 3f8f 	ldab	r3, [r4]
 801ee32:	07da      	lsls	r2, r3, #31
 801ee34:	d40b      	bmi.n	801ee4e <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801ee36:	4620      	mov	r0, r4
 801ee38:	f007 fabe 	bl	80263b8 <__cxa_guard_acquire>
 801ee3c:	b138      	cbz	r0, 801ee4e <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801ee3e:	4620      	mov	r0, r4
 801ee40:	f007 fac6 	bl	80263d0 <__cxa_guard_release>
 801ee44:	4a0e      	ldr	r2, [pc, #56]	; (801ee80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ee46:	490f      	ldr	r1, [pc, #60]	; (801ee84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ee48:	480f      	ldr	r0, [pc, #60]	; (801ee88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ee4a:	f007 faae 	bl	80263aa <__aeabi_atexit>
 801ee4e:	4c0f      	ldr	r4, [pc, #60]	; (801ee8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ee50:	e8d4 3f8f 	ldab	r3, [r4]
 801ee54:	07db      	lsls	r3, r3, #31
 801ee56:	d40b      	bmi.n	801ee70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801ee58:	4620      	mov	r0, r4
 801ee5a:	f007 faad 	bl	80263b8 <__cxa_guard_acquire>
 801ee5e:	b138      	cbz	r0, 801ee70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801ee60:	4620      	mov	r0, r4
 801ee62:	f007 fab5 	bl	80263d0 <__cxa_guard_release>
 801ee66:	4a06      	ldr	r2, [pc, #24]	; (801ee80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ee68:	4909      	ldr	r1, [pc, #36]	; (801ee90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ee6a:	480a      	ldr	r0, [pc, #40]	; (801ee94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ee6c:	f007 fa9d 	bl	80263aa <__aeabi_atexit>
 801ee70:	4b05      	ldr	r3, [pc, #20]	; (801ee88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ee72:	65ab      	str	r3, [r5, #88]	; 0x58
 801ee74:	4b07      	ldr	r3, [pc, #28]	; (801ee94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ee76:	65eb      	str	r3, [r5, #92]	; 0x5c
 801ee78:	bd38      	pop	{r3, r4, r5, pc}
 801ee7a:	bf00      	nop
 801ee7c:	2004f76c 	.word	0x2004f76c
 801ee80:	20000000 	.word	0x20000000
 801ee84:	0801caff 	.word	0x0801caff
 801ee88:	20025834 	.word	0x20025834
 801ee8c:	2004f770 	.word	0x2004f770
 801ee90:	0801cafd 	.word	0x0801cafd
 801ee94:	20025838 	.word	0x20025838

0801ee98 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801ee98:	b510      	push	{r4, lr}
 801ee9a:	4604      	mov	r4, r0
 801ee9c:	f7ff ff8c 	bl	801edb8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801eea0:	4620      	mov	r0, r4
 801eea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eea6:	f7ff bfbf 	b.w	801ee28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801eeac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801eeac:	b538      	push	{r3, r4, r5, lr}
 801eeae:	4605      	mov	r5, r0
 801eeb0:	4c13      	ldr	r4, [pc, #76]	; (801ef00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 801eeb2:	e8d4 3f8f 	ldab	r3, [r4]
 801eeb6:	07da      	lsls	r2, r3, #31
 801eeb8:	d40b      	bmi.n	801eed2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801eeba:	4620      	mov	r0, r4
 801eebc:	f007 fa7c 	bl	80263b8 <__cxa_guard_acquire>
 801eec0:	b138      	cbz	r0, 801eed2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801eec2:	4620      	mov	r0, r4
 801eec4:	f007 fa84 	bl	80263d0 <__cxa_guard_release>
 801eec8:	4a0e      	ldr	r2, [pc, #56]	; (801ef04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801eeca:	490f      	ldr	r1, [pc, #60]	; (801ef08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801eecc:	480f      	ldr	r0, [pc, #60]	; (801ef0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801eece:	f007 fa6c 	bl	80263aa <__aeabi_atexit>
 801eed2:	4c0f      	ldr	r4, [pc, #60]	; (801ef10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801eed4:	e8d4 3f8f 	ldab	r3, [r4]
 801eed8:	07db      	lsls	r3, r3, #31
 801eeda:	d40b      	bmi.n	801eef4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801eedc:	4620      	mov	r0, r4
 801eede:	f007 fa6b 	bl	80263b8 <__cxa_guard_acquire>
 801eee2:	b138      	cbz	r0, 801eef4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801eee4:	4620      	mov	r0, r4
 801eee6:	f007 fa73 	bl	80263d0 <__cxa_guard_release>
 801eeea:	4a06      	ldr	r2, [pc, #24]	; (801ef04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801eeec:	4909      	ldr	r1, [pc, #36]	; (801ef14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801eeee:	480a      	ldr	r0, [pc, #40]	; (801ef18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801eef0:	f007 fa5b 	bl	80263aa <__aeabi_atexit>
 801eef4:	4b05      	ldr	r3, [pc, #20]	; (801ef0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801eef6:	672b      	str	r3, [r5, #112]	; 0x70
 801eef8:	4b07      	ldr	r3, [pc, #28]	; (801ef18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801eefa:	676b      	str	r3, [r5, #116]	; 0x74
 801eefc:	bd38      	pop	{r3, r4, r5, pc}
 801eefe:	bf00      	nop
 801ef00:	2004f764 	.word	0x2004f764
 801ef04:	20000000 	.word	0x20000000
 801ef08:	0801caf3 	.word	0x0801caf3
 801ef0c:	2002582c 	.word	0x2002582c
 801ef10:	2004f768 	.word	0x2004f768
 801ef14:	0801caf1 	.word	0x0801caf1
 801ef18:	20025830 	.word	0x20025830

0801ef1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ef1c:	b538      	push	{r3, r4, r5, lr}
 801ef1e:	4605      	mov	r5, r0
 801ef20:	4c13      	ldr	r4, [pc, #76]	; (801ef70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 801ef22:	e8d4 3f8f 	ldab	r3, [r4]
 801ef26:	07da      	lsls	r2, r3, #31
 801ef28:	d40b      	bmi.n	801ef42 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801ef2a:	4620      	mov	r0, r4
 801ef2c:	f007 fa44 	bl	80263b8 <__cxa_guard_acquire>
 801ef30:	b138      	cbz	r0, 801ef42 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801ef32:	4620      	mov	r0, r4
 801ef34:	f007 fa4c 	bl	80263d0 <__cxa_guard_release>
 801ef38:	4a0e      	ldr	r2, [pc, #56]	; (801ef74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ef3a:	490f      	ldr	r1, [pc, #60]	; (801ef78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ef3c:	480f      	ldr	r0, [pc, #60]	; (801ef7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ef3e:	f007 fa34 	bl	80263aa <__aeabi_atexit>
 801ef42:	4c0f      	ldr	r4, [pc, #60]	; (801ef80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ef44:	e8d4 3f8f 	ldab	r3, [r4]
 801ef48:	07db      	lsls	r3, r3, #31
 801ef4a:	d40b      	bmi.n	801ef64 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	f007 fa33 	bl	80263b8 <__cxa_guard_acquire>
 801ef52:	b138      	cbz	r0, 801ef64 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801ef54:	4620      	mov	r0, r4
 801ef56:	f007 fa3b 	bl	80263d0 <__cxa_guard_release>
 801ef5a:	4a06      	ldr	r2, [pc, #24]	; (801ef74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ef5c:	4909      	ldr	r1, [pc, #36]	; (801ef84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ef5e:	480a      	ldr	r0, [pc, #40]	; (801ef88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ef60:	f007 fa23 	bl	80263aa <__aeabi_atexit>
 801ef64:	4b05      	ldr	r3, [pc, #20]	; (801ef7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ef66:	66ab      	str	r3, [r5, #104]	; 0x68
 801ef68:	4b07      	ldr	r3, [pc, #28]	; (801ef88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ef6a:	66eb      	str	r3, [r5, #108]	; 0x6c
 801ef6c:	bd38      	pop	{r3, r4, r5, pc}
 801ef6e:	bf00      	nop
 801ef70:	2004f75c 	.word	0x2004f75c
 801ef74:	20000000 	.word	0x20000000
 801ef78:	0801caf7 	.word	0x0801caf7
 801ef7c:	20025824 	.word	0x20025824
 801ef80:	2004f760 	.word	0x2004f760
 801ef84:	0801caf5 	.word	0x0801caf5
 801ef88:	20025828 	.word	0x20025828

0801ef8c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801ef8c:	b510      	push	{r4, lr}
 801ef8e:	4604      	mov	r4, r0
 801ef90:	f7ff ff8c 	bl	801eeac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ef94:	4620      	mov	r0, r4
 801ef96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef9a:	f7ff bfbf 	b.w	801ef1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801ef9e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801ef9e:	b510      	push	{r4, lr}
 801efa0:	4604      	mov	r4, r0
 801efa2:	f7ff fff3 	bl	801ef8c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801efa6:	4620      	mov	r0, r4
 801efa8:	f7ff ff76 	bl	801ee98 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801efac:	4620      	mov	r0, r4
 801efae:	f7ff fe09 	bl	801ebc4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801efb2:	4620      	mov	r0, r4
 801efb4:	f7ff fd12 	bl	801e9dc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801efb8:	4620      	mov	r0, r4
 801efba:	f7ff fd89 	bl	801ead0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801efbe:	4620      	mov	r0, r4
 801efc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801efc4:	f7ff bee8 	b.w	801ed98 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801efc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efcc:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801efd0:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801efd4:	fb05 4c0e 	mla	ip, r5, lr, r4
 801efd8:	2d00      	cmp	r5, #0
 801efda:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801efde:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801efe2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801efe6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801efea:	eb02 0a0c 	add.w	sl, r2, ip
 801efee:	8808      	ldrh	r0, [r1, #0]
 801eff0:	f2c0 80b0 	blt.w	801f154 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801eff4:	45ab      	cmp	fp, r5
 801eff6:	f340 80ad 	ble.w	801f154 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801effa:	2c00      	cmp	r4, #0
 801effc:	f2c0 80a8 	blt.w	801f150 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801f000:	45a6      	cmp	lr, r4
 801f002:	f340 80a5 	ble.w	801f150 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801f006:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f00a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801f00e:	1c62      	adds	r2, r4, #1
 801f010:	f100 80a3 	bmi.w	801f15a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f014:	4596      	cmp	lr, r2
 801f016:	f340 80a0 	ble.w	801f15a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f01a:	f1b9 0f00 	cmp.w	r9, #0
 801f01e:	f000 809c 	beq.w	801f15a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f022:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f026:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801f02a:	3501      	adds	r5, #1
 801f02c:	f100 8099 	bmi.w	801f162 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f030:	45ab      	cmp	fp, r5
 801f032:	f340 8096 	ble.w	801f162 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f036:	2f00      	cmp	r7, #0
 801f038:	f000 8093 	beq.w	801f162 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f03c:	2c00      	cmp	r4, #0
 801f03e:	f2c0 808e 	blt.w	801f15e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801f042:	45a6      	cmp	lr, r4
 801f044:	f340 808b 	ble.w	801f15e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801f048:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801f04c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801f050:	3401      	adds	r4, #1
 801f052:	f100 8089 	bmi.w	801f168 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f056:	45a6      	cmp	lr, r4
 801f058:	f340 8086 	ble.w	801f168 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f05c:	f1b9 0f00 	cmp.w	r9, #0
 801f060:	f000 8082 	beq.w	801f168 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f064:	44d6      	add	lr, sl
 801f066:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f06a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801f06e:	fb19 fe07 	smulbb	lr, r9, r7
 801f072:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801f076:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f07a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801f07e:	ea44 0808 	orr.w	r8, r4, r8
 801f082:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801f086:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801f08a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f08e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f092:	ea44 0c0c 	orr.w	ip, r4, ip
 801f096:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801f09a:	fb04 f40c 	mul.w	r4, r4, ip
 801f09e:	f1c7 0210 	rsb	r2, r7, #16
 801f0a2:	eba2 0209 	sub.w	r2, r2, r9
 801f0a6:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801f0aa:	fb02 4808 	mla	r8, r2, r8, r4
 801f0ae:	b2b4      	uxth	r4, r6
 801f0b0:	43f6      	mvns	r6, r6
 801f0b2:	041a      	lsls	r2, r3, #16
 801f0b4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f0b8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f0bc:	4313      	orrs	r3, r2
 801f0be:	fb0e 8303 	mla	r3, lr, r3, r8
 801f0c2:	042a      	lsls	r2, r5, #16
 801f0c4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f0c8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f0cc:	432a      	orrs	r2, r5
 801f0ce:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801f0d2:	fb07 3202 	mla	r2, r7, r2, r3
 801f0d6:	0d53      	lsrs	r3, r2, #21
 801f0d8:	0952      	lsrs	r2, r2, #5
 801f0da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f0de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f0e2:	431a      	orrs	r2, r3
 801f0e4:	b293      	uxth	r3, r2
 801f0e6:	1202      	asrs	r2, r0, #8
 801f0e8:	b2f6      	uxtb	r6, r6
 801f0ea:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f0ee:	fb12 f206 	smulbb	r2, r2, r6
 801f0f2:	10c7      	asrs	r7, r0, #3
 801f0f4:	00c0      	lsls	r0, r0, #3
 801f0f6:	b2c0      	uxtb	r0, r0
 801f0f8:	121d      	asrs	r5, r3, #8
 801f0fa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f0fe:	fb10 f006 	smulbb	r0, r0, r6
 801f102:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f106:	fb17 f706 	smulbb	r7, r7, r6
 801f10a:	fb05 2504 	mla	r5, r5, r4, r2
 801f10e:	10da      	asrs	r2, r3, #3
 801f110:	00db      	lsls	r3, r3, #3
 801f112:	b2db      	uxtb	r3, r3
 801f114:	fb03 0004 	mla	r0, r3, r4, r0
 801f118:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f11c:	fb02 7204 	mla	r2, r2, r4, r7
 801f120:	b2ad      	uxth	r5, r5
 801f122:	b280      	uxth	r0, r0
 801f124:	1c6b      	adds	r3, r5, #1
 801f126:	b292      	uxth	r2, r2
 801f128:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f12c:	1c43      	adds	r3, r0, #1
 801f12e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f132:	1c50      	adds	r0, r2, #1
 801f134:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f138:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f13c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f140:	0952      	lsrs	r2, r2, #5
 801f142:	432b      	orrs	r3, r5
 801f144:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f148:	4313      	orrs	r3, r2
 801f14a:	800b      	strh	r3, [r1, #0]
 801f14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f150:	4680      	mov	r8, r0
 801f152:	e75c      	b.n	801f00e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801f154:	4684      	mov	ip, r0
 801f156:	4680      	mov	r8, r0
 801f158:	e767      	b.n	801f02a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801f15a:	4684      	mov	ip, r0
 801f15c:	e765      	b.n	801f02a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801f15e:	4605      	mov	r5, r0
 801f160:	e776      	b.n	801f050 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801f162:	4603      	mov	r3, r0
 801f164:	4605      	mov	r5, r0
 801f166:	e782      	b.n	801f06e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801f168:	4603      	mov	r3, r0
 801f16a:	e780      	b.n	801f06e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801f16c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f170:	b099      	sub	sp, #100	; 0x64
 801f172:	9215      	str	r2, [sp, #84]	; 0x54
 801f174:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f176:	9016      	str	r0, [sp, #88]	; 0x58
 801f178:	9309      	str	r3, [sp, #36]	; 0x24
 801f17a:	6850      	ldr	r0, [r2, #4]
 801f17c:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801f180:	910c      	str	r1, [sp, #48]	; 0x30
 801f182:	930d      	str	r3, [sp, #52]	; 0x34
 801f184:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f188:	fb00 1303 	mla	r3, r0, r3, r1
 801f18c:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801f190:	6812      	ldr	r2, [r2, #0]
 801f192:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801f196:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	930b      	str	r3, [sp, #44]	; 0x2c
 801f19c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f19e:	685e      	ldr	r6, [r3, #4]
 801f1a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f1a2:	3604      	adds	r6, #4
 801f1a4:	43db      	mvns	r3, r3
 801f1a6:	b2db      	uxtb	r3, r3
 801f1a8:	930a      	str	r3, [sp, #40]	; 0x28
 801f1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	dc03      	bgt.n	801f1b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f1b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	f340 8225 	ble.w	801f602 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801f1b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f1ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f1be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f1c2:	1e48      	subs	r0, r1, #1
 801f1c4:	1e57      	subs	r7, r2, #1
 801f1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	f340 80e3 	ble.w	801f394 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f1ce:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801f1d2:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f1d6:	d406      	bmi.n	801f1e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f1d8:	4584      	cmp	ip, r0
 801f1da:	da04      	bge.n	801f1e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	db02      	blt.n	801f1e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f1e0:	42bb      	cmp	r3, r7
 801f1e2:	f2c0 80d8 	blt.w	801f396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f1e6:	f11c 0c01 	adds.w	ip, ip, #1
 801f1ea:	f100 80c9 	bmi.w	801f380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f1ee:	4561      	cmp	r1, ip
 801f1f0:	f2c0 80c6 	blt.w	801f380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f1f4:	3301      	adds	r3, #1
 801f1f6:	f100 80c3 	bmi.w	801f380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f1fa:	429a      	cmp	r2, r3
 801f1fc:	f2c0 80c0 	blt.w	801f380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f200:	4647      	mov	r7, r8
 801f202:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f206:	f1bb 0f00 	cmp.w	fp, #0
 801f20a:	f340 80e3 	ble.w	801f3d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801f20e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f210:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f212:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f216:	ea5f 422a 	movs.w	r2, sl, asr #16
 801f21a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f21e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801f222:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f226:	689b      	ldr	r3, [r3, #8]
 801f228:	f100 8121 	bmi.w	801f46e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f22c:	f103 39ff 	add.w	r9, r3, #4294967295
 801f230:	454a      	cmp	r2, r9
 801f232:	f280 811c 	bge.w	801f46e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f236:	f1bc 0f00 	cmp.w	ip, #0
 801f23a:	f2c0 8118 	blt.w	801f46e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f23e:	f10e 39ff 	add.w	r9, lr, #4294967295
 801f242:	45cc      	cmp	ip, r9
 801f244:	f280 8113 	bge.w	801f46e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f248:	b21b      	sxth	r3, r3
 801f24a:	fb0c 2203 	mla	r2, ip, r3, r2
 801f24e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f250:	eb04 0902 	add.w	r9, r4, r2
 801f254:	5ca2      	ldrb	r2, [r4, r2]
 801f256:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801f25a:	2800      	cmp	r0, #0
 801f25c:	f000 80fe 	beq.w	801f45c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801f260:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f264:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801f268:	9211      	str	r2, [sp, #68]	; 0x44
 801f26a:	b151      	cbz	r1, 801f282 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f26c:	eb09 0203 	add.w	r2, r9, r3
 801f270:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f274:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f278:	930f      	str	r3, [sp, #60]	; 0x3c
 801f27a:	7853      	ldrb	r3, [r2, #1]
 801f27c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f280:	9312      	str	r3, [sp, #72]	; 0x48
 801f282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f284:	fb10 f201 	smulbb	r2, r0, r1
 801f288:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f28c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f290:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f294:	ea4c 0c03 	orr.w	ip, ip, r3
 801f298:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f29a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f29c:	041b      	lsls	r3, r3, #16
 801f29e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801f2a2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f2a6:	10d2      	asrs	r2, r2, #3
 801f2a8:	4323      	orrs	r3, r4
 801f2aa:	4353      	muls	r3, r2
 801f2ac:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801f2b0:	fb09 330c 	mla	r3, r9, ip, r3
 801f2b4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f2b8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f2bc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f2c0:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f2c4:	f1c1 0c10 	rsb	ip, r1, #16
 801f2c8:	ebac 0c00 	sub.w	ip, ip, r0
 801f2cc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f2d0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f2d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f2d6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f2da:	0418      	lsls	r0, r3, #16
 801f2dc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f2e0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f2e4:	4318      	orrs	r0, r3
 801f2e6:	fb02 c200 	mla	r2, r2, r0, ip
 801f2ea:	8838      	ldrh	r0, [r7, #0]
 801f2ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f2ee:	0d53      	lsrs	r3, r2, #21
 801f2f0:	1201      	asrs	r1, r0, #8
 801f2f2:	0952      	lsrs	r2, r2, #5
 801f2f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f2f8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f2fc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f300:	431a      	orrs	r2, r3
 801f302:	fb11 f104 	smulbb	r1, r1, r4
 801f306:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801f30a:	00c0      	lsls	r0, r0, #3
 801f30c:	b292      	uxth	r2, r2
 801f30e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f312:	b2c0      	uxtb	r0, r0
 801f314:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801f318:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f31c:	fb1e fe04 	smulbb	lr, lr, r4
 801f320:	fb10 f004 	smulbb	r0, r0, r4
 801f324:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f328:	fb0c 1c03 	mla	ip, ip, r3, r1
 801f32c:	10d1      	asrs	r1, r2, #3
 801f32e:	00d2      	lsls	r2, r2, #3
 801f330:	b2d2      	uxtb	r2, r2
 801f332:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f336:	fb01 e103 	mla	r1, r1, r3, lr
 801f33a:	fb02 0303 	mla	r3, r2, r3, r0
 801f33e:	fa1f fc8c 	uxth.w	ip, ip
 801f342:	b29a      	uxth	r2, r3
 801f344:	f10c 0301 	add.w	r3, ip, #1
 801f348:	b289      	uxth	r1, r1
 801f34a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f34e:	1c53      	adds	r3, r2, #1
 801f350:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f354:	1c4a      	adds	r2, r1, #1
 801f356:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f35a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f35e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f362:	0949      	lsrs	r1, r1, #5
 801f364:	ea43 030c 	orr.w	r3, r3, ip
 801f368:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f36c:	430b      	orrs	r3, r1
 801f36e:	803b      	strh	r3, [r7, #0]
 801f370:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f372:	3702      	adds	r7, #2
 801f374:	449a      	add	sl, r3
 801f376:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f378:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f37c:	441d      	add	r5, r3
 801f37e:	e742      	b.n	801f206 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f380:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f382:	f108 0802 	add.w	r8, r8, #2
 801f386:	449a      	add	sl, r3
 801f388:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f38a:	441d      	add	r5, r3
 801f38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f38e:	3b01      	subs	r3, #1
 801f390:	9309      	str	r3, [sp, #36]	; 0x24
 801f392:	e718      	b.n	801f1c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f394:	d023      	beq.n	801f3de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801f396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f398:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f39a:	3b01      	subs	r3, #1
 801f39c:	fb00 a003 	mla	r0, r0, r3, sl
 801f3a0:	1400      	asrs	r0, r0, #16
 801f3a2:	f53f af2d 	bmi.w	801f200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f3a6:	3901      	subs	r1, #1
 801f3a8:	4288      	cmp	r0, r1
 801f3aa:	f6bf af29 	bge.w	801f200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f3ae:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f3b0:	fb01 5303 	mla	r3, r1, r3, r5
 801f3b4:	141b      	asrs	r3, r3, #16
 801f3b6:	f53f af23 	bmi.w	801f200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f3ba:	3a01      	subs	r2, #1
 801f3bc:	4293      	cmp	r3, r2
 801f3be:	f6bf af1f 	bge.w	801f200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f3c2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f3c6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801f3ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801f3ce:	f1be 0f00 	cmp.w	lr, #0
 801f3d2:	dc6c      	bgt.n	801f4ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801f3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f3da:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801f3de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	f340 810e 	ble.w	801f602 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801f3e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f3ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f3f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3fa:	eef0 6a62 	vmov.f32	s13, s5
 801f3fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f402:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f406:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f40a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f40e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f412:	ee16 aa90 	vmov	sl, s13
 801f416:	eef0 6a43 	vmov.f32	s13, s6
 801f41a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f41e:	ee12 2a90 	vmov	r2, s5
 801f422:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f426:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f428:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f42c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f430:	ee13 2a10 	vmov	r2, s6
 801f434:	9325      	str	r3, [sp, #148]	; 0x94
 801f436:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f438:	ee16 5a90 	vmov	r5, s13
 801f43c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f440:	9326      	str	r3, [sp, #152]	; 0x98
 801f442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f444:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f446:	3b01      	subs	r3, #1
 801f448:	930c      	str	r3, [sp, #48]	; 0x30
 801f44a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f44c:	bf08      	it	eq
 801f44e:	4613      	moveq	r3, r2
 801f450:	eeb0 3a67 	vmov.f32	s6, s15
 801f454:	9309      	str	r3, [sp, #36]	; 0x24
 801f456:	eef0 2a47 	vmov.f32	s5, s14
 801f45a:	e6a6      	b.n	801f1aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f45c:	2900      	cmp	r1, #0
 801f45e:	f43f af10 	beq.w	801f282 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f462:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f466:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f46a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f46c:	e709      	b.n	801f282 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f46e:	f112 0901 	adds.w	r9, r2, #1
 801f472:	f53f af7d 	bmi.w	801f370 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f476:	454b      	cmp	r3, r9
 801f478:	f6ff af7a 	blt.w	801f370 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f47c:	f11c 0901 	adds.w	r9, ip, #1
 801f480:	f53f af76 	bmi.w	801f370 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f484:	45ce      	cmp	lr, r9
 801f486:	f6ff af73 	blt.w	801f370 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f48a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f48c:	9202      	str	r2, [sp, #8]
 801f48e:	b21b      	sxth	r3, r3
 801f490:	fa0f f28e 	sxth.w	r2, lr
 801f494:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f498:	e9cd c003 	strd	ip, r0, [sp, #12]
 801f49c:	9201      	str	r2, [sp, #4]
 801f49e:	9300      	str	r3, [sp, #0]
 801f4a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f4a2:	4633      	mov	r3, r6
 801f4a4:	4639      	mov	r1, r7
 801f4a6:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f4a8:	f7ff fd8e 	bl	801efc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801f4ac:	e760      	b.n	801f370 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f4ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f4b0:	ea4f 422a 	mov.w	r2, sl, asr #16
 801f4b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f4b8:	1429      	asrs	r1, r5, #16
 801f4ba:	fb03 2101 	mla	r1, r3, r1, r2
 801f4be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f4c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f4c2:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801f4c6:	440a      	add	r2, r1
 801f4c8:	5c61      	ldrb	r1, [r4, r1]
 801f4ca:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f4ce:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801f4d2:	f1bc 0f00 	cmp.w	ip, #0
 801f4d6:	f000 808c 	beq.w	801f5f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801f4da:	7857      	ldrb	r7, [r2, #1]
 801f4dc:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801f4e0:	9413      	str	r4, [sp, #76]	; 0x4c
 801f4e2:	b140      	cbz	r0, 801f4f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f4e4:	18d7      	adds	r7, r2, r3
 801f4e6:	5cd3      	ldrb	r3, [r2, r3]
 801f4e8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f4ec:	9310      	str	r3, [sp, #64]	; 0x40
 801f4ee:	787b      	ldrb	r3, [r7, #1]
 801f4f0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f4f4:	9314      	str	r3, [sp, #80]	; 0x50
 801f4f6:	fb1c f200 	smulbb	r2, ip, r0
 801f4fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f4fc:	10d2      	asrs	r2, r2, #3
 801f4fe:	041f      	lsls	r7, r3, #16
 801f500:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801f504:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f508:	431f      	orrs	r7, r3
 801f50a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801f50e:	9317      	str	r3, [sp, #92]	; 0x5c
 801f510:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f512:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f514:	041b      	lsls	r3, r3, #16
 801f516:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801f51a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f51e:	ea43 030b 	orr.w	r3, r3, fp
 801f522:	4353      	muls	r3, r2
 801f524:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f526:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f52a:	fb04 3707 	mla	r7, r4, r7, r3
 801f52e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f532:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f536:	ea43 0b01 	orr.w	fp, r3, r1
 801f53a:	f1c0 0110 	rsb	r1, r0, #16
 801f53e:	eba1 0c0c 	sub.w	ip, r1, ip
 801f542:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f546:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f548:	fb0c 770b 	mla	r7, ip, fp, r7
 801f54c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f550:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801f554:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f558:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f55c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f560:	fb02 770c 	mla	r7, r2, ip, r7
 801f564:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f566:	0d79      	lsrs	r1, r7, #21
 801f568:	8812      	ldrh	r2, [r2, #0]
 801f56a:	097f      	lsrs	r7, r7, #5
 801f56c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f570:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f574:	430f      	orrs	r7, r1
 801f576:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f578:	1211      	asrs	r1, r2, #8
 801f57a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f57e:	b2bb      	uxth	r3, r7
 801f580:	fb11 f104 	smulbb	r1, r1, r4
 801f584:	10d7      	asrs	r7, r2, #3
 801f586:	00d2      	lsls	r2, r2, #3
 801f588:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f58c:	b2d2      	uxtb	r2, r2
 801f58e:	1218      	asrs	r0, r3, #8
 801f590:	fb17 f704 	smulbb	r7, r7, r4
 801f594:	fb12 f204 	smulbb	r2, r2, r4
 801f598:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f59c:	fb00 1009 	mla	r0, r0, r9, r1
 801f5a0:	10d9      	asrs	r1, r3, #3
 801f5a2:	00db      	lsls	r3, r3, #3
 801f5a4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f5a8:	b2db      	uxtb	r3, r3
 801f5aa:	fb01 7109 	mla	r1, r1, r9, r7
 801f5ae:	fb03 2309 	mla	r3, r3, r9, r2
 801f5b2:	b280      	uxth	r0, r0
 801f5b4:	b29b      	uxth	r3, r3
 801f5b6:	b289      	uxth	r1, r1
 801f5b8:	1c42      	adds	r2, r0, #1
 801f5ba:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f5be:	1c4f      	adds	r7, r1, #1
 801f5c0:	1c5a      	adds	r2, r3, #1
 801f5c2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f5c6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801f5ca:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f5ce:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f5d2:	0949      	lsrs	r1, r1, #5
 801f5d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5d6:	4310      	orrs	r0, r2
 801f5d8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f5dc:	4308      	orrs	r0, r1
 801f5de:	f823 0b02 	strh.w	r0, [r3], #2
 801f5e2:	930e      	str	r3, [sp, #56]	; 0x38
 801f5e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f5e6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f5ea:	449a      	add	sl, r3
 801f5ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f5ee:	441d      	add	r5, r3
 801f5f0:	e6ed      	b.n	801f3ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801f5f2:	2800      	cmp	r0, #0
 801f5f4:	f43f af7f 	beq.w	801f4f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f5f8:	5cd3      	ldrb	r3, [r2, r3]
 801f5fa:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f5fe:	9310      	str	r3, [sp, #64]	; 0x40
 801f600:	e779      	b.n	801f4f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f602:	b019      	add	sp, #100	; 0x64
 801f604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f608 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801f608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f60c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801f610:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801f614:	fb08 470e 	mla	r7, r8, lr, r4
 801f618:	f1b8 0f00 	cmp.w	r8, #0
 801f61c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801f620:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801f624:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801f628:	eb02 0907 	add.w	r9, r2, r7
 801f62c:	8808      	ldrh	r0, [r1, #0]
 801f62e:	db67      	blt.n	801f700 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f630:	45c2      	cmp	sl, r8
 801f632:	dd65      	ble.n	801f700 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f634:	2c00      	cmp	r4, #0
 801f636:	db61      	blt.n	801f6fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f638:	45a6      	cmp	lr, r4
 801f63a:	dd5f      	ble.n	801f6fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f63c:	5dd2      	ldrb	r2, [r2, r7]
 801f63e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801f642:	1c62      	adds	r2, r4, #1
 801f644:	d45f      	bmi.n	801f706 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f646:	4596      	cmp	lr, r2
 801f648:	dd5d      	ble.n	801f706 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f64a:	2d00      	cmp	r5, #0
 801f64c:	d05b      	beq.n	801f706 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f64e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f652:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801f656:	f118 0801 	adds.w	r8, r8, #1
 801f65a:	d458      	bmi.n	801f70e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f65c:	45c2      	cmp	sl, r8
 801f65e:	dd56      	ble.n	801f70e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f660:	2e00      	cmp	r6, #0
 801f662:	d054      	beq.n	801f70e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f664:	2c00      	cmp	r4, #0
 801f666:	db50      	blt.n	801f70a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f668:	45a6      	cmp	lr, r4
 801f66a:	dd4e      	ble.n	801f70a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f66c:	f819 200e 	ldrb.w	r2, [r9, lr]
 801f670:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f674:	3401      	adds	r4, #1
 801f676:	d407      	bmi.n	801f688 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f678:	45a6      	cmp	lr, r4
 801f67a:	dd05      	ble.n	801f688 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f67c:	b125      	cbz	r5, 801f688 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f67e:	44ce      	add	lr, r9
 801f680:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f684:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801f688:	fb15 f406 	smulbb	r4, r5, r6
 801f68c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801f690:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f694:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801f698:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f69c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801f6a0:	ea43 0c0c 	orr.w	ip, r3, ip
 801f6a4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f6a8:	f1c6 0310 	rsb	r3, r6, #16
 801f6ac:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f6b0:	1b5b      	subs	r3, r3, r5
 801f6b2:	ea4e 0707 	orr.w	r7, lr, r7
 801f6b6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801f6ba:	437d      	muls	r5, r7
 801f6bc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f6c0:	fb03 5c0c 	mla	ip, r3, ip, r5
 801f6c4:	0403      	lsls	r3, r0, #16
 801f6c6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f6ca:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f6ce:	4318      	orrs	r0, r3
 801f6d0:	fb04 c000 	mla	r0, r4, r0, ip
 801f6d4:	0413      	lsls	r3, r2, #16
 801f6d6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f6da:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f6de:	4313      	orrs	r3, r2
 801f6e0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801f6e4:	fb06 0003 	mla	r0, r6, r3, r0
 801f6e8:	0d43      	lsrs	r3, r0, #21
 801f6ea:	0940      	lsrs	r0, r0, #5
 801f6ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f6f0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f6f4:	4318      	orrs	r0, r3
 801f6f6:	8008      	strh	r0, [r1, #0]
 801f6f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6fc:	4684      	mov	ip, r0
 801f6fe:	e7a0      	b.n	801f642 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801f700:	4607      	mov	r7, r0
 801f702:	4684      	mov	ip, r0
 801f704:	e7a7      	b.n	801f656 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f706:	4607      	mov	r7, r0
 801f708:	e7a5      	b.n	801f656 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f70a:	4602      	mov	r2, r0
 801f70c:	e7b2      	b.n	801f674 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801f70e:	4602      	mov	r2, r0
 801f710:	e7ba      	b.n	801f688 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801f712 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f716:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f71a:	b093      	sub	sp, #76	; 0x4c
 801f71c:	920f      	str	r2, [sp, #60]	; 0x3c
 801f71e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f720:	9010      	str	r0, [sp, #64]	; 0x40
 801f722:	6850      	ldr	r0, [r2, #4]
 801f724:	9108      	str	r1, [sp, #32]
 801f726:	9306      	str	r3, [sp, #24]
 801f728:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801f72c:	fb00 1303 	mla	r3, r0, r3, r1
 801f730:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801f734:	6812      	ldr	r2, [r2, #0]
 801f736:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801f73a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f73c:	681b      	ldr	r3, [r3, #0]
 801f73e:	9307      	str	r3, [sp, #28]
 801f740:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f742:	685f      	ldr	r7, [r3, #4]
 801f744:	3704      	adds	r7, #4
 801f746:	9b08      	ldr	r3, [sp, #32]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	dc03      	bgt.n	801f754 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f74c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f74e:	2b00      	cmp	r3, #0
 801f750:	f340 81b2 	ble.w	801fab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f754:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f756:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f75a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f75e:	1e48      	subs	r0, r1, #1
 801f760:	f102 3cff 	add.w	ip, r2, #4294967295
 801f764:	9b06      	ldr	r3, [sp, #24]
 801f766:	2b00      	cmp	r3, #0
 801f768:	f340 80a9 	ble.w	801f8be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f76c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f770:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f774:	d406      	bmi.n	801f784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f776:	4586      	cmp	lr, r0
 801f778:	da04      	bge.n	801f784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	db02      	blt.n	801f784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f77e:	4563      	cmp	r3, ip
 801f780:	f2c0 809e 	blt.w	801f8c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f784:	f11e 0e01 	adds.w	lr, lr, #1
 801f788:	f100 808f 	bmi.w	801f8aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f78c:	4571      	cmp	r1, lr
 801f78e:	f2c0 808c 	blt.w	801f8aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f792:	3301      	adds	r3, #1
 801f794:	f100 8089 	bmi.w	801f8aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f798:	429a      	cmp	r2, r3
 801f79a:	f2c0 8086 	blt.w	801f8aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f79e:	46c8      	mov	r8, r9
 801f7a0:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f7a4:	f1bb 0f00 	cmp.w	fp, #0
 801f7a8:	f340 80a6 	ble.w	801f8f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f7ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f7ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f7b0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f7b4:	1422      	asrs	r2, r4, #16
 801f7b6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f7ba:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f7be:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f7c2:	689b      	ldr	r3, [r3, #8]
 801f7c4:	f100 80e3 	bmi.w	801f98e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f7c8:	f103 3aff 	add.w	sl, r3, #4294967295
 801f7cc:	4552      	cmp	r2, sl
 801f7ce:	f280 80de 	bge.w	801f98e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f7d2:	f1bc 0f00 	cmp.w	ip, #0
 801f7d6:	f2c0 80da 	blt.w	801f98e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f7da:	f10e 3aff 	add.w	sl, lr, #4294967295
 801f7de:	45d4      	cmp	ip, sl
 801f7e0:	f280 80d5 	bge.w	801f98e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f7e4:	b21b      	sxth	r3, r3
 801f7e6:	fb0c 2203 	mla	r2, ip, r3, r2
 801f7ea:	9d07      	ldr	r5, [sp, #28]
 801f7ec:	eb05 0a02 	add.w	sl, r5, r2
 801f7f0:	5caa      	ldrb	r2, [r5, r2]
 801f7f2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801f7f6:	2800      	cmp	r0, #0
 801f7f8:	f000 80c0 	beq.w	801f97c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f7fc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f800:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801f804:	920b      	str	r2, [sp, #44]	; 0x2c
 801f806:	b151      	cbz	r1, 801f81e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f808:	eb0a 0203 	add.w	r2, sl, r3
 801f80c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f810:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f814:	9309      	str	r3, [sp, #36]	; 0x24
 801f816:	7853      	ldrb	r3, [r2, #1]
 801f818:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f81c:	930c      	str	r3, [sp, #48]	; 0x30
 801f81e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f820:	fb10 f201 	smulbb	r2, r0, r1
 801f824:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f828:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f82c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f830:	ea4c 0c03 	orr.w	ip, ip, r3
 801f834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f838:	041b      	lsls	r3, r3, #16
 801f83a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f83e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f842:	10d2      	asrs	r2, r2, #3
 801f844:	432b      	orrs	r3, r5
 801f846:	4353      	muls	r3, r2
 801f848:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801f84c:	fb0a 330c 	mla	r3, sl, ip, r3
 801f850:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f854:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f858:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f85c:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f860:	f1c1 0c10 	rsb	ip, r1, #16
 801f864:	ebac 0c00 	sub.w	ip, ip, r0
 801f868:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f86c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f872:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f876:	0418      	lsls	r0, r3, #16
 801f878:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f87c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f880:	4318      	orrs	r0, r3
 801f882:	fb02 c200 	mla	r2, r2, r0, ip
 801f886:	0d53      	lsrs	r3, r2, #21
 801f888:	0952      	lsrs	r2, r2, #5
 801f88a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f88e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f892:	431a      	orrs	r2, r3
 801f894:	f8a8 2000 	strh.w	r2, [r8]
 801f898:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f89a:	f108 0802 	add.w	r8, r8, #2
 801f89e:	441c      	add	r4, r3
 801f8a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f8a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f8a6:	441e      	add	r6, r3
 801f8a8:	e77c      	b.n	801f7a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f8aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f8ac:	f109 0902 	add.w	r9, r9, #2
 801f8b0:	441c      	add	r4, r3
 801f8b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f8b4:	441e      	add	r6, r3
 801f8b6:	9b06      	ldr	r3, [sp, #24]
 801f8b8:	3b01      	subs	r3, #1
 801f8ba:	9306      	str	r3, [sp, #24]
 801f8bc:	e752      	b.n	801f764 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f8be:	d020      	beq.n	801f902 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f8c0:	9b06      	ldr	r3, [sp, #24]
 801f8c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f8c4:	3b01      	subs	r3, #1
 801f8c6:	fb00 4003 	mla	r0, r0, r3, r4
 801f8ca:	1400      	asrs	r0, r0, #16
 801f8cc:	f53f af67 	bmi.w	801f79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f8d0:	3901      	subs	r1, #1
 801f8d2:	4288      	cmp	r0, r1
 801f8d4:	f6bf af63 	bge.w	801f79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f8d8:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f8da:	fb01 6303 	mla	r3, r1, r3, r6
 801f8de:	141b      	asrs	r3, r3, #16
 801f8e0:	f53f af5d 	bmi.w	801f79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f8e4:	3a01      	subs	r2, #1
 801f8e6:	4293      	cmp	r3, r2
 801f8e8:	f6bf af59 	bge.w	801f79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f8ec:	46ca      	mov	sl, r9
 801f8ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f8f2:	f1b8 0f00 	cmp.w	r8, #0
 801f8f6:	dc67      	bgt.n	801f9c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f8f8:	9b06      	ldr	r3, [sp, #24]
 801f8fa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f8fe:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801f902:	9b08      	ldr	r3, [sp, #32]
 801f904:	2b00      	cmp	r3, #0
 801f906:	f340 80d7 	ble.w	801fab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f90a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f90e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f912:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f916:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f91a:	eeb0 6a62 	vmov.f32	s12, s5
 801f91e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f922:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f926:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f92a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f92e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f932:	ee16 4a10 	vmov	r4, s12
 801f936:	eeb0 6a43 	vmov.f32	s12, s6
 801f93a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f93e:	ee12 2a90 	vmov	r2, s5
 801f942:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f946:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f948:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f94c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f950:	ee13 2a10 	vmov	r2, s6
 801f954:	931f      	str	r3, [sp, #124]	; 0x7c
 801f956:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f958:	ee16 6a10 	vmov	r6, s12
 801f95c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f960:	9320      	str	r3, [sp, #128]	; 0x80
 801f962:	9b08      	ldr	r3, [sp, #32]
 801f964:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f966:	3b01      	subs	r3, #1
 801f968:	9308      	str	r3, [sp, #32]
 801f96a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f96c:	bf08      	it	eq
 801f96e:	4613      	moveq	r3, r2
 801f970:	eeb0 3a67 	vmov.f32	s6, s15
 801f974:	9306      	str	r3, [sp, #24]
 801f976:	eef0 2a47 	vmov.f32	s5, s14
 801f97a:	e6e4      	b.n	801f746 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f97c:	2900      	cmp	r1, #0
 801f97e:	f43f af4e 	beq.w	801f81e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f982:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f986:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f98a:	9309      	str	r3, [sp, #36]	; 0x24
 801f98c:	e747      	b.n	801f81e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f98e:	f112 0a01 	adds.w	sl, r2, #1
 801f992:	d481      	bmi.n	801f898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f994:	4553      	cmp	r3, sl
 801f996:	f6ff af7f 	blt.w	801f898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f99a:	f11c 0a01 	adds.w	sl, ip, #1
 801f99e:	f53f af7b 	bmi.w	801f898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f9a2:	45d6      	cmp	lr, sl
 801f9a4:	f6ff af78 	blt.w	801f898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f9a8:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801f9ac:	b21b      	sxth	r3, r3
 801f9ae:	fa0f f28e 	sxth.w	r2, lr
 801f9b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f9b6:	9201      	str	r2, [sp, #4]
 801f9b8:	9300      	str	r3, [sp, #0]
 801f9ba:	9a07      	ldr	r2, [sp, #28]
 801f9bc:	463b      	mov	r3, r7
 801f9be:	4641      	mov	r1, r8
 801f9c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f9c2:	f7ff fe21 	bl	801f608 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f9c6:	e767      	b.n	801f898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f9c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f9ca:	1422      	asrs	r2, r4, #16
 801f9cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f9d0:	1431      	asrs	r1, r6, #16
 801f9d2:	fb03 2101 	mla	r1, r3, r1, r2
 801f9d6:	9d07      	ldr	r5, [sp, #28]
 801f9d8:	9a07      	ldr	r2, [sp, #28]
 801f9da:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801f9de:	440a      	add	r2, r1
 801f9e0:	5c69      	ldrb	r1, [r5, r1]
 801f9e2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f9e6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801f9ea:	f1be 0f00 	cmp.w	lr, #0
 801f9ee:	d05c      	beq.n	801faaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801f9f0:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f9f4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801f9f8:	950d      	str	r5, [sp, #52]	; 0x34
 801f9fa:	b150      	cbz	r0, 801fa12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f9fc:	eb02 0c03 	add.w	ip, r2, r3
 801fa00:	5cd3      	ldrb	r3, [r2, r3]
 801fa02:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fa06:	930a      	str	r3, [sp, #40]	; 0x28
 801fa08:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801fa0c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fa10:	930e      	str	r3, [sp, #56]	; 0x38
 801fa12:	fb1e f200 	smulbb	r2, lr, r0
 801fa16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fa18:	10d2      	asrs	r2, r2, #3
 801fa1a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801fa1e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fa22:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fa26:	ea4c 0c03 	orr.w	ip, ip, r3
 801fa2a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801fa2e:	9311      	str	r3, [sp, #68]	; 0x44
 801fa30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa32:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801fa34:	041b      	lsls	r3, r3, #16
 801fa36:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801fa3a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fa3e:	ea43 030b 	orr.w	r3, r3, fp
 801fa42:	4353      	muls	r3, r2
 801fa44:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fa46:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801fa4a:	fb05 3c0c 	mla	ip, r5, ip, r3
 801fa4e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801fa52:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801fa56:	ea43 0b01 	orr.w	fp, r3, r1
 801fa5a:	f1c0 0110 	rsb	r1, r0, #16
 801fa5e:	eba1 0e0e 	sub.w	lr, r1, lr
 801fa62:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801fa66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa68:	fb0e cc0b 	mla	ip, lr, fp, ip
 801fa6c:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801fa70:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801fa74:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fa78:	ea4b 0e0e 	orr.w	lr, fp, lr
 801fa7c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801fa80:	fb02 cc0e 	mla	ip, r2, lr, ip
 801fa84:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801fa88:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fa8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fa90:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801fa94:	ea43 0c0c 	orr.w	ip, r3, ip
 801fa98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fa9a:	f82a cb02 	strh.w	ip, [sl], #2
 801fa9e:	441c      	add	r4, r3
 801faa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801faa2:	f108 38ff 	add.w	r8, r8, #4294967295
 801faa6:	441e      	add	r6, r3
 801faa8:	e723      	b.n	801f8f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801faaa:	2800      	cmp	r0, #0
 801faac:	d0b1      	beq.n	801fa12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801faae:	5cd3      	ldrb	r3, [r2, r3]
 801fab0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fab4:	930a      	str	r3, [sp, #40]	; 0x28
 801fab6:	e7ac      	b.n	801fa12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801fab8:	b013      	add	sp, #76	; 0x4c
 801faba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fabe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801fabe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fac2:	880d      	ldrh	r5, [r1, #0]
 801fac4:	b087      	sub	sp, #28
 801fac6:	10ef      	asrs	r7, r5, #3
 801fac8:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801facc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fad0:	00ed      	lsls	r5, r5, #3
 801fad2:	9701      	str	r7, [sp, #4]
 801fad4:	b2ed      	uxtb	r5, r5
 801fad6:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801fada:	9502      	str	r5, [sp, #8]
 801fadc:	9d01      	ldr	r5, [sp, #4]
 801fade:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801fae2:	fb06 0709 	mla	r7, r6, r9, r0
 801fae6:	9103      	str	r1, [sp, #12]
 801fae8:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801faec:	022d      	lsls	r5, r5, #8
 801faee:	9902      	ldr	r1, [sp, #8]
 801faf0:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801faf4:	430d      	orrs	r5, r1
 801faf6:	2e00      	cmp	r6, #0
 801faf8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801fafc:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801fb00:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801fb04:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801fb08:	eb02 0c07 	add.w	ip, r2, r7
 801fb0c:	9505      	str	r5, [sp, #20]
 801fb0e:	f2c0 80b6 	blt.w	801fc7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801fb12:	45b3      	cmp	fp, r6
 801fb14:	f340 80b3 	ble.w	801fc7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801fb18:	2800      	cmp	r0, #0
 801fb1a:	f2c0 80ae 	blt.w	801fc7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801fb1e:	4581      	cmp	r9, r0
 801fb20:	f340 80ab 	ble.w	801fc7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801fb24:	5dd7      	ldrb	r7, [r2, r7]
 801fb26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fb2a:	441f      	add	r7, r3
 801fb2c:	1c42      	adds	r2, r0, #1
 801fb2e:	f100 80a9 	bmi.w	801fc84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801fb32:	4591      	cmp	r9, r2
 801fb34:	f340 80a6 	ble.w	801fc84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801fb38:	2c00      	cmp	r4, #0
 801fb3a:	f000 80a3 	beq.w	801fc84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801fb3e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801fb42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb46:	441d      	add	r5, r3
 801fb48:	3601      	adds	r6, #1
 801fb4a:	f100 809f 	bmi.w	801fc8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801fb4e:	45b3      	cmp	fp, r6
 801fb50:	f340 809c 	ble.w	801fc8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801fb54:	f1be 0f00 	cmp.w	lr, #0
 801fb58:	f000 8098 	beq.w	801fc8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801fb5c:	2800      	cmp	r0, #0
 801fb5e:	f2c0 8093 	blt.w	801fc88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801fb62:	4581      	cmp	r9, r0
 801fb64:	f340 8090 	ble.w	801fc88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801fb68:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801fb6c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fb70:	441e      	add	r6, r3
 801fb72:	3001      	adds	r0, #1
 801fb74:	f100 808d 	bmi.w	801fc92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801fb78:	4581      	cmp	r9, r0
 801fb7a:	f340 808a 	ble.w	801fc92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801fb7e:	2c00      	cmp	r4, #0
 801fb80:	f000 8087 	beq.w	801fc92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801fb84:	44e1      	add	r9, ip
 801fb86:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fb8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb8e:	4413      	add	r3, r2
 801fb90:	b2a4      	uxth	r4, r4
 801fb92:	fa1f fe8e 	uxth.w	lr, lr
 801fb96:	fb04 fb0e 	mul.w	fp, r4, lr
 801fb9a:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801fb9e:	fa1f f08e 	uxth.w	r0, lr
 801fba2:	fa1f fe88 	uxth.w	lr, r8
 801fba6:	ea6f 0808 	mvn.w	r8, r8
 801fbaa:	0124      	lsls	r4, r4, #4
 801fbac:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801fbb0:	eba4 040b 	sub.w	r4, r4, fp
 801fbb4:	b2a2      	uxth	r2, r4
 801fbb6:	78ac      	ldrb	r4, [r5, #2]
 801fbb8:	f897 c002 	ldrb.w	ip, [r7, #2]
 801fbbc:	4354      	muls	r4, r2
 801fbbe:	eba9 0900 	sub.w	r9, r9, r0
 801fbc2:	fa1f f989 	uxth.w	r9, r9
 801fbc6:	fb09 440c 	mla	r4, r9, ip, r4
 801fbca:	f896 c002 	ldrb.w	ip, [r6, #2]
 801fbce:	fa5f f888 	uxtb.w	r8, r8
 801fbd2:	fb00 440c 	mla	r4, r0, ip, r4
 801fbd6:	f893 c002 	ldrb.w	ip, [r3, #2]
 801fbda:	fb1a fa08 	smulbb	sl, sl, r8
 801fbde:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801fbe2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fbe6:	fb0c ac0e 	mla	ip, ip, lr, sl
 801fbea:	f895 a001 	ldrb.w	sl, [r5, #1]
 801fbee:	782d      	ldrb	r5, [r5, #0]
 801fbf0:	fb02 fa0a 	mul.w	sl, r2, sl
 801fbf4:	436a      	muls	r2, r5
 801fbf6:	787c      	ldrb	r4, [r7, #1]
 801fbf8:	783f      	ldrb	r7, [r7, #0]
 801fbfa:	fb09 aa04 	mla	sl, r9, r4, sl
 801fbfe:	fb09 2207 	mla	r2, r9, r7, r2
 801fc02:	7874      	ldrb	r4, [r6, #1]
 801fc04:	7835      	ldrb	r5, [r6, #0]
 801fc06:	fb00 aa04 	mla	sl, r0, r4, sl
 801fc0a:	fb00 2005 	mla	r0, r0, r5, r2
 801fc0e:	785c      	ldrb	r4, [r3, #1]
 801fc10:	781b      	ldrb	r3, [r3, #0]
 801fc12:	fb0b a404 	mla	r4, fp, r4, sl
 801fc16:	9901      	ldr	r1, [sp, #4]
 801fc18:	fb0b 0b03 	mla	fp, fp, r3, r0
 801fc1c:	9b02      	ldr	r3, [sp, #8]
 801fc1e:	fb11 fa08 	smulbb	sl, r1, r8
 801fc22:	fb13 f808 	smulbb	r8, r3, r8
 801fc26:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801fc2a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801fc2e:	fb04 a40e 	mla	r4, r4, lr, sl
 801fc32:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801fc36:	fa1f fc8c 	uxth.w	ip, ip
 801fc3a:	f10c 0301 	add.w	r3, ip, #1
 801fc3e:	fa1f fe8e 	uxth.w	lr, lr
 801fc42:	b2a4      	uxth	r4, r4
 801fc44:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fc48:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801fc4c:	f104 0a01 	add.w	sl, r4, #1
 801fc50:	f10e 0c01 	add.w	ip, lr, #1
 801fc54:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fc58:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801fc5c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fc60:	0964      	lsrs	r4, r4, #5
 801fc62:	ea4c 0c03 	orr.w	ip, ip, r3
 801fc66:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801fc6a:	9b03      	ldr	r3, [sp, #12]
 801fc6c:	ea4c 0c04 	orr.w	ip, ip, r4
 801fc70:	f8a3 c000 	strh.w	ip, [r3]
 801fc74:	b007      	add	sp, #28
 801fc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc7a:	af05      	add	r7, sp, #20
 801fc7c:	e756      	b.n	801fb2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801fc7e:	ad05      	add	r5, sp, #20
 801fc80:	462f      	mov	r7, r5
 801fc82:	e761      	b.n	801fb48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801fc84:	ad05      	add	r5, sp, #20
 801fc86:	e75f      	b.n	801fb48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801fc88:	ae05      	add	r6, sp, #20
 801fc8a:	e772      	b.n	801fb72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801fc8c:	ab05      	add	r3, sp, #20
 801fc8e:	461e      	mov	r6, r3
 801fc90:	e77e      	b.n	801fb90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801fc92:	ab05      	add	r3, sp, #20
 801fc94:	e77c      	b.n	801fb90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801fc96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc9a:	b095      	sub	sp, #84	; 0x54
 801fc9c:	9212      	str	r2, [sp, #72]	; 0x48
 801fc9e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fca0:	9013      	str	r0, [sp, #76]	; 0x4c
 801fca2:	9309      	str	r3, [sp, #36]	; 0x24
 801fca4:	6850      	ldr	r0, [r2, #4]
 801fca6:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801fcaa:	910e      	str	r1, [sp, #56]	; 0x38
 801fcac:	930f      	str	r3, [sp, #60]	; 0x3c
 801fcae:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801fcb2:	fb00 1303 	mla	r3, r0, r3, r1
 801fcb6:	6812      	ldr	r2, [r2, #0]
 801fcb8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fcbc:	930a      	str	r3, [sp, #40]	; 0x28
 801fcbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fcc0:	681b      	ldr	r3, [r3, #0]
 801fcc2:	930d      	str	r3, [sp, #52]	; 0x34
 801fcc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fcc6:	685c      	ldr	r4, [r3, #4]
 801fcc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fcca:	3404      	adds	r4, #4
 801fccc:	43db      	mvns	r3, r3
 801fcce:	b2db      	uxtb	r3, r3
 801fcd0:	930b      	str	r3, [sp, #44]	; 0x2c
 801fcd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	dc03      	bgt.n	801fce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fcd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fcda:	2b00      	cmp	r3, #0
 801fcdc:	f340 8255 	ble.w	802018a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801fce0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fce2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fce6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fcea:	1e48      	subs	r0, r1, #1
 801fcec:	1e55      	subs	r5, r2, #1
 801fcee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	f340 80f9 	ble.w	801fee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fcf6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801fcf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fcfa:	1436      	asrs	r6, r6, #16
 801fcfc:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fd00:	d406      	bmi.n	801fd10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fd02:	4286      	cmp	r6, r0
 801fd04:	da04      	bge.n	801fd10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	db02      	blt.n	801fd10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fd0a:	42ab      	cmp	r3, r5
 801fd0c:	f2c0 80ed 	blt.w	801feea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801fd10:	3601      	adds	r6, #1
 801fd12:	f100 80da 	bmi.w	801feca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fd16:	42b1      	cmp	r1, r6
 801fd18:	f2c0 80d7 	blt.w	801feca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fd1c:	3301      	adds	r3, #1
 801fd1e:	f100 80d4 	bmi.w	801feca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fd22:	429a      	cmp	r2, r3
 801fd24:	f2c0 80d1 	blt.w	801feca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd2a:	9311      	str	r3, [sp, #68]	; 0x44
 801fd2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd2e:	930c      	str	r3, [sp, #48]	; 0x30
 801fd30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	f340 80fa 	ble.w	801ff2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fd38:	9826      	ldr	r0, [sp, #152]	; 0x98
 801fd3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fd3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fd3e:	68c6      	ldr	r6, [r0, #12]
 801fd40:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fd42:	141d      	asrs	r5, r3, #16
 801fd44:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fd48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fd4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fd4c:	1400      	asrs	r0, r0, #16
 801fd4e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fd52:	6892      	ldr	r2, [r2, #8]
 801fd54:	f100 813e 	bmi.w	801ffd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fd58:	1e57      	subs	r7, r2, #1
 801fd5a:	42b8      	cmp	r0, r7
 801fd5c:	f280 813a 	bge.w	801ffd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fd60:	2d00      	cmp	r5, #0
 801fd62:	f2c0 8137 	blt.w	801ffd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fd66:	1e77      	subs	r7, r6, #1
 801fd68:	42bd      	cmp	r5, r7
 801fd6a:	f280 8133 	bge.w	801ffd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fd6e:	b212      	sxth	r2, r2
 801fd70:	fb05 0002 	mla	r0, r5, r2, r0
 801fd74:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fd76:	f815 a000 	ldrb.w	sl, [r5, r0]
 801fd7a:	182e      	adds	r6, r5, r0
 801fd7c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801fd80:	eb04 050a 	add.w	r5, r4, sl
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	f000 8117 	beq.w	801ffb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fd8a:	f896 c001 	ldrb.w	ip, [r6, #1]
 801fd8e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fd92:	44a4      	add	ip, r4
 801fd94:	2900      	cmp	r1, #0
 801fd96:	f000 8117 	beq.w	801ffc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801fd9a:	18b0      	adds	r0, r6, r2
 801fd9c:	7840      	ldrb	r0, [r0, #1]
 801fd9e:	5cb2      	ldrb	r2, [r6, r2]
 801fda0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fda4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fda8:	4422      	add	r2, r4
 801fdaa:	4420      	add	r0, r4
 801fdac:	b29b      	uxth	r3, r3
 801fdae:	b289      	uxth	r1, r1
 801fdb0:	fb03 f901 	mul.w	r9, r3, r1
 801fdb4:	011b      	lsls	r3, r3, #4
 801fdb6:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801fdba:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801fdbe:	eba3 0309 	sub.w	r3, r3, r9
 801fdc2:	b29b      	uxth	r3, r3
 801fdc4:	435f      	muls	r7, r3
 801fdc6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fdca:	b289      	uxth	r1, r1
 801fdcc:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fdd0:	eba8 0801 	sub.w	r8, r8, r1
 801fdd4:	fa1f f888 	uxth.w	r8, r8
 801fdd8:	fb08 770b 	mla	r7, r8, fp, r7
 801fddc:	f892 b002 	ldrb.w	fp, [r2, #2]
 801fde0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fde2:	fb01 770b 	mla	r7, r1, fp, r7
 801fde6:	f8b6 e000 	ldrh.w	lr, [r6]
 801fdea:	f890 b002 	ldrb.w	fp, [r0, #2]
 801fdee:	9310      	str	r3, [sp, #64]	; 0x40
 801fdf0:	fb09 770b 	mla	r7, r9, fp, r7
 801fdf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fdf6:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801fdfa:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801fdfe:	fb1b fb03 	smulbb	fp, fp, r3
 801fe02:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801fe06:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fe0a:	fb07 b706 	mla	r7, r7, r6, fp
 801fe0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe10:	f895 b001 	ldrb.w	fp, [r5, #1]
 801fe14:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801fe18:	f89c c000 	ldrb.w	ip, [ip]
 801fe1c:	435d      	muls	r5, r3
 801fe1e:	fb08 550b 	mla	r5, r8, fp, r5
 801fe22:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fe26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe28:	fb01 550b 	mla	r5, r1, fp, r5
 801fe2c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fe30:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801fe34:	fb09 550b 	mla	r5, r9, fp, r5
 801fe38:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801fe3c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fe40:	fb1b fb03 	smulbb	fp, fp, r3
 801fe44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe46:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fe4a:	fb03 f30c 	mul.w	r3, r3, ip
 801fe4e:	fb08 330a 	mla	r3, r8, sl, r3
 801fe52:	f892 c000 	ldrb.w	ip, [r2]
 801fe56:	fa5f fe8e 	uxtb.w	lr, lr
 801fe5a:	fb01 330c 	mla	r3, r1, ip, r3
 801fe5e:	f890 c000 	ldrb.w	ip, [r0]
 801fe62:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801fe66:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fe6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe6c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fe70:	fb1e fe03 	smulbb	lr, lr, r3
 801fe74:	fb05 b506 	mla	r5, r5, r6, fp
 801fe78:	fb0c e606 	mla	r6, ip, r6, lr
 801fe7c:	b2bf      	uxth	r7, r7
 801fe7e:	1c7b      	adds	r3, r7, #1
 801fe80:	b2ad      	uxth	r5, r5
 801fe82:	b2b6      	uxth	r6, r6
 801fe84:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801fe88:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801fe8c:	f105 0b01 	add.w	fp, r5, #1
 801fe90:	1c77      	adds	r7, r6, #1
 801fe92:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fe96:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801fe9a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fe9e:	096d      	lsrs	r5, r5, #5
 801fea0:	431f      	orrs	r7, r3
 801fea2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fea8:	433d      	orrs	r5, r7
 801feaa:	801d      	strh	r5, [r3, #0]
 801feac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801feae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801feb0:	3302      	adds	r3, #2
 801feb2:	930c      	str	r3, [sp, #48]	; 0x30
 801feb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801feb6:	4413      	add	r3, r2
 801feb8:	931f      	str	r3, [sp, #124]	; 0x7c
 801feba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801febc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801febe:	4413      	add	r3, r2
 801fec0:	9320      	str	r3, [sp, #128]	; 0x80
 801fec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fec4:	3b01      	subs	r3, #1
 801fec6:	9311      	str	r3, [sp, #68]	; 0x44
 801fec8:	e732      	b.n	801fd30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801feca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fecc:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801fece:	4433      	add	r3, r6
 801fed0:	931f      	str	r3, [sp, #124]	; 0x7c
 801fed2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801fed4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fed6:	4433      	add	r3, r6
 801fed8:	9320      	str	r3, [sp, #128]	; 0x80
 801feda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fedc:	3b01      	subs	r3, #1
 801fede:	9309      	str	r3, [sp, #36]	; 0x24
 801fee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fee2:	3302      	adds	r3, #2
 801fee4:	930a      	str	r3, [sp, #40]	; 0x28
 801fee6:	e702      	b.n	801fcee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fee8:	d027      	beq.n	801ff3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801feea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801feec:	9821      	ldr	r0, [sp, #132]	; 0x84
 801feee:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801fef0:	3b01      	subs	r3, #1
 801fef2:	fb00 5003 	mla	r0, r0, r3, r5
 801fef6:	1400      	asrs	r0, r0, #16
 801fef8:	f53f af16 	bmi.w	801fd28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fefc:	3901      	subs	r1, #1
 801fefe:	4288      	cmp	r0, r1
 801ff00:	f6bf af12 	bge.w	801fd28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ff04:	9922      	ldr	r1, [sp, #136]	; 0x88
 801ff06:	9820      	ldr	r0, [sp, #128]	; 0x80
 801ff08:	fb01 0303 	mla	r3, r1, r3, r0
 801ff0c:	141b      	asrs	r3, r3, #16
 801ff0e:	f53f af0b 	bmi.w	801fd28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ff12:	3a01      	subs	r2, #1
 801ff14:	4293      	cmp	r3, r2
 801ff16:	f6bf af07 	bge.w	801fd28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ff1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff1c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801ff20:	9311      	str	r3, [sp, #68]	; 0x44
 801ff22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff24:	930c      	str	r3, [sp, #48]	; 0x30
 801ff26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	dc70      	bgt.n	802000e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801ff2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ff30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff34:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ff38:	930a      	str	r3, [sp, #40]	; 0x28
 801ff3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff3c:	2b00      	cmp	r3, #0
 801ff3e:	f340 8124 	ble.w	802018a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801ff42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ff46:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ff52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff56:	eef0 6a62 	vmov.f32	s13, s5
 801ff5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff6e:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801ff72:	eef0 6a43 	vmov.f32	s13, s6
 801ff76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff7a:	ee12 2a90 	vmov	r2, s5
 801ff7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ff84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff88:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff8c:	ee13 2a10 	vmov	r2, s6
 801ff90:	9321      	str	r3, [sp, #132]	; 0x84
 801ff92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ff94:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801ff98:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff9c:	9322      	str	r3, [sp, #136]	; 0x88
 801ff9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ffa2:	3b01      	subs	r3, #1
 801ffa4:	930e      	str	r3, [sp, #56]	; 0x38
 801ffa6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ffa8:	bf08      	it	eq
 801ffaa:	4613      	moveq	r3, r2
 801ffac:	eeb0 3a67 	vmov.f32	s6, s15
 801ffb0:	9309      	str	r3, [sp, #36]	; 0x24
 801ffb2:	eef0 2a47 	vmov.f32	s5, s14
 801ffb6:	e68c      	b.n	801fcd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ffb8:	b149      	cbz	r1, 801ffce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801ffba:	4628      	mov	r0, r5
 801ffbc:	5cb2      	ldrb	r2, [r6, r2]
 801ffbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ffc2:	4422      	add	r2, r4
 801ffc4:	46ac      	mov	ip, r5
 801ffc6:	e6f1      	b.n	801fdac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ffc8:	4628      	mov	r0, r5
 801ffca:	462a      	mov	r2, r5
 801ffcc:	e6ee      	b.n	801fdac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ffce:	4628      	mov	r0, r5
 801ffd0:	462a      	mov	r2, r5
 801ffd2:	e7f7      	b.n	801ffc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801ffd4:	1c47      	adds	r7, r0, #1
 801ffd6:	f53f af69 	bmi.w	801feac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801ffda:	42ba      	cmp	r2, r7
 801ffdc:	f6ff af66 	blt.w	801feac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801ffe0:	1c6f      	adds	r7, r5, #1
 801ffe2:	f53f af63 	bmi.w	801feac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801ffe6:	42be      	cmp	r6, r7
 801ffe8:	f6ff af60 	blt.w	801feac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801ffec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ffee:	b236      	sxth	r6, r6
 801fff0:	b212      	sxth	r2, r2
 801fff2:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801fff6:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801fffa:	9002      	str	r0, [sp, #8]
 801fffc:	9200      	str	r2, [sp, #0]
 801fffe:	9601      	str	r6, [sp, #4]
 8020000:	4623      	mov	r3, r4
 8020002:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8020006:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020008:	f7ff fd59 	bl	801fabe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 802000c:	e74e      	b.n	801feac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802000e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020010:	9820      	ldr	r0, [sp, #128]	; 0x80
 8020012:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020016:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020018:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 802001a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802001e:	142d      	asrs	r5, r5, #16
 8020020:	1400      	asrs	r0, r0, #16
 8020022:	fb02 5000 	mla	r0, r2, r0, r5
 8020026:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020028:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802002a:	f815 9000 	ldrb.w	r9, [r5, r0]
 802002e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020032:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020036:	182e      	adds	r6, r5, r0
 8020038:	eb04 0509 	add.w	r5, r4, r9
 802003c:	2b00      	cmp	r3, #0
 802003e:	f000 8096 	beq.w	802016e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8020042:	7877      	ldrb	r7, [r6, #1]
 8020044:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020048:	4427      	add	r7, r4
 802004a:	2900      	cmp	r1, #0
 802004c:	f000 8097 	beq.w	802017e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8020050:	18b0      	adds	r0, r6, r2
 8020052:	7840      	ldrb	r0, [r0, #1]
 8020054:	5cb2      	ldrb	r2, [r6, r2]
 8020056:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802005a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802005e:	4422      	add	r2, r4
 8020060:	4420      	add	r0, r4
 8020062:	b29b      	uxth	r3, r3
 8020064:	b289      	uxth	r1, r1
 8020066:	fb03 f801 	mul.w	r8, r3, r1
 802006a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802006c:	011b      	lsls	r3, r3, #4
 802006e:	f8b6 c000 	ldrh.w	ip, [r6]
 8020072:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020076:	78be      	ldrb	r6, [r7, #2]
 8020078:	eba3 0308 	sub.w	r3, r3, r8
 802007c:	b29b      	uxth	r3, r3
 802007e:	435e      	muls	r6, r3
 8020080:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8020084:	b289      	uxth	r1, r1
 8020086:	f895 b002 	ldrb.w	fp, [r5, #2]
 802008a:	ebae 0e01 	sub.w	lr, lr, r1
 802008e:	fa1f fe8e 	uxth.w	lr, lr
 8020092:	fb0e 660b 	mla	r6, lr, fp, r6
 8020096:	f892 b002 	ldrb.w	fp, [r2, #2]
 802009a:	9310      	str	r3, [sp, #64]	; 0x40
 802009c:	fb01 660b 	mla	r6, r1, fp, r6
 80200a0:	f890 b002 	ldrb.w	fp, [r0, #2]
 80200a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200a6:	fb08 660b 	mla	r6, r8, fp, r6
 80200aa:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80200ae:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80200b2:	fb1b fb03 	smulbb	fp, fp, r3
 80200b6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80200ba:	fb06 b60a 	mla	r6, r6, sl, fp
 80200be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80200c0:	f895 b001 	ldrb.w	fp, [r5, #1]
 80200c4:	787d      	ldrb	r5, [r7, #1]
 80200c6:	783f      	ldrb	r7, [r7, #0]
 80200c8:	435d      	muls	r5, r3
 80200ca:	fb0e 550b 	mla	r5, lr, fp, r5
 80200ce:	f892 b001 	ldrb.w	fp, [r2, #1]
 80200d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200d4:	fb01 550b 	mla	r5, r1, fp, r5
 80200d8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80200dc:	f814 9009 	ldrb.w	r9, [r4, r9]
 80200e0:	fb08 550b 	mla	r5, r8, fp, r5
 80200e4:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80200e8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80200ec:	fb1b fb03 	smulbb	fp, fp, r3
 80200f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80200f2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80200f6:	437b      	muls	r3, r7
 80200f8:	fb0e 3309 	mla	r3, lr, r9, r3
 80200fc:	7817      	ldrb	r7, [r2, #0]
 80200fe:	fa5f fc8c 	uxtb.w	ip, ip
 8020102:	fb01 3307 	mla	r3, r1, r7, r3
 8020106:	7807      	ldrb	r7, [r0, #0]
 8020108:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802010c:	fb08 3707 	mla	r7, r8, r7, r3
 8020110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020112:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020116:	fb1c fc03 	smulbb	ip, ip, r3
 802011a:	fb05 b50a 	mla	r5, r5, sl, fp
 802011e:	fb07 c70a 	mla	r7, r7, sl, ip
 8020122:	b2b6      	uxth	r6, r6
 8020124:	b2ad      	uxth	r5, r5
 8020126:	b2bf      	uxth	r7, r7
 8020128:	1c73      	adds	r3, r6, #1
 802012a:	1c7a      	adds	r2, r7, #1
 802012c:	f105 0b01 	add.w	fp, r5, #1
 8020130:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020134:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8020138:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802013c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020140:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020144:	096d      	lsrs	r5, r5, #5
 8020146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020148:	4316      	orrs	r6, r2
 802014a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802014e:	432e      	orrs	r6, r5
 8020150:	f823 6b02 	strh.w	r6, [r3], #2
 8020154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020156:	930c      	str	r3, [sp, #48]	; 0x30
 8020158:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802015a:	4413      	add	r3, r2
 802015c:	931f      	str	r3, [sp, #124]	; 0x7c
 802015e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020160:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020162:	4413      	add	r3, r2
 8020164:	9320      	str	r3, [sp, #128]	; 0x80
 8020166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020168:	3b01      	subs	r3, #1
 802016a:	9311      	str	r3, [sp, #68]	; 0x44
 802016c:	e6db      	b.n	801ff26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802016e:	b149      	cbz	r1, 8020184 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8020170:	4628      	mov	r0, r5
 8020172:	5cb2      	ldrb	r2, [r6, r2]
 8020174:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020178:	4422      	add	r2, r4
 802017a:	462f      	mov	r7, r5
 802017c:	e771      	b.n	8020062 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802017e:	4628      	mov	r0, r5
 8020180:	462a      	mov	r2, r5
 8020182:	e76e      	b.n	8020062 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8020184:	4628      	mov	r0, r5
 8020186:	462a      	mov	r2, r5
 8020188:	e7f7      	b.n	802017a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802018a:	b015      	add	sp, #84	; 0x54
 802018c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020190 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8020190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020194:	880f      	ldrh	r7, [r1, #0]
 8020196:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802019a:	023c      	lsls	r4, r7, #8
 802019c:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 80201a0:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 80201a4:	fb05 ca0e 	mla	sl, r5, lr, ip
 80201a8:	017c      	lsls	r4, r7, #5
 80201aa:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 80201ae:	00ff      	lsls	r7, r7, #3
 80201b0:	ea4b 0404 	orr.w	r4, fp, r4
 80201b4:	b2ff      	uxtb	r7, r7
 80201b6:	4327      	orrs	r7, r4
 80201b8:	2d00      	cmp	r5, #0
 80201ba:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80201be:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80201c2:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80201c6:	eb02 080a 	add.w	r8, r2, sl
 80201ca:	9701      	str	r7, [sp, #4]
 80201cc:	db7e      	blt.n	80202cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80201ce:	45a9      	cmp	r9, r5
 80201d0:	dd7c      	ble.n	80202cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80201d2:	f1bc 0f00 	cmp.w	ip, #0
 80201d6:	db77      	blt.n	80202c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80201d8:	45e6      	cmp	lr, ip
 80201da:	dd75      	ble.n	80202c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80201dc:	f812 700a 	ldrb.w	r7, [r2, sl]
 80201e0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80201e4:	441f      	add	r7, r3
 80201e6:	f11c 0201 	adds.w	r2, ip, #1
 80201ea:	d472      	bmi.n	80202d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80201ec:	4596      	cmp	lr, r2
 80201ee:	dd70      	ble.n	80202d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80201f0:	2800      	cmp	r0, #0
 80201f2:	d06e      	beq.n	80202d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80201f4:	f898 4001 	ldrb.w	r4, [r8, #1]
 80201f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80201fc:	441c      	add	r4, r3
 80201fe:	3501      	adds	r5, #1
 8020200:	d46b      	bmi.n	80202da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020202:	45a9      	cmp	r9, r5
 8020204:	dd69      	ble.n	80202da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020206:	2e00      	cmp	r6, #0
 8020208:	d067      	beq.n	80202da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802020a:	f1bc 0f00 	cmp.w	ip, #0
 802020e:	db62      	blt.n	80202d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020210:	45e6      	cmp	lr, ip
 8020212:	dd60      	ble.n	80202d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020214:	f818 500e 	ldrb.w	r5, [r8, lr]
 8020218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802021c:	441d      	add	r5, r3
 802021e:	f11c 0201 	adds.w	r2, ip, #1
 8020222:	d45d      	bmi.n	80202e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020224:	4596      	cmp	lr, r2
 8020226:	dd5b      	ble.n	80202e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020228:	2800      	cmp	r0, #0
 802022a:	d059      	beq.n	80202e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 802022c:	44c6      	add	lr, r8
 802022e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020232:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020236:	4413      	add	r3, r2
 8020238:	b280      	uxth	r0, r0
 802023a:	b2b2      	uxth	r2, r6
 802023c:	fb00 f602 	mul.w	r6, r0, r2
 8020240:	0100      	lsls	r0, r0, #4
 8020242:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8020246:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 802024a:	1b80      	subs	r0, r0, r6
 802024c:	fa1f fc82 	uxth.w	ip, r2
 8020250:	b282      	uxth	r2, r0
 8020252:	78a0      	ldrb	r0, [r4, #2]
 8020254:	f897 e002 	ldrb.w	lr, [r7, #2]
 8020258:	4350      	muls	r0, r2
 802025a:	eba8 080c 	sub.w	r8, r8, ip
 802025e:	fa1f f888 	uxth.w	r8, r8
 8020262:	fb08 0e0e 	mla	lr, r8, lr, r0
 8020266:	78a8      	ldrb	r0, [r5, #2]
 8020268:	f897 9000 	ldrb.w	r9, [r7]
 802026c:	fb0c e000 	mla	r0, ip, r0, lr
 8020270:	f893 e002 	ldrb.w	lr, [r3, #2]
 8020274:	787f      	ldrb	r7, [r7, #1]
 8020276:	fb06 0e0e 	mla	lr, r6, lr, r0
 802027a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 802027e:	f894 e000 	ldrb.w	lr, [r4]
 8020282:	fb02 fe0e 	mul.w	lr, r2, lr
 8020286:	fb08 e909 	mla	r9, r8, r9, lr
 802028a:	f895 e000 	ldrb.w	lr, [r5]
 802028e:	fb0c 990e 	mla	r9, ip, lr, r9
 8020292:	f893 e000 	ldrb.w	lr, [r3]
 8020296:	785b      	ldrb	r3, [r3, #1]
 8020298:	fb06 9e0e 	mla	lr, r6, lr, r9
 802029c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80202a0:	ea4e 0e00 	orr.w	lr, lr, r0
 80202a4:	7860      	ldrb	r0, [r4, #1]
 80202a6:	4350      	muls	r0, r2
 80202a8:	fb08 0007 	mla	r0, r8, r7, r0
 80202ac:	786a      	ldrb	r2, [r5, #1]
 80202ae:	fb0c 0202 	mla	r2, ip, r2, r0
 80202b2:	fb06 2303 	mla	r3, r6, r3, r2
 80202b6:	095b      	lsrs	r3, r3, #5
 80202b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80202bc:	ea4e 0303 	orr.w	r3, lr, r3
 80202c0:	800b      	strh	r3, [r1, #0]
 80202c2:	b003      	add	sp, #12
 80202c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202c8:	af01      	add	r7, sp, #4
 80202ca:	e78c      	b.n	80201e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 80202cc:	ac01      	add	r4, sp, #4
 80202ce:	4627      	mov	r7, r4
 80202d0:	e795      	b.n	80201fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80202d2:	ac01      	add	r4, sp, #4
 80202d4:	e793      	b.n	80201fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80202d6:	ad01      	add	r5, sp, #4
 80202d8:	e7a1      	b.n	802021e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 80202da:	ab01      	add	r3, sp, #4
 80202dc:	461d      	mov	r5, r3
 80202de:	e7ab      	b.n	8020238 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 80202e0:	ab01      	add	r3, sp, #4
 80202e2:	e7a9      	b.n	8020238 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

080202e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202e8:	b08f      	sub	sp, #60	; 0x3c
 80202ea:	920c      	str	r2, [sp, #48]	; 0x30
 80202ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80202ee:	900d      	str	r0, [sp, #52]	; 0x34
 80202f0:	6850      	ldr	r0, [r2, #4]
 80202f2:	910a      	str	r1, [sp, #40]	; 0x28
 80202f4:	9306      	str	r3, [sp, #24]
 80202f6:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 80202fa:	fb00 1303 	mla	r3, r0, r3, r1
 80202fe:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8020302:	6812      	ldr	r2, [r2, #0]
 8020304:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020308:	9307      	str	r3, [sp, #28]
 802030a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802030c:	681b      	ldr	r3, [r3, #0]
 802030e:	9308      	str	r3, [sp, #32]
 8020310:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020312:	685c      	ldr	r4, [r3, #4]
 8020314:	3404      	adds	r4, #4
 8020316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020318:	2b00      	cmp	r3, #0
 802031a:	dc03      	bgt.n	8020324 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802031c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802031e:	2b00      	cmp	r3, #0
 8020320:	f340 81d6 	ble.w	80206d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8020324:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020326:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802032a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802032e:	1e48      	subs	r0, r1, #1
 8020330:	1e56      	subs	r6, r2, #1
 8020332:	9b06      	ldr	r3, [sp, #24]
 8020334:	2b00      	cmp	r3, #0
 8020336:	f340 80b7 	ble.w	80204a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 802033a:	ea5f 472b 	movs.w	r7, fp, asr #16
 802033e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020342:	d406      	bmi.n	8020352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020344:	4287      	cmp	r7, r0
 8020346:	da04      	bge.n	8020352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020348:	2b00      	cmp	r3, #0
 802034a:	db02      	blt.n	8020352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802034c:	42b3      	cmp	r3, r6
 802034e:	f2c0 80ac 	blt.w	80204aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8020352:	3701      	adds	r7, #1
 8020354:	f100 809d 	bmi.w	8020492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020358:	42b9      	cmp	r1, r7
 802035a:	f2c0 809a 	blt.w	8020492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802035e:	3301      	adds	r3, #1
 8020360:	f100 8097 	bmi.w	8020492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020364:	429a      	cmp	r2, r3
 8020366:	f2c0 8094 	blt.w	8020492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802036a:	9b06      	ldr	r3, [sp, #24]
 802036c:	930b      	str	r3, [sp, #44]	; 0x2c
 802036e:	9b07      	ldr	r3, [sp, #28]
 8020370:	9309      	str	r3, [sp, #36]	; 0x24
 8020372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020374:	2b00      	cmp	r3, #0
 8020376:	f340 80b5 	ble.w	80204e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802037a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802037c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802037e:	68c7      	ldr	r7, [r0, #12]
 8020380:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020384:	ea4f 4625 	mov.w	r6, r5, asr #16
 8020388:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802038c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020390:	6892      	ldr	r2, [r2, #8]
 8020392:	f100 80fb 	bmi.w	802058c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020396:	f102 3cff 	add.w	ip, r2, #4294967295
 802039a:	4560      	cmp	r0, ip
 802039c:	f280 80f6 	bge.w	802058c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80203a0:	2e00      	cmp	r6, #0
 80203a2:	f2c0 80f3 	blt.w	802058c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80203a6:	f107 3cff 	add.w	ip, r7, #4294967295
 80203aa:	4566      	cmp	r6, ip
 80203ac:	f280 80ee 	bge.w	802058c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80203b0:	b212      	sxth	r2, r2
 80203b2:	fb06 0002 	mla	r0, r6, r2, r0
 80203b6:	9e08      	ldr	r6, [sp, #32]
 80203b8:	1837      	adds	r7, r6, r0
 80203ba:	5c30      	ldrb	r0, [r6, r0]
 80203bc:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80203c0:	eb04 0c08 	add.w	ip, r4, r8
 80203c4:	2b00      	cmp	r3, #0
 80203c6:	f000 80d3 	beq.w	8020570 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80203ca:	787e      	ldrb	r6, [r7, #1]
 80203cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80203d0:	4426      	add	r6, r4
 80203d2:	2900      	cmp	r1, #0
 80203d4:	f000 80d4 	beq.w	8020580 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80203d8:	18b8      	adds	r0, r7, r2
 80203da:	7840      	ldrb	r0, [r0, #1]
 80203dc:	5cba      	ldrb	r2, [r7, r2]
 80203de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80203e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80203e6:	4422      	add	r2, r4
 80203e8:	4420      	add	r0, r4
 80203ea:	b29b      	uxth	r3, r3
 80203ec:	b289      	uxth	r1, r1
 80203ee:	fb03 f901 	mul.w	r9, r3, r1
 80203f2:	011b      	lsls	r3, r3, #4
 80203f4:	78b7      	ldrb	r7, [r6, #2]
 80203f6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80203fa:	eba3 0309 	sub.w	r3, r3, r9
 80203fe:	b29b      	uxth	r3, r3
 8020400:	435f      	muls	r7, r3
 8020402:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020406:	b289      	uxth	r1, r1
 8020408:	f89c a002 	ldrb.w	sl, [ip, #2]
 802040c:	ebae 0e01 	sub.w	lr, lr, r1
 8020410:	fa1f fe8e 	uxth.w	lr, lr
 8020414:	fb0e 770a 	mla	r7, lr, sl, r7
 8020418:	f892 a002 	ldrb.w	sl, [r2, #2]
 802041c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020420:	fb01 770a 	mla	r7, r1, sl, r7
 8020424:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020428:	fb09 7a0a 	mla	sl, r9, sl, r7
 802042c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020430:	f896 8000 	ldrb.w	r8, [r6]
 8020434:	7876      	ldrb	r6, [r6, #1]
 8020436:	fb03 f808 	mul.w	r8, r3, r8
 802043a:	fb0e 8807 	mla	r8, lr, r7, r8
 802043e:	7817      	ldrb	r7, [r2, #0]
 8020440:	4373      	muls	r3, r6
 8020442:	fb01 8807 	mla	r8, r1, r7, r8
 8020446:	7807      	ldrb	r7, [r0, #0]
 8020448:	fb0e 330c 	mla	r3, lr, ip, r3
 802044c:	fb09 8707 	mla	r7, r9, r7, r8
 8020450:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8020454:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020458:	ea47 070a 	orr.w	r7, r7, sl
 802045c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020460:	fb01 310a 	mla	r1, r1, sl, r3
 8020464:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802046a:	fb09 1a0a 	mla	sl, r9, sl, r1
 802046e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020472:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020476:	ea47 070a 	orr.w	r7, r7, sl
 802047a:	801f      	strh	r7, [r3, #0]
 802047c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802047e:	3302      	adds	r3, #2
 8020480:	9309      	str	r3, [sp, #36]	; 0x24
 8020482:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020484:	449b      	add	fp, r3
 8020486:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020488:	441d      	add	r5, r3
 802048a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802048c:	3b01      	subs	r3, #1
 802048e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020490:	e76f      	b.n	8020372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020492:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020494:	449b      	add	fp, r3
 8020496:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020498:	441d      	add	r5, r3
 802049a:	9b06      	ldr	r3, [sp, #24]
 802049c:	3b01      	subs	r3, #1
 802049e:	9306      	str	r3, [sp, #24]
 80204a0:	9b07      	ldr	r3, [sp, #28]
 80204a2:	3302      	adds	r3, #2
 80204a4:	9307      	str	r3, [sp, #28]
 80204a6:	e744      	b.n	8020332 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80204a8:	d023      	beq.n	80204f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80204aa:	9b06      	ldr	r3, [sp, #24]
 80204ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80204ae:	3b01      	subs	r3, #1
 80204b0:	fb00 b003 	mla	r0, r0, r3, fp
 80204b4:	1400      	asrs	r0, r0, #16
 80204b6:	f53f af58 	bmi.w	802036a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80204ba:	3901      	subs	r1, #1
 80204bc:	4288      	cmp	r0, r1
 80204be:	f6bf af54 	bge.w	802036a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80204c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80204c4:	fb01 5303 	mla	r3, r1, r3, r5
 80204c8:	141b      	asrs	r3, r3, #16
 80204ca:	f53f af4e 	bmi.w	802036a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80204ce:	3a01      	subs	r2, #1
 80204d0:	4293      	cmp	r3, r2
 80204d2:	f6bf af4a 	bge.w	802036a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80204d6:	9b06      	ldr	r3, [sp, #24]
 80204d8:	9309      	str	r3, [sp, #36]	; 0x24
 80204da:	9b07      	ldr	r3, [sp, #28]
 80204dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80204de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204e0:	2b00      	cmp	r3, #0
 80204e2:	dc70      	bgt.n	80205c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80204e4:	9b06      	ldr	r3, [sp, #24]
 80204e6:	9a07      	ldr	r2, [sp, #28]
 80204e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80204f0:	9307      	str	r3, [sp, #28]
 80204f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204f4:	2b00      	cmp	r3, #0
 80204f6:	f340 80eb 	ble.w	80206d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80204fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020502:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020506:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802050a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802050e:	eef0 6a62 	vmov.f32	s13, s5
 8020512:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020516:	ee77 2a62 	vsub.f32	s5, s14, s5
 802051a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802051e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020522:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020526:	ee16 ba90 	vmov	fp, s13
 802052a:	eef0 6a43 	vmov.f32	s13, s6
 802052e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020532:	ee12 2a90 	vmov	r2, s5
 8020536:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802053a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802053c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020540:	fb92 f3f3 	sdiv	r3, r2, r3
 8020544:	ee13 2a10 	vmov	r2, s6
 8020548:	931b      	str	r3, [sp, #108]	; 0x6c
 802054a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802054c:	ee16 5a90 	vmov	r5, s13
 8020550:	fb92 f3f3 	sdiv	r3, r2, r3
 8020554:	931c      	str	r3, [sp, #112]	; 0x70
 8020556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802055a:	3b01      	subs	r3, #1
 802055c:	930a      	str	r3, [sp, #40]	; 0x28
 802055e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020560:	bf08      	it	eq
 8020562:	4613      	moveq	r3, r2
 8020564:	eeb0 3a67 	vmov.f32	s6, s15
 8020568:	9306      	str	r3, [sp, #24]
 802056a:	eef0 2a47 	vmov.f32	s5, s14
 802056e:	e6d2      	b.n	8020316 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020570:	b149      	cbz	r1, 8020586 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020572:	4660      	mov	r0, ip
 8020574:	5cba      	ldrb	r2, [r7, r2]
 8020576:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802057a:	4422      	add	r2, r4
 802057c:	4666      	mov	r6, ip
 802057e:	e734      	b.n	80203ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8020580:	4660      	mov	r0, ip
 8020582:	4662      	mov	r2, ip
 8020584:	e731      	b.n	80203ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8020586:	4660      	mov	r0, ip
 8020588:	4662      	mov	r2, ip
 802058a:	e7f7      	b.n	802057c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 802058c:	f110 0c01 	adds.w	ip, r0, #1
 8020590:	f53f af74 	bmi.w	802047c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020594:	4562      	cmp	r2, ip
 8020596:	f6ff af71 	blt.w	802047c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802059a:	f116 0c01 	adds.w	ip, r6, #1
 802059e:	f53f af6d 	bmi.w	802047c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80205a2:	4567      	cmp	r7, ip
 80205a4:	f6ff af6a 	blt.w	802047c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80205a8:	b23f      	sxth	r7, r7
 80205aa:	b212      	sxth	r2, r2
 80205ac:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80205b0:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80205b4:	9200      	str	r2, [sp, #0]
 80205b6:	9701      	str	r7, [sp, #4]
 80205b8:	4623      	mov	r3, r4
 80205ba:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80205be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80205c0:	f7ff fde6 	bl	8020190 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80205c4:	e75a      	b.n	802047c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80205c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80205c8:	ea4f 462b 	mov.w	r6, fp, asr #16
 80205cc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80205d0:	1428      	asrs	r0, r5, #16
 80205d2:	fb02 6000 	mla	r0, r2, r0, r6
 80205d6:	9e08      	ldr	r6, [sp, #32]
 80205d8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80205dc:	f816 8000 	ldrb.w	r8, [r6, r0]
 80205e0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80205e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80205e8:	1837      	adds	r7, r6, r0
 80205ea:	eb04 0c08 	add.w	ip, r4, r8
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d060      	beq.n	80206b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 80205f2:	787e      	ldrb	r6, [r7, #1]
 80205f4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80205f8:	4426      	add	r6, r4
 80205fa:	2900      	cmp	r1, #0
 80205fc:	d062      	beq.n	80206c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 80205fe:	18b8      	adds	r0, r7, r2
 8020600:	7840      	ldrb	r0, [r0, #1]
 8020602:	5cba      	ldrb	r2, [r7, r2]
 8020604:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020608:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802060c:	4422      	add	r2, r4
 802060e:	4420      	add	r0, r4
 8020610:	b29b      	uxth	r3, r3
 8020612:	b289      	uxth	r1, r1
 8020614:	fb03 f901 	mul.w	r9, r3, r1
 8020618:	011b      	lsls	r3, r3, #4
 802061a:	78b7      	ldrb	r7, [r6, #2]
 802061c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020620:	eba3 0309 	sub.w	r3, r3, r9
 8020624:	b29b      	uxth	r3, r3
 8020626:	435f      	muls	r7, r3
 8020628:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802062c:	b289      	uxth	r1, r1
 802062e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020632:	ebae 0e01 	sub.w	lr, lr, r1
 8020636:	fa1f fe8e 	uxth.w	lr, lr
 802063a:	fb0e 770a 	mla	r7, lr, sl, r7
 802063e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020642:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020646:	fb01 770a 	mla	r7, r1, sl, r7
 802064a:	f890 a002 	ldrb.w	sl, [r0, #2]
 802064e:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020652:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020656:	f896 8000 	ldrb.w	r8, [r6]
 802065a:	7876      	ldrb	r6, [r6, #1]
 802065c:	fb03 f808 	mul.w	r8, r3, r8
 8020660:	fb0e 8807 	mla	r8, lr, r7, r8
 8020664:	7817      	ldrb	r7, [r2, #0]
 8020666:	4373      	muls	r3, r6
 8020668:	fb01 8807 	mla	r8, r1, r7, r8
 802066c:	7807      	ldrb	r7, [r0, #0]
 802066e:	fb0e 330c 	mla	r3, lr, ip, r3
 8020672:	fb09 8707 	mla	r7, r9, r7, r8
 8020676:	7856      	ldrb	r6, [r2, #1]
 8020678:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802067c:	fb01 3306 	mla	r3, r1, r6, r3
 8020680:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020684:	ea47 070a 	orr.w	r7, r7, sl
 8020688:	f890 a001 	ldrb.w	sl, [r0, #1]
 802068c:	fb09 3a0a 	mla	sl, r9, sl, r3
 8020690:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020696:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802069a:	ea47 070a 	orr.w	r7, r7, sl
 802069e:	f823 7b02 	strh.w	r7, [r3], #2
 80206a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80206a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80206a6:	449b      	add	fp, r3
 80206a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80206aa:	441d      	add	r5, r3
 80206ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206ae:	3b01      	subs	r3, #1
 80206b0:	9309      	str	r3, [sp, #36]	; 0x24
 80206b2:	e714      	b.n	80204de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80206b4:	b149      	cbz	r1, 80206ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80206b6:	4660      	mov	r0, ip
 80206b8:	5cba      	ldrb	r2, [r7, r2]
 80206ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80206be:	4422      	add	r2, r4
 80206c0:	4666      	mov	r6, ip
 80206c2:	e7a5      	b.n	8020610 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80206c4:	4660      	mov	r0, ip
 80206c6:	4662      	mov	r2, ip
 80206c8:	e7a2      	b.n	8020610 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80206ca:	4660      	mov	r0, ip
 80206cc:	4662      	mov	r2, ip
 80206ce:	e7f7      	b.n	80206c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 80206d0:	b00f      	add	sp, #60	; 0x3c
 80206d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80206d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206da:	b085      	sub	sp, #20
 80206dc:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80206e0:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80206e4:	9102      	str	r1, [sp, #8]
 80206e6:	fb04 710c 	mla	r1, r4, ip, r7
 80206ea:	2c00      	cmp	r4, #0
 80206ec:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80206f0:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80206f4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80206f8:	eb02 0e01 	add.w	lr, r2, r1
 80206fc:	f2c0 8122 	blt.w	8020944 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8020700:	45a0      	cmp	r8, r4
 8020702:	f340 811f 	ble.w	8020944 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8020706:	2f00      	cmp	r7, #0
 8020708:	f2c0 811a 	blt.w	8020940 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802070c:	45bc      	cmp	ip, r7
 802070e:	f340 8117 	ble.w	8020940 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8020712:	5c52      	ldrb	r2, [r2, r1]
 8020714:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020718:	1c7a      	adds	r2, r7, #1
 802071a:	f100 8116 	bmi.w	802094a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802071e:	4594      	cmp	ip, r2
 8020720:	f340 8113 	ble.w	802094a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8020724:	2e00      	cmp	r6, #0
 8020726:	f000 8112 	beq.w	802094e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 802072a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802072e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020732:	3401      	adds	r4, #1
 8020734:	f100 810f 	bmi.w	8020956 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8020738:	45a0      	cmp	r8, r4
 802073a:	f340 810c 	ble.w	8020956 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802073e:	2800      	cmp	r0, #0
 8020740:	f000 810c 	beq.w	802095c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8020744:	2f00      	cmp	r7, #0
 8020746:	f2c0 8104 	blt.w	8020952 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802074a:	45bc      	cmp	ip, r7
 802074c:	f340 8101 	ble.w	8020952 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8020750:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8020754:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8020758:	3701      	adds	r7, #1
 802075a:	f100 8102 	bmi.w	8020962 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802075e:	45bc      	cmp	ip, r7
 8020760:	f340 80ff 	ble.w	8020962 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8020764:	2e00      	cmp	r6, #0
 8020766:	f000 80fe 	beq.w	8020966 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 802076a:	44f4      	add	ip, lr
 802076c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020770:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020774:	b2b6      	uxth	r6, r6
 8020776:	b280      	uxth	r0, r0
 8020778:	fb00 fe06 	mul.w	lr, r0, r6
 802077c:	0136      	lsls	r6, r6, #4
 802077e:	eba6 070e 	sub.w	r7, r6, lr
 8020782:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020786:	b2bf      	uxth	r7, r7
 8020788:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802078c:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020790:	fb0a f607 	mul.w	r6, sl, r7
 8020794:	b280      	uxth	r0, r0
 8020796:	1a1b      	subs	r3, r3, r0
 8020798:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802079c:	b29b      	uxth	r3, r3
 802079e:	fb0b 6603 	mla	r6, fp, r3, r6
 80207a2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80207a6:	fb00 6609 	mla	r6, r0, r9, r6
 80207aa:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80207ae:	fb0e 6608 	mla	r6, lr, r8, r6
 80207b2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80207b6:	9600      	str	r6, [sp, #0]
 80207b8:	2e00      	cmp	r6, #0
 80207ba:	f000 80be 	beq.w	802093a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 80207be:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80207c2:	fb0b fc0c 	mul.w	ip, fp, ip
 80207c6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80207ca:	fb0b f505 	mul.w	r5, fp, r5
 80207ce:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80207d2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80207d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80207da:	44dc      	add	ip, fp
 80207dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207e0:	9501      	str	r5, [sp, #4]
 80207e2:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80207e6:	9503      	str	r5, [sp, #12]
 80207e8:	9d01      	ldr	r5, [sp, #4]
 80207ea:	9e02      	ldr	r6, [sp, #8]
 80207ec:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80207f0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80207f4:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80207f8:	fb0a fc0c 	mul.w	ip, sl, ip
 80207fc:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020800:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020804:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020808:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802080c:	4465      	add	r5, ip
 802080e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020812:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020816:	fb09 fc0c 	mul.w	ip, r9, ip
 802081a:	fb09 f904 	mul.w	r9, r9, r4
 802081e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020822:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020826:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802082a:	fb08 f404 	mul.w	r4, r8, r4
 802082e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020832:	fb08 f802 	mul.w	r8, r8, r2
 8020836:	0a2d      	lsrs	r5, r5, #8
 8020838:	0a22      	lsrs	r2, r4, #8
 802083a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802083e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020842:	437d      	muls	r5, r7
 8020844:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020848:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802084c:	4414      	add	r4, r2
 802084e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020852:	fb0a fa01 	mul.w	sl, sl, r1
 8020856:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802085a:	9a03      	ldr	r2, [sp, #12]
 802085c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8020860:	fb02 5503 	mla	r5, r2, r3, r5
 8020864:	0a24      	lsrs	r4, r4, #8
 8020866:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802086a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802086e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8020872:	fb04 540e 	mla	r4, r4, lr, r5
 8020876:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802087a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802087e:	4461      	add	r1, ip
 8020880:	0a09      	lsrs	r1, r1, #8
 8020882:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020886:	fb01 4100 	mla	r1, r1, r0, r4
 802088a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802088e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020892:	fb07 f70a 	mul.w	r7, r7, sl
 8020896:	0a09      	lsrs	r1, r1, #8
 8020898:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802089c:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80208a0:	fb03 7101 	mla	r1, r3, r1, r7
 80208a4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80208a8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80208ac:	fb0e 1e08 	mla	lr, lr, r8, r1
 80208b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80208b4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80208b8:	fb00 e101 	mla	r1, r0, r1, lr
 80208bc:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80208c0:	9a00      	ldr	r2, [sp, #0]
 80208c2:	b287      	uxth	r7, r0
 80208c4:	437a      	muls	r2, r7
 80208c6:	1c53      	adds	r3, r2, #1
 80208c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80208cc:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80208d0:	0a09      	lsrs	r1, r1, #8
 80208d2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80208d6:	4321      	orrs	r1, r4
 80208d8:	0c0a      	lsrs	r2, r1, #16
 80208da:	8836      	ldrh	r6, [r6, #0]
 80208dc:	fb12 f207 	smulbb	r2, r2, r7
 80208e0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80208e4:	b2c8      	uxtb	r0, r1
 80208e6:	1235      	asrs	r5, r6, #8
 80208e8:	fb14 f407 	smulbb	r4, r4, r7
 80208ec:	fb10 f007 	smulbb	r0, r0, r7
 80208f0:	b2db      	uxtb	r3, r3
 80208f2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80208f6:	fb05 2503 	mla	r5, r5, r3, r2
 80208fa:	10f2      	asrs	r2, r6, #3
 80208fc:	00f6      	lsls	r6, r6, #3
 80208fe:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020902:	b2f6      	uxtb	r6, r6
 8020904:	fb02 4203 	mla	r2, r2, r3, r4
 8020908:	fb06 0303 	mla	r3, r6, r3, r0
 802090c:	b2ad      	uxth	r5, r5
 802090e:	b299      	uxth	r1, r3
 8020910:	b294      	uxth	r4, r2
 8020912:	1c6b      	adds	r3, r5, #1
 8020914:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020918:	1c62      	adds	r2, r4, #1
 802091a:	1c4b      	adds	r3, r1, #1
 802091c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020920:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020924:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020928:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802092c:	0952      	lsrs	r2, r2, #5
 802092e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020932:	432b      	orrs	r3, r5
 8020934:	4313      	orrs	r3, r2
 8020936:	9a02      	ldr	r2, [sp, #8]
 8020938:	8013      	strh	r3, [r2, #0]
 802093a:	b005      	add	sp, #20
 802093c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020940:	2500      	movs	r5, #0
 8020942:	e6e9      	b.n	8020718 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8020944:	2100      	movs	r1, #0
 8020946:	460d      	mov	r5, r1
 8020948:	e6f3      	b.n	8020732 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802094a:	2100      	movs	r1, #0
 802094c:	e6f1      	b.n	8020732 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802094e:	4631      	mov	r1, r6
 8020950:	e6ef      	b.n	8020732 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8020952:	2400      	movs	r4, #0
 8020954:	e700      	b.n	8020758 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8020956:	2200      	movs	r2, #0
 8020958:	4614      	mov	r4, r2
 802095a:	e70b      	b.n	8020774 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802095c:	4602      	mov	r2, r0
 802095e:	4604      	mov	r4, r0
 8020960:	e708      	b.n	8020774 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8020962:	2200      	movs	r2, #0
 8020964:	e706      	b.n	8020774 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8020966:	4632      	mov	r2, r6
 8020968:	e704      	b.n	8020774 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0802096a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802096a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802096e:	b09f      	sub	sp, #124	; 0x7c
 8020970:	921b      	str	r2, [sp, #108]	; 0x6c
 8020972:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020974:	901d      	str	r0, [sp, #116]	; 0x74
 8020976:	9309      	str	r3, [sp, #36]	; 0x24
 8020978:	6850      	ldr	r0, [r2, #4]
 802097a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802097e:	9119      	str	r1, [sp, #100]	; 0x64
 8020980:	931c      	str	r3, [sp, #112]	; 0x70
 8020982:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020986:	fb00 1303 	mla	r3, r0, r3, r1
 802098a:	6812      	ldr	r2, [r2, #0]
 802098c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 802098e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020992:	930c      	str	r3, [sp, #48]	; 0x30
 8020994:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020996:	681b      	ldr	r3, [r3, #0]
 8020998:	9312      	str	r3, [sp, #72]	; 0x48
 802099a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802099c:	685e      	ldr	r6, [r3, #4]
 802099e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80209a2:	3604      	adds	r6, #4
 80209a4:	930d      	str	r3, [sp, #52]	; 0x34
 80209a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	dc03      	bgt.n	80209b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80209ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80209ae:	2b00      	cmp	r3, #0
 80209b0:	f340 8387 	ble.w	80210c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80209b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80209b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80209ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80209be:	1e48      	subs	r0, r1, #1
 80209c0:	1e57      	subs	r7, r2, #1
 80209c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	f340 8194 	ble.w	8020cf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80209ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80209cc:	142b      	asrs	r3, r5, #16
 80209ce:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80209d2:	d406      	bmi.n	80209e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80209d4:	4584      	cmp	ip, r0
 80209d6:	da04      	bge.n	80209e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80209d8:	2b00      	cmp	r3, #0
 80209da:	db02      	blt.n	80209e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80209dc:	42bb      	cmp	r3, r7
 80209de:	f2c0 8189 	blt.w	8020cf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80209e2:	f11c 0c01 	adds.w	ip, ip, #1
 80209e6:	f100 8177 	bmi.w	8020cd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80209ea:	4561      	cmp	r1, ip
 80209ec:	f2c0 8174 	blt.w	8020cd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80209f0:	3301      	adds	r3, #1
 80209f2:	f100 8171 	bmi.w	8020cd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80209f6:	429a      	cmp	r2, r3
 80209f8:	f2c0 816e 	blt.w	8020cd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80209fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020a00:	931a      	str	r3, [sp, #104]	; 0x68
 8020a02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	f340 8193 	ble.w	8020d30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8020a0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a0c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020a10:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020a14:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a16:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020a1a:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8020a1e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a20:	141b      	asrs	r3, r3, #16
 8020a22:	f100 81d6 	bmi.w	8020dd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020a26:	f100 38ff 	add.w	r8, r0, #4294967295
 8020a2a:	4543      	cmp	r3, r8
 8020a2c:	f280 81d1 	bge.w	8020dd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020a30:	f1bc 0f00 	cmp.w	ip, #0
 8020a34:	f2c0 81cd 	blt.w	8020dd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020a38:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020a3c:	45c4      	cmp	ip, r8
 8020a3e:	f280 81c8 	bge.w	8020dd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020a42:	b200      	sxth	r0, r0
 8020a44:	fb0c 3300 	mla	r3, ip, r0, r3
 8020a48:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020a4a:	eb04 0803 	add.w	r8, r4, r3
 8020a4e:	5ce3      	ldrb	r3, [r4, r3]
 8020a50:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020a54:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020a58:	2a00      	cmp	r2, #0
 8020a5a:	f000 81af 	beq.w	8020dbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020a5e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020a62:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020a66:	940e      	str	r4, [sp, #56]	; 0x38
 8020a68:	0e24      	lsrs	r4, r4, #24
 8020a6a:	9415      	str	r4, [sp, #84]	; 0x54
 8020a6c:	b179      	cbz	r1, 8020a8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020a6e:	eb08 0c00 	add.w	ip, r8, r0
 8020a72:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020a76:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020a7a:	900a      	str	r0, [sp, #40]	; 0x28
 8020a7c:	0e00      	lsrs	r0, r0, #24
 8020a7e:	9013      	str	r0, [sp, #76]	; 0x4c
 8020a80:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020a84:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020a88:	900f      	str	r0, [sp, #60]	; 0x3c
 8020a8a:	0e00      	lsrs	r0, r0, #24
 8020a8c:	9016      	str	r0, [sp, #88]	; 0x58
 8020a8e:	b292      	uxth	r2, r2
 8020a90:	b289      	uxth	r1, r1
 8020a92:	fb02 f901 	mul.w	r9, r2, r1
 8020a96:	0112      	lsls	r2, r2, #4
 8020a98:	eba2 0809 	sub.w	r8, r2, r9
 8020a9c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020a9e:	fa1f f888 	uxth.w	r8, r8
 8020aa2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020aa6:	fb08 f000 	mul.w	r0, r8, r0
 8020aaa:	b289      	uxth	r1, r1
 8020aac:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020ab0:	1a52      	subs	r2, r2, r1
 8020ab2:	b292      	uxth	r2, r2
 8020ab4:	fb02 000e 	mla	r0, r2, lr, r0
 8020ab8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020aba:	fb01 0004 	mla	r0, r1, r4, r0
 8020abe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020ac0:	fb09 0004 	mla	r0, r9, r4, r0
 8020ac4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020ac8:	2800      	cmp	r0, #0
 8020aca:	f000 80fa 	beq.w	8020cc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020ace:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020ad2:	d01b      	beq.n	8020b0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020ad4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020ad8:	fb0e fa0a 	mul.w	sl, lr, sl
 8020adc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ae0:	fb0e fe03 	mul.w	lr, lr, r3
 8020ae4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020ae8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020aec:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020af0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020af4:	4453      	add	r3, sl
 8020af6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020afa:	0a1b      	lsrs	r3, r3, #8
 8020afc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020b04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020b08:	ea43 030c 	orr.w	r3, r3, ip
 8020b0c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020b0e:	2cff      	cmp	r4, #255	; 0xff
 8020b10:	d021      	beq.n	8020b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8020b12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020b14:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020b18:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020b1a:	fb04 fb0b 	mul.w	fp, r4, fp
 8020b1e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020b20:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020b24:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020b28:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020b2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b2e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020b32:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020b36:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020b3a:	44de      	add	lr, fp
 8020b3c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020b40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b50:	ea4e 040a 	orr.w	r4, lr, sl
 8020b54:	940e      	str	r4, [sp, #56]	; 0x38
 8020b56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b58:	2cff      	cmp	r4, #255	; 0xff
 8020b5a:	d021      	beq.n	8020ba0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020b5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020b5e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020b62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b64:	fb04 fb0b 	mul.w	fp, r4, fp
 8020b68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020b6a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020b6e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020b72:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b78:	fb04 fa0a 	mul.w	sl, r4, sl
 8020b7c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020b80:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020b84:	44de      	add	lr, fp
 8020b86:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020b8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b9a:	ea4e 040a 	orr.w	r4, lr, sl
 8020b9e:	940a      	str	r4, [sp, #40]	; 0x28
 8020ba0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020ba2:	2cff      	cmp	r4, #255	; 0xff
 8020ba4:	d021      	beq.n	8020bea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8020ba6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020ba8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020bac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020bae:	fb04 fb0b 	mul.w	fp, r4, fp
 8020bb2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020bb4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020bb8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020bbc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020bbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020bc2:	fb04 fa0a 	mul.w	sl, r4, sl
 8020bc6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020bca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020bce:	44de      	add	lr, fp
 8020bd0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020bd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020bd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020bdc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020be0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020be4:	ea4e 040a 	orr.w	r4, lr, sl
 8020be8:	940f      	str	r4, [sp, #60]	; 0x3c
 8020bea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020bec:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020bf0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020bf4:	fb08 fc0c 	mul.w	ip, r8, ip
 8020bf8:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020bfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020bfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c02:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020c06:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020c0a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020c0c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020c10:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020c12:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020c16:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020c1a:	fb08 f80e 	mul.w	r8, r8, lr
 8020c1e:	fb02 8303 	mla	r3, r2, r3, r8
 8020c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020c24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c28:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020c2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c2e:	fb01 330a 	mla	r3, r1, sl, r3
 8020c32:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8020c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020c38:	fb09 3901 	mla	r9, r9, r1, r3
 8020c3c:	4342      	muls	r2, r0
 8020c3e:	1c50      	adds	r0, r2, #1
 8020c40:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020c44:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020c48:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020c4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c50:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020c54:	ea4c 0c09 	orr.w	ip, ip, r9
 8020c58:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020c5a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8020c5e:	883b      	ldrh	r3, [r7, #0]
 8020c60:	fb12 f204 	smulbb	r2, r2, r4
 8020c64:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8020c68:	fa5f fc8c 	uxtb.w	ip, ip
 8020c6c:	1219      	asrs	r1, r3, #8
 8020c6e:	fb1c fc04 	smulbb	ip, ip, r4
 8020c72:	b2c0      	uxtb	r0, r0
 8020c74:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020c78:	fb01 2100 	mla	r1, r1, r0, r2
 8020c7c:	10da      	asrs	r2, r3, #3
 8020c7e:	00db      	lsls	r3, r3, #3
 8020c80:	fb1e fe04 	smulbb	lr, lr, r4
 8020c84:	b2db      	uxtb	r3, r3
 8020c86:	fb03 c300 	mla	r3, r3, r0, ip
 8020c8a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020c8e:	b289      	uxth	r1, r1
 8020c90:	fb02 e200 	mla	r2, r2, r0, lr
 8020c94:	fa1f fc83 	uxth.w	ip, r3
 8020c98:	1c4b      	adds	r3, r1, #1
 8020c9a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020c9e:	f10c 0301 	add.w	r3, ip, #1
 8020ca2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020ca6:	b292      	uxth	r2, r2
 8020ca8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020cac:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020cb0:	430b      	orrs	r3, r1
 8020cb2:	1c51      	adds	r1, r2, #1
 8020cb4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020cb8:	0952      	lsrs	r2, r2, #5
 8020cba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020cbe:	4313      	orrs	r3, r2
 8020cc0:	803b      	strh	r3, [r7, #0]
 8020cc2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020cc4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020cc6:	3702      	adds	r7, #2
 8020cc8:	441a      	add	r2, r3
 8020cca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ccc:	9229      	str	r2, [sp, #164]	; 0xa4
 8020cce:	441d      	add	r5, r3
 8020cd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020cd2:	3b01      	subs	r3, #1
 8020cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8020cd6:	e694      	b.n	8020a02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020cd8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020cda:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020cdc:	441c      	add	r4, r3
 8020cde:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ce0:	9429      	str	r4, [sp, #164]	; 0xa4
 8020ce2:	441d      	add	r5, r3
 8020ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ce6:	3b01      	subs	r3, #1
 8020ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8020cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020cec:	3302      	adds	r3, #2
 8020cee:	930c      	str	r3, [sp, #48]	; 0x30
 8020cf0:	e667      	b.n	80209c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020cf2:	d024      	beq.n	8020d3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8020cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cf6:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020cf8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020cfa:	3b01      	subs	r3, #1
 8020cfc:	fb00 4003 	mla	r0, r0, r3, r4
 8020d00:	1400      	asrs	r0, r0, #16
 8020d02:	f53f ae7b 	bmi.w	80209fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020d06:	3901      	subs	r1, #1
 8020d08:	4288      	cmp	r0, r1
 8020d0a:	f6bf ae77 	bge.w	80209fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020d0e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020d10:	fb01 5303 	mla	r3, r1, r3, r5
 8020d14:	141b      	asrs	r3, r3, #16
 8020d16:	f53f ae71 	bmi.w	80209fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020d1a:	3a01      	subs	r2, #1
 8020d1c:	4293      	cmp	r3, r2
 8020d1e:	f6bf ae6d 	bge.w	80209fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020d22:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020d26:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8020d2a:	f1bb 0f00 	cmp.w	fp, #0
 8020d2e:	dc70      	bgt.n	8020e12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8020d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d32:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d38:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8020d3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	f340 81be 	ble.w	80210c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8020d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020d4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020d4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020d52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020d56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020d5a:	eef0 6a62 	vmov.f32	s13, s5
 8020d5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020d62:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020d66:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020d6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020d72:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020d76:	eef0 6a43 	vmov.f32	s13, s6
 8020d7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020d7e:	ee12 2a90 	vmov	r2, s5
 8020d82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020d86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d90:	ee13 2a10 	vmov	r2, s6
 8020d94:	932b      	str	r3, [sp, #172]	; 0xac
 8020d96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d98:	ee16 5a90 	vmov	r5, s13
 8020d9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020da0:	932c      	str	r3, [sp, #176]	; 0xb0
 8020da2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020da4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020da6:	3b01      	subs	r3, #1
 8020da8:	9319      	str	r3, [sp, #100]	; 0x64
 8020daa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020dac:	bf08      	it	eq
 8020dae:	4613      	moveq	r3, r2
 8020db0:	eeb0 3a67 	vmov.f32	s6, s15
 8020db4:	9309      	str	r3, [sp, #36]	; 0x24
 8020db6:	eef0 2a47 	vmov.f32	s5, s14
 8020dba:	e5f4      	b.n	80209a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020dbc:	2900      	cmp	r1, #0
 8020dbe:	f43f ae66 	beq.w	8020a8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020dc2:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020dc6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020dca:	900a      	str	r0, [sp, #40]	; 0x28
 8020dcc:	0e00      	lsrs	r0, r0, #24
 8020dce:	9013      	str	r0, [sp, #76]	; 0x4c
 8020dd0:	e65d      	b.n	8020a8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020dd2:	f113 0801 	adds.w	r8, r3, #1
 8020dd6:	f53f af74 	bmi.w	8020cc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020dda:	4540      	cmp	r0, r8
 8020ddc:	f6ff af71 	blt.w	8020cc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020de0:	f11c 0801 	adds.w	r8, ip, #1
 8020de4:	f53f af6d 	bmi.w	8020cc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020de8:	45c6      	cmp	lr, r8
 8020dea:	f6ff af6a 	blt.w	8020cc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020dee:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020df0:	9302      	str	r3, [sp, #8]
 8020df2:	b200      	sxth	r0, r0
 8020df4:	fa0f f38e 	sxth.w	r3, lr
 8020df8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020dfc:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020e00:	9301      	str	r3, [sp, #4]
 8020e02:	9000      	str	r0, [sp, #0]
 8020e04:	4633      	mov	r3, r6
 8020e06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020e08:	4639      	mov	r1, r7
 8020e0a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020e0c:	f7ff fc63 	bl	80206d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8020e10:	e757      	b.n	8020cc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020e12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020e14:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020e16:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020e1a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020e1c:	1427      	asrs	r7, r4, #16
 8020e1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020e22:	142b      	asrs	r3, r5, #16
 8020e24:	fb01 7303 	mla	r3, r1, r3, r7
 8020e28:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020e2a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020e2e:	18e7      	adds	r7, r4, r3
 8020e30:	5ce3      	ldrb	r3, [r4, r3]
 8020e32:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020e36:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020e3a:	2a00      	cmp	r2, #0
 8020e3c:	f000 8137 	beq.w	80210ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8020e40:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020e44:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020e48:	9410      	str	r4, [sp, #64]	; 0x40
 8020e4a:	0e24      	lsrs	r4, r4, #24
 8020e4c:	9417      	str	r4, [sp, #92]	; 0x5c
 8020e4e:	b170      	cbz	r0, 8020e6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020e50:	eb07 0e01 	add.w	lr, r7, r1
 8020e54:	5c79      	ldrb	r1, [r7, r1]
 8020e56:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020e5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8020e5c:	0e09      	lsrs	r1, r1, #24
 8020e5e:	9114      	str	r1, [sp, #80]	; 0x50
 8020e60:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020e64:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020e68:	9111      	str	r1, [sp, #68]	; 0x44
 8020e6a:	0e09      	lsrs	r1, r1, #24
 8020e6c:	9118      	str	r1, [sp, #96]	; 0x60
 8020e6e:	b292      	uxth	r2, r2
 8020e70:	b280      	uxth	r0, r0
 8020e72:	fb02 f800 	mul.w	r8, r2, r0
 8020e76:	0112      	lsls	r2, r2, #4
 8020e78:	eba2 0e08 	sub.w	lr, r2, r8
 8020e7c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020e7e:	fa1f fe8e 	uxth.w	lr, lr
 8020e82:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020e86:	fb0e f101 	mul.w	r1, lr, r1
 8020e8a:	b280      	uxth	r0, r0
 8020e8c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020e90:	1a12      	subs	r2, r2, r0
 8020e92:	b292      	uxth	r2, r2
 8020e94:	fb02 110c 	mla	r1, r2, ip, r1
 8020e98:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020e9a:	fb00 1104 	mla	r1, r0, r4, r1
 8020e9e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020ea0:	fb08 1104 	mla	r1, r8, r4, r1
 8020ea4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020ea8:	2900      	cmp	r1, #0
 8020eaa:	f000 80f5 	beq.w	8021098 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8020eae:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020eb2:	d019      	beq.n	8020ee8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8020eb4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020eb8:	fb0c fa0a 	mul.w	sl, ip, sl
 8020ebc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ec0:	fb0c fc03 	mul.w	ip, ip, r3
 8020ec4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020ec8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ecc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020ed0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020ed4:	4453      	add	r3, sl
 8020ed6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020eda:	0a1b      	lsrs	r3, r3, #8
 8020edc:	0a3f      	lsrs	r7, r7, #8
 8020ede:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ee2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020ee6:	433b      	orrs	r3, r7
 8020ee8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020eea:	2cff      	cmp	r4, #255	; 0xff
 8020eec:	d020      	beq.n	8020f30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8020eee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020ef0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020ef4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020ef6:	4367      	muls	r7, r4
 8020ef8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020efa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020efe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020f02:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020f04:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020f08:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f10:	44bc      	add	ip, r7
 8020f12:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020f16:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020f1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f2a:	ea4c 040a 	orr.w	r4, ip, sl
 8020f2e:	9410      	str	r4, [sp, #64]	; 0x40
 8020f30:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020f32:	2cff      	cmp	r4, #255	; 0xff
 8020f34:	d020      	beq.n	8020f78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8020f36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020f38:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020f3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020f3e:	4367      	muls	r7, r4
 8020f40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020f42:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020f46:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020f4a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020f4c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020f50:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f58:	44bc      	add	ip, r7
 8020f5a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020f5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020f62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f72:	ea4c 040a 	orr.w	r4, ip, sl
 8020f76:	940b      	str	r4, [sp, #44]	; 0x2c
 8020f78:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020f7a:	2cff      	cmp	r4, #255	; 0xff
 8020f7c:	d020      	beq.n	8020fc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8020f7e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020f80:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020f84:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020f86:	4367      	muls	r7, r4
 8020f88:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020f8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020f8e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020f92:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020f94:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020f98:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fa0:	44bc      	add	ip, r7
 8020fa2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020fa6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020faa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020fba:	ea4c 040a 	orr.w	r4, ip, sl
 8020fbe:	9411      	str	r4, [sp, #68]	; 0x44
 8020fc0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020fc2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020fc6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020fca:	fb0e f707 	mul.w	r7, lr, r7
 8020fce:	fb02 770c 	mla	r7, r2, ip, r7
 8020fd2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020fd8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020fdc:	fb00 770c 	mla	r7, r0, ip, r7
 8020fe0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020fe2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020fe6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020fe8:	fb08 770c 	mla	r7, r8, ip, r7
 8020fec:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020ff0:	fb0e fe0c 	mul.w	lr, lr, ip
 8020ff4:	fb02 e303 	mla	r3, r2, r3, lr
 8020ff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020ffa:	0a3f      	lsrs	r7, r7, #8
 8020ffc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021000:	fb00 330a 	mla	r3, r0, sl, r3
 8021004:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021006:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802100a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802100e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8021012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021014:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021018:	434b      	muls	r3, r1
 802101a:	1c59      	adds	r1, r3, #1
 802101c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021020:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021024:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021028:	ea47 070c 	orr.w	r7, r7, ip
 802102c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802102e:	0c3b      	lsrs	r3, r7, #16
 8021030:	f8b9 0000 	ldrh.w	r0, [r9]
 8021034:	fb13 f304 	smulbb	r3, r3, r4
 8021038:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802103c:	b2ff      	uxtb	r7, r7
 802103e:	1202      	asrs	r2, r0, #8
 8021040:	fb17 f704 	smulbb	r7, r7, r4
 8021044:	b2c9      	uxtb	r1, r1
 8021046:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802104a:	fb02 3201 	mla	r2, r2, r1, r3
 802104e:	10c3      	asrs	r3, r0, #3
 8021050:	00c0      	lsls	r0, r0, #3
 8021052:	fb1c fc04 	smulbb	ip, ip, r4
 8021056:	b2c0      	uxtb	r0, r0
 8021058:	fb00 7001 	mla	r0, r0, r1, r7
 802105c:	b292      	uxth	r2, r2
 802105e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021062:	fb03 c301 	mla	r3, r3, r1, ip
 8021066:	f102 0c01 	add.w	ip, r2, #1
 802106a:	b280      	uxth	r0, r0
 802106c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021070:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8021074:	1c42      	adds	r2, r0, #1
 8021076:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802107a:	b29b      	uxth	r3, r3
 802107c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021080:	ea42 020c 	orr.w	r2, r2, ip
 8021084:	f103 0c01 	add.w	ip, r3, #1
 8021088:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802108c:	095b      	lsrs	r3, r3, #5
 802108e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021092:	431a      	orrs	r2, r3
 8021094:	f8a9 2000 	strh.w	r2, [r9]
 8021098:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802109a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802109c:	f109 0902 	add.w	r9, r9, #2
 80210a0:	441a      	add	r2, r3
 80210a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80210a4:	9229      	str	r2, [sp, #164]	; 0xa4
 80210a6:	441d      	add	r5, r3
 80210a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80210ac:	e63d      	b.n	8020d2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80210ae:	2800      	cmp	r0, #0
 80210b0:	f43f aedd 	beq.w	8020e6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80210b4:	5c79      	ldrb	r1, [r7, r1]
 80210b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80210ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80210bc:	0e09      	lsrs	r1, r1, #24
 80210be:	9114      	str	r1, [sp, #80]	; 0x50
 80210c0:	e6d5      	b.n	8020e6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80210c2:	b01f      	add	sp, #124	; 0x7c
 80210c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080210c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80210c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210cc:	b089      	sub	sp, #36	; 0x24
 80210ce:	9101      	str	r1, [sp, #4]
 80210d0:	9801      	ldr	r0, [sp, #4]
 80210d2:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 80210d6:	8800      	ldrh	r0, [r0, #0]
 80210d8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 80210dc:	1206      	asrs	r6, r0, #8
 80210de:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80210e2:	9602      	str	r6, [sp, #8]
 80210e4:	10c6      	asrs	r6, r0, #3
 80210e6:	00c0      	lsls	r0, r0, #3
 80210e8:	b2c0      	uxtb	r0, r0
 80210ea:	9004      	str	r0, [sp, #16]
 80210ec:	fb07 100c 	mla	r0, r7, ip, r1
 80210f0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80210f4:	2f00      	cmp	r7, #0
 80210f6:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 80210fa:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80210fe:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8021102:	9603      	str	r6, [sp, #12]
 8021104:	eb02 0e00 	add.w	lr, r2, r0
 8021108:	f2c0 810a 	blt.w	8021320 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802110c:	45b8      	cmp	r8, r7
 802110e:	f340 8107 	ble.w	8021320 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8021112:	2900      	cmp	r1, #0
 8021114:	f2c0 8102 	blt.w	802131c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8021118:	458c      	cmp	ip, r1
 802111a:	f340 80ff 	ble.w	802131c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 802111e:	5c12      	ldrb	r2, [r2, r0]
 8021120:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021124:	1c4a      	adds	r2, r1, #1
 8021126:	f100 80fe 	bmi.w	8021326 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802112a:	4594      	cmp	ip, r2
 802112c:	f340 80fb 	ble.w	8021326 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8021130:	2d00      	cmp	r5, #0
 8021132:	f000 80fa 	beq.w	802132a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8021136:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802113a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802113e:	3701      	adds	r7, #1
 8021140:	f100 80f7 	bmi.w	8021332 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8021144:	45b8      	cmp	r8, r7
 8021146:	f340 80f4 	ble.w	8021332 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 802114a:	2c00      	cmp	r4, #0
 802114c:	f000 80f4 	beq.w	8021338 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8021150:	2900      	cmp	r1, #0
 8021152:	eb0e 020c 	add.w	r2, lr, ip
 8021156:	f2c0 80ea 	blt.w	802132e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802115a:	458c      	cmp	ip, r1
 802115c:	f340 80e7 	ble.w	802132e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8021160:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8021164:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8021168:	3101      	adds	r1, #1
 802116a:	f100 80e8 	bmi.w	802133e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802116e:	458c      	cmp	ip, r1
 8021170:	f340 80e5 	ble.w	802133e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8021174:	2d00      	cmp	r5, #0
 8021176:	f000 80e4 	beq.w	8021342 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 802117a:	7852      	ldrb	r2, [r2, #1]
 802117c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021180:	0e0b      	lsrs	r3, r1, #24
 8021182:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8021186:	9300      	str	r3, [sp, #0]
 8021188:	b2a4      	uxth	r4, r4
 802118a:	b2ab      	uxth	r3, r5
 802118c:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8021190:	fb03 f904 	mul.w	r9, r3, r4
 8021194:	fb0a f505 	mul.w	r5, sl, r5
 8021198:	011b      	lsls	r3, r3, #4
 802119a:	eba3 0e09 	sub.w	lr, r3, r9
 802119e:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80211a2:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80211a6:	0a28      	lsrs	r0, r5, #8
 80211a8:	fb0a f303 	mul.w	r3, sl, r3
 80211ac:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80211b0:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80211b4:	4405      	add	r5, r0
 80211b6:	0a2d      	lsrs	r5, r5, #8
 80211b8:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 80211bc:	9005      	str	r0, [sp, #20]
 80211be:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80211c2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80211c6:	0a1b      	lsrs	r3, r3, #8
 80211c8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80211cc:	9306      	str	r3, [sp, #24]
 80211ce:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 80211d2:	fb0b f303 	mul.w	r3, fp, r3
 80211d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80211da:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80211de:	fb0b f606 	mul.w	r6, fp, r6
 80211e2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80211e6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80211ea:	fb08 f707 	mul.w	r7, r8, r7
 80211ee:	0a1d      	lsrs	r5, r3, #8
 80211f0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80211f4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80211f8:	441d      	add	r5, r3
 80211fa:	f506 7380 	add.w	r3, r6, #256	; 0x100
 80211fe:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021202:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021206:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802120a:	fb08 fc0c 	mul.w	ip, r8, ip
 802120e:	0a1b      	lsrs	r3, r3, #8
 8021210:	9307      	str	r3, [sp, #28]
 8021212:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8021216:	0e0b      	lsrs	r3, r1, #24
 8021218:	0a2d      	lsrs	r5, r5, #8
 802121a:	fa1f fe8e 	uxth.w	lr, lr
 802121e:	435f      	muls	r7, r3
 8021220:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021224:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8021228:	fb05 f50e 	mul.w	r5, r5, lr
 802122c:	b2a4      	uxth	r4, r4
 802122e:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8021232:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021236:	4359      	muls	r1, r3
 8021238:	1b12      	subs	r2, r2, r4
 802123a:	9b05      	ldr	r3, [sp, #20]
 802123c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021240:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021244:	b292      	uxth	r2, r2
 8021246:	4460      	add	r0, ip
 8021248:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802124c:	fb03 5502 	mla	r5, r3, r2, r5
 8021250:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021254:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021258:	44bc      	add	ip, r7
 802125a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802125e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021262:	0a36      	lsrs	r6, r6, #8
 8021264:	fb0c 5509 	mla	r5, ip, r9, r5
 8021268:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802126c:	fb0e f606 	mul.w	r6, lr, r6
 8021270:	9b06      	ldr	r3, [sp, #24]
 8021272:	0a00      	lsrs	r0, r0, #8
 8021274:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021278:	fb00 5504 	mla	r5, r0, r4, r5
 802127c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8021280:	fb02 6000 	mla	r0, r2, r0, r6
 8021284:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8021288:	fb0e fe0b 	mul.w	lr, lr, fp
 802128c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8021290:	0a09      	lsrs	r1, r1, #8
 8021292:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021296:	fb09 0001 	mla	r0, r9, r1, r0
 802129a:	fb02 e20a 	mla	r2, r2, sl, lr
 802129e:	9b07      	ldr	r3, [sp, #28]
 80212a0:	0a2d      	lsrs	r5, r5, #8
 80212a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212a6:	fb04 0003 	mla	r0, r4, r3, r0
 80212aa:	fb04 2408 	mla	r4, r4, r8, r2
 80212ae:	9b00      	ldr	r3, [sp, #0]
 80212b0:	9a04      	ldr	r2, [sp, #16]
 80212b2:	fb09 4903 	mla	r9, r9, r3, r4
 80212b6:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80212ba:	9b02      	ldr	r3, [sp, #8]
 80212bc:	fa5f f989 	uxtb.w	r9, r9
 80212c0:	fb03 f109 	mul.w	r1, r3, r9
 80212c4:	9b03      	ldr	r3, [sp, #12]
 80212c6:	0a00      	lsrs	r0, r0, #8
 80212c8:	fb03 f309 	mul.w	r3, r3, r9
 80212cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80212d0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80212d4:	4305      	orrs	r5, r0
 80212d6:	fb02 f909 	mul.w	r9, r2, r9
 80212da:	1c58      	adds	r0, r3, #1
 80212dc:	1c4a      	adds	r2, r1, #1
 80212de:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80212e2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80212e6:	0a2b      	lsrs	r3, r5, #8
 80212e8:	0c2a      	lsrs	r2, r5, #16
 80212ea:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80212ee:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80212f2:	00db      	lsls	r3, r3, #3
 80212f4:	0212      	lsls	r2, r2, #8
 80212f6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80212fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80212fe:	4313      	orrs	r3, r2
 8021300:	f109 0201 	add.w	r2, r9, #1
 8021304:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021308:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 802130c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021310:	431d      	orrs	r5, r3
 8021312:	9b01      	ldr	r3, [sp, #4]
 8021314:	801d      	strh	r5, [r3, #0]
 8021316:	b009      	add	sp, #36	; 0x24
 8021318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802131c:	2000      	movs	r0, #0
 802131e:	e701      	b.n	8021124 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8021320:	2600      	movs	r6, #0
 8021322:	4630      	mov	r0, r6
 8021324:	e70b      	b.n	802113e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021326:	2600      	movs	r6, #0
 8021328:	e709      	b.n	802113e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802132a:	462e      	mov	r6, r5
 802132c:	e707      	b.n	802113e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802132e:	2700      	movs	r7, #0
 8021330:	e71a      	b.n	8021168 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8021332:	2100      	movs	r1, #0
 8021334:	460f      	mov	r7, r1
 8021336:	e723      	b.n	8021180 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021338:	4621      	mov	r1, r4
 802133a:	4627      	mov	r7, r4
 802133c:	e720      	b.n	8021180 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802133e:	2100      	movs	r1, #0
 8021340:	e71e      	b.n	8021180 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021342:	4629      	mov	r1, r5
 8021344:	e71c      	b.n	8021180 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08021348 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802134c:	b09b      	sub	sp, #108	; 0x6c
 802134e:	9218      	str	r2, [sp, #96]	; 0x60
 8021350:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021352:	9019      	str	r0, [sp, #100]	; 0x64
 8021354:	6850      	ldr	r0, [r2, #4]
 8021356:	9116      	str	r1, [sp, #88]	; 0x58
 8021358:	9307      	str	r3, [sp, #28]
 802135a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802135e:	fb00 1303 	mla	r3, r0, r3, r1
 8021362:	6812      	ldr	r2, [r2, #0]
 8021364:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8021366:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802136a:	930a      	str	r3, [sp, #40]	; 0x28
 802136c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	930f      	str	r3, [sp, #60]	; 0x3c
 8021372:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021374:	685e      	ldr	r6, [r3, #4]
 8021376:	3604      	adds	r6, #4
 8021378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802137a:	2b00      	cmp	r3, #0
 802137c:	dc03      	bgt.n	8021386 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802137e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021380:	2b00      	cmp	r3, #0
 8021382:	f340 8373 	ble.w	8021a6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8021386:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021388:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802138c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021390:	1e48      	subs	r0, r1, #1
 8021392:	1e57      	subs	r7, r2, #1
 8021394:	9b07      	ldr	r3, [sp, #28]
 8021396:	2b00      	cmp	r3, #0
 8021398:	f340 818f 	ble.w	80216ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 802139c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802139e:	142b      	asrs	r3, r5, #16
 80213a0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80213a4:	d406      	bmi.n	80213b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80213a6:	4584      	cmp	ip, r0
 80213a8:	da04      	bge.n	80213b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	db02      	blt.n	80213b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80213ae:	42bb      	cmp	r3, r7
 80213b0:	f2c0 8184 	blt.w	80216bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80213b4:	f11c 0c01 	adds.w	ip, ip, #1
 80213b8:	f100 8172 	bmi.w	80216a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80213bc:	4561      	cmp	r1, ip
 80213be:	f2c0 816f 	blt.w	80216a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80213c2:	3301      	adds	r3, #1
 80213c4:	f100 816c 	bmi.w	80216a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80213c8:	429a      	cmp	r2, r3
 80213ca:	f2c0 8169 	blt.w	80216a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80213ce:	9b07      	ldr	r3, [sp, #28]
 80213d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80213d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80213d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	f340 818e 	ble.w	80216f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80213dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80213de:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80213e2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80213e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80213e8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80213ec:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80213f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80213f2:	141b      	asrs	r3, r3, #16
 80213f4:	f100 81d1 	bmi.w	802179a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80213f8:	f101 38ff 	add.w	r8, r1, #4294967295
 80213fc:	4543      	cmp	r3, r8
 80213fe:	f280 81cc 	bge.w	802179a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021402:	f1bc 0f00 	cmp.w	ip, #0
 8021406:	f2c0 81c8 	blt.w	802179a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802140a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802140e:	45c4      	cmp	ip, r8
 8021410:	f280 81c3 	bge.w	802179a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021414:	b209      	sxth	r1, r1
 8021416:	fb0c 3301 	mla	r3, ip, r1, r3
 802141a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802141c:	eb04 0803 	add.w	r8, r4, r3
 8021420:	5ce3      	ldrb	r3, [r4, r3]
 8021422:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021426:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802142a:	2a00      	cmp	r2, #0
 802142c:	f000 81aa 	beq.w	8021784 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8021430:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021434:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021438:	940b      	str	r4, [sp, #44]	; 0x2c
 802143a:	0e24      	lsrs	r4, r4, #24
 802143c:	9412      	str	r4, [sp, #72]	; 0x48
 802143e:	b178      	cbz	r0, 8021460 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021440:	eb08 0c01 	add.w	ip, r8, r1
 8021444:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021448:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802144c:	9108      	str	r1, [sp, #32]
 802144e:	0e09      	lsrs	r1, r1, #24
 8021450:	9110      	str	r1, [sp, #64]	; 0x40
 8021452:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021456:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802145a:	910c      	str	r1, [sp, #48]	; 0x30
 802145c:	0e09      	lsrs	r1, r1, #24
 802145e:	9113      	str	r1, [sp, #76]	; 0x4c
 8021460:	b292      	uxth	r2, r2
 8021462:	b280      	uxth	r0, r0
 8021464:	fb02 f900 	mul.w	r9, r2, r0
 8021468:	0112      	lsls	r2, r2, #4
 802146a:	eba2 0809 	sub.w	r8, r2, r9
 802146e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021470:	fa1f f888 	uxth.w	r8, r8
 8021474:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021478:	fb08 f101 	mul.w	r1, r8, r1
 802147c:	b280      	uxth	r0, r0
 802147e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021482:	1a12      	subs	r2, r2, r0
 8021484:	b292      	uxth	r2, r2
 8021486:	fb02 110e 	mla	r1, r2, lr, r1
 802148a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802148c:	fb00 1104 	mla	r1, r0, r4, r1
 8021490:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021492:	fb09 1104 	mla	r1, r9, r4, r1
 8021496:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802149a:	2900      	cmp	r1, #0
 802149c:	f000 80f5 	beq.w	802168a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80214a0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80214a4:	d01b      	beq.n	80214de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80214a6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80214aa:	fb0e fa0a 	mul.w	sl, lr, sl
 80214ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80214b2:	fb0e fe03 	mul.w	lr, lr, r3
 80214b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80214ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80214be:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80214c2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80214c6:	4453      	add	r3, sl
 80214c8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80214cc:	0a1b      	lsrs	r3, r3, #8
 80214ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80214d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80214da:	ea43 030c 	orr.w	r3, r3, ip
 80214de:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80214e0:	2cff      	cmp	r4, #255	; 0xff
 80214e2:	d021      	beq.n	8021528 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80214e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80214e6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80214ea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80214ec:	fb04 fb0b 	mul.w	fp, r4, fp
 80214f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80214f2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80214f6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214fa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80214fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021500:	fb04 fa0a 	mul.w	sl, r4, sl
 8021504:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021508:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802150c:	44de      	add	lr, fp
 802150e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021512:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021516:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802151a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802151e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021522:	ea4e 040a 	orr.w	r4, lr, sl
 8021526:	940b      	str	r4, [sp, #44]	; 0x2c
 8021528:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802152a:	2cff      	cmp	r4, #255	; 0xff
 802152c:	d021      	beq.n	8021572 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802152e:	9c08      	ldr	r4, [sp, #32]
 8021530:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021534:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021536:	fb04 fb0b 	mul.w	fp, r4, fp
 802153a:	9c08      	ldr	r4, [sp, #32]
 802153c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021540:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021544:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021546:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802154a:	fb04 fa0a 	mul.w	sl, r4, sl
 802154e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021552:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021556:	44de      	add	lr, fp
 8021558:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802155c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021560:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021564:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021568:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802156c:	ea4e 040a 	orr.w	r4, lr, sl
 8021570:	9408      	str	r4, [sp, #32]
 8021572:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021574:	2cff      	cmp	r4, #255	; 0xff
 8021576:	d021      	beq.n	80215bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8021578:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802157a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802157e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021580:	fb04 fb0b 	mul.w	fp, r4, fp
 8021584:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021586:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802158a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802158e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021590:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021594:	fb04 fa0a 	mul.w	sl, r4, sl
 8021598:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802159c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80215a0:	44de      	add	lr, fp
 80215a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80215a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80215b6:	ea4e 040a 	orr.w	r4, lr, sl
 80215ba:	940c      	str	r4, [sp, #48]	; 0x30
 80215bc:	43c9      	mvns	r1, r1
 80215be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80215c0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80215c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80215c8:	fb08 fc0c 	mul.w	ip, r8, ip
 80215cc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80215d0:	9c08      	ldr	r4, [sp, #32]
 80215d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80215d6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80215da:	fb00 cc0e 	mla	ip, r0, lr, ip
 80215de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80215e0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80215e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80215e6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80215ea:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80215ee:	fb08 f80e 	mul.w	r8, r8, lr
 80215f2:	fb02 8303 	mla	r3, r2, r3, r8
 80215f6:	9a08      	ldr	r2, [sp, #32]
 80215f8:	f8b7 8000 	ldrh.w	r8, [r7]
 80215fc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021600:	fb00 330a 	mla	r3, r0, sl, r3
 8021604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021606:	fa5f fe81 	uxtb.w	lr, r1
 802160a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802160e:	fb09 3900 	mla	r9, r9, r0, r3
 8021612:	ea4f 2228 	mov.w	r2, r8, asr #8
 8021616:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802161a:	fb02 f20e 	mul.w	r2, r2, lr
 802161e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021622:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021626:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802162a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802162e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021632:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021636:	ea4c 0c09 	orr.w	ip, ip, r9
 802163a:	fb00 f00e 	mul.w	r0, r0, lr
 802163e:	1c53      	adds	r3, r2, #1
 8021640:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021644:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8021648:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802164c:	4a62      	ldr	r2, [pc, #392]	; (80217d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802164e:	b2db      	uxtb	r3, r3
 8021650:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021654:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8021658:	b2c9      	uxtb	r1, r1
 802165a:	1c43      	adds	r3, r0, #1
 802165c:	fb01 f10e 	mul.w	r1, r1, lr
 8021660:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021664:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021668:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802166c:	00db      	lsls	r3, r3, #3
 802166e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021672:	4313      	orrs	r3, r2
 8021674:	1c4a      	adds	r2, r1, #1
 8021676:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802167a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802167e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021682:	ea4c 0c03 	orr.w	ip, ip, r3
 8021686:	f8a7 c000 	strh.w	ip, [r7]
 802168a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802168c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802168e:	3702      	adds	r7, #2
 8021690:	441a      	add	r2, r3
 8021692:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021694:	9225      	str	r2, [sp, #148]	; 0x94
 8021696:	441d      	add	r5, r3
 8021698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802169a:	3b01      	subs	r3, #1
 802169c:	9317      	str	r3, [sp, #92]	; 0x5c
 802169e:	e699      	b.n	80213d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80216a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80216a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80216a4:	441c      	add	r4, r3
 80216a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80216a8:	9425      	str	r4, [sp, #148]	; 0x94
 80216aa:	441d      	add	r5, r3
 80216ac:	9b07      	ldr	r3, [sp, #28]
 80216ae:	3b01      	subs	r3, #1
 80216b0:	9307      	str	r3, [sp, #28]
 80216b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216b4:	3302      	adds	r3, #2
 80216b6:	930a      	str	r3, [sp, #40]	; 0x28
 80216b8:	e66c      	b.n	8021394 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80216ba:	d024      	beq.n	8021706 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80216bc:	9b07      	ldr	r3, [sp, #28]
 80216be:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80216c0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80216c2:	3b01      	subs	r3, #1
 80216c4:	fb00 4003 	mla	r0, r0, r3, r4
 80216c8:	1400      	asrs	r0, r0, #16
 80216ca:	f53f ae80 	bmi.w	80213ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80216ce:	3901      	subs	r1, #1
 80216d0:	4288      	cmp	r0, r1
 80216d2:	f6bf ae7c 	bge.w	80213ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80216d6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80216d8:	fb01 5303 	mla	r3, r1, r3, r5
 80216dc:	141b      	asrs	r3, r3, #16
 80216de:	f53f ae76 	bmi.w	80213ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80216e2:	3a01      	subs	r2, #1
 80216e4:	4293      	cmp	r3, r2
 80216e6:	f6bf ae72 	bge.w	80213ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80216ea:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80216ee:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80216f2:	f1bb 0f00 	cmp.w	fp, #0
 80216f6:	dc71      	bgt.n	80217dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80216f8:	9b07      	ldr	r3, [sp, #28]
 80216fa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80216fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021700:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021704:	930a      	str	r3, [sp, #40]	; 0x28
 8021706:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021708:	2b00      	cmp	r3, #0
 802170a:	f340 81af 	ble.w	8021a6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802170e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021712:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021716:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802171a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802171e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021722:	eef0 6a62 	vmov.f32	s13, s5
 8021726:	ee31 1a05 	vadd.f32	s2, s2, s10
 802172a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802172e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021732:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021736:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802173a:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802173e:	eef0 6a43 	vmov.f32	s13, s6
 8021742:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021746:	ee12 2a90 	vmov	r2, s5
 802174a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802174e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021750:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021754:	fb92 f3f3 	sdiv	r3, r2, r3
 8021758:	ee13 2a10 	vmov	r2, s6
 802175c:	9327      	str	r3, [sp, #156]	; 0x9c
 802175e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021760:	ee16 5a90 	vmov	r5, s13
 8021764:	fb92 f3f3 	sdiv	r3, r2, r3
 8021768:	9328      	str	r3, [sp, #160]	; 0xa0
 802176a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802176c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802176e:	3b01      	subs	r3, #1
 8021770:	9316      	str	r3, [sp, #88]	; 0x58
 8021772:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021774:	bf08      	it	eq
 8021776:	4613      	moveq	r3, r2
 8021778:	eeb0 3a67 	vmov.f32	s6, s15
 802177c:	9307      	str	r3, [sp, #28]
 802177e:	eef0 2a47 	vmov.f32	s5, s14
 8021782:	e5f9      	b.n	8021378 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8021784:	2800      	cmp	r0, #0
 8021786:	f43f ae6b 	beq.w	8021460 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802178a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802178e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021792:	9108      	str	r1, [sp, #32]
 8021794:	0e09      	lsrs	r1, r1, #24
 8021796:	9110      	str	r1, [sp, #64]	; 0x40
 8021798:	e662      	b.n	8021460 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802179a:	f113 0801 	adds.w	r8, r3, #1
 802179e:	f53f af74 	bmi.w	802168a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80217a2:	4541      	cmp	r1, r8
 80217a4:	f6ff af71 	blt.w	802168a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80217a8:	f11c 0801 	adds.w	r8, ip, #1
 80217ac:	f53f af6d 	bmi.w	802168a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80217b0:	45c6      	cmp	lr, r8
 80217b2:	f6ff af6a 	blt.w	802168a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80217b6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80217ba:	b209      	sxth	r1, r1
 80217bc:	fa0f f38e 	sxth.w	r3, lr
 80217c0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80217c4:	9301      	str	r3, [sp, #4]
 80217c6:	9100      	str	r1, [sp, #0]
 80217c8:	4633      	mov	r3, r6
 80217ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80217cc:	4639      	mov	r1, r7
 80217ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 80217d0:	f7ff fc7a 	bl	80210c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80217d4:	e759      	b.n	802168a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80217d6:	bf00      	nop
 80217d8:	fffff800 	.word	0xfffff800
 80217dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80217de:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80217e0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80217e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80217e6:	1427      	asrs	r7, r4, #16
 80217e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80217ec:	142b      	asrs	r3, r5, #16
 80217ee:	fb01 7303 	mla	r3, r1, r3, r7
 80217f2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80217f4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80217f8:	18e7      	adds	r7, r4, r3
 80217fa:	5ce3      	ldrb	r3, [r4, r3]
 80217fc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021800:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021804:	2a00      	cmp	r2, #0
 8021806:	f000 8127 	beq.w	8021a58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802180a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802180e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8021812:	940d      	str	r4, [sp, #52]	; 0x34
 8021814:	0e24      	lsrs	r4, r4, #24
 8021816:	9414      	str	r4, [sp, #80]	; 0x50
 8021818:	b170      	cbz	r0, 8021838 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802181a:	eb07 0e01 	add.w	lr, r7, r1
 802181e:	5c79      	ldrb	r1, [r7, r1]
 8021820:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021824:	9109      	str	r1, [sp, #36]	; 0x24
 8021826:	0e09      	lsrs	r1, r1, #24
 8021828:	9111      	str	r1, [sp, #68]	; 0x44
 802182a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802182e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021832:	910e      	str	r1, [sp, #56]	; 0x38
 8021834:	0e09      	lsrs	r1, r1, #24
 8021836:	9115      	str	r1, [sp, #84]	; 0x54
 8021838:	b292      	uxth	r2, r2
 802183a:	b280      	uxth	r0, r0
 802183c:	fb02 f800 	mul.w	r8, r2, r0
 8021840:	0112      	lsls	r2, r2, #4
 8021842:	eba2 0e08 	sub.w	lr, r2, r8
 8021846:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802184a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802184c:	fa1f fe8e 	uxth.w	lr, lr
 8021850:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8021854:	fb0e f202 	mul.w	r2, lr, r2
 8021858:	b280      	uxth	r0, r0
 802185a:	1a09      	subs	r1, r1, r0
 802185c:	b289      	uxth	r1, r1
 802185e:	fb01 220c 	mla	r2, r1, ip, r2
 8021862:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021864:	fb00 2204 	mla	r2, r0, r4, r2
 8021868:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802186a:	fb08 2204 	mla	r2, r8, r4, r2
 802186e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021872:	2a00      	cmp	r2, #0
 8021874:	f000 80e5 	beq.w	8021a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8021878:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802187c:	d019      	beq.n	80218b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802187e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021882:	fb0c fa0a 	mul.w	sl, ip, sl
 8021886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802188a:	fb0c fc03 	mul.w	ip, ip, r3
 802188e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021892:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021896:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802189a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802189e:	4453      	add	r3, sl
 80218a0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80218a4:	0a1b      	lsrs	r3, r3, #8
 80218a6:	0a3f      	lsrs	r7, r7, #8
 80218a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218ac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80218b0:	433b      	orrs	r3, r7
 80218b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80218b4:	2cff      	cmp	r4, #255	; 0xff
 80218b6:	d020      	beq.n	80218fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80218b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80218ba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80218be:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80218c0:	4367      	muls	r7, r4
 80218c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80218c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80218c8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80218cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80218ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80218d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80218d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218da:	44bc      	add	ip, r7
 80218dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80218e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80218e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80218ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80218f4:	ea4c 040a 	orr.w	r4, ip, sl
 80218f8:	940d      	str	r4, [sp, #52]	; 0x34
 80218fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80218fc:	2cff      	cmp	r4, #255	; 0xff
 80218fe:	d020      	beq.n	8021942 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8021900:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021902:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021906:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021908:	4367      	muls	r7, r4
 802190a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802190c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021910:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021914:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021916:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802191a:	fb04 fa0a 	mul.w	sl, r4, sl
 802191e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021922:	44bc      	add	ip, r7
 8021924:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021928:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802192c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021930:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021934:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021938:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802193c:	ea4c 040a 	orr.w	r4, ip, sl
 8021940:	9409      	str	r4, [sp, #36]	; 0x24
 8021942:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021944:	2cff      	cmp	r4, #255	; 0xff
 8021946:	d020      	beq.n	802198a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8021948:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802194a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802194e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021950:	4367      	muls	r7, r4
 8021952:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021954:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021958:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802195c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802195e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021962:	fb04 fa0a 	mul.w	sl, r4, sl
 8021966:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802196a:	44bc      	add	ip, r7
 802196c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021970:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021974:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021978:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802197c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021980:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021984:	ea4c 040a 	orr.w	r4, ip, sl
 8021988:	940e      	str	r4, [sp, #56]	; 0x38
 802198a:	43d2      	mvns	r2, r2
 802198c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802198e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021992:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021996:	fb0e f707 	mul.w	r7, lr, r7
 802199a:	fb01 770c 	mla	r7, r1, ip, r7
 802199e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80219a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80219a4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80219a8:	fb00 770c 	mla	r7, r0, ip, r7
 80219ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80219ae:	b2d2      	uxtb	r2, r2
 80219b0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80219b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80219b6:	fb08 770c 	mla	r7, r8, ip, r7
 80219ba:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80219be:	fb0e fe0c 	mul.w	lr, lr, ip
 80219c2:	fb01 e303 	mla	r3, r1, r3, lr
 80219c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80219c8:	0a3f      	lsrs	r7, r7, #8
 80219ca:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80219ce:	fb00 330a 	mla	r3, r0, sl, r3
 80219d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80219d4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219d8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80219dc:	fb08 3c0c 	mla	ip, r8, ip, r3
 80219e0:	f8b9 3000 	ldrh.w	r3, [r9]
 80219e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219e8:	1218      	asrs	r0, r3, #8
 80219ea:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80219ee:	4350      	muls	r0, r2
 80219f0:	10d9      	asrs	r1, r3, #3
 80219f2:	00db      	lsls	r3, r3, #3
 80219f4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80219f8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80219fc:	b2db      	uxtb	r3, r3
 80219fe:	ea47 070c 	orr.w	r7, r7, ip
 8021a02:	4351      	muls	r1, r2
 8021a04:	4353      	muls	r3, r2
 8021a06:	1c42      	adds	r2, r0, #1
 8021a08:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021a0c:	0c3a      	lsrs	r2, r7, #16
 8021a0e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021a12:	4a18      	ldr	r2, [pc, #96]	; (8021a74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8021a14:	b2c0      	uxtb	r0, r0
 8021a16:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8021a1a:	1c4a      	adds	r2, r1, #1
 8021a1c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021a20:	0a3a      	lsrs	r2, r7, #8
 8021a22:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021a26:	00c9      	lsls	r1, r1, #3
 8021a28:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021a2c:	4301      	orrs	r1, r0
 8021a2e:	1c58      	adds	r0, r3, #1
 8021a30:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021a34:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8021a38:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8021a3c:	4308      	orrs	r0, r1
 8021a3e:	f8a9 0000 	strh.w	r0, [r9]
 8021a42:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021a44:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021a46:	f109 0902 	add.w	r9, r9, #2
 8021a4a:	441a      	add	r2, r3
 8021a4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021a4e:	9225      	str	r2, [sp, #148]	; 0x94
 8021a50:	441d      	add	r5, r3
 8021a52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021a56:	e64c      	b.n	80216f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8021a58:	2800      	cmp	r0, #0
 8021a5a:	f43f aeed 	beq.w	8021838 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8021a5e:	5c79      	ldrb	r1, [r7, r1]
 8021a60:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a64:	9109      	str	r1, [sp, #36]	; 0x24
 8021a66:	0e09      	lsrs	r1, r1, #24
 8021a68:	9111      	str	r1, [sp, #68]	; 0x44
 8021a6a:	e6e5      	b.n	8021838 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8021a6c:	b01b      	add	sp, #108	; 0x6c
 8021a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a72:	bf00      	nop
 8021a74:	fffff800 	.word	0xfffff800

08021a78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8021a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a7c:	b085      	sub	sp, #20
 8021a7e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8021a82:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8021a86:	fb00 7406 	mla	r4, r0, r6, r7
 8021a8a:	2800      	cmp	r0, #0
 8021a8c:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8021a90:	9103      	str	r1, [sp, #12]
 8021a92:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8021a96:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8021a9a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021a9e:	9501      	str	r5, [sp, #4]
 8021aa0:	eb03 0904 	add.w	r9, r3, r4
 8021aa4:	f2c0 8150 	blt.w	8021d48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021aa8:	4583      	cmp	fp, r0
 8021aaa:	f340 814d 	ble.w	8021d48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021aae:	2f00      	cmp	r7, #0
 8021ab0:	f2c0 8146 	blt.w	8021d40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8021ab4:	42be      	cmp	r6, r7
 8021ab6:	f340 8143 	ble.w	8021d40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8021aba:	f813 c004 	ldrb.w	ip, [r3, r4]
 8021abe:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8021ac2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8021ac6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021aca:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8021ace:	4355      	muls	r5, r2
 8021ad0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021ad4:	fb0c f203 	mul.w	r2, ip, r3
 8021ad8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021adc:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021ae0:	441d      	add	r5, r3
 8021ae2:	f102 0320 	add.w	r3, r2, #32
 8021ae6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021aea:	0a1b      	lsrs	r3, r3, #8
 8021aec:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021af0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021af4:	431c      	orrs	r4, r3
 8021af6:	1c7b      	adds	r3, r7, #1
 8021af8:	f100 812b 	bmi.w	8021d52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021afc:	429e      	cmp	r6, r3
 8021afe:	f340 8128 	ble.w	8021d52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021b02:	2900      	cmp	r1, #0
 8021b04:	f000 8128 	beq.w	8021d58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8021b08:	9a01      	ldr	r2, [sp, #4]
 8021b0a:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021b0e:	8855      	ldrh	r5, [r2, #2]
 8021b10:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021b14:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8021b18:	fb08 f802 	mul.w	r8, r8, r2
 8021b1c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021b20:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021b24:	435d      	muls	r5, r3
 8021b26:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8021b2a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021b2e:	44d0      	add	r8, sl
 8021b30:	f105 0a20 	add.w	sl, r5, #32
 8021b34:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021b38:	0a2d      	lsrs	r5, r5, #8
 8021b3a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021b3e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021b42:	432a      	orrs	r2, r5
 8021b44:	3001      	adds	r0, #1
 8021b46:	f100 810d 	bmi.w	8021d64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021b4a:	4583      	cmp	fp, r0
 8021b4c:	f340 810a 	ble.w	8021d64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021b50:	f1be 0f00 	cmp.w	lr, #0
 8021b54:	f000 810b 	beq.w	8021d6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8021b58:	2f00      	cmp	r7, #0
 8021b5a:	f2c0 8100 	blt.w	8021d5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8021b5e:	42be      	cmp	r6, r7
 8021b60:	f340 80fd 	ble.w	8021d5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8021b64:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021b68:	9801      	ldr	r0, [sp, #4]
 8021b6a:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021b6e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8021b72:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021b76:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8021b7a:	fb0a fa00 	mul.w	sl, sl, r0
 8021b7e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021b82:	fb05 f808 	mul.w	r8, r5, r8
 8021b86:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8021b8a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021b8e:	4482      	add	sl, r0
 8021b90:	f108 0020 	add.w	r0, r8, #32
 8021b94:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021b98:	0a00      	lsrs	r0, r0, #8
 8021b9a:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021b9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021ba2:	ea4b 0b00 	orr.w	fp, fp, r0
 8021ba6:	3701      	adds	r7, #1
 8021ba8:	f100 80e6 	bmi.w	8021d78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021bac:	42be      	cmp	r6, r7
 8021bae:	f340 80e3 	ble.w	8021d78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021bb2:	2900      	cmp	r1, #0
 8021bb4:	f000 80e3 	beq.w	8021d7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8021bb8:	9801      	ldr	r0, [sp, #4]
 8021bba:	3601      	adds	r6, #1
 8021bbc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021bc0:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021bc4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021bc8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021bcc:	fb07 f800 	mul.w	r8, r7, r0
 8021bd0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021bd4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021bd8:	fb09 f906 	mul.w	r9, r9, r6
 8021bdc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021be0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021be4:	44d1      	add	r9, sl
 8021be6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021bea:	f108 0020 	add.w	r0, r8, #32
 8021bee:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021bf2:	0a00      	lsrs	r0, r0, #8
 8021bf4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021bf8:	4330      	orrs	r0, r6
 8021bfa:	b28e      	uxth	r6, r1
 8021bfc:	fa1f f98e 	uxth.w	r9, lr
 8021c00:	fb06 f809 	mul.w	r8, r6, r9
 8021c04:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021c08:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021c0c:	0136      	lsls	r6, r6, #4
 8021c0e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021c12:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021c16:	9601      	str	r6, [sp, #4]
 8021c18:	ea4a 0404 	orr.w	r4, sl, r4
 8021c1c:	fa1f f689 	uxth.w	r6, r9
 8021c20:	9602      	str	r6, [sp, #8]
 8021c22:	4626      	mov	r6, r4
 8021c24:	fb11 f90e 	smulbb	r9, r1, lr
 8021c28:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021c2c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021c30:	f1ce 0410 	rsb	r4, lr, #16
 8021c34:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021c38:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021c3c:	1a64      	subs	r4, r4, r1
 8021c3e:	ea4a 0202 	orr.w	r2, sl, r2
 8021c42:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021c46:	434a      	muls	r2, r1
 8021c48:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021c4c:	fb04 2406 	mla	r4, r4, r6, r2
 8021c50:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021c54:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021c58:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021c5c:	ea4a 0000 	orr.w	r0, sl, r0
 8021c60:	fb09 4200 	mla	r2, r9, r0, r4
 8021c64:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021c68:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021c6c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021c70:	ea44 0b0b 	orr.w	fp, r4, fp
 8021c74:	9c01      	ldr	r4, [sp, #4]
 8021c76:	9e02      	ldr	r6, [sp, #8]
 8021c78:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8021c7c:	1ba4      	subs	r4, r4, r6
 8021c7e:	9e01      	ldr	r6, [sp, #4]
 8021c80:	b2a4      	uxth	r4, r4
 8021c82:	eba6 0608 	sub.w	r6, r6, r8
 8021c86:	b2b6      	uxth	r6, r6
 8021c88:	4373      	muls	r3, r6
 8021c8a:	fb0c 3304 	mla	r3, ip, r4, r3
 8021c8e:	9c02      	ldr	r4, [sp, #8]
 8021c90:	9903      	ldr	r1, [sp, #12]
 8021c92:	fb04 3505 	mla	r5, r4, r5, r3
 8021c96:	fb08 5707 	mla	r7, r8, r7, r5
 8021c9a:	8808      	ldrh	r0, [r1, #0]
 8021c9c:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8021ca0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021ca4:	b289      	uxth	r1, r1
 8021ca6:	434f      	muls	r7, r1
 8021ca8:	1c7b      	adds	r3, r7, #1
 8021caa:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021cae:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8021cb2:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021cb6:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021cba:	1203      	asrs	r3, r0, #8
 8021cbc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021cc0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021cc4:	b2ff      	uxtb	r7, r7
 8021cc6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021cca:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021cce:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021cd2:	fb13 f307 	smulbb	r3, r3, r7
 8021cd6:	ea42 0e0e 	orr.w	lr, r2, lr
 8021cda:	fa1f f28e 	uxth.w	r2, lr
 8021cde:	1215      	asrs	r5, r2, #8
 8021ce0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021ce4:	fb05 3501 	mla	r5, r5, r1, r3
 8021ce8:	10c3      	asrs	r3, r0, #3
 8021cea:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021cee:	fb13 f307 	smulbb	r3, r3, r7
 8021cf2:	10d4      	asrs	r4, r2, #3
 8021cf4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021cf8:	fb04 3401 	mla	r4, r4, r1, r3
 8021cfc:	00c3      	lsls	r3, r0, #3
 8021cfe:	b2db      	uxtb	r3, r3
 8021d00:	fb13 f307 	smulbb	r3, r3, r7
 8021d04:	00d2      	lsls	r2, r2, #3
 8021d06:	b2d2      	uxtb	r2, r2
 8021d08:	fb02 3101 	mla	r1, r2, r1, r3
 8021d0c:	b2ad      	uxth	r5, r5
 8021d0e:	b289      	uxth	r1, r1
 8021d10:	b2a4      	uxth	r4, r4
 8021d12:	1c6b      	adds	r3, r5, #1
 8021d14:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021d18:	1c62      	adds	r2, r4, #1
 8021d1a:	1c4b      	adds	r3, r1, #1
 8021d1c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021d20:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8021d24:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021d28:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021d2c:	0964      	lsrs	r4, r4, #5
 8021d2e:	432b      	orrs	r3, r5
 8021d30:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021d34:	9a03      	ldr	r2, [sp, #12]
 8021d36:	4323      	orrs	r3, r4
 8021d38:	8013      	strh	r3, [r2, #0]
 8021d3a:	b005      	add	sp, #20
 8021d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d40:	f04f 0c00 	mov.w	ip, #0
 8021d44:	4664      	mov	r4, ip
 8021d46:	e6d6      	b.n	8021af6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8021d48:	2300      	movs	r3, #0
 8021d4a:	469c      	mov	ip, r3
 8021d4c:	461a      	mov	r2, r3
 8021d4e:	461c      	mov	r4, r3
 8021d50:	e6f8      	b.n	8021b44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021d52:	2300      	movs	r3, #0
 8021d54:	461a      	mov	r2, r3
 8021d56:	e6f5      	b.n	8021b44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021d58:	460b      	mov	r3, r1
 8021d5a:	460a      	mov	r2, r1
 8021d5c:	e6f2      	b.n	8021b44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021d5e:	2500      	movs	r5, #0
 8021d60:	46ab      	mov	fp, r5
 8021d62:	e720      	b.n	8021ba6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8021d64:	2700      	movs	r7, #0
 8021d66:	463d      	mov	r5, r7
 8021d68:	4638      	mov	r0, r7
 8021d6a:	46bb      	mov	fp, r7
 8021d6c:	e745      	b.n	8021bfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021d6e:	4677      	mov	r7, lr
 8021d70:	4675      	mov	r5, lr
 8021d72:	4670      	mov	r0, lr
 8021d74:	46f3      	mov	fp, lr
 8021d76:	e740      	b.n	8021bfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021d78:	2700      	movs	r7, #0
 8021d7a:	4638      	mov	r0, r7
 8021d7c:	e73d      	b.n	8021bfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021d7e:	460f      	mov	r7, r1
 8021d80:	4608      	mov	r0, r1
 8021d82:	e73a      	b.n	8021bfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08021d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d88:	b097      	sub	sp, #92	; 0x5c
 8021d8a:	9214      	str	r2, [sp, #80]	; 0x50
 8021d8c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021d8e:	9015      	str	r0, [sp, #84]	; 0x54
 8021d90:	9308      	str	r3, [sp, #32]
 8021d92:	6850      	ldr	r0, [r2, #4]
 8021d94:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021d98:	9111      	str	r1, [sp, #68]	; 0x44
 8021d9a:	9312      	str	r3, [sp, #72]	; 0x48
 8021d9c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021da0:	fb00 1303 	mla	r3, r0, r3, r1
 8021da4:	6812      	ldr	r2, [r2, #0]
 8021da6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021daa:	9309      	str	r3, [sp, #36]	; 0x24
 8021dac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021dae:	681b      	ldr	r3, [r3, #0]
 8021db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8021db2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021db4:	685b      	ldr	r3, [r3, #4]
 8021db6:	930c      	str	r3, [sp, #48]	; 0x30
 8021db8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8021dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	dc03      	bgt.n	8021dcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021dc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	f340 83cb 	ble.w	8022562 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021dcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021dce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021dd2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021dd6:	1e48      	subs	r0, r1, #1
 8021dd8:	1e55      	subs	r5, r2, #1
 8021dda:	9b08      	ldr	r3, [sp, #32]
 8021ddc:	2b00      	cmp	r3, #0
 8021dde:	f340 81a3 	ble.w	8022128 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8021de2:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8021de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021de6:	1436      	asrs	r6, r6, #16
 8021de8:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021dec:	d406      	bmi.n	8021dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021dee:	4286      	cmp	r6, r0
 8021df0:	da04      	bge.n	8021dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021df2:	2b00      	cmp	r3, #0
 8021df4:	db02      	blt.n	8021dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021df6:	42ab      	cmp	r3, r5
 8021df8:	f2c0 8197 	blt.w	802212a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021dfc:	3601      	adds	r6, #1
 8021dfe:	f100 8184 	bmi.w	802210a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021e02:	42b1      	cmp	r1, r6
 8021e04:	f2c0 8181 	blt.w	802210a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021e08:	3301      	adds	r3, #1
 8021e0a:	f100 817e 	bmi.w	802210a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021e0e:	429a      	cmp	r2, r3
 8021e10:	f2c0 817b 	blt.w	802210a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021e14:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021e18:	9b08      	ldr	r3, [sp, #32]
 8021e1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021e1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021e1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021e20:	2b00      	cmp	r3, #0
 8021e22:	f340 81a4 	ble.w	802216e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021e26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021e28:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021e2a:	1418      	asrs	r0, r3, #16
 8021e2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021e2e:	142d      	asrs	r5, r5, #16
 8021e30:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021e34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021e36:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021e3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021e40:	f100 81f8 	bmi.w	8022234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021e44:	f102 3eff 	add.w	lr, r2, #4294967295
 8021e48:	4575      	cmp	r5, lr
 8021e4a:	f280 81f3 	bge.w	8022234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021e4e:	2800      	cmp	r0, #0
 8021e50:	f2c0 81f0 	blt.w	8022234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021e54:	f103 3eff 	add.w	lr, r3, #4294967295
 8021e58:	4570      	cmp	r0, lr
 8021e5a:	f280 81eb 	bge.w	8022234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021e5e:	b212      	sxth	r2, r2
 8021e60:	fb00 5002 	mla	r0, r0, r2, r5
 8021e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e66:	fa1f fe81 	uxth.w	lr, r1
 8021e6a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021e6e:	eb03 0a00 	add.w	sl, r3, r0
 8021e72:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021e76:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021e7a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021e7e:	b29b      	uxth	r3, r3
 8021e80:	f1bc 0f00 	cmp.w	ip, #0
 8021e84:	f000 81b9 	beq.w	80221fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8021e88:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021e8c:	eb0a 0b02 	add.w	fp, sl, r2
 8021e90:	fa1f fa8c 	uxth.w	sl, ip
 8021e94:	fb0a fe0e 	mul.w	lr, sl, lr
 8021e98:	eba5 050e 	sub.w	r5, r5, lr
 8021e9c:	b2ad      	uxth	r5, r5
 8021e9e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021ea2:	fb08 f505 	mul.w	r5, r8, r5
 8021ea6:	fa1f fa8a 	uxth.w	sl, sl
 8021eaa:	eba3 030a 	sub.w	r3, r3, sl
 8021eae:	b29b      	uxth	r3, r3
 8021eb0:	940d      	str	r4, [sp, #52]	; 0x34
 8021eb2:	fb09 5303 	mla	r3, r9, r3, r5
 8021eb6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021eba:	940e      	str	r4, [sp, #56]	; 0x38
 8021ebc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021ebe:	fb0a 3304 	mla	r3, sl, r4, r3
 8021ec2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021ec4:	fb0e 3304 	mla	r3, lr, r4, r3
 8021ec8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021ecc:	2b00      	cmp	r3, #0
 8021ece:	f000 810f 	beq.w	80220f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021ed2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ed4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021ed8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021edc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021ee0:	f000 8190 	beq.w	8022204 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8021ee4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021ee8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021eec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021ef0:	fb09 f000 	mul.w	r0, r9, r0
 8021ef4:	fb0a fe0e 	mul.w	lr, sl, lr
 8021ef8:	f100 0b20 	add.w	fp, r0, #32
 8021efc:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021f00:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021f04:	44ce      	add	lr, r9
 8021f06:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021f0a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021f0e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021f12:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021f16:	ea4e 0909 	orr.w	r9, lr, r9
 8021f1a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021f1e:	8868      	ldrh	r0, [r5, #2]
 8021f20:	d019      	beq.n	8021f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021f22:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021f26:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021f2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f2e:	fb08 f800 	mul.w	r8, r8, r0
 8021f32:	fb0a fe0e 	mul.w	lr, sl, lr
 8021f36:	f108 0b20 	add.w	fp, r8, #32
 8021f3a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021f3e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021f42:	4486      	add	lr, r0
 8021f44:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021f48:	0a00      	lsrs	r0, r0, #8
 8021f4a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021f4e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f52:	ea4e 0000 	orr.w	r0, lr, r0
 8021f56:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021f5a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021f5e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021f62:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021f66:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021f6a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021f6e:	ea4e 0909 	orr.w	r9, lr, r9
 8021f72:	ea4a 0000 	orr.w	r0, sl, r0
 8021f76:	f1bc 0f00 	cmp.w	ip, #0
 8021f7a:	f000 8145 	beq.w	8022208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8021f7e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021f82:	3a01      	subs	r2, #1
 8021f84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021f86:	0052      	lsls	r2, r2, #1
 8021f88:	3202      	adds	r2, #2
 8021f8a:	2cff      	cmp	r4, #255	; 0xff
 8021f8c:	eb05 0e02 	add.w	lr, r5, r2
 8021f90:	5aaa      	ldrh	r2, [r5, r2]
 8021f92:	d018      	beq.n	8021fc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021f94:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021f98:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021f9c:	fb04 fa02 	mul.w	sl, r4, r2
 8021fa0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021fa4:	fb08 f805 	mul.w	r8, r8, r5
 8021fa8:	f10a 0520 	add.w	r5, sl, #32
 8021fac:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021fb0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021fb4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021fb8:	4442      	add	r2, r8
 8021fba:	0a2d      	lsrs	r5, r5, #8
 8021fbc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021fc0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021fc4:	432a      	orrs	r2, r5
 8021fc6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021fc8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021fcc:	2cff      	cmp	r4, #255	; 0xff
 8021fce:	d01a      	beq.n	8022006 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8021fd0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021fd4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021fd8:	fb04 fa05 	mul.w	sl, r4, r5
 8021fdc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021fe0:	fb08 f80e 	mul.w	r8, r8, lr
 8021fe4:	f10a 0e20 	add.w	lr, sl, #32
 8021fe8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021fec:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021ff0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021ff4:	4445      	add	r5, r8
 8021ff6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ffa:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021ffe:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022002:	ea45 050e 	orr.w	r5, r5, lr
 8022006:	fb1c fe01 	smulbb	lr, ip, r1
 802200a:	f1cc 0810 	rsb	r8, ip, #16
 802200e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8022012:	eba8 0801 	sub.w	r8, r8, r1
 8022016:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802201a:	4341      	muls	r1, r0
 802201c:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8022020:	fb09 1108 	mla	r1, r9, r8, r1
 8022024:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022028:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802202c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022030:	ea4a 0202 	orr.w	r2, sl, r2
 8022034:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022038:	fb0c 1102 	mla	r1, ip, r2, r1
 802203c:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022040:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022044:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022048:	ea4b 0505 	orr.w	r5, fp, r5
 802204c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8022050:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022054:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022058:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802205c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022060:	ea42 0e0e 	orr.w	lr, r2, lr
 8022064:	fa1f f28e 	uxth.w	r2, lr
 8022068:	2bff      	cmp	r3, #255	; 0xff
 802206a:	d103      	bne.n	8022074 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 802206c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802206e:	29ff      	cmp	r1, #255	; 0xff
 8022070:	f000 80de 	beq.w	8022230 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8022074:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022076:	8838      	ldrh	r0, [r7, #0]
 8022078:	434b      	muls	r3, r1
 802207a:	f103 0c01 	add.w	ip, r3, #1
 802207e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8022082:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8022086:	fa5f fc83 	uxtb.w	ip, r3
 802208a:	1203      	asrs	r3, r0, #8
 802208c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022090:	fb13 f30c 	smulbb	r3, r3, ip
 8022094:	1215      	asrs	r5, r2, #8
 8022096:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802209a:	fb05 3501 	mla	r5, r5, r1, r3
 802209e:	10c3      	asrs	r3, r0, #3
 80220a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80220a4:	fb13 f30c 	smulbb	r3, r3, ip
 80220a8:	10d1      	asrs	r1, r2, #3
 80220aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80220ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80220b0:	fb01 3104 	mla	r1, r1, r4, r3
 80220b4:	00c3      	lsls	r3, r0, #3
 80220b6:	b2db      	uxtb	r3, r3
 80220b8:	fb13 f30c 	smulbb	r3, r3, ip
 80220bc:	00d2      	lsls	r2, r2, #3
 80220be:	b2d2      	uxtb	r2, r2
 80220c0:	fb02 3304 	mla	r3, r2, r4, r3
 80220c4:	b2ad      	uxth	r5, r5
 80220c6:	b29a      	uxth	r2, r3
 80220c8:	1c6b      	adds	r3, r5, #1
 80220ca:	b289      	uxth	r1, r1
 80220cc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80220d0:	1c53      	adds	r3, r2, #1
 80220d2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80220d6:	1c4a      	adds	r2, r1, #1
 80220d8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80220dc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80220e0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80220e4:	0949      	lsrs	r1, r1, #5
 80220e6:	432b      	orrs	r3, r5
 80220e8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80220ec:	430b      	orrs	r3, r1
 80220ee:	803b      	strh	r3, [r7, #0]
 80220f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80220f2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80220f4:	3702      	adds	r7, #2
 80220f6:	4413      	add	r3, r2
 80220f8:	9321      	str	r3, [sp, #132]	; 0x84
 80220fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80220fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80220fe:	441a      	add	r2, r3
 8022100:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022102:	9222      	str	r2, [sp, #136]	; 0x88
 8022104:	3b01      	subs	r3, #1
 8022106:	9313      	str	r3, [sp, #76]	; 0x4c
 8022108:	e689      	b.n	8021e1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802210a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802210c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802210e:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8022110:	4433      	add	r3, r6
 8022112:	9321      	str	r3, [sp, #132]	; 0x84
 8022114:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022116:	441c      	add	r4, r3
 8022118:	9b08      	ldr	r3, [sp, #32]
 802211a:	9422      	str	r4, [sp, #136]	; 0x88
 802211c:	3b01      	subs	r3, #1
 802211e:	9308      	str	r3, [sp, #32]
 8022120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022122:	3302      	adds	r3, #2
 8022124:	9309      	str	r3, [sp, #36]	; 0x24
 8022126:	e658      	b.n	8021dda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022128:	d028      	beq.n	802217c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802212a:	9b08      	ldr	r3, [sp, #32]
 802212c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802212e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8022130:	3b01      	subs	r3, #1
 8022132:	fb00 5003 	mla	r0, r0, r3, r5
 8022136:	1400      	asrs	r0, r0, #16
 8022138:	f53f ae6c 	bmi.w	8021e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802213c:	3901      	subs	r1, #1
 802213e:	4288      	cmp	r0, r1
 8022140:	f6bf ae68 	bge.w	8021e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022144:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022146:	9822      	ldr	r0, [sp, #136]	; 0x88
 8022148:	fb01 0303 	mla	r3, r1, r3, r0
 802214c:	141b      	asrs	r3, r3, #16
 802214e:	f53f ae61 	bmi.w	8021e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022152:	3a01      	subs	r2, #1
 8022154:	4293      	cmp	r3, r2
 8022156:	f6bf ae5d 	bge.w	8021e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802215a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802215e:	9b08      	ldr	r3, [sp, #32]
 8022160:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022164:	9313      	str	r3, [sp, #76]	; 0x4c
 8022166:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022168:	2b00      	cmp	r3, #0
 802216a:	f300 8082 	bgt.w	8022272 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802216e:	9b08      	ldr	r3, [sp, #32]
 8022170:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022176:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802217a:	9309      	str	r3, [sp, #36]	; 0x24
 802217c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802217e:	2b00      	cmp	r3, #0
 8022180:	f340 81ef 	ble.w	8022562 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8022184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022188:	ee30 0a04 	vadd.f32	s0, s0, s8
 802218c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022190:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022194:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022198:	eef0 6a62 	vmov.f32	s13, s5
 802219c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80221a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80221a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80221a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80221ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80221b0:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80221b4:	eef0 6a43 	vmov.f32	s13, s6
 80221b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80221bc:	ee12 2a90 	vmov	r2, s5
 80221c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80221c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80221c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80221ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80221ce:	ee13 2a10 	vmov	r2, s6
 80221d2:	9323      	str	r3, [sp, #140]	; 0x8c
 80221d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80221d6:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80221da:	fb92 f3f3 	sdiv	r3, r2, r3
 80221de:	9324      	str	r3, [sp, #144]	; 0x90
 80221e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80221e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80221e4:	3b01      	subs	r3, #1
 80221e6:	9311      	str	r3, [sp, #68]	; 0x44
 80221e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80221ea:	bf08      	it	eq
 80221ec:	4613      	moveq	r3, r2
 80221ee:	eeb0 3a67 	vmov.f32	s6, s15
 80221f2:	9308      	str	r3, [sp, #32]
 80221f4:	eef0 2a47 	vmov.f32	s5, s14
 80221f8:	e5e1      	b.n	8021dbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80221fa:	fb08 f505 	mul.w	r5, r8, r5
 80221fe:	fb09 5303 	mla	r3, r9, r3, r5
 8022202:	e661      	b.n	8021ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8022204:	4681      	mov	r9, r0
 8022206:	e688      	b.n	8021f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022208:	f1c1 0210 	rsb	r2, r1, #16
 802220c:	4341      	muls	r1, r0
 802220e:	fb09 1902 	mla	r9, r9, r2, r1
 8022212:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022216:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802221a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802221e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022222:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022226:	ea42 0909 	orr.w	r9, r2, r9
 802222a:	fa1f f289 	uxth.w	r2, r9
 802222e:	e71b      	b.n	8022068 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8022230:	803a      	strh	r2, [r7, #0]
 8022232:	e75d      	b.n	80220f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022234:	f115 0e01 	adds.w	lr, r5, #1
 8022238:	f53f af5a 	bmi.w	80220f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802223c:	4572      	cmp	r2, lr
 802223e:	f6ff af57 	blt.w	80220f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022242:	f110 0e01 	adds.w	lr, r0, #1
 8022246:	f53f af53 	bmi.w	80220f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802224a:	4573      	cmp	r3, lr
 802224c:	f6ff af50 	blt.w	80220f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022250:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022252:	b21b      	sxth	r3, r3
 8022254:	b212      	sxth	r2, r2
 8022256:	e9cd 0103 	strd	r0, r1, [sp, #12]
 802225a:	9301      	str	r3, [sp, #4]
 802225c:	9200      	str	r2, [sp, #0]
 802225e:	e9cd c405 	strd	ip, r4, [sp, #20]
 8022262:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8022266:	9502      	str	r5, [sp, #8]
 8022268:	4639      	mov	r1, r7
 802226a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802226c:	f7ff fc04 	bl	8021a78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8022270:	e73e      	b.n	80220f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022274:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022278:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802227a:	fa1f fc82 	uxth.w	ip, r2
 802227e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022282:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022284:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022288:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802228c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802228e:	141f      	asrs	r7, r3, #16
 8022290:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022292:	141b      	asrs	r3, r3, #16
 8022294:	fb01 3707 	mla	r7, r1, r7, r3
 8022298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802229a:	eb03 0a07 	add.w	sl, r3, r7
 802229e:	f813 9007 	ldrb.w	r9, [r3, r7]
 80222a2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80222a6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80222aa:	b29b      	uxth	r3, r3
 80222ac:	2d00      	cmp	r5, #0
 80222ae:	f000 813d 	beq.w	802252c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80222b2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80222b6:	eb0a 0b01 	add.w	fp, sl, r1
 80222ba:	fa1f fa85 	uxth.w	sl, r5
 80222be:	fb0a fc0c 	mul.w	ip, sl, ip
 80222c2:	eba0 000c 	sub.w	r0, r0, ip
 80222c6:	b280      	uxth	r0, r0
 80222c8:	fb08 f000 	mul.w	r0, r8, r0
 80222cc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80222d0:	fa1f fa8a 	uxth.w	sl, sl
 80222d4:	eba3 030a 	sub.w	r3, r3, sl
 80222d8:	b29b      	uxth	r3, r3
 80222da:	fb09 0303 	mla	r3, r9, r3, r0
 80222de:	940f      	str	r4, [sp, #60]	; 0x3c
 80222e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80222e2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80222e6:	fb0a 3300 	mla	r3, sl, r0, r3
 80222ea:	fb0c 3304 	mla	r3, ip, r4, r3
 80222ee:	9410      	str	r4, [sp, #64]	; 0x40
 80222f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	f000 810b 	beq.w	8022510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80222fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80222fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80222fe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022302:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022306:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802230a:	f000 8114 	beq.w	8022536 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 802230e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022312:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022316:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802231a:	fb09 f707 	mul.w	r7, r9, r7
 802231e:	fb0a fc0c 	mul.w	ip, sl, ip
 8022322:	f107 0b20 	add.w	fp, r7, #32
 8022326:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802232a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802232e:	44cc      	add	ip, r9
 8022330:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022334:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022338:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802233c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022340:	ea4c 0909 	orr.w	r9, ip, r9
 8022344:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022348:	8847      	ldrh	r7, [r0, #2]
 802234a:	d019      	beq.n	8022380 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 802234c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022350:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022354:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022358:	fb08 f807 	mul.w	r8, r8, r7
 802235c:	fb0a fc0c 	mul.w	ip, sl, ip
 8022360:	f108 0b20 	add.w	fp, r8, #32
 8022364:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022368:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802236c:	44bc      	add	ip, r7
 802236e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022372:	0a3f      	lsrs	r7, r7, #8
 8022374:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022378:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802237c:	ea4c 0707 	orr.w	r7, ip, r7
 8022380:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022384:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022388:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802238c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022390:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022394:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022398:	ea4c 0909 	orr.w	r9, ip, r9
 802239c:	ea4a 0707 	orr.w	r7, sl, r7
 80223a0:	2d00      	cmp	r5, #0
 80223a2:	f000 80ca 	beq.w	802253a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 80223a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80223aa:	3901      	subs	r1, #1
 80223ac:	0049      	lsls	r1, r1, #1
 80223ae:	3102      	adds	r1, #2
 80223b0:	eb00 0c01 	add.w	ip, r0, r1
 80223b4:	5a41      	ldrh	r1, [r0, r1]
 80223b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80223b8:	28ff      	cmp	r0, #255	; 0xff
 80223ba:	d019      	beq.n	80223f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 80223bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80223be:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80223c2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80223c6:	fb04 fa01 	mul.w	sl, r4, r1
 80223ca:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80223ce:	fb08 f800 	mul.w	r8, r8, r0
 80223d2:	f10a 0020 	add.w	r0, sl, #32
 80223d6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80223da:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80223de:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80223e2:	4441      	add	r1, r8
 80223e4:	0a00      	lsrs	r0, r0, #8
 80223e6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80223ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80223ee:	4301      	orrs	r1, r0
 80223f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80223f2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80223f6:	2cff      	cmp	r4, #255	; 0xff
 80223f8:	d01a      	beq.n	8022430 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 80223fa:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80223fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022402:	fb04 fa00 	mul.w	sl, r4, r0
 8022406:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802240a:	fb08 f80c 	mul.w	r8, r8, ip
 802240e:	f10a 0c20 	add.w	ip, sl, #32
 8022412:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022416:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802241a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802241e:	4440      	add	r0, r8
 8022420:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022424:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022428:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802242c:	ea40 000c 	orr.w	r0, r0, ip
 8022430:	fb15 fc02 	smulbb	ip, r5, r2
 8022434:	f1c5 0810 	rsb	r8, r5, #16
 8022438:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802243c:	eba8 0802 	sub.w	r8, r8, r2
 8022440:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022444:	437a      	muls	r2, r7
 8022446:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802244a:	fb09 2208 	mla	r2, r9, r8, r2
 802244e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022452:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022456:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802245a:	ea4a 0101 	orr.w	r1, sl, r1
 802245e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022462:	fb05 2201 	mla	r2, r5, r1, r2
 8022466:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802246a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802246e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022472:	ea4b 0000 	orr.w	r0, fp, r0
 8022476:	fb0c 2200 	mla	r2, ip, r0, r2
 802247a:	0d57      	lsrs	r7, r2, #21
 802247c:	0952      	lsrs	r2, r2, #5
 802247e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022482:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022486:	433a      	orrs	r2, r7
 8022488:	2bff      	cmp	r3, #255	; 0xff
 802248a:	b292      	uxth	r2, r2
 802248c:	d102      	bne.n	8022494 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802248e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022490:	29ff      	cmp	r1, #255	; 0xff
 8022492:	d063      	beq.n	802255c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8022494:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022496:	f8be 1000 	ldrh.w	r1, [lr]
 802249a:	4343      	muls	r3, r0
 802249c:	1c58      	adds	r0, r3, #1
 802249e:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80224a2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80224a6:	1208      	asrs	r0, r1, #8
 80224a8:	b2db      	uxtb	r3, r3
 80224aa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80224ae:	fb10 f003 	smulbb	r0, r0, r3
 80224b2:	10cf      	asrs	r7, r1, #3
 80224b4:	00c9      	lsls	r1, r1, #3
 80224b6:	b2c9      	uxtb	r1, r1
 80224b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80224ba:	1215      	asrs	r5, r2, #8
 80224bc:	fb11 f103 	smulbb	r1, r1, r3
 80224c0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80224c4:	fb05 0504 	mla	r5, r5, r4, r0
 80224c8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80224cc:	10d0      	asrs	r0, r2, #3
 80224ce:	00d2      	lsls	r2, r2, #3
 80224d0:	fb17 f703 	smulbb	r7, r7, r3
 80224d4:	b2d2      	uxtb	r2, r2
 80224d6:	fb02 1204 	mla	r2, r2, r4, r1
 80224da:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80224de:	fb00 7004 	mla	r0, r0, r4, r7
 80224e2:	b2ad      	uxth	r5, r5
 80224e4:	b292      	uxth	r2, r2
 80224e6:	1c6b      	adds	r3, r5, #1
 80224e8:	1c57      	adds	r7, r2, #1
 80224ea:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80224ee:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80224f2:	b280      	uxth	r0, r0
 80224f4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80224f8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80224fc:	433d      	orrs	r5, r7
 80224fe:	1c47      	adds	r7, r0, #1
 8022500:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022504:	097f      	lsrs	r7, r7, #5
 8022506:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802250a:	433d      	orrs	r5, r7
 802250c:	f8ae 5000 	strh.w	r5, [lr]
 8022510:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022512:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022514:	f10e 0e02 	add.w	lr, lr, #2
 8022518:	4413      	add	r3, r2
 802251a:	9321      	str	r3, [sp, #132]	; 0x84
 802251c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802251e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022520:	441a      	add	r2, r3
 8022522:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022524:	9222      	str	r2, [sp, #136]	; 0x88
 8022526:	3b01      	subs	r3, #1
 8022528:	9313      	str	r3, [sp, #76]	; 0x4c
 802252a:	e61c      	b.n	8022166 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802252c:	fb08 f000 	mul.w	r0, r8, r0
 8022530:	fb09 0303 	mla	r3, r9, r3, r0
 8022534:	e6dc      	b.n	80222f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8022536:	46b9      	mov	r9, r7
 8022538:	e704      	b.n	8022344 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 802253a:	f1c2 0110 	rsb	r1, r2, #16
 802253e:	437a      	muls	r2, r7
 8022540:	fb09 2901 	mla	r9, r9, r1, r2
 8022544:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022548:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802254c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022550:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022554:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022558:	4302      	orrs	r2, r0
 802255a:	e795      	b.n	8022488 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802255c:	f8ae 2000 	strh.w	r2, [lr]
 8022560:	e7d6      	b.n	8022510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8022562:	b017      	add	sp, #92	; 0x5c
 8022564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022568 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802256c:	b085      	sub	sp, #20
 802256e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022572:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8022576:	fb00 7406 	mla	r4, r0, r6, r7
 802257a:	2800      	cmp	r0, #0
 802257c:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8022580:	9103      	str	r1, [sp, #12]
 8022582:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8022586:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802258a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802258e:	9501      	str	r5, [sp, #4]
 8022590:	eb02 0904 	add.w	r9, r2, r4
 8022594:	f2c0 8141 	blt.w	802281a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022598:	4583      	cmp	fp, r0
 802259a:	f340 813e 	ble.w	802281a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802259e:	2f00      	cmp	r7, #0
 80225a0:	f2c0 8137 	blt.w	8022812 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80225a4:	42be      	cmp	r6, r7
 80225a6:	f340 8134 	ble.w	8022812 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80225aa:	f812 c004 	ldrb.w	ip, [r2, r4]
 80225ae:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80225b2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80225b6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80225ba:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80225be:	4355      	muls	r5, r2
 80225c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80225c4:	fb0c f203 	mul.w	r2, ip, r3
 80225c8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80225cc:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80225d0:	441d      	add	r5, r3
 80225d2:	f102 0320 	add.w	r3, r2, #32
 80225d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80225da:	0a1b      	lsrs	r3, r3, #8
 80225dc:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80225e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80225e4:	431c      	orrs	r4, r3
 80225e6:	1c7b      	adds	r3, r7, #1
 80225e8:	f100 811c 	bmi.w	8022824 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80225ec:	429e      	cmp	r6, r3
 80225ee:	f340 8119 	ble.w	8022824 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80225f2:	2900      	cmp	r1, #0
 80225f4:	f000 8119 	beq.w	802282a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80225f8:	9a01      	ldr	r2, [sp, #4]
 80225fa:	f899 3001 	ldrb.w	r3, [r9, #1]
 80225fe:	8855      	ldrh	r5, [r2, #2]
 8022600:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8022604:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8022608:	fb08 f802 	mul.w	r8, r8, r2
 802260c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8022610:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022614:	435d      	muls	r5, r3
 8022616:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802261a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802261e:	44d0      	add	r8, sl
 8022620:	f105 0a20 	add.w	sl, r5, #32
 8022624:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8022628:	0a2d      	lsrs	r5, r5, #8
 802262a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802262e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022632:	432a      	orrs	r2, r5
 8022634:	3001      	adds	r0, #1
 8022636:	f100 80fe 	bmi.w	8022836 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802263a:	4583      	cmp	fp, r0
 802263c:	f340 80fb 	ble.w	8022836 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8022640:	f1be 0f00 	cmp.w	lr, #0
 8022644:	f000 80fc 	beq.w	8022840 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8022648:	2f00      	cmp	r7, #0
 802264a:	f2c0 80f1 	blt.w	8022830 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802264e:	42be      	cmp	r6, r7
 8022650:	f340 80ee 	ble.w	8022830 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8022654:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022658:	9801      	ldr	r0, [sp, #4]
 802265a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802265e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8022662:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022666:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802266a:	fb0a fa00 	mul.w	sl, sl, r0
 802266e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8022672:	fb05 f808 	mul.w	r8, r5, r8
 8022676:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802267a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802267e:	4482      	add	sl, r0
 8022680:	f108 0020 	add.w	r0, r8, #32
 8022684:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022688:	0a00      	lsrs	r0, r0, #8
 802268a:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802268e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022692:	ea4b 0b00 	orr.w	fp, fp, r0
 8022696:	3701      	adds	r7, #1
 8022698:	f100 80d7 	bmi.w	802284a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802269c:	42be      	cmp	r6, r7
 802269e:	f340 80d4 	ble.w	802284a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80226a2:	2900      	cmp	r1, #0
 80226a4:	f000 80d4 	beq.w	8022850 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80226a8:	9801      	ldr	r0, [sp, #4]
 80226aa:	3601      	adds	r6, #1
 80226ac:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80226b0:	f819 7006 	ldrb.w	r7, [r9, r6]
 80226b4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80226b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80226bc:	fb07 f800 	mul.w	r8, r7, r0
 80226c0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80226c4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80226c8:	fb09 f906 	mul.w	r9, r9, r6
 80226cc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80226d0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80226d4:	44d1      	add	r9, sl
 80226d6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80226da:	f108 0020 	add.w	r0, r8, #32
 80226de:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80226e2:	0a00      	lsrs	r0, r0, #8
 80226e4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80226e8:	4330      	orrs	r0, r6
 80226ea:	b28e      	uxth	r6, r1
 80226ec:	fa1f f98e 	uxth.w	r9, lr
 80226f0:	fb06 f809 	mul.w	r8, r6, r9
 80226f4:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80226f8:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80226fc:	0136      	lsls	r6, r6, #4
 80226fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022702:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022706:	9601      	str	r6, [sp, #4]
 8022708:	ea4a 0404 	orr.w	r4, sl, r4
 802270c:	fa1f f689 	uxth.w	r6, r9
 8022710:	9602      	str	r6, [sp, #8]
 8022712:	4626      	mov	r6, r4
 8022714:	fb11 f90e 	smulbb	r9, r1, lr
 8022718:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802271c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8022720:	f1ce 0410 	rsb	r4, lr, #16
 8022724:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022728:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802272c:	1a64      	subs	r4, r4, r1
 802272e:	ea4a 0202 	orr.w	r2, sl, r2
 8022732:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8022736:	434a      	muls	r2, r1
 8022738:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802273c:	fb04 2406 	mla	r4, r4, r6, r2
 8022740:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8022744:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022748:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802274c:	ea4a 0000 	orr.w	r0, sl, r0
 8022750:	fb09 4200 	mla	r2, r9, r0, r4
 8022754:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8022758:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802275c:	9801      	ldr	r0, [sp, #4]
 802275e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022762:	ea44 0b0b 	orr.w	fp, r4, fp
 8022766:	9c02      	ldr	r4, [sp, #8]
 8022768:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802276c:	1b00      	subs	r0, r0, r4
 802276e:	9c01      	ldr	r4, [sp, #4]
 8022770:	b280      	uxth	r0, r0
 8022772:	eba4 0608 	sub.w	r6, r4, r8
 8022776:	b2b6      	uxth	r6, r6
 8022778:	4373      	muls	r3, r6
 802277a:	fb0c 3300 	mla	r3, ip, r0, r3
 802277e:	9802      	ldr	r0, [sp, #8]
 8022780:	9903      	ldr	r1, [sp, #12]
 8022782:	fb00 3505 	mla	r5, r0, r5, r3
 8022786:	fb08 5707 	mla	r7, r8, r7, r5
 802278a:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802278e:	8809      	ldrh	r1, [r1, #0]
 8022790:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8022794:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8022798:	120b      	asrs	r3, r1, #8
 802279a:	b2ff      	uxtb	r7, r7
 802279c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80227a0:	437b      	muls	r3, r7
 80227a2:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80227a6:	10c8      	asrs	r0, r1, #3
 80227a8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80227ac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80227b0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80227b4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80227b8:	00c9      	lsls	r1, r1, #3
 80227ba:	4378      	muls	r0, r7
 80227bc:	ea42 0e0e 	orr.w	lr, r2, lr
 80227c0:	b2c9      	uxtb	r1, r1
 80227c2:	fa1f f28e 	uxth.w	r2, lr
 80227c6:	434f      	muls	r7, r1
 80227c8:	1c59      	adds	r1, r3, #1
 80227ca:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80227ce:	1213      	asrs	r3, r2, #8
 80227d0:	f023 0307 	bic.w	r3, r3, #7
 80227d4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80227d8:	1c41      	adds	r1, r0, #1
 80227da:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80227de:	10d1      	asrs	r1, r2, #3
 80227e0:	f021 0103 	bic.w	r1, r1, #3
 80227e4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80227e8:	021b      	lsls	r3, r3, #8
 80227ea:	00c9      	lsls	r1, r1, #3
 80227ec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80227f0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80227f4:	430b      	orrs	r3, r1
 80227f6:	1c79      	adds	r1, r7, #1
 80227f8:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80227fc:	00d2      	lsls	r2, r2, #3
 80227fe:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8022802:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022806:	431a      	orrs	r2, r3
 8022808:	9b03      	ldr	r3, [sp, #12]
 802280a:	801a      	strh	r2, [r3, #0]
 802280c:	b005      	add	sp, #20
 802280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022812:	f04f 0c00 	mov.w	ip, #0
 8022816:	4664      	mov	r4, ip
 8022818:	e6e5      	b.n	80225e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802281a:	2300      	movs	r3, #0
 802281c:	469c      	mov	ip, r3
 802281e:	461a      	mov	r2, r3
 8022820:	461c      	mov	r4, r3
 8022822:	e707      	b.n	8022634 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8022824:	2300      	movs	r3, #0
 8022826:	461a      	mov	r2, r3
 8022828:	e704      	b.n	8022634 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802282a:	460b      	mov	r3, r1
 802282c:	460a      	mov	r2, r1
 802282e:	e701      	b.n	8022634 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8022830:	2500      	movs	r5, #0
 8022832:	46ab      	mov	fp, r5
 8022834:	e72f      	b.n	8022696 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8022836:	2700      	movs	r7, #0
 8022838:	463d      	mov	r5, r7
 802283a:	4638      	mov	r0, r7
 802283c:	46bb      	mov	fp, r7
 802283e:	e754      	b.n	80226ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8022840:	4677      	mov	r7, lr
 8022842:	4675      	mov	r5, lr
 8022844:	4670      	mov	r0, lr
 8022846:	46f3      	mov	fp, lr
 8022848:	e74f      	b.n	80226ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802284a:	2700      	movs	r7, #0
 802284c:	4638      	mov	r0, r7
 802284e:	e74c      	b.n	80226ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8022850:	460f      	mov	r7, r1
 8022852:	4608      	mov	r0, r1
 8022854:	e749      	b.n	80226ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08022858 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802285c:	b093      	sub	sp, #76	; 0x4c
 802285e:	9210      	str	r2, [sp, #64]	; 0x40
 8022860:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022862:	9011      	str	r0, [sp, #68]	; 0x44
 8022864:	6850      	ldr	r0, [r2, #4]
 8022866:	910e      	str	r1, [sp, #56]	; 0x38
 8022868:	9306      	str	r3, [sp, #24]
 802286a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802286e:	fb00 1303 	mla	r3, r0, r3, r1
 8022872:	6812      	ldr	r2, [r2, #0]
 8022874:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022878:	9307      	str	r3, [sp, #28]
 802287a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802287c:	681b      	ldr	r3, [r3, #0]
 802287e:	9308      	str	r3, [sp, #32]
 8022880:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022882:	685b      	ldr	r3, [r3, #4]
 8022884:	9309      	str	r3, [sp, #36]	; 0x24
 8022886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022888:	2b00      	cmp	r3, #0
 802288a:	dc03      	bgt.n	8022894 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802288c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802288e:	2b00      	cmp	r3, #0
 8022890:	f340 83b4 	ble.w	8022ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022894:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022896:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802289a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802289e:	1e48      	subs	r0, r1, #1
 80228a0:	1e55      	subs	r5, r2, #1
 80228a2:	9b06      	ldr	r3, [sp, #24]
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	f340 8163 	ble.w	8022b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80228aa:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80228ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80228ae:	1436      	asrs	r6, r6, #16
 80228b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80228b4:	d406      	bmi.n	80228c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80228b6:	4286      	cmp	r6, r0
 80228b8:	da04      	bge.n	80228c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	db02      	blt.n	80228c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80228be:	42ab      	cmp	r3, r5
 80228c0:	f2c0 8157 	blt.w	8022b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80228c4:	3601      	adds	r6, #1
 80228c6:	f100 8144 	bmi.w	8022b52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80228ca:	42b1      	cmp	r1, r6
 80228cc:	f2c0 8141 	blt.w	8022b52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80228d0:	3301      	adds	r3, #1
 80228d2:	f100 813e 	bmi.w	8022b52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80228d6:	429a      	cmp	r2, r3
 80228d8:	f2c0 813b 	blt.w	8022b52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80228dc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80228e0:	9b06      	ldr	r3, [sp, #24]
 80228e2:	9f07      	ldr	r7, [sp, #28]
 80228e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80228e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	f340 8164 	ble.w	8022bb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80228ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80228f0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80228f2:	1418      	asrs	r0, r3, #16
 80228f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80228f6:	142d      	asrs	r5, r5, #16
 80228f8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80228fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80228fe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8022902:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022904:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8022908:	f100 81ee 	bmi.w	8022ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802290c:	f102 3eff 	add.w	lr, r2, #4294967295
 8022910:	4575      	cmp	r5, lr
 8022912:	f280 81e9 	bge.w	8022ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022916:	2800      	cmp	r0, #0
 8022918:	f2c0 81e6 	blt.w	8022ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802291c:	f103 3eff 	add.w	lr, r3, #4294967295
 8022920:	4570      	cmp	r0, lr
 8022922:	f280 81e1 	bge.w	8022ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022926:	b212      	sxth	r2, r2
 8022928:	fb00 5002 	mla	r0, r0, r2, r5
 802292c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802292e:	fa1f fe81 	uxth.w	lr, r1
 8022932:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8022936:	eb03 0a00 	add.w	sl, r3, r0
 802293a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802293e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8022942:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022946:	b29b      	uxth	r3, r3
 8022948:	f1bc 0f00 	cmp.w	ip, #0
 802294c:	f000 8179 	beq.w	8022c42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022950:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8022954:	eb0a 0b02 	add.w	fp, sl, r2
 8022958:	fa1f fa8c 	uxth.w	sl, ip
 802295c:	fb0a fe0e 	mul.w	lr, sl, lr
 8022960:	eba5 050e 	sub.w	r5, r5, lr
 8022964:	b2ad      	uxth	r5, r5
 8022966:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802296a:	fb08 f505 	mul.w	r5, r8, r5
 802296e:	fa1f fa8a 	uxth.w	sl, sl
 8022972:	eba3 030a 	sub.w	r3, r3, sl
 8022976:	b29b      	uxth	r3, r3
 8022978:	940a      	str	r4, [sp, #40]	; 0x28
 802297a:	fb09 5303 	mla	r3, r9, r3, r5
 802297e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022982:	940b      	str	r4, [sp, #44]	; 0x2c
 8022984:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022986:	fb0a 3304 	mla	r3, sl, r4, r3
 802298a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802298c:	fb0e 3304 	mla	r3, lr, r4, r3
 8022990:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022994:	2b00      	cmp	r3, #0
 8022996:	f000 80cf 	beq.w	8022b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802299a:	9c08      	ldr	r4, [sp, #32]
 802299c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80229a0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80229a4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80229a8:	f000 8150 	beq.w	8022c4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80229ac:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80229b0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80229b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80229b8:	fb09 f000 	mul.w	r0, r9, r0
 80229bc:	fb0a fe0e 	mul.w	lr, sl, lr
 80229c0:	f100 0b20 	add.w	fp, r0, #32
 80229c4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80229c8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80229cc:	44ce      	add	lr, r9
 80229ce:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80229d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80229d6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80229da:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80229de:	ea4e 0909 	orr.w	r9, lr, r9
 80229e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80229e6:	8868      	ldrh	r0, [r5, #2]
 80229e8:	d019      	beq.n	8022a1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80229ea:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80229ee:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80229f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80229f6:	fb08 f800 	mul.w	r8, r8, r0
 80229fa:	fb0a fe0e 	mul.w	lr, sl, lr
 80229fe:	f108 0b20 	add.w	fp, r8, #32
 8022a02:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8022a06:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022a0a:	4486      	add	lr, r0
 8022a0c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8022a10:	0a00      	lsrs	r0, r0, #8
 8022a12:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022a16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022a1a:	ea4e 0000 	orr.w	r0, lr, r0
 8022a1e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8022a22:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8022a26:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022a2a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022a2e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022a32:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022a36:	ea4e 0909 	orr.w	r9, lr, r9
 8022a3a:	ea4a 0000 	orr.w	r0, sl, r0
 8022a3e:	f1bc 0f00 	cmp.w	ip, #0
 8022a42:	f000 8105 	beq.w	8022c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8022a46:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8022a4a:	3a01      	subs	r2, #1
 8022a4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022a4e:	0052      	lsls	r2, r2, #1
 8022a50:	3202      	adds	r2, #2
 8022a52:	2cff      	cmp	r4, #255	; 0xff
 8022a54:	eb05 0e02 	add.w	lr, r5, r2
 8022a58:	5aaa      	ldrh	r2, [r5, r2]
 8022a5a:	d018      	beq.n	8022a8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022a5c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8022a60:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022a64:	fb04 fa02 	mul.w	sl, r4, r2
 8022a68:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022a6c:	fb08 f805 	mul.w	r8, r8, r5
 8022a70:	f10a 0520 	add.w	r5, sl, #32
 8022a74:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8022a78:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8022a7c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022a80:	4442      	add	r2, r8
 8022a82:	0a2d      	lsrs	r5, r5, #8
 8022a84:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8022a88:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022a8c:	432a      	orrs	r2, r5
 8022a8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022a90:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8022a94:	2cff      	cmp	r4, #255	; 0xff
 8022a96:	d01a      	beq.n	8022ace <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022a98:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022a9c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022aa0:	fb04 fa05 	mul.w	sl, r4, r5
 8022aa4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022aa8:	fb08 f80e 	mul.w	r8, r8, lr
 8022aac:	f10a 0e20 	add.w	lr, sl, #32
 8022ab0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8022ab4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8022ab8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022abc:	4445      	add	r5, r8
 8022abe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ac2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8022ac6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022aca:	ea45 050e 	orr.w	r5, r5, lr
 8022ace:	fb1c fe01 	smulbb	lr, ip, r1
 8022ad2:	f1cc 0810 	rsb	r8, ip, #16
 8022ad6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8022ada:	eba8 0801 	sub.w	r8, r8, r1
 8022ade:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8022ae2:	4341      	muls	r1, r0
 8022ae4:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8022ae8:	fb09 1108 	mla	r1, r9, r8, r1
 8022aec:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022af0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022af4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022af8:	ea4a 0202 	orr.w	r2, sl, r2
 8022afc:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022b00:	fb0c 1102 	mla	r1, ip, r2, r1
 8022b04:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022b08:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022b0c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022b10:	ea4b 0505 	orr.w	r5, fp, r5
 8022b14:	fb0e 1e05 	mla	lr, lr, r5, r1
 8022b18:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022b1c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022b20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022b24:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022b28:	ea42 0e0e 	orr.w	lr, r2, lr
 8022b2c:	fa1f f28e 	uxth.w	r2, lr
 8022b30:	2bff      	cmp	r3, #255	; 0xff
 8022b32:	f040 80a1 	bne.w	8022c78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8022b36:	803a      	strh	r2, [r7, #0]
 8022b38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022b3a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022b3c:	3702      	adds	r7, #2
 8022b3e:	4413      	add	r3, r2
 8022b40:	931d      	str	r3, [sp, #116]	; 0x74
 8022b42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022b44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b46:	441a      	add	r2, r3
 8022b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022b4a:	921e      	str	r2, [sp, #120]	; 0x78
 8022b4c:	3b01      	subs	r3, #1
 8022b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022b50:	e6c9      	b.n	80228e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022b52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022b54:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8022b56:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8022b58:	4433      	add	r3, r6
 8022b5a:	931d      	str	r3, [sp, #116]	; 0x74
 8022b5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b5e:	441c      	add	r4, r3
 8022b60:	9b06      	ldr	r3, [sp, #24]
 8022b62:	941e      	str	r4, [sp, #120]	; 0x78
 8022b64:	3b01      	subs	r3, #1
 8022b66:	9306      	str	r3, [sp, #24]
 8022b68:	9b07      	ldr	r3, [sp, #28]
 8022b6a:	3302      	adds	r3, #2
 8022b6c:	9307      	str	r3, [sp, #28]
 8022b6e:	e698      	b.n	80228a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022b70:	d028      	beq.n	8022bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022b72:	9b06      	ldr	r3, [sp, #24]
 8022b74:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022b76:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022b78:	3b01      	subs	r3, #1
 8022b7a:	fb00 5003 	mla	r0, r0, r3, r5
 8022b7e:	1400      	asrs	r0, r0, #16
 8022b80:	f53f aeac 	bmi.w	80228dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022b84:	3901      	subs	r1, #1
 8022b86:	4288      	cmp	r0, r1
 8022b88:	f6bf aea8 	bge.w	80228dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022b8c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022b8e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8022b90:	fb01 0303 	mla	r3, r1, r3, r0
 8022b94:	141b      	asrs	r3, r3, #16
 8022b96:	f53f aea1 	bmi.w	80228dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022b9a:	3a01      	subs	r2, #1
 8022b9c:	4293      	cmp	r3, r2
 8022b9e:	f6bf ae9d 	bge.w	80228dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022ba2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022ba6:	9b06      	ldr	r3, [sp, #24]
 8022ba8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022bac:	930f      	str	r3, [sp, #60]	; 0x3c
 8022bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022bb0:	2b00      	cmp	r3, #0
 8022bb2:	f300 80b6 	bgt.w	8022d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8022bb6:	9b06      	ldr	r3, [sp, #24]
 8022bb8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022bbc:	9b07      	ldr	r3, [sp, #28]
 8022bbe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022bc2:	9307      	str	r3, [sp, #28]
 8022bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	f340 8218 	ble.w	8022ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022bd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022bd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022bd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022bdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022be0:	eef0 6a62 	vmov.f32	s13, s5
 8022be4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022be8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022bec:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022bf0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022bf4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022bf8:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8022bfc:	eef0 6a43 	vmov.f32	s13, s6
 8022c00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022c04:	ee12 2a90 	vmov	r2, s5
 8022c08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022c0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022c0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c12:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c16:	ee13 2a10 	vmov	r2, s6
 8022c1a:	931f      	str	r3, [sp, #124]	; 0x7c
 8022c1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022c1e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8022c22:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c26:	9320      	str	r3, [sp, #128]	; 0x80
 8022c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022c2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022c2c:	3b01      	subs	r3, #1
 8022c2e:	930e      	str	r3, [sp, #56]	; 0x38
 8022c30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022c32:	bf08      	it	eq
 8022c34:	4613      	moveq	r3, r2
 8022c36:	eeb0 3a67 	vmov.f32	s6, s15
 8022c3a:	9306      	str	r3, [sp, #24]
 8022c3c:	eef0 2a47 	vmov.f32	s5, s14
 8022c40:	e621      	b.n	8022886 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022c42:	fb08 f505 	mul.w	r5, r8, r5
 8022c46:	fb09 5303 	mla	r3, r9, r3, r5
 8022c4a:	e6a1      	b.n	8022990 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022c4c:	4681      	mov	r9, r0
 8022c4e:	e6c8      	b.n	80229e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022c50:	f1c1 0210 	rsb	r2, r1, #16
 8022c54:	4341      	muls	r1, r0
 8022c56:	fb09 1902 	mla	r9, r9, r2, r1
 8022c5a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022c5e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8022c62:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022c66:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c6a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022c6e:	ea42 0909 	orr.w	r9, r2, r9
 8022c72:	fa1f f289 	uxth.w	r2, r9
 8022c76:	e75b      	b.n	8022b30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022c78:	43db      	mvns	r3, r3
 8022c7a:	f8b7 c000 	ldrh.w	ip, [r7]
 8022c7e:	fa5f fe83 	uxtb.w	lr, r3
 8022c82:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022c86:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022c8a:	fb00 f00e 	mul.w	r0, r0, lr
 8022c8e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022c92:	1c41      	adds	r1, r0, #1
 8022c94:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022c98:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022c9c:	fb05 f50e 	mul.w	r5, r5, lr
 8022ca0:	1211      	asrs	r1, r2, #8
 8022ca2:	f021 0107 	bic.w	r1, r1, #7
 8022ca6:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022caa:	48d6      	ldr	r0, [pc, #856]	; (8023004 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022cac:	b2c9      	uxtb	r1, r1
 8022cae:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8022cb2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8022cb6:	1c69      	adds	r1, r5, #1
 8022cb8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022cbc:	b2db      	uxtb	r3, r3
 8022cbe:	10d1      	asrs	r1, r2, #3
 8022cc0:	fb03 f30e 	mul.w	r3, r3, lr
 8022cc4:	f021 0103 	bic.w	r1, r1, #3
 8022cc8:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022ccc:	00c9      	lsls	r1, r1, #3
 8022cce:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022cd2:	4301      	orrs	r1, r0
 8022cd4:	1c58      	adds	r0, r3, #1
 8022cd6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022cda:	00d2      	lsls	r2, r2, #3
 8022cdc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022ce0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022ce4:	430a      	orrs	r2, r1
 8022ce6:	e726      	b.n	8022b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8022ce8:	f115 0e01 	adds.w	lr, r5, #1
 8022cec:	f53f af24 	bmi.w	8022b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022cf0:	4572      	cmp	r2, lr
 8022cf2:	f6ff af21 	blt.w	8022b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022cf6:	f110 0e01 	adds.w	lr, r0, #1
 8022cfa:	f53f af1d 	bmi.w	8022b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022cfe:	4573      	cmp	r3, lr
 8022d00:	f6ff af1a 	blt.w	8022b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022d04:	b21b      	sxth	r3, r3
 8022d06:	b212      	sxth	r2, r2
 8022d08:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8022d0c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8022d10:	9301      	str	r3, [sp, #4]
 8022d12:	9200      	str	r2, [sp, #0]
 8022d14:	4639      	mov	r1, r7
 8022d16:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8022d1a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022d1c:	f7ff fc24 	bl	8022568 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022d20:	e70a      	b.n	8022b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022d22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022d24:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022d28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022d2a:	fa1f fc82 	uxth.w	ip, r2
 8022d2e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022d32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022d34:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022d38:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022d3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022d3e:	141f      	asrs	r7, r3, #16
 8022d40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022d42:	141b      	asrs	r3, r3, #16
 8022d44:	fb01 3707 	mla	r7, r1, r7, r3
 8022d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d4a:	eb03 0a07 	add.w	sl, r3, r7
 8022d4e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022d52:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022d56:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022d5a:	b29b      	uxth	r3, r3
 8022d5c:	2d00      	cmp	r5, #0
 8022d5e:	f000 80fe 	beq.w	8022f5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8022d62:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8022d66:	eb0a 0b01 	add.w	fp, sl, r1
 8022d6a:	fa1f fa85 	uxth.w	sl, r5
 8022d6e:	fb0a fc0c 	mul.w	ip, sl, ip
 8022d72:	eba0 000c 	sub.w	r0, r0, ip
 8022d76:	b280      	uxth	r0, r0
 8022d78:	fb08 f000 	mul.w	r0, r8, r0
 8022d7c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022d80:	fa1f fa8a 	uxth.w	sl, sl
 8022d84:	eba3 030a 	sub.w	r3, r3, sl
 8022d88:	b29b      	uxth	r3, r3
 8022d8a:	fb09 0303 	mla	r3, r9, r3, r0
 8022d8e:	940c      	str	r4, [sp, #48]	; 0x30
 8022d90:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022d92:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022d96:	fb0a 3300 	mla	r3, sl, r0, r3
 8022d9a:	fb0c 3304 	mla	r3, ip, r4, r3
 8022d9e:	940d      	str	r4, [sp, #52]	; 0x34
 8022da0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022da4:	2b00      	cmp	r3, #0
 8022da6:	f000 80cc 	beq.w	8022f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022daa:	9808      	ldr	r0, [sp, #32]
 8022dac:	9c08      	ldr	r4, [sp, #32]
 8022dae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022db2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022db6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022dba:	f000 80d5 	beq.w	8022f68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022dbe:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022dc2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022dc6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022dca:	fb09 f707 	mul.w	r7, r9, r7
 8022dce:	fb0a fc0c 	mul.w	ip, sl, ip
 8022dd2:	f107 0b20 	add.w	fp, r7, #32
 8022dd6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022dda:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022dde:	44cc      	add	ip, r9
 8022de0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022de4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022de8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022dec:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022df0:	ea4c 0909 	orr.w	r9, ip, r9
 8022df4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022df8:	8847      	ldrh	r7, [r0, #2]
 8022dfa:	d019      	beq.n	8022e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8022dfc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022e00:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022e04:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022e08:	fb08 f807 	mul.w	r8, r8, r7
 8022e0c:	fb0a fc0c 	mul.w	ip, sl, ip
 8022e10:	f108 0b20 	add.w	fp, r8, #32
 8022e14:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022e18:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022e1c:	44bc      	add	ip, r7
 8022e1e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022e22:	0a3f      	lsrs	r7, r7, #8
 8022e24:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022e28:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022e2c:	ea4c 0707 	orr.w	r7, ip, r7
 8022e30:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022e34:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022e38:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022e3c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022e40:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022e44:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022e48:	ea4c 0909 	orr.w	r9, ip, r9
 8022e4c:	ea4a 0707 	orr.w	r7, sl, r7
 8022e50:	2d00      	cmp	r5, #0
 8022e52:	f000 808b 	beq.w	8022f6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8022e56:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022e5a:	3901      	subs	r1, #1
 8022e5c:	0049      	lsls	r1, r1, #1
 8022e5e:	3102      	adds	r1, #2
 8022e60:	eb00 0c01 	add.w	ip, r0, r1
 8022e64:	5a41      	ldrh	r1, [r0, r1]
 8022e66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022e68:	28ff      	cmp	r0, #255	; 0xff
 8022e6a:	d019      	beq.n	8022ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8022e6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022e6e:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022e72:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022e76:	fb04 fa01 	mul.w	sl, r4, r1
 8022e7a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022e7e:	fb08 f800 	mul.w	r8, r8, r0
 8022e82:	f10a 0020 	add.w	r0, sl, #32
 8022e86:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022e8a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022e8e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022e92:	4441      	add	r1, r8
 8022e94:	0a00      	lsrs	r0, r0, #8
 8022e96:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022e9a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022e9e:	4301      	orrs	r1, r0
 8022ea0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022ea2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022ea6:	2cff      	cmp	r4, #255	; 0xff
 8022ea8:	d01a      	beq.n	8022ee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8022eaa:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022eae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022eb2:	fb04 fa00 	mul.w	sl, r4, r0
 8022eb6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022eba:	fb08 f80c 	mul.w	r8, r8, ip
 8022ebe:	f10a 0c20 	add.w	ip, sl, #32
 8022ec2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022ec6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022eca:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022ece:	4440      	add	r0, r8
 8022ed0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ed4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022ed8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022edc:	ea40 000c 	orr.w	r0, r0, ip
 8022ee0:	fb15 fc02 	smulbb	ip, r5, r2
 8022ee4:	f1c5 0810 	rsb	r8, r5, #16
 8022ee8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022eec:	eba8 0802 	sub.w	r8, r8, r2
 8022ef0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022ef4:	437a      	muls	r2, r7
 8022ef6:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022efa:	fb09 2208 	mla	r2, r9, r8, r2
 8022efe:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022f02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022f06:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022f0a:	ea4a 0101 	orr.w	r1, sl, r1
 8022f0e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022f12:	fb05 2201 	mla	r2, r5, r1, r2
 8022f16:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022f1a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022f1e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022f22:	ea4b 0000 	orr.w	r0, fp, r0
 8022f26:	fb0c 2200 	mla	r2, ip, r0, r2
 8022f2a:	0d57      	lsrs	r7, r2, #21
 8022f2c:	0952      	lsrs	r2, r2, #5
 8022f2e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022f32:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022f36:	433a      	orrs	r2, r7
 8022f38:	2bff      	cmp	r3, #255	; 0xff
 8022f3a:	b292      	uxth	r2, r2
 8022f3c:	d127      	bne.n	8022f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8022f3e:	f8ae 2000 	strh.w	r2, [lr]
 8022f42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022f44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022f46:	f10e 0e02 	add.w	lr, lr, #2
 8022f4a:	4413      	add	r3, r2
 8022f4c:	931d      	str	r3, [sp, #116]	; 0x74
 8022f4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022f50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022f52:	441a      	add	r2, r3
 8022f54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022f56:	921e      	str	r2, [sp, #120]	; 0x78
 8022f58:	3b01      	subs	r3, #1
 8022f5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8022f5c:	e627      	b.n	8022bae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022f5e:	fb08 f000 	mul.w	r0, r8, r0
 8022f62:	fb09 0303 	mla	r3, r9, r3, r0
 8022f66:	e71b      	b.n	8022da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8022f68:	46b9      	mov	r9, r7
 8022f6a:	e743      	b.n	8022df4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8022f6c:	f1c2 0110 	rsb	r1, r2, #16
 8022f70:	437a      	muls	r2, r7
 8022f72:	fb09 2901 	mla	r9, r9, r1, r2
 8022f76:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022f7a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022f7e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022f82:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022f86:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022f8a:	4302      	orrs	r2, r0
 8022f8c:	e7d4      	b.n	8022f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8022f8e:	43db      	mvns	r3, r3
 8022f90:	f8be 7000 	ldrh.w	r7, [lr]
 8022f94:	fa5f fc83 	uxtb.w	ip, r3
 8022f98:	1238      	asrs	r0, r7, #8
 8022f9a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022f9e:	fb00 f00c 	mul.w	r0, r0, ip
 8022fa2:	10fd      	asrs	r5, r7, #3
 8022fa4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022fa8:	fb05 f10c 	mul.w	r1, r5, ip
 8022fac:	1c45      	adds	r5, r0, #1
 8022fae:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022fb2:	1215      	asrs	r5, r2, #8
 8022fb4:	f025 0507 	bic.w	r5, r5, #7
 8022fb8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022fbc:	00fb      	lsls	r3, r7, #3
 8022fbe:	1c4d      	adds	r5, r1, #1
 8022fc0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022fc4:	b2db      	uxtb	r3, r3
 8022fc6:	10d1      	asrs	r1, r2, #3
 8022fc8:	fb03 f30c 	mul.w	r3, r3, ip
 8022fcc:	f021 0103 	bic.w	r1, r1, #3
 8022fd0:	4c0c      	ldr	r4, [pc, #48]	; (8023004 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022fd2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022fd6:	b2c0      	uxtb	r0, r0
 8022fd8:	00c9      	lsls	r1, r1, #3
 8022fda:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022fde:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8022fe2:	4308      	orrs	r0, r1
 8022fe4:	1c59      	adds	r1, r3, #1
 8022fe6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022fea:	00d2      	lsls	r2, r2, #3
 8022fec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022ff0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8022ff4:	4318      	orrs	r0, r3
 8022ff6:	f8ae 0000 	strh.w	r0, [lr]
 8022ffa:	e7a2      	b.n	8022f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022ffc:	b013      	add	sp, #76	; 0x4c
 8022ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023002:	bf00      	nop
 8023004:	fffff800 	.word	0xfffff800

08023008 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8023008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802300c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8023010:	fb05 4c03 	mla	ip, r5, r3, r4
 8023014:	2d00      	cmp	r5, #0
 8023016:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802301a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 802301e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8023022:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8023026:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802302a:	8808      	ldrh	r0, [r1, #0]
 802302c:	f2c0 80a7 	blt.w	802317e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8023030:	45aa      	cmp	sl, r5
 8023032:	f340 80a4 	ble.w	802317e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8023036:	2c00      	cmp	r4, #0
 8023038:	f2c0 809f 	blt.w	802317a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802303c:	42a3      	cmp	r3, r4
 802303e:	f340 809c 	ble.w	802317a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8023042:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8023046:	1c62      	adds	r2, r4, #1
 8023048:	f100 809c 	bmi.w	8023184 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802304c:	4293      	cmp	r3, r2
 802304e:	f340 8099 	ble.w	8023184 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8023052:	f1b9 0f00 	cmp.w	r9, #0
 8023056:	f000 8095 	beq.w	8023184 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802305a:	f8be c002 	ldrh.w	ip, [lr, #2]
 802305e:	3501      	adds	r5, #1
 8023060:	f100 8094 	bmi.w	802318c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8023064:	45aa      	cmp	sl, r5
 8023066:	f340 8091 	ble.w	802318c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802306a:	2f00      	cmp	r7, #0
 802306c:	f000 808e 	beq.w	802318c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8023070:	2c00      	cmp	r4, #0
 8023072:	f2c0 8089 	blt.w	8023188 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8023076:	42a3      	cmp	r3, r4
 8023078:	f340 8086 	ble.w	8023188 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802307c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8023080:	3401      	adds	r4, #1
 8023082:	f100 8086 	bmi.w	8023192 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8023086:	42a3      	cmp	r3, r4
 8023088:	f340 8083 	ble.w	8023192 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802308c:	f1b9 0f00 	cmp.w	r9, #0
 8023090:	d07f      	beq.n	8023192 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8023092:	3301      	adds	r3, #1
 8023094:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8023098:	fb19 fe07 	smulbb	lr, r9, r7
 802309c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80230a0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80230a4:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80230a8:	ea44 0808 	orr.w	r8, r4, r8
 80230ac:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80230b0:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80230b4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80230b8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80230bc:	ea44 0c0c 	orr.w	ip, r4, ip
 80230c0:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80230c4:	fb04 f40c 	mul.w	r4, r4, ip
 80230c8:	f1c7 0210 	rsb	r2, r7, #16
 80230cc:	eba2 0209 	sub.w	r2, r2, r9
 80230d0:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80230d4:	fb02 4808 	mla	r8, r2, r8, r4
 80230d8:	b2b4      	uxth	r4, r6
 80230da:	43f6      	mvns	r6, r6
 80230dc:	041a      	lsls	r2, r3, #16
 80230de:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80230e2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80230e6:	4313      	orrs	r3, r2
 80230e8:	fb0e 8303 	mla	r3, lr, r3, r8
 80230ec:	042a      	lsls	r2, r5, #16
 80230ee:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80230f2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80230f6:	432a      	orrs	r2, r5
 80230f8:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80230fc:	fb07 3202 	mla	r2, r7, r2, r3
 8023100:	0d53      	lsrs	r3, r2, #21
 8023102:	0952      	lsrs	r2, r2, #5
 8023104:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023108:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802310c:	431a      	orrs	r2, r3
 802310e:	b293      	uxth	r3, r2
 8023110:	1202      	asrs	r2, r0, #8
 8023112:	b2f6      	uxtb	r6, r6
 8023114:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023118:	fb12 f206 	smulbb	r2, r2, r6
 802311c:	10c7      	asrs	r7, r0, #3
 802311e:	00c0      	lsls	r0, r0, #3
 8023120:	b2c0      	uxtb	r0, r0
 8023122:	121d      	asrs	r5, r3, #8
 8023124:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023128:	fb10 f006 	smulbb	r0, r0, r6
 802312c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023130:	fb17 f706 	smulbb	r7, r7, r6
 8023134:	fb05 2504 	mla	r5, r5, r4, r2
 8023138:	10da      	asrs	r2, r3, #3
 802313a:	00db      	lsls	r3, r3, #3
 802313c:	b2db      	uxtb	r3, r3
 802313e:	fb03 0004 	mla	r0, r3, r4, r0
 8023142:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023146:	fb02 7204 	mla	r2, r2, r4, r7
 802314a:	b2ad      	uxth	r5, r5
 802314c:	b280      	uxth	r0, r0
 802314e:	1c6b      	adds	r3, r5, #1
 8023150:	b292      	uxth	r2, r2
 8023152:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023156:	1c43      	adds	r3, r0, #1
 8023158:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802315c:	1c50      	adds	r0, r2, #1
 802315e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023162:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023166:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802316a:	0952      	lsrs	r2, r2, #5
 802316c:	432b      	orrs	r3, r5
 802316e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023172:	4313      	orrs	r3, r2
 8023174:	800b      	strh	r3, [r1, #0]
 8023176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802317a:	4680      	mov	r8, r0
 802317c:	e763      	b.n	8023046 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802317e:	4684      	mov	ip, r0
 8023180:	4680      	mov	r8, r0
 8023182:	e76c      	b.n	802305e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8023184:	4684      	mov	ip, r0
 8023186:	e76a      	b.n	802305e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8023188:	4605      	mov	r5, r0
 802318a:	e779      	b.n	8023080 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 802318c:	4603      	mov	r3, r0
 802318e:	4605      	mov	r5, r0
 8023190:	e782      	b.n	8023098 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8023192:	4603      	mov	r3, r0
 8023194:	e780      	b.n	8023098 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08023196 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802319a:	b093      	sub	sp, #76	; 0x4c
 802319c:	461d      	mov	r5, r3
 802319e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80231a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80231a4:	910a      	str	r1, [sp, #40]	; 0x28
 80231a6:	9210      	str	r2, [sp, #64]	; 0x40
 80231a8:	6859      	ldr	r1, [r3, #4]
 80231aa:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80231ae:	681b      	ldr	r3, [r3, #0]
 80231b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80231b2:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80231b6:	fb01 2707 	mla	r7, r1, r7, r2
 80231ba:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80231be:	9307      	str	r3, [sp, #28]
 80231c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80231c2:	9011      	str	r0, [sp, #68]	; 0x44
 80231c4:	681b      	ldr	r3, [r3, #0]
 80231c6:	9309      	str	r3, [sp, #36]	; 0x24
 80231c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80231ca:	43db      	mvns	r3, r3
 80231cc:	b2db      	uxtb	r3, r3
 80231ce:	9308      	str	r3, [sp, #32]
 80231d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231d2:	2b00      	cmp	r3, #0
 80231d4:	dc03      	bgt.n	80231de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80231d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80231d8:	2b00      	cmp	r3, #0
 80231da:	f340 8203 	ble.w	80235e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80231de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80231e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80231e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80231e8:	1e48      	subs	r0, r1, #1
 80231ea:	f102 3cff 	add.w	ip, r2, #4294967295
 80231ee:	2d00      	cmp	r5, #0
 80231f0:	f340 80da 	ble.w	80233a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80231f4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80231f8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80231fc:	d406      	bmi.n	802320c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80231fe:	4586      	cmp	lr, r0
 8023200:	da04      	bge.n	802320c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023202:	2b00      	cmp	r3, #0
 8023204:	db02      	blt.n	802320c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023206:	4563      	cmp	r3, ip
 8023208:	f2c0 80cf 	blt.w	80233aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802320c:	f11e 0e01 	adds.w	lr, lr, #1
 8023210:	f100 80c1 	bmi.w	8023396 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023214:	4571      	cmp	r1, lr
 8023216:	f2c0 80be 	blt.w	8023396 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802321a:	3301      	adds	r3, #1
 802321c:	f100 80bb 	bmi.w	8023396 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023220:	429a      	cmp	r2, r3
 8023222:	f2c0 80b8 	blt.w	8023396 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023226:	46a9      	mov	r9, r5
 8023228:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802322c:	f1b9 0f00 	cmp.w	r9, #0
 8023230:	f340 80d8 	ble.w	80233e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023234:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023236:	1421      	asrs	r1, r4, #16
 8023238:	ea4f 4026 	mov.w	r0, r6, asr #16
 802323c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023240:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023244:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023248:	f100 8111 	bmi.w	802346e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802324c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023250:	4551      	cmp	r1, sl
 8023252:	f280 810c 	bge.w	802346e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023256:	2800      	cmp	r0, #0
 8023258:	f2c0 8109 	blt.w	802346e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802325c:	f103 3aff 	add.w	sl, r3, #4294967295
 8023260:	4550      	cmp	r0, sl
 8023262:	f280 8104 	bge.w	802346e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023266:	fa0f f38e 	sxth.w	r3, lr
 802326a:	fb00 1103 	mla	r1, r0, r3, r1
 802326e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023270:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8023274:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8023278:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802327c:	f1bc 0f00 	cmp.w	ip, #0
 8023280:	d007      	beq.n	8023292 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8023282:	005b      	lsls	r3, r3, #1
 8023284:	eb0a 0003 	add.w	r0, sl, r3
 8023288:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802328c:	930c      	str	r3, [sp, #48]	; 0x30
 802328e:	8843      	ldrh	r3, [r0, #2]
 8023290:	930d      	str	r3, [sp, #52]	; 0x34
 8023292:	fb12 f30c 	smulbb	r3, r2, ip
 8023296:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802329a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802329e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80232a2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80232a6:	10db      	asrs	r3, r3, #3
 80232a8:	ea40 000e 	orr.w	r0, r0, lr
 80232ac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80232b0:	f1cc 0e10 	rsb	lr, ip, #16
 80232b4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80232b8:	ebae 0e02 	sub.w	lr, lr, r2
 80232bc:	ea4a 0101 	orr.w	r1, sl, r1
 80232c0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80232c4:	4351      	muls	r1, r2
 80232c6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80232ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80232cc:	fb0e 1e00 	mla	lr, lr, r0, r1
 80232d0:	0410      	lsls	r0, r2, #16
 80232d2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80232d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80232da:	4310      	orrs	r0, r2
 80232dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80232de:	fb03 e000 	mla	r0, r3, r0, lr
 80232e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80232e4:	0412      	lsls	r2, r2, #16
 80232e6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80232ea:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80232ee:	ea42 020e 	orr.w	r2, r2, lr
 80232f2:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80232f6:	fb03 0302 	mla	r3, r3, r2, r0
 80232fa:	f8b8 0000 	ldrh.w	r0, [r8]
 80232fe:	9f08      	ldr	r7, [sp, #32]
 8023300:	0d5a      	lsrs	r2, r3, #21
 8023302:	1201      	asrs	r1, r0, #8
 8023304:	095b      	lsrs	r3, r3, #5
 8023306:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802330a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802330e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023312:	4313      	orrs	r3, r2
 8023314:	fb11 f107 	smulbb	r1, r1, r7
 8023318:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802331c:	00c0      	lsls	r0, r0, #3
 802331e:	b29b      	uxth	r3, r3
 8023320:	b2c0      	uxtb	r0, r0
 8023322:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8023326:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802332a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802332e:	fb10 f007 	smulbb	r0, r0, r7
 8023332:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023336:	fb1e fe07 	smulbb	lr, lr, r7
 802333a:	fb0c 1c02 	mla	ip, ip, r2, r1
 802333e:	10d9      	asrs	r1, r3, #3
 8023340:	00db      	lsls	r3, r3, #3
 8023342:	b2db      	uxtb	r3, r3
 8023344:	fb03 0302 	mla	r3, r3, r2, r0
 8023348:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802334c:	fb01 e102 	mla	r1, r1, r2, lr
 8023350:	fa1f fc8c 	uxth.w	ip, ip
 8023354:	b29a      	uxth	r2, r3
 8023356:	f10c 0301 	add.w	r3, ip, #1
 802335a:	b289      	uxth	r1, r1
 802335c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023360:	1c53      	adds	r3, r2, #1
 8023362:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023366:	1c4a      	adds	r2, r1, #1
 8023368:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802336c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023370:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023374:	0949      	lsrs	r1, r1, #5
 8023376:	ea43 030c 	orr.w	r3, r3, ip
 802337a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802337e:	430b      	orrs	r3, r1
 8023380:	f8a8 3000 	strh.w	r3, [r8]
 8023384:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023386:	f108 0802 	add.w	r8, r8, #2
 802338a:	441c      	add	r4, r3
 802338c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802338e:	f109 39ff 	add.w	r9, r9, #4294967295
 8023392:	441e      	add	r6, r3
 8023394:	e74a      	b.n	802322c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023396:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023398:	3d01      	subs	r5, #1
 802339a:	441c      	add	r4, r3
 802339c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802339e:	441e      	add	r6, r3
 80233a0:	9b07      	ldr	r3, [sp, #28]
 80233a2:	3302      	adds	r3, #2
 80233a4:	9307      	str	r3, [sp, #28]
 80233a6:	e722      	b.n	80231ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80233a8:	d022      	beq.n	80233f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80233aa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80233ac:	1e6b      	subs	r3, r5, #1
 80233ae:	fb00 4003 	mla	r0, r0, r3, r4
 80233b2:	1400      	asrs	r0, r0, #16
 80233b4:	f53f af37 	bmi.w	8023226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80233b8:	3901      	subs	r1, #1
 80233ba:	4288      	cmp	r0, r1
 80233bc:	f6bf af33 	bge.w	8023226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80233c0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80233c2:	fb01 6303 	mla	r3, r1, r3, r6
 80233c6:	141b      	asrs	r3, r3, #16
 80233c8:	f53f af2d 	bmi.w	8023226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80233cc:	3a01      	subs	r2, #1
 80233ce:	4293      	cmp	r3, r2
 80233d0:	f6bf af29 	bge.w	8023226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80233d4:	46a8      	mov	r8, r5
 80233d6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80233da:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80233de:	f1b8 0f00 	cmp.w	r8, #0
 80233e2:	dc5e      	bgt.n	80234a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80233e4:	9b07      	ldr	r3, [sp, #28]
 80233e6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80233ea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80233ee:	9307      	str	r3, [sp, #28]
 80233f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	f340 80f6 	ble.w	80235e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80233f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80233fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023400:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023404:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023408:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802340c:	eef0 6a62 	vmov.f32	s13, s5
 8023410:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023414:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023418:	ee61 7a27 	vmul.f32	s15, s2, s15
 802341c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023420:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023424:	ee16 4a90 	vmov	r4, s13
 8023428:	eef0 6a43 	vmov.f32	s13, s6
 802342c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023430:	ee12 2a90 	vmov	r2, s5
 8023434:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023438:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802343a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802343e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023442:	ee13 2a10 	vmov	r2, s6
 8023446:	931f      	str	r3, [sp, #124]	; 0x7c
 8023448:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802344a:	ee16 6a90 	vmov	r6, s13
 802344e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023452:	9320      	str	r3, [sp, #128]	; 0x80
 8023454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023456:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023458:	3b01      	subs	r3, #1
 802345a:	930a      	str	r3, [sp, #40]	; 0x28
 802345c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802345e:	bf0c      	ite	eq
 8023460:	4615      	moveq	r5, r2
 8023462:	461d      	movne	r5, r3
 8023464:	eeb0 3a67 	vmov.f32	s6, s15
 8023468:	eef0 2a47 	vmov.f32	s5, s14
 802346c:	e6b0      	b.n	80231d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802346e:	f111 0a01 	adds.w	sl, r1, #1
 8023472:	d487      	bmi.n	8023384 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023474:	45d6      	cmp	lr, sl
 8023476:	db85      	blt.n	8023384 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023478:	f110 0a01 	adds.w	sl, r0, #1
 802347c:	d482      	bmi.n	8023384 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802347e:	4553      	cmp	r3, sl
 8023480:	db80      	blt.n	8023384 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023482:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023484:	b21b      	sxth	r3, r3
 8023486:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802348a:	9101      	str	r1, [sp, #4]
 802348c:	9300      	str	r3, [sp, #0]
 802348e:	e9cd c704 	strd	ip, r7, [sp, #16]
 8023492:	fa0f f38e 	sxth.w	r3, lr
 8023496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023498:	4641      	mov	r1, r8
 802349a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802349c:	f7ff fdb4 	bl	8023008 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80234a0:	e770      	b.n	8023384 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80234a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80234a4:	1430      	asrs	r0, r6, #16
 80234a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80234aa:	1423      	asrs	r3, r4, #16
 80234ac:	fb01 3000 	mla	r0, r1, r0, r3
 80234b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80234b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80234b4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80234b8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80234bc:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80234c0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80234c4:	8858      	ldrh	r0, [r3, #2]
 80234c6:	f1be 0f00 	cmp.w	lr, #0
 80234ca:	d00b      	beq.n	80234e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80234cc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80234d0:	3901      	subs	r1, #1
 80234d2:	0049      	lsls	r1, r1, #1
 80234d4:	3102      	adds	r1, #2
 80234d6:	eb03 0b01 	add.w	fp, r3, r1
 80234da:	5a5b      	ldrh	r3, [r3, r1]
 80234dc:	930e      	str	r3, [sp, #56]	; 0x38
 80234de:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80234e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80234e4:	fb12 f30e 	smulbb	r3, r2, lr
 80234e8:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80234ec:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80234f0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80234f4:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80234f8:	10db      	asrs	r3, r3, #3
 80234fa:	ea41 010c 	orr.w	r1, r1, ip
 80234fe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023502:	f1ce 0c10 	rsb	ip, lr, #16
 8023506:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802350a:	ebac 0c02 	sub.w	ip, ip, r2
 802350e:	ea4b 0000 	orr.w	r0, fp, r0
 8023512:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023516:	4350      	muls	r0, r2
 8023518:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802351c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802351e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023522:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023526:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802352a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802352e:	ea4b 0101 	orr.w	r1, fp, r1
 8023532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023534:	fb03 c101 	mla	r1, r3, r1, ip
 8023538:	980e      	ldr	r0, [sp, #56]	; 0x38
 802353a:	0412      	lsls	r2, r2, #16
 802353c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023540:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023544:	4302      	orrs	r2, r0
 8023546:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802354a:	fb03 1202 	mla	r2, r3, r2, r1
 802354e:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8023552:	0952      	lsrs	r2, r2, #5
 8023554:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8023558:	f8b9 2000 	ldrh.w	r2, [r9]
 802355c:	9f08      	ldr	r7, [sp, #32]
 802355e:	1211      	asrs	r1, r2, #8
 8023560:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023564:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023568:	fb11 f107 	smulbb	r1, r1, r7
 802356c:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8023570:	ea4b 0303 	orr.w	r3, fp, r3
 8023574:	00d2      	lsls	r2, r2, #3
 8023576:	b29b      	uxth	r3, r3
 8023578:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802357c:	b2d2      	uxtb	r2, r2
 802357e:	1218      	asrs	r0, r3, #8
 8023580:	fb1c fc07 	smulbb	ip, ip, r7
 8023584:	fb12 f207 	smulbb	r2, r2, r7
 8023588:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802358c:	fb00 100a 	mla	r0, r0, sl, r1
 8023590:	10d9      	asrs	r1, r3, #3
 8023592:	00db      	lsls	r3, r3, #3
 8023594:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023598:	b2db      	uxtb	r3, r3
 802359a:	fb01 c10a 	mla	r1, r1, sl, ip
 802359e:	fb03 230a 	mla	r3, r3, sl, r2
 80235a2:	b280      	uxth	r0, r0
 80235a4:	b29b      	uxth	r3, r3
 80235a6:	b289      	uxth	r1, r1
 80235a8:	1c42      	adds	r2, r0, #1
 80235aa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80235ae:	f101 0c01 	add.w	ip, r1, #1
 80235b2:	1c5a      	adds	r2, r3, #1
 80235b4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80235b8:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80235bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80235be:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80235c2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80235c6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80235ca:	4310      	orrs	r0, r2
 80235cc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80235d0:	441c      	add	r4, r3
 80235d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80235d4:	ea40 000c 	orr.w	r0, r0, ip
 80235d8:	f829 0b02 	strh.w	r0, [r9], #2
 80235dc:	441e      	add	r6, r3
 80235de:	f108 38ff 	add.w	r8, r8, #4294967295
 80235e2:	e6fc      	b.n	80233de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80235e4:	b013      	add	sp, #76	; 0x4c
 80235e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080235ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80235ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80235ee:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80235f2:	fb0e 4703 	mla	r7, lr, r3, r4
 80235f6:	f1be 0f00 	cmp.w	lr, #0
 80235fa:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80235fe:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8023602:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8023606:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802360a:	8808      	ldrh	r0, [r1, #0]
 802360c:	db60      	blt.n	80236d0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802360e:	45f1      	cmp	r9, lr
 8023610:	dd5e      	ble.n	80236d0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023612:	2c00      	cmp	r4, #0
 8023614:	db5a      	blt.n	80236cc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8023616:	42a3      	cmp	r3, r4
 8023618:	dd58      	ble.n	80236cc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802361a:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802361e:	1c62      	adds	r2, r4, #1
 8023620:	d459      	bmi.n	80236d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8023622:	4293      	cmp	r3, r2
 8023624:	dd57      	ble.n	80236d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8023626:	2d00      	cmp	r5, #0
 8023628:	d055      	beq.n	80236d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802362a:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802362e:	f11e 0e01 	adds.w	lr, lr, #1
 8023632:	d454      	bmi.n	80236de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023634:	45f1      	cmp	r9, lr
 8023636:	dd52      	ble.n	80236de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023638:	2e00      	cmp	r6, #0
 802363a:	d050      	beq.n	80236de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802363c:	2c00      	cmp	r4, #0
 802363e:	db4c      	blt.n	80236da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8023640:	42a3      	cmp	r3, r4
 8023642:	dd4a      	ble.n	80236da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8023644:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8023648:	3401      	adds	r4, #1
 802364a:	d405      	bmi.n	8023658 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802364c:	42a3      	cmp	r3, r4
 802364e:	dd03      	ble.n	8023658 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023650:	b115      	cbz	r5, 8023658 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023652:	3301      	adds	r3, #1
 8023654:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8023658:	fb15 f406 	smulbb	r4, r5, r6
 802365c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8023660:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023664:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8023668:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802366c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8023670:	ea43 0c0c 	orr.w	ip, r3, ip
 8023674:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023678:	f1c6 0310 	rsb	r3, r6, #16
 802367c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023680:	1b5b      	subs	r3, r3, r5
 8023682:	ea4e 0707 	orr.w	r7, lr, r7
 8023686:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802368a:	437d      	muls	r5, r7
 802368c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023690:	fb03 5c0c 	mla	ip, r3, ip, r5
 8023694:	0403      	lsls	r3, r0, #16
 8023696:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802369a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802369e:	4318      	orrs	r0, r3
 80236a0:	fb04 c000 	mla	r0, r4, r0, ip
 80236a4:	0413      	lsls	r3, r2, #16
 80236a6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80236aa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80236ae:	4313      	orrs	r3, r2
 80236b0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80236b4:	fb06 0003 	mla	r0, r6, r3, r0
 80236b8:	0d43      	lsrs	r3, r0, #21
 80236ba:	0940      	lsrs	r0, r0, #5
 80236bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80236c0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80236c4:	4318      	orrs	r0, r3
 80236c6:	8008      	strh	r0, [r1, #0]
 80236c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80236cc:	4684      	mov	ip, r0
 80236ce:	e7a6      	b.n	802361e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80236d0:	4607      	mov	r7, r0
 80236d2:	4684      	mov	ip, r0
 80236d4:	e7ab      	b.n	802362e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80236d6:	4607      	mov	r7, r0
 80236d8:	e7a9      	b.n	802362e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80236da:	4602      	mov	r2, r0
 80236dc:	e7b4      	b.n	8023648 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80236de:	4602      	mov	r2, r0
 80236e0:	e7ba      	b.n	8023658 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080236e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80236e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236e6:	b08f      	sub	sp, #60	; 0x3c
 80236e8:	461d      	mov	r5, r3
 80236ea:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 80236ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80236f0:	9107      	str	r1, [sp, #28]
 80236f2:	6859      	ldr	r1, [r3, #4]
 80236f4:	920c      	str	r2, [sp, #48]	; 0x30
 80236f6:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 80236fa:	fb01 2707 	mla	r7, r1, r7, r2
 80236fe:	681b      	ldr	r3, [r3, #0]
 8023700:	900d      	str	r0, [sp, #52]	; 0x34
 8023702:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8023706:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023708:	f8d3 8000 	ldr.w	r8, [r3]
 802370c:	9b07      	ldr	r3, [sp, #28]
 802370e:	2b00      	cmp	r3, #0
 8023710:	dc03      	bgt.n	802371a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023714:	2b00      	cmp	r3, #0
 8023716:	f340 8181 	ble.w	8023a1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802371a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802371c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023720:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023724:	1e48      	subs	r0, r1, #1
 8023726:	f102 3cff 	add.w	ip, r2, #4294967295
 802372a:	2d00      	cmp	r5, #0
 802372c:	f340 809b 	ble.w	8023866 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8023730:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023734:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023738:	d406      	bmi.n	8023748 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802373a:	4586      	cmp	lr, r0
 802373c:	da04      	bge.n	8023748 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802373e:	2b00      	cmp	r3, #0
 8023740:	db02      	blt.n	8023748 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023742:	4563      	cmp	r3, ip
 8023744:	f2c0 8090 	blt.w	8023868 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023748:	f11e 0e01 	adds.w	lr, lr, #1
 802374c:	f100 8084 	bmi.w	8023858 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8023750:	4571      	cmp	r1, lr
 8023752:	f2c0 8081 	blt.w	8023858 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8023756:	3301      	adds	r3, #1
 8023758:	d47e      	bmi.n	8023858 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802375a:	429a      	cmp	r2, r3
 802375c:	db7c      	blt.n	8023858 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802375e:	46aa      	mov	sl, r5
 8023760:	46b9      	mov	r9, r7
 8023762:	f1ba 0f00 	cmp.w	sl, #0
 8023766:	f340 8099 	ble.w	802389c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802376a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802376c:	1421      	asrs	r1, r4, #16
 802376e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8023772:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023776:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802377a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802377e:	f100 80d0 	bmi.w	8023922 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023782:	f10e 3bff 	add.w	fp, lr, #4294967295
 8023786:	4559      	cmp	r1, fp
 8023788:	f280 80cb 	bge.w	8023922 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802378c:	2800      	cmp	r0, #0
 802378e:	f2c0 80c8 	blt.w	8023922 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023792:	f103 3bff 	add.w	fp, r3, #4294967295
 8023796:	4558      	cmp	r0, fp
 8023798:	f280 80c3 	bge.w	8023922 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802379c:	fa0f fe8e 	sxth.w	lr, lr
 80237a0:	fb00 110e 	mla	r1, r0, lr, r1
 80237a4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80237a8:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80237ac:	8841      	ldrh	r1, [r0, #2]
 80237ae:	f1bc 0f00 	cmp.w	ip, #0
 80237b2:	d00b      	beq.n	80237cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80237b4:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80237b8:	3b01      	subs	r3, #1
 80237ba:	005b      	lsls	r3, r3, #1
 80237bc:	3302      	adds	r3, #2
 80237be:	eb00 0e03 	add.w	lr, r0, r3
 80237c2:	5ac3      	ldrh	r3, [r0, r3]
 80237c4:	9308      	str	r3, [sp, #32]
 80237c6:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80237ca:	9309      	str	r3, [sp, #36]	; 0x24
 80237cc:	fb12 f30c 	smulbb	r3, r2, ip
 80237d0:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80237d4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80237d8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80237dc:	ea40 000b 	orr.w	r0, r0, fp
 80237e0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80237e4:	10db      	asrs	r3, r3, #3
 80237e6:	f1cc 0e10 	rsb	lr, ip, #16
 80237ea:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80237ee:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80237f2:	ebae 0e02 	sub.w	lr, lr, r2
 80237f6:	ea4b 0101 	orr.w	r1, fp, r1
 80237fa:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80237fe:	4351      	muls	r1, r2
 8023800:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023806:	fb0e 1e00 	mla	lr, lr, r0, r1
 802380a:	0410      	lsls	r0, r2, #16
 802380c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023810:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023814:	4310      	orrs	r0, r2
 8023816:	9a08      	ldr	r2, [sp, #32]
 8023818:	fb03 e000 	mla	r0, r3, r0, lr
 802381c:	9908      	ldr	r1, [sp, #32]
 802381e:	0412      	lsls	r2, r2, #16
 8023820:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023824:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8023828:	ea42 020e 	orr.w	r2, r2, lr
 802382c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023830:	fb03 0302 	mla	r3, r3, r2, r0
 8023834:	0d5a      	lsrs	r2, r3, #21
 8023836:	095b      	lsrs	r3, r3, #5
 8023838:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802383c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023840:	4313      	orrs	r3, r2
 8023842:	f8a9 3000 	strh.w	r3, [r9]
 8023846:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023848:	f109 0902 	add.w	r9, r9, #2
 802384c:	441c      	add	r4, r3
 802384e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023850:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023854:	441e      	add	r6, r3
 8023856:	e784      	b.n	8023762 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8023858:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802385a:	3d01      	subs	r5, #1
 802385c:	441c      	add	r4, r3
 802385e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023860:	3702      	adds	r7, #2
 8023862:	441e      	add	r6, r3
 8023864:	e761      	b.n	802372a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023866:	d01d      	beq.n	80238a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023868:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802386a:	1e6b      	subs	r3, r5, #1
 802386c:	fb00 4003 	mla	r0, r0, r3, r4
 8023870:	1400      	asrs	r0, r0, #16
 8023872:	f53f af74 	bmi.w	802375e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023876:	3901      	subs	r1, #1
 8023878:	4288      	cmp	r0, r1
 802387a:	f6bf af70 	bge.w	802375e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802387e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023880:	fb01 6303 	mla	r3, r1, r3, r6
 8023884:	141b      	asrs	r3, r3, #16
 8023886:	f53f af6a 	bmi.w	802375e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802388a:	3a01      	subs	r2, #1
 802388c:	4293      	cmp	r3, r2
 802388e:	f6bf af66 	bge.w	802375e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023892:	46a9      	mov	r9, r5
 8023894:	46ba      	mov	sl, r7
 8023896:	f1b9 0f00 	cmp.w	r9, #0
 802389a:	dc5a      	bgt.n	8023952 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 802389c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80238a0:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80238a4:	9b07      	ldr	r3, [sp, #28]
 80238a6:	2b00      	cmp	r3, #0
 80238a8:	f340 80b8 	ble.w	8023a1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80238ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80238b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80238b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80238b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80238bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80238c0:	eef0 6a62 	vmov.f32	s13, s5
 80238c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80238c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80238cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80238d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80238d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80238d8:	ee16 4a90 	vmov	r4, s13
 80238dc:	eef0 6a43 	vmov.f32	s13, s6
 80238e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80238e4:	ee12 2a90 	vmov	r2, s5
 80238e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80238ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80238ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80238f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80238f6:	ee13 2a10 	vmov	r2, s6
 80238fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80238fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80238fe:	ee16 6a90 	vmov	r6, s13
 8023902:	fb92 f3f3 	sdiv	r3, r2, r3
 8023906:	931c      	str	r3, [sp, #112]	; 0x70
 8023908:	9b07      	ldr	r3, [sp, #28]
 802390a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802390c:	3b01      	subs	r3, #1
 802390e:	9307      	str	r3, [sp, #28]
 8023910:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023912:	bf0c      	ite	eq
 8023914:	4615      	moveq	r5, r2
 8023916:	461d      	movne	r5, r3
 8023918:	eeb0 3a67 	vmov.f32	s6, s15
 802391c:	eef0 2a47 	vmov.f32	s5, s14
 8023920:	e6f4      	b.n	802370c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8023922:	f111 0b01 	adds.w	fp, r1, #1
 8023926:	d48e      	bmi.n	8023846 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023928:	45de      	cmp	lr, fp
 802392a:	db8c      	blt.n	8023846 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802392c:	f110 0b01 	adds.w	fp, r0, #1
 8023930:	d489      	bmi.n	8023846 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023932:	455b      	cmp	r3, fp
 8023934:	db87      	blt.n	8023846 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023936:	b21b      	sxth	r3, r3
 8023938:	e9cd 1001 	strd	r1, r0, [sp, #4]
 802393c:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8023940:	9300      	str	r3, [sp, #0]
 8023942:	4642      	mov	r2, r8
 8023944:	fa0f f38e 	sxth.w	r3, lr
 8023948:	4649      	mov	r1, r9
 802394a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802394c:	f7ff fe4d 	bl	80235ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8023950:	e779      	b.n	8023846 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023952:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023954:	1420      	asrs	r0, r4, #16
 8023956:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802395a:	1431      	asrs	r1, r6, #16
 802395c:	fb03 0101 	mla	r1, r3, r1, r0
 8023960:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023964:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8023968:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802396c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023970:	8841      	ldrh	r1, [r0, #2]
 8023972:	f1be 0f00 	cmp.w	lr, #0
 8023976:	d00b      	beq.n	8023990 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8023978:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802397c:	3b01      	subs	r3, #1
 802397e:	005b      	lsls	r3, r3, #1
 8023980:	3302      	adds	r3, #2
 8023982:	eb00 0b03 	add.w	fp, r0, r3
 8023986:	5ac3      	ldrh	r3, [r0, r3]
 8023988:	930a      	str	r3, [sp, #40]	; 0x28
 802398a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802398e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023990:	fb12 f30e 	smulbb	r3, r2, lr
 8023994:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8023998:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802399c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80239a0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80239a4:	10db      	asrs	r3, r3, #3
 80239a6:	ea40 000c 	orr.w	r0, r0, ip
 80239aa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80239ae:	f1ce 0c10 	rsb	ip, lr, #16
 80239b2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80239b6:	ebac 0c02 	sub.w	ip, ip, r2
 80239ba:	ea4b 0101 	orr.w	r1, fp, r1
 80239be:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80239c2:	4351      	muls	r1, r2
 80239c4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80239c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80239ca:	fb0c 1c00 	mla	ip, ip, r0, r1
 80239ce:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80239d2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80239d6:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80239da:	ea4b 0000 	orr.w	r0, fp, r0
 80239de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80239e0:	fb03 c000 	mla	r0, r3, r0, ip
 80239e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80239e6:	0412      	lsls	r2, r2, #16
 80239e8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80239ec:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80239f0:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80239f4:	ea42 0b0b 	orr.w	fp, r2, fp
 80239f8:	fb03 000b 	mla	r0, r3, fp, r0
 80239fc:	0d43      	lsrs	r3, r0, #21
 80239fe:	0940      	lsrs	r0, r0, #5
 8023a00:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a04:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023a08:	4318      	orrs	r0, r3
 8023a0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023a0c:	f82a 0b02 	strh.w	r0, [sl], #2
 8023a10:	441c      	add	r4, r3
 8023a12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023a14:	f109 39ff 	add.w	r9, r9, #4294967295
 8023a18:	441e      	add	r6, r3
 8023a1a:	e73c      	b.n	8023896 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023a1c:	b00f      	add	sp, #60	; 0x3c
 8023a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023a22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8023a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a26:	b085      	sub	sp, #20
 8023a28:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8023a2c:	9102      	str	r1, [sp, #8]
 8023a2e:	fb04 7103 	mla	r1, r4, r3, r7
 8023a32:	2c00      	cmp	r4, #0
 8023a34:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8023a38:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023a3c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023a40:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8023a44:	f2c0 811b 	blt.w	8023c7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8023a48:	45a6      	cmp	lr, r4
 8023a4a:	f340 8118 	ble.w	8023c7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8023a4e:	2f00      	cmp	r7, #0
 8023a50:	f2c0 8113 	blt.w	8023c7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8023a54:	42bb      	cmp	r3, r7
 8023a56:	f340 8110 	ble.w	8023c7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8023a5a:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8023a5e:	1c7a      	adds	r2, r7, #1
 8023a60:	f100 8110 	bmi.w	8023c84 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8023a64:	4293      	cmp	r3, r2
 8023a66:	f340 810d 	ble.w	8023c84 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8023a6a:	2e00      	cmp	r6, #0
 8023a6c:	f000 810c 	beq.w	8023c88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8023a70:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023a74:	3401      	adds	r4, #1
 8023a76:	f100 810b 	bmi.w	8023c90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8023a7a:	45a6      	cmp	lr, r4
 8023a7c:	f340 8108 	ble.w	8023c90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8023a80:	2800      	cmp	r0, #0
 8023a82:	f000 8108 	beq.w	8023c96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8023a86:	2f00      	cmp	r7, #0
 8023a88:	f2c0 8100 	blt.w	8023c8c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8023a8c:	42bb      	cmp	r3, r7
 8023a8e:	f340 80fd 	ble.w	8023c8c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8023a92:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023a96:	3701      	adds	r7, #1
 8023a98:	f100 8100 	bmi.w	8023c9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023a9c:	42bb      	cmp	r3, r7
 8023a9e:	f340 80fd 	ble.w	8023c9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023aa2:	2e00      	cmp	r6, #0
 8023aa4:	f000 80fc 	beq.w	8023ca0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8023aa8:	3301      	adds	r3, #1
 8023aaa:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8023aae:	b2b6      	uxth	r6, r6
 8023ab0:	b280      	uxth	r0, r0
 8023ab2:	fb00 fe06 	mul.w	lr, r0, r6
 8023ab6:	0136      	lsls	r6, r6, #4
 8023ab8:	eba6 070e 	sub.w	r7, r6, lr
 8023abc:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023ac0:	b2bf      	uxth	r7, r7
 8023ac2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8023ac6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023aca:	fb0a f607 	mul.w	r6, sl, r7
 8023ace:	b280      	uxth	r0, r0
 8023ad0:	1a1b      	subs	r3, r3, r0
 8023ad2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023ad6:	b29b      	uxth	r3, r3
 8023ad8:	fb0b 6603 	mla	r6, fp, r3, r6
 8023adc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023ae0:	fb00 6609 	mla	r6, r0, r9, r6
 8023ae4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023ae8:	fb0e 6608 	mla	r6, lr, r8, r6
 8023aec:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023af0:	9600      	str	r6, [sp, #0]
 8023af2:	2e00      	cmp	r6, #0
 8023af4:	f000 80be 	beq.w	8023c74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8023af8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023afc:	fb0b fc0c 	mul.w	ip, fp, ip
 8023b00:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023b04:	fb0b f505 	mul.w	r5, fp, r5
 8023b08:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023b0c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023b10:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b14:	44dc      	add	ip, fp
 8023b16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b1a:	9501      	str	r5, [sp, #4]
 8023b1c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023b20:	9503      	str	r5, [sp, #12]
 8023b22:	9d01      	ldr	r5, [sp, #4]
 8023b24:	9e02      	ldr	r6, [sp, #8]
 8023b26:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8023b2a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023b2e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023b32:	fb0a fc0c 	mul.w	ip, sl, ip
 8023b36:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023b3a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023b3e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023b42:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b46:	4465      	add	r5, ip
 8023b48:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023b4c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023b50:	fb09 fc0c 	mul.w	ip, r9, ip
 8023b54:	fb09 f904 	mul.w	r9, r9, r4
 8023b58:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8023b5c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023b60:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023b64:	fb08 f404 	mul.w	r4, r8, r4
 8023b68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b6c:	fb08 f802 	mul.w	r8, r8, r2
 8023b70:	0a2d      	lsrs	r5, r5, #8
 8023b72:	0a22      	lsrs	r2, r4, #8
 8023b74:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023b78:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023b7c:	437d      	muls	r5, r7
 8023b7e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8023b82:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023b86:	4414      	add	r4, r2
 8023b88:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023b8c:	fb0a fa01 	mul.w	sl, sl, r1
 8023b90:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023b94:	9a03      	ldr	r2, [sp, #12]
 8023b96:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8023b9a:	fb02 5503 	mla	r5, r2, r3, r5
 8023b9e:	0a24      	lsrs	r4, r4, #8
 8023ba0:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023ba4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023ba8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023bac:	fb04 540e 	mla	r4, r4, lr, r5
 8023bb0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023bb4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023bb8:	4461      	add	r1, ip
 8023bba:	0a09      	lsrs	r1, r1, #8
 8023bbc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023bc0:	fb01 4100 	mla	r1, r1, r0, r4
 8023bc4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023bc8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023bcc:	fb07 f70a 	mul.w	r7, r7, sl
 8023bd0:	0a09      	lsrs	r1, r1, #8
 8023bd2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8023bd6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8023bda:	fb03 7101 	mla	r1, r3, r1, r7
 8023bde:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023be2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023be6:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023bea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023bee:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8023bf2:	fb00 e101 	mla	r1, r0, r1, lr
 8023bf6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023bfa:	9a00      	ldr	r2, [sp, #0]
 8023bfc:	b287      	uxth	r7, r0
 8023bfe:	437a      	muls	r2, r7
 8023c00:	1c53      	adds	r3, r2, #1
 8023c02:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023c06:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023c0a:	0a09      	lsrs	r1, r1, #8
 8023c0c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023c10:	4321      	orrs	r1, r4
 8023c12:	0c0a      	lsrs	r2, r1, #16
 8023c14:	8836      	ldrh	r6, [r6, #0]
 8023c16:	fb12 f207 	smulbb	r2, r2, r7
 8023c1a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8023c1e:	b2c8      	uxtb	r0, r1
 8023c20:	1235      	asrs	r5, r6, #8
 8023c22:	fb14 f407 	smulbb	r4, r4, r7
 8023c26:	fb10 f007 	smulbb	r0, r0, r7
 8023c2a:	b2db      	uxtb	r3, r3
 8023c2c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023c30:	fb05 2503 	mla	r5, r5, r3, r2
 8023c34:	10f2      	asrs	r2, r6, #3
 8023c36:	00f6      	lsls	r6, r6, #3
 8023c38:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023c3c:	b2f6      	uxtb	r6, r6
 8023c3e:	fb02 4203 	mla	r2, r2, r3, r4
 8023c42:	fb06 0303 	mla	r3, r6, r3, r0
 8023c46:	b2ad      	uxth	r5, r5
 8023c48:	b299      	uxth	r1, r3
 8023c4a:	b294      	uxth	r4, r2
 8023c4c:	1c6b      	adds	r3, r5, #1
 8023c4e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023c52:	1c62      	adds	r2, r4, #1
 8023c54:	1c4b      	adds	r3, r1, #1
 8023c56:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023c5a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023c5e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023c62:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023c66:	0952      	lsrs	r2, r2, #5
 8023c68:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023c6c:	432b      	orrs	r3, r5
 8023c6e:	4313      	orrs	r3, r2
 8023c70:	9a02      	ldr	r2, [sp, #8]
 8023c72:	8013      	strh	r3, [r2, #0]
 8023c74:	b005      	add	sp, #20
 8023c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c7a:	2500      	movs	r5, #0
 8023c7c:	e6ef      	b.n	8023a5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8023c7e:	2100      	movs	r1, #0
 8023c80:	460d      	mov	r5, r1
 8023c82:	e6f7      	b.n	8023a74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023c84:	2100      	movs	r1, #0
 8023c86:	e6f5      	b.n	8023a74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023c88:	4631      	mov	r1, r6
 8023c8a:	e6f3      	b.n	8023a74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023c8c:	2400      	movs	r4, #0
 8023c8e:	e702      	b.n	8023a96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8023c90:	2200      	movs	r2, #0
 8023c92:	4614      	mov	r4, r2
 8023c94:	e70b      	b.n	8023aae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023c96:	4602      	mov	r2, r0
 8023c98:	4604      	mov	r4, r0
 8023c9a:	e708      	b.n	8023aae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023c9c:	2200      	movs	r2, #0
 8023c9e:	e706      	b.n	8023aae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023ca0:	4632      	mov	r2, r6
 8023ca2:	e704      	b.n	8023aae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08023ca4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ca8:	b09d      	sub	sp, #116	; 0x74
 8023caa:	9219      	str	r2, [sp, #100]	; 0x64
 8023cac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023cae:	901b      	str	r0, [sp, #108]	; 0x6c
 8023cb0:	9307      	str	r3, [sp, #28]
 8023cb2:	6850      	ldr	r0, [r2, #4]
 8023cb4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023cb8:	9117      	str	r1, [sp, #92]	; 0x5c
 8023cba:	931a      	str	r3, [sp, #104]	; 0x68
 8023cbc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023cc0:	fb00 1303 	mla	r3, r0, r3, r1
 8023cc4:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023cc8:	6812      	ldr	r2, [r2, #0]
 8023cca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023cce:	930a      	str	r3, [sp, #40]	; 0x28
 8023cd0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023cd2:	681b      	ldr	r3, [r3, #0]
 8023cd4:	9310      	str	r3, [sp, #64]	; 0x40
 8023cd6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8023cdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023cde:	2b00      	cmp	r3, #0
 8023ce0:	dc03      	bgt.n	8023cea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8023ce2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023ce4:	2b00      	cmp	r3, #0
 8023ce6:	f340 8375 	ble.w	80243d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023cea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023cec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023cf0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023cf4:	1e48      	subs	r0, r1, #1
 8023cf6:	1e57      	subs	r7, r2, #1
 8023cf8:	9b07      	ldr	r3, [sp, #28]
 8023cfa:	2b00      	cmp	r3, #0
 8023cfc:	f340 818e 	ble.w	802401c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023d00:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023d04:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023d08:	d406      	bmi.n	8023d18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023d0a:	4584      	cmp	ip, r0
 8023d0c:	da04      	bge.n	8023d18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023d0e:	2b00      	cmp	r3, #0
 8023d10:	db02      	blt.n	8023d18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023d12:	42bb      	cmp	r3, r7
 8023d14:	f2c0 8183 	blt.w	802401e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023d18:	f11c 0c01 	adds.w	ip, ip, #1
 8023d1c:	f100 8173 	bmi.w	8024006 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023d20:	4561      	cmp	r1, ip
 8023d22:	f2c0 8170 	blt.w	8024006 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023d26:	3301      	adds	r3, #1
 8023d28:	f100 816d 	bmi.w	8024006 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023d2c:	429a      	cmp	r2, r3
 8023d2e:	f2c0 816a 	blt.w	8024006 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023d32:	9b07      	ldr	r3, [sp, #28]
 8023d34:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023d36:	9318      	str	r3, [sp, #96]	; 0x60
 8023d38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023d3a:	2b00      	cmp	r3, #0
 8023d3c:	f340 818c 	ble.w	8024058 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8023d40:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023d42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023d44:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023d48:	1422      	asrs	r2, r4, #16
 8023d4a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023d4e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023d52:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023d56:	689b      	ldr	r3, [r3, #8]
 8023d58:	f100 81cd 	bmi.w	80240f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023d5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8023d60:	4542      	cmp	r2, r8
 8023d62:	f280 81c8 	bge.w	80240f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023d66:	f1bc 0f00 	cmp.w	ip, #0
 8023d6a:	f2c0 81c4 	blt.w	80240f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023d6e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023d72:	45c4      	cmp	ip, r8
 8023d74:	f280 81bf 	bge.w	80240f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023d78:	b21b      	sxth	r3, r3
 8023d7a:	fb0c 2203 	mla	r2, ip, r3, r2
 8023d7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023d80:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023d84:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023d88:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023d8c:	2800      	cmp	r0, #0
 8023d8e:	f000 81a9 	beq.w	80240e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8023d92:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023d96:	950c      	str	r5, [sp, #48]	; 0x30
 8023d98:	0e2d      	lsrs	r5, r5, #24
 8023d9a:	9513      	str	r5, [sp, #76]	; 0x4c
 8023d9c:	b181      	cbz	r1, 8023dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023d9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023da2:	3b01      	subs	r3, #1
 8023da4:	009b      	lsls	r3, r3, #2
 8023da6:	3304      	adds	r3, #4
 8023da8:	eb08 0c03 	add.w	ip, r8, r3
 8023dac:	f858 3003 	ldr.w	r3, [r8, r3]
 8023db0:	9308      	str	r3, [sp, #32]
 8023db2:	0e1b      	lsrs	r3, r3, #24
 8023db4:	9311      	str	r3, [sp, #68]	; 0x44
 8023db6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023dba:	930d      	str	r3, [sp, #52]	; 0x34
 8023dbc:	0e1b      	lsrs	r3, r3, #24
 8023dbe:	9314      	str	r3, [sp, #80]	; 0x50
 8023dc0:	b280      	uxth	r0, r0
 8023dc2:	b289      	uxth	r1, r1
 8023dc4:	fb00 f901 	mul.w	r9, r0, r1
 8023dc8:	0100      	lsls	r0, r0, #4
 8023dca:	eba0 0809 	sub.w	r8, r0, r9
 8023dce:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023dd2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023dd4:	fa1f f888 	uxth.w	r8, r8
 8023dd8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023ddc:	fb08 f000 	mul.w	r0, r8, r0
 8023de0:	b289      	uxth	r1, r1
 8023de2:	1a5b      	subs	r3, r3, r1
 8023de4:	b29b      	uxth	r3, r3
 8023de6:	fb03 000e 	mla	r0, r3, lr, r0
 8023dea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023dec:	fb01 0005 	mla	r0, r1, r5, r0
 8023df0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023df2:	fb09 0005 	mla	r0, r9, r5, r0
 8023df6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023dfa:	2800      	cmp	r0, #0
 8023dfc:	f000 80fa 	beq.w	8023ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023e00:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023e04:	d01b      	beq.n	8023e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023e06:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023e0a:	fb0e fa0a 	mul.w	sl, lr, sl
 8023e0e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023e12:	fb0e fe02 	mul.w	lr, lr, r2
 8023e16:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023e1a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023e1e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023e22:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023e26:	4452      	add	r2, sl
 8023e28:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023e2c:	0a12      	lsrs	r2, r2, #8
 8023e2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e32:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023e36:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023e3a:	ea42 020c 	orr.w	r2, r2, ip
 8023e3e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023e40:	2dff      	cmp	r5, #255	; 0xff
 8023e42:	d021      	beq.n	8023e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8023e44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023e46:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023e4a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023e4c:	fb05 fb0b 	mul.w	fp, r5, fp
 8023e50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023e52:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023e56:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023e5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023e5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e60:	fb05 fa0a 	mul.w	sl, r5, sl
 8023e64:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023e68:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023e6c:	44de      	add	lr, fp
 8023e6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e82:	ea4e 050a 	orr.w	r5, lr, sl
 8023e86:	950c      	str	r5, [sp, #48]	; 0x30
 8023e88:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023e8a:	2dff      	cmp	r5, #255	; 0xff
 8023e8c:	d021      	beq.n	8023ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023e8e:	9d08      	ldr	r5, [sp, #32]
 8023e90:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023e94:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023e96:	fb05 fb0b 	mul.w	fp, r5, fp
 8023e9a:	9d08      	ldr	r5, [sp, #32]
 8023e9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ea0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023ea4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023ea6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023eaa:	fb05 fa0a 	mul.w	sl, r5, sl
 8023eae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023eb2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023eb6:	44de      	add	lr, fp
 8023eb8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ebc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023ec0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ec4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ec8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ecc:	ea4e 050a 	orr.w	r5, lr, sl
 8023ed0:	9508      	str	r5, [sp, #32]
 8023ed2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023ed4:	2dff      	cmp	r5, #255	; 0xff
 8023ed6:	d021      	beq.n	8023f1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023ed8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023eda:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023ede:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023ee0:	fb05 fb0b 	mul.w	fp, r5, fp
 8023ee4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023ee6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023eea:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023eee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023ef0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ef4:	fb05 fa0a 	mul.w	sl, r5, sl
 8023ef8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023efc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023f00:	44de      	add	lr, fp
 8023f02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023f06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023f12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f16:	ea4e 050a 	orr.w	r5, lr, sl
 8023f1a:	950d      	str	r5, [sp, #52]	; 0x34
 8023f1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023f1e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023f22:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023f26:	fb08 fc0c 	mul.w	ip, r8, ip
 8023f2a:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023f2e:	9d08      	ldr	r5, [sp, #32]
 8023f30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023f34:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023f38:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023f3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023f3e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023f44:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023f48:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023f4c:	fb08 f80e 	mul.w	r8, r8, lr
 8023f50:	fb03 8202 	mla	r2, r3, r2, r8
 8023f54:	9b08      	ldr	r3, [sp, #32]
 8023f56:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f5a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8023f5e:	fb01 220a 	mla	r2, r1, sl, r2
 8023f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023f64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f68:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8023f6c:	fb09 2901 	mla	r9, r9, r1, r2
 8023f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023f72:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023f76:	4342      	muls	r2, r0
 8023f78:	1c50      	adds	r0, r2, #1
 8023f7a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023f7e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023f82:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023f86:	ea4c 0c09 	orr.w	ip, ip, r9
 8023f8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023f8c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023f90:	883b      	ldrh	r3, [r7, #0]
 8023f92:	fb12 f205 	smulbb	r2, r2, r5
 8023f96:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023f9a:	fa5f fc8c 	uxtb.w	ip, ip
 8023f9e:	1219      	asrs	r1, r3, #8
 8023fa0:	fb1c fc05 	smulbb	ip, ip, r5
 8023fa4:	b2c0      	uxtb	r0, r0
 8023fa6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023faa:	fb01 2100 	mla	r1, r1, r0, r2
 8023fae:	10da      	asrs	r2, r3, #3
 8023fb0:	00db      	lsls	r3, r3, #3
 8023fb2:	fb1e fe05 	smulbb	lr, lr, r5
 8023fb6:	b2db      	uxtb	r3, r3
 8023fb8:	fb03 c300 	mla	r3, r3, r0, ip
 8023fbc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023fc0:	b289      	uxth	r1, r1
 8023fc2:	fb02 e200 	mla	r2, r2, r0, lr
 8023fc6:	fa1f fc83 	uxth.w	ip, r3
 8023fca:	1c4b      	adds	r3, r1, #1
 8023fcc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023fd0:	f10c 0301 	add.w	r3, ip, #1
 8023fd4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023fd8:	b292      	uxth	r2, r2
 8023fda:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023fde:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023fe2:	430b      	orrs	r3, r1
 8023fe4:	1c51      	adds	r1, r2, #1
 8023fe6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023fea:	0952      	lsrs	r2, r2, #5
 8023fec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ff0:	4313      	orrs	r3, r2
 8023ff2:	803b      	strh	r3, [r7, #0]
 8023ff4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023ff6:	3702      	adds	r7, #2
 8023ff8:	441c      	add	r4, r3
 8023ffa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023ffc:	441e      	add	r6, r3
 8023ffe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024000:	3b01      	subs	r3, #1
 8024002:	9318      	str	r3, [sp, #96]	; 0x60
 8024004:	e698      	b.n	8023d38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024006:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024008:	441c      	add	r4, r3
 802400a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802400c:	441e      	add	r6, r3
 802400e:	9b07      	ldr	r3, [sp, #28]
 8024010:	3b01      	subs	r3, #1
 8024012:	9307      	str	r3, [sp, #28]
 8024014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024016:	3302      	adds	r3, #2
 8024018:	930a      	str	r3, [sp, #40]	; 0x28
 802401a:	e66d      	b.n	8023cf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802401c:	d023      	beq.n	8024066 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802401e:	9b07      	ldr	r3, [sp, #28]
 8024020:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8024022:	3b01      	subs	r3, #1
 8024024:	fb00 4003 	mla	r0, r0, r3, r4
 8024028:	1400      	asrs	r0, r0, #16
 802402a:	f53f ae82 	bmi.w	8023d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802402e:	3901      	subs	r1, #1
 8024030:	4288      	cmp	r0, r1
 8024032:	f6bf ae7e 	bge.w	8023d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024036:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024038:	fb01 6303 	mla	r3, r1, r3, r6
 802403c:	141b      	asrs	r3, r3, #16
 802403e:	f53f ae78 	bmi.w	8023d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024042:	3a01      	subs	r2, #1
 8024044:	4293      	cmp	r3, r2
 8024046:	f6bf ae74 	bge.w	8023d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802404a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802404e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8024052:	f1bb 0f00 	cmp.w	fp, #0
 8024056:	dc6c      	bgt.n	8024132 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024058:	9b07      	ldr	r3, [sp, #28]
 802405a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802405e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024060:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8024064:	930a      	str	r3, [sp, #40]	; 0x28
 8024066:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024068:	2b00      	cmp	r3, #0
 802406a:	f340 81b3 	ble.w	80243d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802406e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024072:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024076:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802407a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802407e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024082:	eef0 6a62 	vmov.f32	s13, s5
 8024086:	ee31 1a05 	vadd.f32	s2, s2, s10
 802408a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802408e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024092:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024096:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802409a:	ee16 4a90 	vmov	r4, s13
 802409e:	eef0 6a43 	vmov.f32	s13, s6
 80240a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80240a6:	ee12 2a90 	vmov	r2, s5
 80240aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80240ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80240b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80240b8:	ee13 2a10 	vmov	r2, s6
 80240bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80240be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80240c0:	ee16 6a90 	vmov	r6, s13
 80240c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80240c8:	932a      	str	r3, [sp, #168]	; 0xa8
 80240ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80240cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80240ce:	3b01      	subs	r3, #1
 80240d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80240d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80240d4:	bf08      	it	eq
 80240d6:	4613      	moveq	r3, r2
 80240d8:	eeb0 3a67 	vmov.f32	s6, s15
 80240dc:	9307      	str	r3, [sp, #28]
 80240de:	eef0 2a47 	vmov.f32	s5, s14
 80240e2:	e5fb      	b.n	8023cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80240e4:	2900      	cmp	r1, #0
 80240e6:	f43f ae6b 	beq.w	8023dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80240ea:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80240ee:	9308      	str	r3, [sp, #32]
 80240f0:	0e1b      	lsrs	r3, r3, #24
 80240f2:	9311      	str	r3, [sp, #68]	; 0x44
 80240f4:	e664      	b.n	8023dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80240f6:	f112 0801 	adds.w	r8, r2, #1
 80240fa:	f53f af7b 	bmi.w	8023ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80240fe:	4543      	cmp	r3, r8
 8024100:	f6ff af78 	blt.w	8023ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024104:	f11c 0801 	adds.w	r8, ip, #1
 8024108:	f53f af74 	bmi.w	8023ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802410c:	45c6      	cmp	lr, r8
 802410e:	f6ff af71 	blt.w	8023ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024112:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8024114:	9201      	str	r2, [sp, #4]
 8024116:	fa0f f28e 	sxth.w	r2, lr
 802411a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802411e:	e9cd c002 	strd	ip, r0, [sp, #8]
 8024122:	9200      	str	r2, [sp, #0]
 8024124:	b21b      	sxth	r3, r3
 8024126:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024128:	4639      	mov	r1, r7
 802412a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802412c:	f7ff fc79 	bl	8023a22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8024130:	e760      	b.n	8023ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024132:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024134:	1427      	asrs	r7, r4, #16
 8024136:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802413a:	1433      	asrs	r3, r6, #16
 802413c:	fb01 7303 	mla	r3, r1, r3, r7
 8024140:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024142:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024146:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802414a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802414e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024152:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024156:	2a00      	cmp	r2, #0
 8024158:	f000 8133 	beq.w	80243c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802415c:	687d      	ldr	r5, [r7, #4]
 802415e:	950e      	str	r5, [sp, #56]	; 0x38
 8024160:	0e2d      	lsrs	r5, r5, #24
 8024162:	9515      	str	r5, [sp, #84]	; 0x54
 8024164:	b178      	cbz	r0, 8024186 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024166:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802416a:	3901      	subs	r1, #1
 802416c:	0089      	lsls	r1, r1, #2
 802416e:	3104      	adds	r1, #4
 8024170:	eb07 0e01 	add.w	lr, r7, r1
 8024174:	5879      	ldr	r1, [r7, r1]
 8024176:	9109      	str	r1, [sp, #36]	; 0x24
 8024178:	0e09      	lsrs	r1, r1, #24
 802417a:	9112      	str	r1, [sp, #72]	; 0x48
 802417c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024180:	910f      	str	r1, [sp, #60]	; 0x3c
 8024182:	0e09      	lsrs	r1, r1, #24
 8024184:	9116      	str	r1, [sp, #88]	; 0x58
 8024186:	b292      	uxth	r2, r2
 8024188:	b280      	uxth	r0, r0
 802418a:	fb02 f800 	mul.w	r8, r2, r0
 802418e:	0112      	lsls	r2, r2, #4
 8024190:	eba2 0e08 	sub.w	lr, r2, r8
 8024194:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024196:	fa1f fe8e 	uxth.w	lr, lr
 802419a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802419e:	fb0e f101 	mul.w	r1, lr, r1
 80241a2:	b280      	uxth	r0, r0
 80241a4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80241a8:	1a12      	subs	r2, r2, r0
 80241aa:	b292      	uxth	r2, r2
 80241ac:	fb02 110c 	mla	r1, r2, ip, r1
 80241b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80241b2:	fb00 1105 	mla	r1, r0, r5, r1
 80241b6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80241b8:	fb08 1105 	mla	r1, r8, r5, r1
 80241bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80241c0:	2900      	cmp	r1, #0
 80241c2:	f000 80f5 	beq.w	80243b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80241c6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80241ca:	d019      	beq.n	8024200 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80241cc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80241d0:	fb0c fa0a 	mul.w	sl, ip, sl
 80241d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80241d8:	fb0c fc03 	mul.w	ip, ip, r3
 80241dc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80241e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80241e4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80241e8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80241ec:	4453      	add	r3, sl
 80241ee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80241f2:	0a1b      	lsrs	r3, r3, #8
 80241f4:	0a3f      	lsrs	r7, r7, #8
 80241f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80241fa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80241fe:	433b      	orrs	r3, r7
 8024200:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024202:	2dff      	cmp	r5, #255	; 0xff
 8024204:	d020      	beq.n	8024248 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8024206:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024208:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802420c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802420e:	436f      	muls	r7, r5
 8024210:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024212:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024216:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802421a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802421c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024220:	fb05 fa0a 	mul.w	sl, r5, sl
 8024224:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024228:	44bc      	add	ip, r7
 802422a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802422e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024232:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024236:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802423a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802423e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024242:	ea4c 050a 	orr.w	r5, ip, sl
 8024246:	950e      	str	r5, [sp, #56]	; 0x38
 8024248:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802424a:	2dff      	cmp	r5, #255	; 0xff
 802424c:	d020      	beq.n	8024290 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802424e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024250:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024254:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024256:	436f      	muls	r7, r5
 8024258:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802425a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802425e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024262:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024264:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024268:	fb05 fa0a 	mul.w	sl, r5, sl
 802426c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024270:	44bc      	add	ip, r7
 8024272:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024276:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802427a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802427e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024282:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024286:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802428a:	ea4c 050a 	orr.w	r5, ip, sl
 802428e:	9509      	str	r5, [sp, #36]	; 0x24
 8024290:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024292:	2dff      	cmp	r5, #255	; 0xff
 8024294:	d020      	beq.n	80242d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8024296:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024298:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802429c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802429e:	436f      	muls	r7, r5
 80242a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80242a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80242a6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80242aa:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80242ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80242b0:	fb05 fa0a 	mul.w	sl, r5, sl
 80242b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242b8:	44bc      	add	ip, r7
 80242ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80242be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80242c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80242d2:	ea4c 050a 	orr.w	r5, ip, sl
 80242d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80242d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80242da:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80242de:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80242e2:	fb0e f707 	mul.w	r7, lr, r7
 80242e6:	fb02 770c 	mla	r7, r2, ip, r7
 80242ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80242ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80242f0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80242f4:	fb00 770c 	mla	r7, r0, ip, r7
 80242f8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80242fa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80242fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024300:	fb08 770c 	mla	r7, r8, ip, r7
 8024304:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024308:	fb0e fe0c 	mul.w	lr, lr, ip
 802430c:	fb02 e303 	mla	r3, r2, r3, lr
 8024310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024312:	0a3f      	lsrs	r7, r7, #8
 8024314:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024318:	fb00 330a 	mla	r3, r0, sl, r3
 802431c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802431e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024322:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024326:	fb08 3c0c 	mla	ip, r8, ip, r3
 802432a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802432c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024330:	4359      	muls	r1, r3
 8024332:	1c4b      	adds	r3, r1, #1
 8024334:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024338:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802433c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024340:	ea47 070c 	orr.w	r7, r7, ip
 8024344:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024346:	0c3b      	lsrs	r3, r7, #16
 8024348:	f8b9 0000 	ldrh.w	r0, [r9]
 802434c:	fb13 f305 	smulbb	r3, r3, r5
 8024350:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024354:	b2ff      	uxtb	r7, r7
 8024356:	1202      	asrs	r2, r0, #8
 8024358:	fb17 f705 	smulbb	r7, r7, r5
 802435c:	b2c9      	uxtb	r1, r1
 802435e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024362:	fb02 3201 	mla	r2, r2, r1, r3
 8024366:	10c3      	asrs	r3, r0, #3
 8024368:	00c0      	lsls	r0, r0, #3
 802436a:	fb1c fc05 	smulbb	ip, ip, r5
 802436e:	b2c0      	uxtb	r0, r0
 8024370:	fb00 7001 	mla	r0, r0, r1, r7
 8024374:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024378:	fb03 c301 	mla	r3, r3, r1, ip
 802437c:	b292      	uxth	r2, r2
 802437e:	b280      	uxth	r0, r0
 8024380:	1c51      	adds	r1, r2, #1
 8024382:	f100 0c01 	add.w	ip, r0, #1
 8024386:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802438a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802438e:	b29b      	uxth	r3, r3
 8024390:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024394:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024398:	ea4c 0202 	orr.w	r2, ip, r2
 802439c:	f103 0c01 	add.w	ip, r3, #1
 80243a0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80243a4:	095b      	lsrs	r3, r3, #5
 80243a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80243aa:	431a      	orrs	r2, r3
 80243ac:	f8a9 2000 	strh.w	r2, [r9]
 80243b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80243b2:	f109 0902 	add.w	r9, r9, #2
 80243b6:	441c      	add	r4, r3
 80243b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80243ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80243be:	441e      	add	r6, r3
 80243c0:	e647      	b.n	8024052 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80243c2:	2800      	cmp	r0, #0
 80243c4:	f43f aedf 	beq.w	8024186 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80243c8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80243cc:	9109      	str	r1, [sp, #36]	; 0x24
 80243ce:	0e09      	lsrs	r1, r1, #24
 80243d0:	9112      	str	r1, [sp, #72]	; 0x48
 80243d2:	e6d8      	b.n	8024186 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80243d4:	b01d      	add	sp, #116	; 0x74
 80243d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080243da <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80243da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243de:	b085      	sub	sp, #20
 80243e0:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80243e4:	9102      	str	r1, [sp, #8]
 80243e6:	fb04 7103 	mla	r1, r4, r3, r7
 80243ea:	2c00      	cmp	r4, #0
 80243ec:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80243f0:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80243f4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80243f8:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80243fc:	f2c0 810c 	blt.w	8024618 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024400:	45a6      	cmp	lr, r4
 8024402:	f340 8109 	ble.w	8024618 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024406:	2f00      	cmp	r7, #0
 8024408:	f2c0 8104 	blt.w	8024614 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802440c:	42bb      	cmp	r3, r7
 802440e:	f340 8101 	ble.w	8024614 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024412:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8024416:	1c7a      	adds	r2, r7, #1
 8024418:	f100 8101 	bmi.w	802461e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802441c:	4293      	cmp	r3, r2
 802441e:	f340 80fe 	ble.w	802461e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8024422:	2e00      	cmp	r6, #0
 8024424:	f000 80fd 	beq.w	8024622 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8024428:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802442c:	3401      	adds	r4, #1
 802442e:	f100 80fc 	bmi.w	802462a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8024432:	45a6      	cmp	lr, r4
 8024434:	f340 80f9 	ble.w	802462a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8024438:	2800      	cmp	r0, #0
 802443a:	f000 80f9 	beq.w	8024630 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802443e:	2f00      	cmp	r7, #0
 8024440:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8024444:	f2c0 80ef 	blt.w	8024626 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8024448:	42bb      	cmp	r3, r7
 802444a:	f340 80ec 	ble.w	8024626 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802444e:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8024452:	3701      	adds	r7, #1
 8024454:	f100 80ef 	bmi.w	8024636 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8024458:	42bb      	cmp	r3, r7
 802445a:	f340 80ec 	ble.w	8024636 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802445e:	2e00      	cmp	r6, #0
 8024460:	f000 80eb 	beq.w	802463a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8024464:	6852      	ldr	r2, [r2, #4]
 8024466:	b2b6      	uxth	r6, r6
 8024468:	b280      	uxth	r0, r0
 802446a:	fb00 fe06 	mul.w	lr, r0, r6
 802446e:	0136      	lsls	r6, r6, #4
 8024470:	eba6 070e 	sub.w	r7, r6, lr
 8024474:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8024478:	b2bf      	uxth	r7, r7
 802447a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802447e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8024482:	fb07 f60a 	mul.w	r6, r7, sl
 8024486:	b280      	uxth	r0, r0
 8024488:	1a1b      	subs	r3, r3, r0
 802448a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802448e:	b29b      	uxth	r3, r3
 8024490:	fb0b 6603 	mla	r6, fp, r3, r6
 8024494:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024498:	fb00 6609 	mla	r6, r0, r9, r6
 802449c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80244a0:	fb0e 6608 	mla	r6, lr, r8, r6
 80244a4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80244a8:	9600      	str	r6, [sp, #0]
 80244aa:	2e00      	cmp	r6, #0
 80244ac:	f000 80af 	beq.w	802460e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80244b0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80244b4:	fb0b fc0c 	mul.w	ip, fp, ip
 80244b8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80244bc:	fb0b f505 	mul.w	r5, fp, r5
 80244c0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80244c4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80244c8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80244cc:	44dc      	add	ip, fp
 80244ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80244d2:	9501      	str	r5, [sp, #4]
 80244d4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80244d8:	9503      	str	r5, [sp, #12]
 80244da:	9d01      	ldr	r5, [sp, #4]
 80244dc:	9e02      	ldr	r6, [sp, #8]
 80244de:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80244e2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80244e6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80244ea:	fb0a fc0c 	mul.w	ip, sl, ip
 80244ee:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80244f2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80244f6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80244fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80244fe:	4465      	add	r5, ip
 8024500:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024504:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024508:	fb09 fc0c 	mul.w	ip, r9, ip
 802450c:	fb09 f904 	mul.w	r9, r9, r4
 8024510:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8024514:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8024518:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802451c:	fb08 f404 	mul.w	r4, r8, r4
 8024520:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024524:	fb08 f802 	mul.w	r8, r8, r2
 8024528:	0a2d      	lsrs	r5, r5, #8
 802452a:	0a22      	lsrs	r2, r4, #8
 802452c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024530:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024534:	437d      	muls	r5, r7
 8024536:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802453a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802453e:	4414      	add	r4, r2
 8024540:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024544:	fb0a fa01 	mul.w	sl, sl, r1
 8024548:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802454c:	9a03      	ldr	r2, [sp, #12]
 802454e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8024552:	fb02 5503 	mla	r5, r2, r3, r5
 8024556:	0a24      	lsrs	r4, r4, #8
 8024558:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802455c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024560:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8024564:	fb04 540e 	mla	r4, r4, lr, r5
 8024568:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802456c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024570:	4461      	add	r1, ip
 8024572:	0a09      	lsrs	r1, r1, #8
 8024574:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024578:	fb01 4100 	mla	r1, r1, r0, r4
 802457c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024580:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024584:	fb07 f70a 	mul.w	r7, r7, sl
 8024588:	0a09      	lsrs	r1, r1, #8
 802458a:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802458e:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8024592:	fb03 7101 	mla	r1, r3, r1, r7
 8024596:	9b00      	ldr	r3, [sp, #0]
 8024598:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802459c:	43da      	mvns	r2, r3
 802459e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80245a2:	fb0e 1e08 	mla	lr, lr, r8, r1
 80245a6:	8836      	ldrh	r6, [r6, #0]
 80245a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80245ac:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80245b0:	fb00 e101 	mla	r1, r0, r1, lr
 80245b4:	1233      	asrs	r3, r6, #8
 80245b6:	b2d2      	uxtb	r2, r2
 80245b8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80245bc:	4353      	muls	r3, r2
 80245be:	10f0      	asrs	r0, r6, #3
 80245c0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80245c4:	4350      	muls	r0, r2
 80245c6:	0a09      	lsrs	r1, r1, #8
 80245c8:	00f6      	lsls	r6, r6, #3
 80245ca:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80245ce:	b2f6      	uxtb	r6, r6
 80245d0:	4321      	orrs	r1, r4
 80245d2:	4356      	muls	r6, r2
 80245d4:	1c5a      	adds	r2, r3, #1
 80245d6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80245da:	0c0b      	lsrs	r3, r1, #16
 80245dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80245e0:	1c42      	adds	r2, r0, #1
 80245e2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80245e6:	0a0a      	lsrs	r2, r1, #8
 80245e8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80245ec:	021b      	lsls	r3, r3, #8
 80245ee:	00d2      	lsls	r2, r2, #3
 80245f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80245f4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80245f8:	4313      	orrs	r3, r2
 80245fa:	1c72      	adds	r2, r6, #1
 80245fc:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8024600:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8024604:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8024608:	4319      	orrs	r1, r3
 802460a:	9b02      	ldr	r3, [sp, #8]
 802460c:	8019      	strh	r1, [r3, #0]
 802460e:	b005      	add	sp, #20
 8024610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024614:	2500      	movs	r5, #0
 8024616:	e6fe      	b.n	8024416 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8024618:	2100      	movs	r1, #0
 802461a:	460d      	mov	r5, r1
 802461c:	e706      	b.n	802442c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802461e:	2100      	movs	r1, #0
 8024620:	e704      	b.n	802442c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024622:	4631      	mov	r1, r6
 8024624:	e702      	b.n	802442c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024626:	2400      	movs	r4, #0
 8024628:	e713      	b.n	8024452 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802462a:	2200      	movs	r2, #0
 802462c:	4614      	mov	r4, r2
 802462e:	e71a      	b.n	8024466 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024630:	4602      	mov	r2, r0
 8024632:	4604      	mov	r4, r0
 8024634:	e717      	b.n	8024466 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024636:	2200      	movs	r2, #0
 8024638:	e715      	b.n	8024466 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802463a:	4632      	mov	r2, r6
 802463c:	e713      	b.n	8024466 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08024640 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024644:	b09b      	sub	sp, #108	; 0x6c
 8024646:	9218      	str	r2, [sp, #96]	; 0x60
 8024648:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802464a:	9019      	str	r0, [sp, #100]	; 0x64
 802464c:	6850      	ldr	r0, [r2, #4]
 802464e:	9116      	str	r1, [sp, #88]	; 0x58
 8024650:	9307      	str	r3, [sp, #28]
 8024652:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024656:	fb00 1303 	mla	r3, r0, r3, r1
 802465a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802465e:	6812      	ldr	r2, [r2, #0]
 8024660:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024664:	930a      	str	r3, [sp, #40]	; 0x28
 8024666:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024668:	681b      	ldr	r3, [r3, #0]
 802466a:	930f      	str	r3, [sp, #60]	; 0x3c
 802466c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802466e:	2b00      	cmp	r3, #0
 8024670:	dc03      	bgt.n	802467a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024672:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024674:	2b00      	cmp	r3, #0
 8024676:	f340 8387 	ble.w	8024d88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802467a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802467c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024680:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024684:	1e48      	subs	r0, r1, #1
 8024686:	1e57      	subs	r7, r2, #1
 8024688:	9b07      	ldr	r3, [sp, #28]
 802468a:	2b00      	cmp	r3, #0
 802468c:	f340 8166 	ble.w	802495c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024690:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024694:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024698:	d406      	bmi.n	80246a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802469a:	4584      	cmp	ip, r0
 802469c:	da04      	bge.n	80246a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802469e:	2b00      	cmp	r3, #0
 80246a0:	db02      	blt.n	80246a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80246a2:	42bb      	cmp	r3, r7
 80246a4:	f2c0 815b 	blt.w	802495e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80246a8:	f11c 0c01 	adds.w	ip, ip, #1
 80246ac:	f100 814b 	bmi.w	8024946 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80246b0:	4561      	cmp	r1, ip
 80246b2:	f2c0 8148 	blt.w	8024946 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80246b6:	3301      	adds	r3, #1
 80246b8:	f100 8145 	bmi.w	8024946 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80246bc:	429a      	cmp	r2, r3
 80246be:	f2c0 8142 	blt.w	8024946 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80246c2:	9b07      	ldr	r3, [sp, #28]
 80246c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80246c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80246c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80246ca:	2b00      	cmp	r3, #0
 80246cc:	f340 8165 	ble.w	802499a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80246d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80246d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80246d4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80246d8:	1422      	asrs	r2, r4, #16
 80246da:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80246de:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80246e2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80246e6:	689b      	ldr	r3, [r3, #8]
 80246e8:	f100 81d5 	bmi.w	8024a96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80246ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80246f0:	4542      	cmp	r2, r8
 80246f2:	f280 81d0 	bge.w	8024a96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80246f6:	f1bc 0f00 	cmp.w	ip, #0
 80246fa:	f2c0 81cc 	blt.w	8024a96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80246fe:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024702:	45c4      	cmp	ip, r8
 8024704:	f280 81c7 	bge.w	8024a96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024708:	b21b      	sxth	r3, r3
 802470a:	fb0c 2203 	mla	r2, ip, r3, r2
 802470e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024710:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8024714:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8024718:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802471c:	2900      	cmp	r1, #0
 802471e:	f000 8182 	beq.w	8024a26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8024722:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8024726:	950b      	str	r5, [sp, #44]	; 0x2c
 8024728:	0e2d      	lsrs	r5, r5, #24
 802472a:	9512      	str	r5, [sp, #72]	; 0x48
 802472c:	b180      	cbz	r0, 8024750 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802472e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8024732:	3b01      	subs	r3, #1
 8024734:	009b      	lsls	r3, r3, #2
 8024736:	3304      	adds	r3, #4
 8024738:	eb08 0c03 	add.w	ip, r8, r3
 802473c:	f858 3003 	ldr.w	r3, [r8, r3]
 8024740:	9308      	str	r3, [sp, #32]
 8024742:	0e1b      	lsrs	r3, r3, #24
 8024744:	9310      	str	r3, [sp, #64]	; 0x40
 8024746:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802474a:	930c      	str	r3, [sp, #48]	; 0x30
 802474c:	0e1b      	lsrs	r3, r3, #24
 802474e:	9313      	str	r3, [sp, #76]	; 0x4c
 8024750:	b289      	uxth	r1, r1
 8024752:	b280      	uxth	r0, r0
 8024754:	fb01 f900 	mul.w	r9, r1, r0
 8024758:	0109      	lsls	r1, r1, #4
 802475a:	eba1 0809 	sub.w	r8, r1, r9
 802475e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024760:	fa1f f888 	uxth.w	r8, r8
 8024764:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024768:	fb08 f303 	mul.w	r3, r8, r3
 802476c:	b280      	uxth	r0, r0
 802476e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024772:	1a09      	subs	r1, r1, r0
 8024774:	b289      	uxth	r1, r1
 8024776:	fb01 330e 	mla	r3, r1, lr, r3
 802477a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802477c:	fb00 3305 	mla	r3, r0, r5, r3
 8024780:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024782:	fb09 3305 	mla	r3, r9, r5, r3
 8024786:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802478a:	2b00      	cmp	r3, #0
 802478c:	f000 80d2 	beq.w	8024934 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024790:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024794:	d01b      	beq.n	80247ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8024796:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802479a:	fb0e fa0a 	mul.w	sl, lr, sl
 802479e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80247a2:	fb0e fe02 	mul.w	lr, lr, r2
 80247a6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80247aa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80247ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80247b2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80247b6:	4452      	add	r2, sl
 80247b8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80247bc:	0a12      	lsrs	r2, r2, #8
 80247be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80247c6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80247ca:	ea42 020c 	orr.w	r2, r2, ip
 80247ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80247d0:	2dff      	cmp	r5, #255	; 0xff
 80247d2:	d021      	beq.n	8024818 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80247d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80247d6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80247da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80247dc:	fb05 fb0b 	mul.w	fp, r5, fp
 80247e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80247e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80247e6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80247ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80247ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80247f0:	fb05 fa0a 	mul.w	sl, r5, sl
 80247f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80247f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80247fc:	44de      	add	lr, fp
 80247fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024802:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024806:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802480a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802480e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024812:	ea4e 050a 	orr.w	r5, lr, sl
 8024816:	950b      	str	r5, [sp, #44]	; 0x2c
 8024818:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802481a:	2dff      	cmp	r5, #255	; 0xff
 802481c:	d021      	beq.n	8024862 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802481e:	9d08      	ldr	r5, [sp, #32]
 8024820:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024824:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024826:	fb05 fb0b 	mul.w	fp, r5, fp
 802482a:	9d08      	ldr	r5, [sp, #32]
 802482c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024830:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024832:	fb05 fa0e 	mul.w	sl, r5, lr
 8024836:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802483a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802483e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024842:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024846:	44de      	add	lr, fp
 8024848:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802484c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024850:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024854:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024858:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802485c:	ea4e 050a 	orr.w	r5, lr, sl
 8024860:	9508      	str	r5, [sp, #32]
 8024862:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024864:	2dff      	cmp	r5, #255	; 0xff
 8024866:	d021      	beq.n	80248ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8024868:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802486a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802486e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024870:	fb05 fb0b 	mul.w	fp, r5, fp
 8024874:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024876:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802487a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802487e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024880:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024884:	fb05 fa0a 	mul.w	sl, r5, sl
 8024888:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802488c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024890:	44de      	add	lr, fp
 8024892:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024896:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802489a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802489e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80248a6:	ea4e 050a 	orr.w	r5, lr, sl
 80248aa:	950c      	str	r5, [sp, #48]	; 0x30
 80248ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80248ae:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80248b2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80248b6:	fb08 fc0c 	mul.w	ip, r8, ip
 80248ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 80248be:	9d08      	ldr	r5, [sp, #32]
 80248c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80248c4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80248c8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80248cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80248ce:	2bff      	cmp	r3, #255	; 0xff
 80248d0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80248d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80248d6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80248da:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80248de:	fb08 f80e 	mul.w	r8, r8, lr
 80248e2:	fb01 8202 	mla	r2, r1, r2, r8
 80248e6:	9908      	ldr	r1, [sp, #32]
 80248e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248ec:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80248f0:	fb00 220a 	mla	r2, r0, sl, r2
 80248f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80248f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248fa:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80248fe:	fb09 2900 	mla	r9, r9, r0, r2
 8024902:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024906:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802490a:	ea4c 0c09 	orr.w	ip, ip, r9
 802490e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8024912:	f040 8091 	bne.w	8024a38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8024916:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802491a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802491e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024922:	f022 0207 	bic.w	r2, r2, #7
 8024926:	431a      	orrs	r2, r3
 8024928:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802492c:	ea4c 0c02 	orr.w	ip, ip, r2
 8024930:	f8a7 c000 	strh.w	ip, [r7]
 8024934:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024936:	3702      	adds	r7, #2
 8024938:	441c      	add	r4, r3
 802493a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802493c:	441e      	add	r6, r3
 802493e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024940:	3b01      	subs	r3, #1
 8024942:	9317      	str	r3, [sp, #92]	; 0x5c
 8024944:	e6c0      	b.n	80246c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8024946:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024948:	441c      	add	r4, r3
 802494a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802494c:	441e      	add	r6, r3
 802494e:	9b07      	ldr	r3, [sp, #28]
 8024950:	3b01      	subs	r3, #1
 8024952:	9307      	str	r3, [sp, #28]
 8024954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024956:	3302      	adds	r3, #2
 8024958:	930a      	str	r3, [sp, #40]	; 0x28
 802495a:	e695      	b.n	8024688 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802495c:	d024      	beq.n	80249a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802495e:	9b07      	ldr	r3, [sp, #28]
 8024960:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024962:	3b01      	subs	r3, #1
 8024964:	fb00 4003 	mla	r0, r0, r3, r4
 8024968:	1400      	asrs	r0, r0, #16
 802496a:	f53f aeaa 	bmi.w	80246c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802496e:	3901      	subs	r1, #1
 8024970:	4288      	cmp	r0, r1
 8024972:	f6bf aea6 	bge.w	80246c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024976:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024978:	fb01 6303 	mla	r3, r1, r3, r6
 802497c:	141b      	asrs	r3, r3, #16
 802497e:	f53f aea0 	bmi.w	80246c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024982:	3a01      	subs	r2, #1
 8024984:	4293      	cmp	r3, r2
 8024986:	f6bf ae9c 	bge.w	80246c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802498a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802498e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8024992:	f1bb 0f00 	cmp.w	fp, #0
 8024996:	f300 809a 	bgt.w	8024ace <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802499a:	9b07      	ldr	r3, [sp, #28]
 802499c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80249a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249a2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80249a6:	930a      	str	r3, [sp, #40]	; 0x28
 80249a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80249aa:	2b00      	cmp	r3, #0
 80249ac:	f340 81ec 	ble.w	8024d88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80249b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80249b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80249b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80249bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80249c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80249c4:	eef0 6a62 	vmov.f32	s13, s5
 80249c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80249cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80249d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80249d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80249dc:	ee16 4a90 	vmov	r4, s13
 80249e0:	eef0 6a43 	vmov.f32	s13, s6
 80249e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80249e8:	ee12 2a90 	vmov	r2, s5
 80249ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80249f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80249f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80249fa:	ee13 2a10 	vmov	r2, s6
 80249fe:	9327      	str	r3, [sp, #156]	; 0x9c
 8024a00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a02:	ee16 6a90 	vmov	r6, s13
 8024a06:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8024a0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024a0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024a10:	3b01      	subs	r3, #1
 8024a12:	9316      	str	r3, [sp, #88]	; 0x58
 8024a14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a16:	bf08      	it	eq
 8024a18:	4613      	moveq	r3, r2
 8024a1a:	eeb0 3a67 	vmov.f32	s6, s15
 8024a1e:	9307      	str	r3, [sp, #28]
 8024a20:	eef0 2a47 	vmov.f32	s5, s14
 8024a24:	e622      	b.n	802466c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8024a26:	2800      	cmp	r0, #0
 8024a28:	f43f ae92 	beq.w	8024750 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024a2c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024a30:	9308      	str	r3, [sp, #32]
 8024a32:	0e1b      	lsrs	r3, r3, #24
 8024a34:	9310      	str	r3, [sp, #64]	; 0x40
 8024a36:	e68b      	b.n	8024750 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024a38:	43db      	mvns	r3, r3
 8024a3a:	8839      	ldrh	r1, [r7, #0]
 8024a3c:	fa5f f883 	uxtb.w	r8, r3
 8024a40:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8024a44:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024a48:	fb0e fe08 	mul.w	lr, lr, r8
 8024a4c:	10c8      	asrs	r0, r1, #3
 8024a4e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024a52:	fb00 f008 	mul.w	r0, r0, r8
 8024a56:	00cb      	lsls	r3, r1, #3
 8024a58:	f10e 0101 	add.w	r1, lr, #1
 8024a5c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8024a60:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8024a64:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8024a68:	b2db      	uxtb	r3, r3
 8024a6a:	f100 0e01 	add.w	lr, r0, #1
 8024a6e:	fb03 f308 	mul.w	r3, r3, r8
 8024a72:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8024a76:	4dc6      	ldr	r5, [pc, #792]	; (8024d90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8024a78:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024a7c:	b2c9      	uxtb	r1, r1
 8024a7e:	00d2      	lsls	r2, r2, #3
 8024a80:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8024a84:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024a88:	430a      	orrs	r2, r1
 8024a8a:	1c59      	adds	r1, r3, #1
 8024a8c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024a90:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8024a94:	e748      	b.n	8024928 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8024a96:	f112 0801 	adds.w	r8, r2, #1
 8024a9a:	f53f af4b 	bmi.w	8024934 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024a9e:	4543      	cmp	r3, r8
 8024aa0:	f6ff af48 	blt.w	8024934 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024aa4:	f11c 0801 	adds.w	r8, ip, #1
 8024aa8:	f53f af44 	bmi.w	8024934 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024aac:	45c6      	cmp	lr, r8
 8024aae:	f6ff af41 	blt.w	8024934 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024ab2:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8024ab6:	fa0f f28e 	sxth.w	r2, lr
 8024aba:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024abe:	9200      	str	r2, [sp, #0]
 8024ac0:	b21b      	sxth	r3, r3
 8024ac2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024ac4:	4639      	mov	r1, r7
 8024ac6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024ac8:	f7ff fc87 	bl	80243da <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8024acc:	e732      	b.n	8024934 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024ace:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024ad0:	1421      	asrs	r1, r4, #16
 8024ad2:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8024ad6:	1433      	asrs	r3, r6, #16
 8024ad8:	fb07 1303 	mla	r3, r7, r3, r1
 8024adc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024ade:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024ae0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024ae4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8024ae8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8024aec:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024af0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024af4:	2a00      	cmp	r2, #0
 8024af6:	f000 8108 	beq.w	8024d0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024afa:	684d      	ldr	r5, [r1, #4]
 8024afc:	950d      	str	r5, [sp, #52]	; 0x34
 8024afe:	0e2d      	lsrs	r5, r5, #24
 8024b00:	9514      	str	r5, [sp, #80]	; 0x50
 8024b02:	b178      	cbz	r0, 8024b24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024b04:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8024b08:	3f01      	subs	r7, #1
 8024b0a:	00bf      	lsls	r7, r7, #2
 8024b0c:	3704      	adds	r7, #4
 8024b0e:	eb01 0e07 	add.w	lr, r1, r7
 8024b12:	59c9      	ldr	r1, [r1, r7]
 8024b14:	9109      	str	r1, [sp, #36]	; 0x24
 8024b16:	0e09      	lsrs	r1, r1, #24
 8024b18:	9111      	str	r1, [sp, #68]	; 0x44
 8024b1a:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024b1e:	910e      	str	r1, [sp, #56]	; 0x38
 8024b20:	0e09      	lsrs	r1, r1, #24
 8024b22:	9115      	str	r1, [sp, #84]	; 0x54
 8024b24:	b292      	uxth	r2, r2
 8024b26:	b280      	uxth	r0, r0
 8024b28:	fb02 f900 	mul.w	r9, r2, r0
 8024b2c:	0112      	lsls	r2, r2, #4
 8024b2e:	eba2 0e09 	sub.w	lr, r2, r9
 8024b32:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024b36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024b38:	fa1f fe8e 	uxth.w	lr, lr
 8024b3c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024b40:	fb0e f202 	mul.w	r2, lr, r2
 8024b44:	b280      	uxth	r0, r0
 8024b46:	1a09      	subs	r1, r1, r0
 8024b48:	b289      	uxth	r1, r1
 8024b4a:	fb01 220c 	mla	r2, r1, ip, r2
 8024b4e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024b50:	fb00 2205 	mla	r2, r0, r5, r2
 8024b54:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024b56:	fb09 2205 	mla	r2, r9, r5, r2
 8024b5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024b5e:	2a00      	cmp	r2, #0
 8024b60:	f000 80ca 	beq.w	8024cf8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8024b64:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024b68:	d019      	beq.n	8024b9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8024b6a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024b6e:	fb0c fa0a 	mul.w	sl, ip, sl
 8024b72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b76:	fb0c fc03 	mul.w	ip, ip, r3
 8024b7a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024b7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b82:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024b86:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024b8a:	4453      	add	r3, sl
 8024b8c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024b90:	0a1b      	lsrs	r3, r3, #8
 8024b92:	0a3f      	lsrs	r7, r7, #8
 8024b94:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b98:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024b9c:	433b      	orrs	r3, r7
 8024b9e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024ba0:	2dff      	cmp	r5, #255	; 0xff
 8024ba2:	d020      	beq.n	8024be6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8024ba4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024ba6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024baa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024bac:	436f      	muls	r7, r5
 8024bae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024bb0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024bb4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024bb8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024bba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024bbe:	fb05 fa0a 	mul.w	sl, r5, sl
 8024bc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024bc6:	44bc      	add	ip, r7
 8024bc8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024bcc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024bd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024bd4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024bd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024bdc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024be0:	ea4c 050a 	orr.w	r5, ip, sl
 8024be4:	950d      	str	r5, [sp, #52]	; 0x34
 8024be6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024be8:	2dff      	cmp	r5, #255	; 0xff
 8024bea:	d020      	beq.n	8024c2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8024bec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024bee:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024bf2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024bf4:	436f      	muls	r7, r5
 8024bf6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024bf8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024bfc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024bfe:	fb05 fa0c 	mul.w	sl, r5, ip
 8024c02:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c0a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c0e:	44bc      	add	ip, r7
 8024c10:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c24:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c28:	ea4c 050a 	orr.w	r5, ip, sl
 8024c2c:	9509      	str	r5, [sp, #36]	; 0x24
 8024c2e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024c30:	2dff      	cmp	r5, #255	; 0xff
 8024c32:	d020      	beq.n	8024c76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8024c34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024c36:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024c3a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024c3c:	436f      	muls	r7, r5
 8024c3e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024c40:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c44:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024c48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024c4a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c4e:	fb05 fa0a 	mul.w	sl, r5, sl
 8024c52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c56:	44bc      	add	ip, r7
 8024c58:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c70:	ea4c 050a 	orr.w	r5, ip, sl
 8024c74:	950e      	str	r5, [sp, #56]	; 0x38
 8024c76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024c78:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024c7c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024c80:	fb0e f707 	mul.w	r7, lr, r7
 8024c84:	fb01 770c 	mla	r7, r1, ip, r7
 8024c88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024c8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c8e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024c92:	fb00 770c 	mla	r7, r0, ip, r7
 8024c96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024c98:	2aff      	cmp	r2, #255	; 0xff
 8024c9a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024c9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024ca0:	fb09 770c 	mla	r7, r9, ip, r7
 8024ca4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024ca8:	fb0e fe0c 	mul.w	lr, lr, ip
 8024cac:	fb01 e303 	mla	r3, r1, r3, lr
 8024cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024cb2:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8024cb6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024cba:	fb00 330a 	mla	r3, r0, sl, r3
 8024cbe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024cc0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024cc4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024cc8:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024ccc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024cd0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024cd4:	ea47 070c 	orr.w	r7, r7, ip
 8024cd8:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8024cdc:	d11e      	bne.n	8024d1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8024cde:	097a      	lsrs	r2, r7, #5
 8024ce0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8024ce4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024ce8:	f023 0307 	bic.w	r3, r3, #7
 8024cec:	4313      	orrs	r3, r2
 8024cee:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024cf2:	431f      	orrs	r7, r3
 8024cf4:	f8a8 7000 	strh.w	r7, [r8]
 8024cf8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024cfa:	f108 0802 	add.w	r8, r8, #2
 8024cfe:	441c      	add	r4, r3
 8024d00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024d02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024d06:	441e      	add	r6, r3
 8024d08:	e643      	b.n	8024992 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024d0a:	2800      	cmp	r0, #0
 8024d0c:	f43f af0a 	beq.w	8024b24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024d10:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024d14:	9109      	str	r1, [sp, #36]	; 0x24
 8024d16:	0e09      	lsrs	r1, r1, #24
 8024d18:	9111      	str	r1, [sp, #68]	; 0x44
 8024d1a:	e703      	b.n	8024b24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024d1c:	43d2      	mvns	r2, r2
 8024d1e:	f8b8 1000 	ldrh.w	r1, [r8]
 8024d22:	fa5f fe82 	uxtb.w	lr, r2
 8024d26:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024d2a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024d2e:	fb0c fc0e 	mul.w	ip, ip, lr
 8024d32:	10c8      	asrs	r0, r1, #3
 8024d34:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024d38:	fb00 f00e 	mul.w	r0, r0, lr
 8024d3c:	00ca      	lsls	r2, r1, #3
 8024d3e:	f10c 0101 	add.w	r1, ip, #1
 8024d42:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024d46:	b2d2      	uxtb	r2, r2
 8024d48:	0c39      	lsrs	r1, r7, #16
 8024d4a:	fb02 f20e 	mul.w	r2, r2, lr
 8024d4e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024d52:	490f      	ldr	r1, [pc, #60]	; (8024d90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8024d54:	fa5f fc8c 	uxtb.w	ip, ip
 8024d58:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8024d5c:	1c41      	adds	r1, r0, #1
 8024d5e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024d62:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024d66:	1c51      	adds	r1, r2, #1
 8024d68:	00c0      	lsls	r0, r0, #3
 8024d6a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024d6e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d72:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024d76:	ea4c 0c00 	orr.w	ip, ip, r0
 8024d7a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024d7e:	ea47 0c0c 	orr.w	ip, r7, ip
 8024d82:	f8a8 c000 	strh.w	ip, [r8]
 8024d86:	e7b7      	b.n	8024cf8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8024d88:	b01b      	add	sp, #108	; 0x6c
 8024d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d8e:	bf00      	nop
 8024d90:	fffff800 	.word	0xfffff800

08024d94 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8024d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024d98:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024d9c:	2d00      	cmp	r5, #0
 8024d9e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024da2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024da6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024daa:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024dae:	fb05 0e03 	mla	lr, r5, r3, r0
 8024db2:	f2c0 808c 	blt.w	8024ece <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024db6:	45a9      	cmp	r9, r5
 8024db8:	f340 8089 	ble.w	8024ece <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024dbc:	2800      	cmp	r0, #0
 8024dbe:	f2c0 8084 	blt.w	8024eca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024dc2:	4580      	cmp	r8, r0
 8024dc4:	f340 8081 	ble.w	8024eca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024dc8:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024dcc:	5d16      	ldrb	r6, [r2, r4]
 8024dce:	f01e 0f01 	tst.w	lr, #1
 8024dd2:	bf0c      	ite	eq
 8024dd4:	f006 060f 	andeq.w	r6, r6, #15
 8024dd8:	1136      	asrne	r6, r6, #4
 8024dda:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024dde:	b2f6      	uxtb	r6, r6
 8024de0:	1c44      	adds	r4, r0, #1
 8024de2:	d477      	bmi.n	8024ed4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024de4:	45a0      	cmp	r8, r4
 8024de6:	dd75      	ble.n	8024ed4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024de8:	2f00      	cmp	r7, #0
 8024dea:	d075      	beq.n	8024ed8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8024dec:	f10e 0a01 	add.w	sl, lr, #1
 8024df0:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024df4:	5d14      	ldrb	r4, [r2, r4]
 8024df6:	f01a 0f01 	tst.w	sl, #1
 8024dfa:	bf0c      	ite	eq
 8024dfc:	f004 040f 	andeq.w	r4, r4, #15
 8024e00:	1124      	asrne	r4, r4, #4
 8024e02:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024e06:	b2e4      	uxtb	r4, r4
 8024e08:	3501      	adds	r5, #1
 8024e0a:	d469      	bmi.n	8024ee0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024e0c:	45a9      	cmp	r9, r5
 8024e0e:	dd67      	ble.n	8024ee0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024e10:	f1bc 0f00 	cmp.w	ip, #0
 8024e14:	d067      	beq.n	8024ee6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8024e16:	2800      	cmp	r0, #0
 8024e18:	db60      	blt.n	8024edc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024e1a:	4580      	cmp	r8, r0
 8024e1c:	dd5e      	ble.n	8024edc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024e1e:	eb03 090e 	add.w	r9, r3, lr
 8024e22:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024e26:	5d55      	ldrb	r5, [r2, r5]
 8024e28:	f019 0f01 	tst.w	r9, #1
 8024e2c:	bf0c      	ite	eq
 8024e2e:	f005 050f 	andeq.w	r5, r5, #15
 8024e32:	112d      	asrne	r5, r5, #4
 8024e34:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024e38:	b2ed      	uxtb	r5, r5
 8024e3a:	3001      	adds	r0, #1
 8024e3c:	d456      	bmi.n	8024eec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024e3e:	4580      	cmp	r8, r0
 8024e40:	dd54      	ble.n	8024eec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024e42:	2f00      	cmp	r7, #0
 8024e44:	d054      	beq.n	8024ef0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8024e46:	3301      	adds	r3, #1
 8024e48:	449e      	add	lr, r3
 8024e4a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024e4e:	5cd0      	ldrb	r0, [r2, r3]
 8024e50:	f01e 0f01 	tst.w	lr, #1
 8024e54:	bf0c      	ite	eq
 8024e56:	f000 000f 	andeq.w	r0, r0, #15
 8024e5a:	1100      	asrne	r0, r0, #4
 8024e5c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024e60:	b2c3      	uxtb	r3, r0
 8024e62:	b2ba      	uxth	r2, r7
 8024e64:	fa1f fc8c 	uxth.w	ip, ip
 8024e68:	fb02 f00c 	mul.w	r0, r2, ip
 8024e6c:	0112      	lsls	r2, r2, #4
 8024e6e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8024e72:	1a12      	subs	r2, r2, r0
 8024e74:	b292      	uxth	r2, r2
 8024e76:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024e7a:	4362      	muls	r2, r4
 8024e7c:	fa1f fc8c 	uxth.w	ip, ip
 8024e80:	eba7 070c 	sub.w	r7, r7, ip
 8024e84:	b2bf      	uxth	r7, r7
 8024e86:	fb06 2207 	mla	r2, r6, r7, r2
 8024e8a:	fb0c 2505 	mla	r5, ip, r5, r2
 8024e8e:	fb00 5303 	mla	r3, r0, r3, r5
 8024e92:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e96:	b1b3      	cbz	r3, 8024ec6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024e98:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8024e9c:	435a      	muls	r2, r3
 8024e9e:	1c53      	adds	r3, r2, #1
 8024ea0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024ea4:	4a2d      	ldr	r2, [pc, #180]	; (8024f5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8024ea6:	121b      	asrs	r3, r3, #8
 8024ea8:	6812      	ldr	r2, [r2, #0]
 8024eaa:	2bff      	cmp	r3, #255	; 0xff
 8024eac:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8024eb0:	d120      	bne.n	8024ef4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8024eb2:	4b2b      	ldr	r3, [pc, #172]	; (8024f60 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8024eb4:	0950      	lsrs	r0, r2, #5
 8024eb6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024eba:	4033      	ands	r3, r6
 8024ebc:	4318      	orrs	r0, r3
 8024ebe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024ec2:	4302      	orrs	r2, r0
 8024ec4:	800a      	strh	r2, [r1, #0]
 8024ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024eca:	2600      	movs	r6, #0
 8024ecc:	e788      	b.n	8024de0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8024ece:	2400      	movs	r4, #0
 8024ed0:	4626      	mov	r6, r4
 8024ed2:	e799      	b.n	8024e08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024ed4:	2400      	movs	r4, #0
 8024ed6:	e797      	b.n	8024e08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024ed8:	463c      	mov	r4, r7
 8024eda:	e795      	b.n	8024e08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024edc:	2500      	movs	r5, #0
 8024ede:	e7ac      	b.n	8024e3a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8024ee0:	2300      	movs	r3, #0
 8024ee2:	461d      	mov	r5, r3
 8024ee4:	e7bd      	b.n	8024e62 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024ee6:	4663      	mov	r3, ip
 8024ee8:	4665      	mov	r5, ip
 8024eea:	e7ba      	b.n	8024e62 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024eec:	2300      	movs	r3, #0
 8024eee:	e7b8      	b.n	8024e62 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024ef0:	463b      	mov	r3, r7
 8024ef2:	e7b6      	b.n	8024e62 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024ef4:	b29f      	uxth	r7, r3
 8024ef6:	43db      	mvns	r3, r3
 8024ef8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024efc:	880d      	ldrh	r5, [r1, #0]
 8024efe:	fb10 f007 	smulbb	r0, r0, r7
 8024f02:	b2f6      	uxtb	r6, r6
 8024f04:	b2d2      	uxtb	r2, r2
 8024f06:	122c      	asrs	r4, r5, #8
 8024f08:	fb12 f207 	smulbb	r2, r2, r7
 8024f0c:	fb16 f607 	smulbb	r6, r6, r7
 8024f10:	b2db      	uxtb	r3, r3
 8024f12:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024f16:	fb04 0403 	mla	r4, r4, r3, r0
 8024f1a:	10e8      	asrs	r0, r5, #3
 8024f1c:	00ed      	lsls	r5, r5, #3
 8024f1e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024f22:	b2ed      	uxtb	r5, r5
 8024f24:	fb00 6603 	mla	r6, r0, r3, r6
 8024f28:	fb05 2303 	mla	r3, r5, r3, r2
 8024f2c:	b2a4      	uxth	r4, r4
 8024f2e:	b29a      	uxth	r2, r3
 8024f30:	1c63      	adds	r3, r4, #1
 8024f32:	b2b0      	uxth	r0, r6
 8024f34:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024f38:	1c53      	adds	r3, r2, #1
 8024f3a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024f3e:	1c42      	adds	r2, r0, #1
 8024f40:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024f44:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024f48:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024f4c:	0940      	lsrs	r0, r0, #5
 8024f4e:	4323      	orrs	r3, r4
 8024f50:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024f54:	4303      	orrs	r3, r0
 8024f56:	800b      	strh	r3, [r1, #0]
 8024f58:	e7b5      	b.n	8024ec6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024f5a:	bf00      	nop
 8024f5c:	2004f6d8 	.word	0x2004f6d8
 8024f60:	00fff800 	.word	0x00fff800

08024f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f68:	b097      	sub	sp, #92	; 0x5c
 8024f6a:	9214      	str	r2, [sp, #80]	; 0x50
 8024f6c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024f6e:	9015      	str	r0, [sp, #84]	; 0x54
 8024f70:	9309      	str	r3, [sp, #36]	; 0x24
 8024f72:	6850      	ldr	r0, [r2, #4]
 8024f74:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024f78:	910d      	str	r1, [sp, #52]	; 0x34
 8024f7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8024f7c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024f80:	fb00 1303 	mla	r3, r0, r3, r1
 8024f84:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024f88:	6812      	ldr	r2, [r2, #0]
 8024f8a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024f8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024f90:	689b      	ldr	r3, [r3, #8]
 8024f92:	3301      	adds	r3, #1
 8024f94:	f023 0301 	bic.w	r3, r3, #1
 8024f98:	930a      	str	r3, [sp, #40]	; 0x28
 8024f9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024f9c:	681f      	ldr	r7, [r3, #0]
 8024f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	dc03      	bgt.n	8024fac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024fa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024fa6:	2b00      	cmp	r3, #0
 8024fa8:	f340 8287 	ble.w	80254ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8024fac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024fae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024fb2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024fb6:	1e48      	subs	r0, r1, #1
 8024fb8:	f102 3cff 	add.w	ip, r2, #4294967295
 8024fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fbe:	2b00      	cmp	r3, #0
 8024fc0:	f340 80c3 	ble.w	802514a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024fc4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024fc8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024fcc:	d406      	bmi.n	8024fdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024fce:	4586      	cmp	lr, r0
 8024fd0:	da04      	bge.n	8024fdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024fd2:	2b00      	cmp	r3, #0
 8024fd4:	db02      	blt.n	8024fdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024fd6:	4563      	cmp	r3, ip
 8024fd8:	f2c0 80b8 	blt.w	802514c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024fdc:	f11e 0e01 	adds.w	lr, lr, #1
 8024fe0:	f100 80a9 	bmi.w	8025136 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024fe4:	4571      	cmp	r1, lr
 8024fe6:	f2c0 80a6 	blt.w	8025136 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024fea:	3301      	adds	r3, #1
 8024fec:	f100 80a3 	bmi.w	8025136 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024ff0:	429a      	cmp	r2, r3
 8024ff2:	f2c0 80a0 	blt.w	8025136 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024ff6:	46c8      	mov	r8, r9
 8024ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ffa:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8024ffe:	930e      	str	r3, [sp, #56]	; 0x38
 8025000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025002:	2b00      	cmp	r3, #0
 8025004:	f340 80c2 	ble.w	802518c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8025008:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802500a:	1430      	asrs	r0, r6, #16
 802500c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025010:	1423      	asrs	r3, r4, #16
 8025012:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025016:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802501a:	f100 814d 	bmi.w	80252b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802501e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8025022:	455b      	cmp	r3, fp
 8025024:	f280 8148 	bge.w	80252b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025028:	2800      	cmp	r0, #0
 802502a:	f2c0 8145 	blt.w	80252b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802502e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025032:	4558      	cmp	r0, fp
 8025034:	f280 8140 	bge.w	80252b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025038:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802503a:	fb00 3305 	mla	r3, r0, r5, r3
 802503e:	0858      	lsrs	r0, r3, #1
 8025040:	f817 c000 	ldrb.w	ip, [r7, r0]
 8025044:	07dd      	lsls	r5, r3, #31
 8025046:	bf54      	ite	pl
 8025048:	f00c 0c0f 	andpl.w	ip, ip, #15
 802504c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025050:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025054:	fa5f fc8c 	uxtb.w	ip, ip
 8025058:	2a00      	cmp	r2, #0
 802505a:	f000 80db 	beq.w	8025214 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802505e:	1c58      	adds	r0, r3, #1
 8025060:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8025064:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8025068:	07c0      	lsls	r0, r0, #31
 802506a:	bf54      	ite	pl
 802506c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025070:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8025074:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8025078:	fa5f f08e 	uxtb.w	r0, lr
 802507c:	9010      	str	r0, [sp, #64]	; 0x40
 802507e:	b1c9      	cbz	r1, 80250b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8025080:	4453      	add	r3, sl
 8025082:	0858      	lsrs	r0, r3, #1
 8025084:	5c38      	ldrb	r0, [r7, r0]
 8025086:	07dd      	lsls	r5, r3, #31
 8025088:	bf54      	ite	pl
 802508a:	f000 000f 	andpl.w	r0, r0, #15
 802508e:	1100      	asrmi	r0, r0, #4
 8025090:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025094:	3301      	adds	r3, #1
 8025096:	b2c0      	uxtb	r0, r0
 8025098:	900b      	str	r0, [sp, #44]	; 0x2c
 802509a:	0858      	lsrs	r0, r3, #1
 802509c:	f817 e000 	ldrb.w	lr, [r7, r0]
 80250a0:	07dd      	lsls	r5, r3, #31
 80250a2:	bf54      	ite	pl
 80250a4:	f00e 030f 	andpl.w	r3, lr, #15
 80250a8:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80250ac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80250b0:	b2db      	uxtb	r3, r3
 80250b2:	9311      	str	r3, [sp, #68]	; 0x44
 80250b4:	b292      	uxth	r2, r2
 80250b6:	b289      	uxth	r1, r1
 80250b8:	fb02 f301 	mul.w	r3, r2, r1
 80250bc:	0112      	lsls	r2, r2, #4
 80250be:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80250c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80250c4:	1ad2      	subs	r2, r2, r3
 80250c6:	b292      	uxth	r2, r2
 80250c8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80250cc:	436a      	muls	r2, r5
 80250ce:	b289      	uxth	r1, r1
 80250d0:	1a40      	subs	r0, r0, r1
 80250d2:	b280      	uxth	r0, r0
 80250d4:	fb0c 2c00 	mla	ip, ip, r0, r2
 80250d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80250da:	fb01 c102 	mla	r1, r1, r2, ip
 80250de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80250e0:	fb03 1302 	mla	r3, r3, r2, r1
 80250e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80250e8:	b1db      	cbz	r3, 8025122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80250ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80250ec:	4353      	muls	r3, r2
 80250ee:	1c5a      	adds	r2, r3, #1
 80250f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80250f4:	4ac6      	ldr	r2, [pc, #792]	; (8025410 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80250f6:	121b      	asrs	r3, r3, #8
 80250f8:	6812      	ldr	r2, [r2, #0]
 80250fa:	2bff      	cmp	r3, #255	; 0xff
 80250fc:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025100:	f040 8099 	bne.w	8025236 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8025104:	0953      	lsrs	r3, r2, #5
 8025106:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802510a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802510e:	f02c 0c07 	bic.w	ip, ip, #7
 8025112:	ea43 0c0c 	orr.w	ip, r3, ip
 8025116:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802511a:	ea4c 0202 	orr.w	r2, ip, r2
 802511e:	f8a8 2000 	strh.w	r2, [r8]
 8025122:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025124:	f108 0802 	add.w	r8, r8, #2
 8025128:	441c      	add	r4, r3
 802512a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802512c:	441e      	add	r6, r3
 802512e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025130:	3b01      	subs	r3, #1
 8025132:	930e      	str	r3, [sp, #56]	; 0x38
 8025134:	e764      	b.n	8025000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025136:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025138:	f109 0902 	add.w	r9, r9, #2
 802513c:	441c      	add	r4, r3
 802513e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025140:	441e      	add	r6, r3
 8025142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025144:	3b01      	subs	r3, #1
 8025146:	9309      	str	r3, [sp, #36]	; 0x24
 8025148:	e738      	b.n	8024fbc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802514a:	d024      	beq.n	8025196 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802514c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802514e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025150:	3b01      	subs	r3, #1
 8025152:	fb00 4003 	mla	r0, r0, r3, r4
 8025156:	1400      	asrs	r0, r0, #16
 8025158:	f53f af4d 	bmi.w	8024ff6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802515c:	3901      	subs	r1, #1
 802515e:	4288      	cmp	r0, r1
 8025160:	f6bf af49 	bge.w	8024ff6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025164:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025166:	fb01 6303 	mla	r3, r1, r3, r6
 802516a:	141b      	asrs	r3, r3, #16
 802516c:	f53f af43 	bmi.w	8024ff6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025170:	3a01      	subs	r2, #1
 8025172:	4293      	cmp	r3, r2
 8025174:	f6bf af3f 	bge.w	8024ff6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025178:	46c8      	mov	r8, r9
 802517a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802517e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8025182:	930e      	str	r3, [sp, #56]	; 0x38
 8025184:	f1bb 0f00 	cmp.w	fp, #0
 8025188:	f300 80b7 	bgt.w	80252fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 802518c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802518e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025192:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8025196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025198:	2b00      	cmp	r3, #0
 802519a:	f340 818e 	ble.w	80254ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802519e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80251a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80251a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80251aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80251ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80251b2:	eef0 6a62 	vmov.f32	s13, s5
 80251b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80251ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80251be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80251c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80251c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80251ca:	ee16 4a90 	vmov	r4, s13
 80251ce:	eef0 6a43 	vmov.f32	s13, s6
 80251d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80251d6:	ee12 2a90 	vmov	r2, s5
 80251da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80251de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80251e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80251e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80251e8:	ee13 2a10 	vmov	r2, s6
 80251ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80251ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80251f0:	ee16 6a90 	vmov	r6, s13
 80251f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80251f8:	9324      	str	r3, [sp, #144]	; 0x90
 80251fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80251fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80251fe:	3b01      	subs	r3, #1
 8025200:	930d      	str	r3, [sp, #52]	; 0x34
 8025202:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025204:	bf08      	it	eq
 8025206:	4613      	moveq	r3, r2
 8025208:	eeb0 3a67 	vmov.f32	s6, s15
 802520c:	9309      	str	r3, [sp, #36]	; 0x24
 802520e:	eef0 2a47 	vmov.f32	s5, s14
 8025212:	e6c4      	b.n	8024f9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025214:	2900      	cmp	r1, #0
 8025216:	f43f af4d 	beq.w	80250b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802521a:	eb0a 0003 	add.w	r0, sl, r3
 802521e:	0843      	lsrs	r3, r0, #1
 8025220:	5cfb      	ldrb	r3, [r7, r3]
 8025222:	07c0      	lsls	r0, r0, #31
 8025224:	bf54      	ite	pl
 8025226:	f003 030f 	andpl.w	r3, r3, #15
 802522a:	111b      	asrmi	r3, r3, #4
 802522c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025230:	b2db      	uxtb	r3, r3
 8025232:	930b      	str	r3, [sp, #44]	; 0x2c
 8025234:	e73e      	b.n	80250b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8025236:	fa1f fb83 	uxth.w	fp, r3
 802523a:	43db      	mvns	r3, r3
 802523c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8025240:	f8b8 e000 	ldrh.w	lr, [r8]
 8025244:	fb11 f10b 	smulbb	r1, r1, fp
 8025248:	fa5f fc8c 	uxtb.w	ip, ip
 802524c:	b2d2      	uxtb	r2, r2
 802524e:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025252:	fb1c fc0b 	smulbb	ip, ip, fp
 8025256:	fb12 fb0b 	smulbb	fp, r2, fp
 802525a:	b2db      	uxtb	r3, r3
 802525c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025260:	fb00 1003 	mla	r0, r0, r3, r1
 8025264:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8025268:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802526c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025270:	fa5f fe8e 	uxtb.w	lr, lr
 8025274:	fb01 cc03 	mla	ip, r1, r3, ip
 8025278:	fb0e bb03 	mla	fp, lr, r3, fp
 802527c:	b280      	uxth	r0, r0
 802527e:	1c43      	adds	r3, r0, #1
 8025280:	fa1f fc8c 	uxth.w	ip, ip
 8025284:	fa1f fb8b 	uxth.w	fp, fp
 8025288:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802528c:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8025290:	f10c 0101 	add.w	r1, ip, #1
 8025294:	f10b 0001 	add.w	r0, fp, #1
 8025298:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802529c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80252a0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80252a4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80252a8:	4318      	orrs	r0, r3
 80252aa:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80252ae:	ea40 000c 	orr.w	r0, r0, ip
 80252b2:	f8a8 0000 	strh.w	r0, [r8]
 80252b6:	e734      	b.n	8025122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80252b8:	f113 0b01 	adds.w	fp, r3, #1
 80252bc:	f53f af31 	bmi.w	8025122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80252c0:	45dc      	cmp	ip, fp
 80252c2:	f6ff af2e 	blt.w	8025122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80252c6:	f110 0b01 	adds.w	fp, r0, #1
 80252ca:	f53f af2a 	bmi.w	8025122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80252ce:	45de      	cmp	lr, fp
 80252d0:	f6ff af27 	blt.w	8025122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80252d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80252d6:	9302      	str	r3, [sp, #8]
 80252d8:	fa0f f38e 	sxth.w	r3, lr
 80252dc:	9301      	str	r3, [sp, #4]
 80252de:	fa0f f38c 	sxth.w	r3, ip
 80252e2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80252e6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80252ea:	9300      	str	r3, [sp, #0]
 80252ec:	463a      	mov	r2, r7
 80252ee:	4653      	mov	r3, sl
 80252f0:	4641      	mov	r1, r8
 80252f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80252f4:	f7ff fd4e 	bl	8024d94 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80252f8:	e713      	b.n	8025122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80252fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80252fc:	1422      	asrs	r2, r4, #16
 80252fe:	1433      	asrs	r3, r6, #16
 8025300:	fb05 2303 	mla	r3, r5, r3, r2
 8025304:	085a      	lsrs	r2, r3, #1
 8025306:	5cba      	ldrb	r2, [r7, r2]
 8025308:	07dd      	lsls	r5, r3, #31
 802530a:	bf54      	ite	pl
 802530c:	f002 020f 	andpl.w	r2, r2, #15
 8025310:	1112      	asrmi	r2, r2, #4
 8025312:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025316:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802531a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802531e:	b2d2      	uxtb	r2, r2
 8025320:	2900      	cmp	r1, #0
 8025322:	d077      	beq.n	8025414 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025324:	f103 0e01 	add.w	lr, r3, #1
 8025328:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802532c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025330:	f01e 0f01 	tst.w	lr, #1
 8025334:	bf0c      	ite	eq
 8025336:	f00c 0c0f 	andeq.w	ip, ip, #15
 802533a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802533e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025342:	fa5f f58c 	uxtb.w	r5, ip
 8025346:	9512      	str	r5, [sp, #72]	; 0x48
 8025348:	b300      	cbz	r0, 802538c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802534a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802534c:	442b      	add	r3, r5
 802534e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025352:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025356:	07dd      	lsls	r5, r3, #31
 8025358:	bf54      	ite	pl
 802535a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802535e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025362:	3301      	adds	r3, #1
 8025364:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025368:	fa5f f58c 	uxtb.w	r5, ip
 802536c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025370:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025374:	950c      	str	r5, [sp, #48]	; 0x30
 8025376:	07dd      	lsls	r5, r3, #31
 8025378:	bf54      	ite	pl
 802537a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802537e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025382:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025386:	fa5f f38c 	uxtb.w	r3, ip
 802538a:	9313      	str	r3, [sp, #76]	; 0x4c
 802538c:	b289      	uxth	r1, r1
 802538e:	b280      	uxth	r0, r0
 8025390:	fb01 f300 	mul.w	r3, r1, r0
 8025394:	0109      	lsls	r1, r1, #4
 8025396:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802539a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802539c:	1ac9      	subs	r1, r1, r3
 802539e:	b289      	uxth	r1, r1
 80253a0:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80253a4:	4369      	muls	r1, r5
 80253a6:	b280      	uxth	r0, r0
 80253a8:	ebac 0c00 	sub.w	ip, ip, r0
 80253ac:	fa1f fc8c 	uxth.w	ip, ip
 80253b0:	fb02 120c 	mla	r2, r2, ip, r1
 80253b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80253b6:	fb00 2001 	mla	r0, r0, r1, r2
 80253ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80253bc:	fb03 0302 	mla	r3, r3, r2, r0
 80253c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80253c4:	b1d3      	cbz	r3, 80253fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80253c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80253c8:	4353      	muls	r3, r2
 80253ca:	1c5a      	adds	r2, r3, #1
 80253cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80253d0:	4a0f      	ldr	r2, [pc, #60]	; (8025410 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80253d2:	121b      	asrs	r3, r3, #8
 80253d4:	6812      	ldr	r2, [r2, #0]
 80253d6:	2bff      	cmp	r3, #255	; 0xff
 80253d8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80253dc:	d12e      	bne.n	802543c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80253de:	0953      	lsrs	r3, r2, #5
 80253e0:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80253e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80253e8:	f02c 0c07 	bic.w	ip, ip, #7
 80253ec:	ea43 0c0c 	orr.w	ip, r3, ip
 80253f0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80253f4:	ea4c 0202 	orr.w	r2, ip, r2
 80253f8:	f8a8 2000 	strh.w	r2, [r8]
 80253fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80253fe:	f108 0802 	add.w	r8, r8, #2
 8025402:	441c      	add	r4, r3
 8025404:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025406:	f10b 3bff 	add.w	fp, fp, #4294967295
 802540a:	441e      	add	r6, r3
 802540c:	e6ba      	b.n	8025184 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802540e:	bf00      	nop
 8025410:	2004f6d8 	.word	0x2004f6d8
 8025414:	2800      	cmp	r0, #0
 8025416:	d0b9      	beq.n	802538c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8025418:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802541a:	442b      	add	r3, r5
 802541c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025420:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025424:	07db      	lsls	r3, r3, #31
 8025426:	bf54      	ite	pl
 8025428:	f00c 0c0f 	andpl.w	ip, ip, #15
 802542c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025430:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025434:	fa5f f38c 	uxtb.w	r3, ip
 8025438:	930c      	str	r3, [sp, #48]	; 0x30
 802543a:	e7a7      	b.n	802538c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802543c:	fa1f fa83 	uxth.w	sl, r3
 8025440:	43db      	mvns	r3, r3
 8025442:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8025446:	f8b8 e000 	ldrh.w	lr, [r8]
 802544a:	fb11 f10a 	smulbb	r1, r1, sl
 802544e:	b2d2      	uxtb	r2, r2
 8025450:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025454:	fb12 f20a 	smulbb	r2, r2, sl
 8025458:	b2db      	uxtb	r3, r3
 802545a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802545e:	fb00 1003 	mla	r0, r0, r3, r1
 8025462:	fa5f fc8c 	uxtb.w	ip, ip
 8025466:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802546a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802546e:	fb1c fc0a 	smulbb	ip, ip, sl
 8025472:	fa5f fe8e 	uxtb.w	lr, lr
 8025476:	fb0e 2203 	mla	r2, lr, r3, r2
 802547a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802547e:	fb01 cc03 	mla	ip, r1, r3, ip
 8025482:	b280      	uxth	r0, r0
 8025484:	b292      	uxth	r2, r2
 8025486:	1c43      	adds	r3, r0, #1
 8025488:	1c51      	adds	r1, r2, #1
 802548a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802548e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8025492:	fa1f fc8c 	uxth.w	ip, ip
 8025496:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802549a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802549e:	4308      	orrs	r0, r1
 80254a0:	f10c 0101 	add.w	r1, ip, #1
 80254a4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80254a8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80254ac:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80254b0:	ea40 000c 	orr.w	r0, r0, ip
 80254b4:	f8a8 0000 	strh.w	r0, [r8]
 80254b8:	e7a0      	b.n	80253fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80254ba:	b017      	add	sp, #92	; 0x5c
 80254bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080254c0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80254c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80254c4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80254c8:	2d00      	cmp	r5, #0
 80254ca:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80254ce:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80254d2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80254d6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80254da:	fb05 0e03 	mla	lr, r5, r3, r0
 80254de:	f2c0 80b0 	blt.w	8025642 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80254e2:	45a9      	cmp	r9, r5
 80254e4:	f340 80ad 	ble.w	8025642 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80254e8:	2800      	cmp	r0, #0
 80254ea:	f2c0 80a8 	blt.w	802563e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80254ee:	4580      	cmp	r8, r0
 80254f0:	f340 80a5 	ble.w	802563e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80254f4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80254f8:	5d16      	ldrb	r6, [r2, r4]
 80254fa:	f01e 0f01 	tst.w	lr, #1
 80254fe:	bf0c      	ite	eq
 8025500:	f006 060f 	andeq.w	r6, r6, #15
 8025504:	1136      	asrne	r6, r6, #4
 8025506:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802550a:	b2f6      	uxtb	r6, r6
 802550c:	1c44      	adds	r4, r0, #1
 802550e:	f100 809b 	bmi.w	8025648 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025512:	45a0      	cmp	r8, r4
 8025514:	f340 8098 	ble.w	8025648 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025518:	2f00      	cmp	r7, #0
 802551a:	f000 8097 	beq.w	802564c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802551e:	f10e 0a01 	add.w	sl, lr, #1
 8025522:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8025526:	5d14      	ldrb	r4, [r2, r4]
 8025528:	f01a 0f01 	tst.w	sl, #1
 802552c:	bf0c      	ite	eq
 802552e:	f004 040f 	andeq.w	r4, r4, #15
 8025532:	1124      	asrne	r4, r4, #4
 8025534:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025538:	b2e4      	uxtb	r4, r4
 802553a:	3501      	adds	r5, #1
 802553c:	f100 808a 	bmi.w	8025654 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025540:	45a9      	cmp	r9, r5
 8025542:	f340 8087 	ble.w	8025654 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025546:	f1bc 0f00 	cmp.w	ip, #0
 802554a:	f000 8086 	beq.w	802565a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802554e:	2800      	cmp	r0, #0
 8025550:	db7e      	blt.n	8025650 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025552:	4580      	cmp	r8, r0
 8025554:	dd7c      	ble.n	8025650 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025556:	eb03 090e 	add.w	r9, r3, lr
 802555a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802555e:	5d55      	ldrb	r5, [r2, r5]
 8025560:	f019 0f01 	tst.w	r9, #1
 8025564:	bf0c      	ite	eq
 8025566:	f005 050f 	andeq.w	r5, r5, #15
 802556a:	112d      	asrne	r5, r5, #4
 802556c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025570:	b2ed      	uxtb	r5, r5
 8025572:	3001      	adds	r0, #1
 8025574:	d474      	bmi.n	8025660 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8025576:	4580      	cmp	r8, r0
 8025578:	dd72      	ble.n	8025660 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802557a:	2f00      	cmp	r7, #0
 802557c:	d072      	beq.n	8025664 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802557e:	3301      	adds	r3, #1
 8025580:	449e      	add	lr, r3
 8025582:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025586:	5cd0      	ldrb	r0, [r2, r3]
 8025588:	f01e 0f01 	tst.w	lr, #1
 802558c:	bf0c      	ite	eq
 802558e:	f000 000f 	andeq.w	r0, r0, #15
 8025592:	1100      	asrne	r0, r0, #4
 8025594:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025598:	b2c3      	uxtb	r3, r0
 802559a:	b2ba      	uxth	r2, r7
 802559c:	fa1f fc8c 	uxth.w	ip, ip
 80255a0:	fb02 f00c 	mul.w	r0, r2, ip
 80255a4:	0112      	lsls	r2, r2, #4
 80255a6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80255aa:	1a12      	subs	r2, r2, r0
 80255ac:	b292      	uxth	r2, r2
 80255ae:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80255b2:	4362      	muls	r2, r4
 80255b4:	fa1f fc8c 	uxth.w	ip, ip
 80255b8:	eba7 070c 	sub.w	r7, r7, ip
 80255bc:	b2bf      	uxth	r7, r7
 80255be:	fb06 2207 	mla	r2, r6, r7, r2
 80255c2:	fb0c 2505 	mla	r5, ip, r5, r2
 80255c6:	fb00 5303 	mla	r3, r0, r3, r5
 80255ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80255ce:	b3a3      	cbz	r3, 802563a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80255d0:	4a25      	ldr	r2, [pc, #148]	; (8025668 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80255d2:	880e      	ldrh	r6, [r1, #0]
 80255d4:	6815      	ldr	r5, [r2, #0]
 80255d6:	b29a      	uxth	r2, r3
 80255d8:	43db      	mvns	r3, r3
 80255da:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80255de:	fb10 f002 	smulbb	r0, r0, r2
 80255e2:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80255e6:	b2ed      	uxtb	r5, r5
 80255e8:	1234      	asrs	r4, r6, #8
 80255ea:	fb17 f702 	smulbb	r7, r7, r2
 80255ee:	fb15 f202 	smulbb	r2, r5, r2
 80255f2:	b2db      	uxtb	r3, r3
 80255f4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80255f8:	fb04 0403 	mla	r4, r4, r3, r0
 80255fc:	10f0      	asrs	r0, r6, #3
 80255fe:	00f6      	lsls	r6, r6, #3
 8025600:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025604:	b2f6      	uxtb	r6, r6
 8025606:	fb00 7003 	mla	r0, r0, r3, r7
 802560a:	fb06 2303 	mla	r3, r6, r3, r2
 802560e:	b2a4      	uxth	r4, r4
 8025610:	b29a      	uxth	r2, r3
 8025612:	1c63      	adds	r3, r4, #1
 8025614:	b280      	uxth	r0, r0
 8025616:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802561a:	1c53      	adds	r3, r2, #1
 802561c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025620:	1c42      	adds	r2, r0, #1
 8025622:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025626:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802562a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802562e:	0940      	lsrs	r0, r0, #5
 8025630:	4323      	orrs	r3, r4
 8025632:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025636:	4303      	orrs	r3, r0
 8025638:	800b      	strh	r3, [r1, #0]
 802563a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802563e:	2600      	movs	r6, #0
 8025640:	e764      	b.n	802550c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8025642:	2400      	movs	r4, #0
 8025644:	4626      	mov	r6, r4
 8025646:	e778      	b.n	802553a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025648:	2400      	movs	r4, #0
 802564a:	e776      	b.n	802553a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802564c:	463c      	mov	r4, r7
 802564e:	e774      	b.n	802553a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025650:	2500      	movs	r5, #0
 8025652:	e78e      	b.n	8025572 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8025654:	2300      	movs	r3, #0
 8025656:	461d      	mov	r5, r3
 8025658:	e79f      	b.n	802559a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802565a:	4663      	mov	r3, ip
 802565c:	4665      	mov	r5, ip
 802565e:	e79c      	b.n	802559a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025660:	2300      	movs	r3, #0
 8025662:	e79a      	b.n	802559a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025664:	463b      	mov	r3, r7
 8025666:	e798      	b.n	802559a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025668:	2004f6d8 	.word	0x2004f6d8

0802566c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802566c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025670:	b093      	sub	sp, #76	; 0x4c
 8025672:	920c      	str	r2, [sp, #48]	; 0x30
 8025674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025676:	9011      	str	r0, [sp, #68]	; 0x44
 8025678:	6850      	ldr	r0, [r2, #4]
 802567a:	9107      	str	r1, [sp, #28]
 802567c:	461d      	mov	r5, r3
 802567e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025682:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8025686:	fb00 1303 	mla	r3, r0, r3, r1
 802568a:	6812      	ldr	r2, [r2, #0]
 802568c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025690:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025692:	689b      	ldr	r3, [r3, #8]
 8025694:	3301      	adds	r3, #1
 8025696:	f023 0301 	bic.w	r3, r3, #1
 802569a:	9306      	str	r3, [sp, #24]
 802569c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802569e:	681f      	ldr	r7, [r3, #0]
 80256a0:	9b07      	ldr	r3, [sp, #28]
 80256a2:	2b00      	cmp	r3, #0
 80256a4:	dc03      	bgt.n	80256ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80256a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80256a8:	2b00      	cmp	r3, #0
 80256aa:	f340 8265 	ble.w	8025b78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 80256ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80256b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80256b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80256b8:	1e48      	subs	r0, r1, #1
 80256ba:	f102 3cff 	add.w	ip, r2, #4294967295
 80256be:	2d00      	cmp	r5, #0
 80256c0:	f340 80b7 	ble.w	8025832 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80256c4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80256c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80256cc:	d406      	bmi.n	80256dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80256ce:	4586      	cmp	lr, r0
 80256d0:	da04      	bge.n	80256dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80256d2:	2b00      	cmp	r3, #0
 80256d4:	db02      	blt.n	80256dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80256d6:	4563      	cmp	r3, ip
 80256d8:	f2c0 80ac 	blt.w	8025834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80256dc:	f11e 0e01 	adds.w	lr, lr, #1
 80256e0:	f100 809f 	bmi.w	8025822 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80256e4:	4571      	cmp	r1, lr
 80256e6:	f2c0 809c 	blt.w	8025822 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80256ea:	3301      	adds	r3, #1
 80256ec:	f100 8099 	bmi.w	8025822 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80256f0:	429a      	cmp	r2, r3
 80256f2:	f2c0 8096 	blt.w	8025822 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80256f6:	46c8      	mov	r8, r9
 80256f8:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80256fc:	9509      	str	r5, [sp, #36]	; 0x24
 80256fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025700:	2b00      	cmp	r3, #0
 8025702:	f340 80b5 	ble.w	8025870 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8025706:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802570a:	9308      	str	r3, [sp, #32]
 802570c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802570e:	1430      	asrs	r0, r6, #16
 8025710:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025714:	1423      	asrs	r3, r4, #16
 8025716:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802571a:	f100 813e 	bmi.w	802599a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802571e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8025722:	455b      	cmp	r3, fp
 8025724:	f280 8139 	bge.w	802599a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025728:	2800      	cmp	r0, #0
 802572a:	f2c0 8136 	blt.w	802599a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802572e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025732:	4558      	cmp	r0, fp
 8025734:	f280 8131 	bge.w	802599a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025738:	9a06      	ldr	r2, [sp, #24]
 802573a:	fb00 3302 	mla	r3, r0, r2, r3
 802573e:	0858      	lsrs	r0, r3, #1
 8025740:	f817 c000 	ldrb.w	ip, [r7, r0]
 8025744:	07da      	lsls	r2, r3, #31
 8025746:	bf54      	ite	pl
 8025748:	f00c 0c0f 	andpl.w	ip, ip, #15
 802574c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025750:	9a08      	ldr	r2, [sp, #32]
 8025752:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025756:	fa5f fc8c 	uxtb.w	ip, ip
 802575a:	2a00      	cmp	r2, #0
 802575c:	f000 80cb 	beq.w	80258f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8025760:	1c58      	adds	r0, r3, #1
 8025762:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8025766:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802576a:	07c0      	lsls	r0, r0, #31
 802576c:	bf54      	ite	pl
 802576e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025772:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8025776:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802577a:	fa5f fe8e 	uxtb.w	lr, lr
 802577e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8025782:	b1b9      	cbz	r1, 80257b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025784:	4453      	add	r3, sl
 8025786:	0858      	lsrs	r0, r3, #1
 8025788:	5c38      	ldrb	r0, [r7, r0]
 802578a:	07da      	lsls	r2, r3, #31
 802578c:	bf54      	ite	pl
 802578e:	f000 000f 	andpl.w	r0, r0, #15
 8025792:	1100      	asrmi	r0, r0, #4
 8025794:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025798:	b2c0      	uxtb	r0, r0
 802579a:	900a      	str	r0, [sp, #40]	; 0x28
 802579c:	1c58      	adds	r0, r3, #1
 802579e:	0843      	lsrs	r3, r0, #1
 80257a0:	5cfb      	ldrb	r3, [r7, r3]
 80257a2:	07c2      	lsls	r2, r0, #31
 80257a4:	bf54      	ite	pl
 80257a6:	f003 030f 	andpl.w	r3, r3, #15
 80257aa:	111b      	asrmi	r3, r3, #4
 80257ac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80257b0:	b2db      	uxtb	r3, r3
 80257b2:	930e      	str	r3, [sp, #56]	; 0x38
 80257b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80257b8:	b289      	uxth	r1, r1
 80257ba:	fb02 f301 	mul.w	r3, r2, r1
 80257be:	0112      	lsls	r2, r2, #4
 80257c0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80257c4:	b289      	uxth	r1, r1
 80257c6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80257ca:	1a40      	subs	r0, r0, r1
 80257cc:	fa1f fe80 	uxth.w	lr, r0
 80257d0:	1ad2      	subs	r2, r2, r3
 80257d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80257d4:	b292      	uxth	r2, r2
 80257d6:	4342      	muls	r2, r0
 80257d8:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80257dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80257de:	fb01 c102 	mla	r1, r1, r2, ip
 80257e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80257e4:	fb03 1302 	mla	r3, r3, r2, r1
 80257e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80257ec:	2bff      	cmp	r3, #255	; 0xff
 80257ee:	f040 8093 	bne.w	8025918 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80257f2:	4bbe      	ldr	r3, [pc, #760]	; (8025aec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 80257f4:	681a      	ldr	r2, [r3, #0]
 80257f6:	4bbe      	ldr	r3, [pc, #760]	; (8025af0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80257f8:	0951      	lsrs	r1, r2, #5
 80257fa:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80257fe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025802:	430b      	orrs	r3, r1
 8025804:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025808:	4313      	orrs	r3, r2
 802580a:	f8a8 3000 	strh.w	r3, [r8]
 802580e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025810:	f108 0802 	add.w	r8, r8, #2
 8025814:	441c      	add	r4, r3
 8025816:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025818:	441e      	add	r6, r3
 802581a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802581c:	3b01      	subs	r3, #1
 802581e:	9309      	str	r3, [sp, #36]	; 0x24
 8025820:	e76d      	b.n	80256fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025822:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025824:	3d01      	subs	r5, #1
 8025826:	441c      	add	r4, r3
 8025828:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802582a:	f109 0902 	add.w	r9, r9, #2
 802582e:	441e      	add	r6, r3
 8025830:	e745      	b.n	80256be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025832:	d021      	beq.n	8025878 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025834:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025836:	1e6b      	subs	r3, r5, #1
 8025838:	fb00 4003 	mla	r0, r0, r3, r4
 802583c:	1400      	asrs	r0, r0, #16
 802583e:	f53f af5a 	bmi.w	80256f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025842:	3901      	subs	r1, #1
 8025844:	4288      	cmp	r0, r1
 8025846:	f6bf af56 	bge.w	80256f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802584a:	9920      	ldr	r1, [sp, #128]	; 0x80
 802584c:	fb01 6303 	mla	r3, r1, r3, r6
 8025850:	141b      	asrs	r3, r3, #16
 8025852:	f53f af50 	bmi.w	80256f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025856:	3a01      	subs	r2, #1
 8025858:	4293      	cmp	r3, r2
 802585a:	f6bf af4c 	bge.w	80256f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802585e:	46a8      	mov	r8, r5
 8025860:	46ce      	mov	lr, r9
 8025862:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8025866:	9308      	str	r3, [sp, #32]
 8025868:	f1b8 0f00 	cmp.w	r8, #0
 802586c:	f300 80b5 	bgt.w	80259da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025870:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025874:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8025878:	9b07      	ldr	r3, [sp, #28]
 802587a:	2b00      	cmp	r3, #0
 802587c:	f340 817c 	ble.w	8025b78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8025880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025884:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025888:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802588c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025890:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025894:	eef0 6a62 	vmov.f32	s13, s5
 8025898:	ee31 1a05 	vadd.f32	s2, s2, s10
 802589c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80258a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80258a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80258ac:	ee16 4a90 	vmov	r4, s13
 80258b0:	eef0 6a43 	vmov.f32	s13, s6
 80258b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80258b8:	ee12 2a90 	vmov	r2, s5
 80258bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80258c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80258c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80258ca:	ee13 2a10 	vmov	r2, s6
 80258ce:	931f      	str	r3, [sp, #124]	; 0x7c
 80258d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80258d2:	ee16 6a90 	vmov	r6, s13
 80258d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80258da:	9320      	str	r3, [sp, #128]	; 0x80
 80258dc:	9b07      	ldr	r3, [sp, #28]
 80258de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80258e0:	3b01      	subs	r3, #1
 80258e2:	9307      	str	r3, [sp, #28]
 80258e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80258e6:	bf0c      	ite	eq
 80258e8:	4615      	moveq	r5, r2
 80258ea:	461d      	movne	r5, r3
 80258ec:	eeb0 3a67 	vmov.f32	s6, s15
 80258f0:	eef0 2a47 	vmov.f32	s5, s14
 80258f4:	e6d4      	b.n	80256a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80258f6:	2900      	cmp	r1, #0
 80258f8:	f43f af5c 	beq.w	80257b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80258fc:	eb0a 0003 	add.w	r0, sl, r3
 8025900:	0843      	lsrs	r3, r0, #1
 8025902:	5cfb      	ldrb	r3, [r7, r3]
 8025904:	07c0      	lsls	r0, r0, #31
 8025906:	bf54      	ite	pl
 8025908:	f003 030f 	andpl.w	r3, r3, #15
 802590c:	111b      	asrmi	r3, r3, #4
 802590e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025912:	b2db      	uxtb	r3, r3
 8025914:	930a      	str	r3, [sp, #40]	; 0x28
 8025916:	e74d      	b.n	80257b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025918:	2b00      	cmp	r3, #0
 802591a:	f43f af78 	beq.w	802580e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802591e:	fa1f fe83 	uxth.w	lr, r3
 8025922:	43db      	mvns	r3, r3
 8025924:	4a71      	ldr	r2, [pc, #452]	; (8025aec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8025926:	f8b8 c000 	ldrh.w	ip, [r8]
 802592a:	6810      	ldr	r0, [r2, #0]
 802592c:	ea4f 212c 	mov.w	r1, ip, asr #8
 8025930:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025934:	fb12 f20e 	smulbb	r2, r2, lr
 8025938:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802593c:	b2c0      	uxtb	r0, r0
 802593e:	fb1b fb0e 	smulbb	fp, fp, lr
 8025942:	fb10 fe0e 	smulbb	lr, r0, lr
 8025946:	b2db      	uxtb	r3, r3
 8025948:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802594c:	fb01 2103 	mla	r1, r1, r3, r2
 8025950:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025954:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025958:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802595c:	fa5f fc8c 	uxtb.w	ip, ip
 8025960:	fb02 b203 	mla	r2, r2, r3, fp
 8025964:	fb0c e303 	mla	r3, ip, r3, lr
 8025968:	b289      	uxth	r1, r1
 802596a:	1c48      	adds	r0, r1, #1
 802596c:	b292      	uxth	r2, r2
 802596e:	b29b      	uxth	r3, r3
 8025970:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8025974:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8025978:	f102 0b01 	add.w	fp, r2, #1
 802597c:	1c59      	adds	r1, r3, #1
 802597e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025982:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8025986:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802598a:	0952      	lsrs	r2, r2, #5
 802598c:	4301      	orrs	r1, r0
 802598e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025992:	4311      	orrs	r1, r2
 8025994:	f8a8 1000 	strh.w	r1, [r8]
 8025998:	e739      	b.n	802580e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802599a:	f113 0b01 	adds.w	fp, r3, #1
 802599e:	f53f af36 	bmi.w	802580e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80259a2:	45dc      	cmp	ip, fp
 80259a4:	f6ff af33 	blt.w	802580e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80259a8:	f110 0b01 	adds.w	fp, r0, #1
 80259ac:	f53f af2f 	bmi.w	802580e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80259b0:	45de      	cmp	lr, fp
 80259b2:	f6ff af2c 	blt.w	802580e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80259b6:	9a08      	ldr	r2, [sp, #32]
 80259b8:	9302      	str	r3, [sp, #8]
 80259ba:	fa0f f38e 	sxth.w	r3, lr
 80259be:	9301      	str	r3, [sp, #4]
 80259c0:	fa0f f38c 	sxth.w	r3, ip
 80259c4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80259c8:	9105      	str	r1, [sp, #20]
 80259ca:	9300      	str	r3, [sp, #0]
 80259cc:	463a      	mov	r2, r7
 80259ce:	4653      	mov	r3, sl
 80259d0:	4641      	mov	r1, r8
 80259d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80259d4:	f7ff fd74 	bl	80254c0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80259d8:	e719      	b.n	802580e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80259da:	9906      	ldr	r1, [sp, #24]
 80259dc:	1422      	asrs	r2, r4, #16
 80259de:	1433      	asrs	r3, r6, #16
 80259e0:	fb01 2303 	mla	r3, r1, r3, r2
 80259e4:	085a      	lsrs	r2, r3, #1
 80259e6:	5cba      	ldrb	r2, [r7, r2]
 80259e8:	07d9      	lsls	r1, r3, #31
 80259ea:	bf54      	ite	pl
 80259ec:	f002 020f 	andpl.w	r2, r2, #15
 80259f0:	1112      	asrmi	r2, r2, #4
 80259f2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80259f6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80259fa:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80259fe:	b2d2      	uxtb	r2, r2
 8025a00:	2800      	cmp	r0, #0
 8025a02:	d062      	beq.n	8025aca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8025a04:	f103 0a01 	add.w	sl, r3, #1
 8025a08:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8025a0c:	5c79      	ldrb	r1, [r7, r1]
 8025a0e:	f01a 0f01 	tst.w	sl, #1
 8025a12:	bf0c      	ite	eq
 8025a14:	f001 010f 	andeq.w	r1, r1, #15
 8025a18:	1109      	asrne	r1, r1, #4
 8025a1a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025a1e:	b2c9      	uxtb	r1, r1
 8025a20:	910f      	str	r1, [sp, #60]	; 0x3c
 8025a22:	f1bc 0f00 	cmp.w	ip, #0
 8025a26:	d019      	beq.n	8025a5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025a28:	9908      	ldr	r1, [sp, #32]
 8025a2a:	440b      	add	r3, r1
 8025a2c:	0859      	lsrs	r1, r3, #1
 8025a2e:	5c79      	ldrb	r1, [r7, r1]
 8025a30:	f013 0f01 	tst.w	r3, #1
 8025a34:	bf0c      	ite	eq
 8025a36:	f001 010f 	andeq.w	r1, r1, #15
 8025a3a:	1109      	asrne	r1, r1, #4
 8025a3c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025a40:	b2c9      	uxtb	r1, r1
 8025a42:	3301      	adds	r3, #1
 8025a44:	910b      	str	r1, [sp, #44]	; 0x2c
 8025a46:	0859      	lsrs	r1, r3, #1
 8025a48:	5c79      	ldrb	r1, [r7, r1]
 8025a4a:	07db      	lsls	r3, r3, #31
 8025a4c:	bf54      	ite	pl
 8025a4e:	f001 010f 	andpl.w	r1, r1, #15
 8025a52:	1109      	asrmi	r1, r1, #4
 8025a54:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025a58:	b2c9      	uxtb	r1, r1
 8025a5a:	9110      	str	r1, [sp, #64]	; 0x40
 8025a5c:	b280      	uxth	r0, r0
 8025a5e:	fa1f fc8c 	uxth.w	ip, ip
 8025a62:	fb00 f30c 	mul.w	r3, r0, ip
 8025a66:	0100      	lsls	r0, r0, #4
 8025a68:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8025a6c:	fa1f fc8c 	uxth.w	ip, ip
 8025a70:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8025a74:	eba1 010c 	sub.w	r1, r1, ip
 8025a78:	fa1f fa81 	uxth.w	sl, r1
 8025a7c:	1ac0      	subs	r0, r0, r3
 8025a7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025a80:	b280      	uxth	r0, r0
 8025a82:	4348      	muls	r0, r1
 8025a84:	fb02 020a 	mla	r2, r2, sl, r0
 8025a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025a8a:	fb0c 2c01 	mla	ip, ip, r1, r2
 8025a8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025a90:	fb03 c302 	mla	r3, r3, r2, ip
 8025a94:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025a98:	2bff      	cmp	r3, #255	; 0xff
 8025a9a:	d12b      	bne.n	8025af4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025a9c:	4b13      	ldr	r3, [pc, #76]	; (8025aec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8025a9e:	681a      	ldr	r2, [r3, #0]
 8025aa0:	4b13      	ldr	r3, [pc, #76]	; (8025af0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025aa2:	0951      	lsrs	r1, r2, #5
 8025aa4:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8025aa8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025aac:	430b      	orrs	r3, r1
 8025aae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025ab2:	4313      	orrs	r3, r2
 8025ab4:	f8ae 3000 	strh.w	r3, [lr]
 8025ab8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025aba:	f10e 0e02 	add.w	lr, lr, #2
 8025abe:	441c      	add	r4, r3
 8025ac0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025ac2:	f108 38ff 	add.w	r8, r8, #4294967295
 8025ac6:	441e      	add	r6, r3
 8025ac8:	e6ce      	b.n	8025868 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8025aca:	f1bc 0f00 	cmp.w	ip, #0
 8025ace:	d0c5      	beq.n	8025a5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025ad0:	9908      	ldr	r1, [sp, #32]
 8025ad2:	440b      	add	r3, r1
 8025ad4:	0859      	lsrs	r1, r3, #1
 8025ad6:	5c79      	ldrb	r1, [r7, r1]
 8025ad8:	07db      	lsls	r3, r3, #31
 8025ada:	bf54      	ite	pl
 8025adc:	f001 010f 	andpl.w	r1, r1, #15
 8025ae0:	1109      	asrmi	r1, r1, #4
 8025ae2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025ae6:	b2c9      	uxtb	r1, r1
 8025ae8:	910b      	str	r1, [sp, #44]	; 0x2c
 8025aea:	e7b7      	b.n	8025a5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025aec:	2004f6d8 	.word	0x2004f6d8
 8025af0:	fffff800 	.word	0xfffff800
 8025af4:	2b00      	cmp	r3, #0
 8025af6:	d0df      	beq.n	8025ab8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025af8:	fa1f fa83 	uxth.w	sl, r3
 8025afc:	43db      	mvns	r3, r3
 8025afe:	4a20      	ldr	r2, [pc, #128]	; (8025b80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 8025b00:	f8be c000 	ldrh.w	ip, [lr]
 8025b04:	6810      	ldr	r0, [r2, #0]
 8025b06:	ea4f 212c 	mov.w	r1, ip, asr #8
 8025b0a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025b0e:	fb12 f20a 	smulbb	r2, r2, sl
 8025b12:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8025b16:	b2c0      	uxtb	r0, r0
 8025b18:	fb10 f00a 	smulbb	r0, r0, sl
 8025b1c:	b2db      	uxtb	r3, r3
 8025b1e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025b22:	fb01 2103 	mla	r1, r1, r3, r2
 8025b26:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025b2a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025b2e:	fb1b fb0a 	smulbb	fp, fp, sl
 8025b32:	fa5f fc8c 	uxtb.w	ip, ip
 8025b36:	fb0c 0003 	mla	r0, ip, r3, r0
 8025b3a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025b3e:	fb02 b203 	mla	r2, r2, r3, fp
 8025b42:	b289      	uxth	r1, r1
 8025b44:	b280      	uxth	r0, r0
 8025b46:	1c4b      	adds	r3, r1, #1
 8025b48:	f100 0b01 	add.w	fp, r0, #1
 8025b4c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025b50:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8025b54:	b292      	uxth	r2, r2
 8025b56:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8025b5a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8025b5e:	ea4b 0101 	orr.w	r1, fp, r1
 8025b62:	f102 0b01 	add.w	fp, r2, #1
 8025b66:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8025b6a:	0952      	lsrs	r2, r2, #5
 8025b6c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025b70:	4311      	orrs	r1, r2
 8025b72:	f8ae 1000 	strh.w	r1, [lr]
 8025b76:	e79f      	b.n	8025ab8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025b78:	b013      	add	sp, #76	; 0x4c
 8025b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b7e:	bf00      	nop
 8025b80:	2004f6d8 	.word	0x2004f6d8

08025b84 <CRC_Lock>:
 8025b84:	b530      	push	{r4, r5, lr}
 8025b86:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8025b8a:	f24c 2540 	movw	r5, #49728	; 0xc240
 8025b8e:	4a1e      	ldr	r2, [pc, #120]	; (8025c08 <CRC_Lock+0x84>)
 8025b90:	6813      	ldr	r3, [r2, #0]
 8025b92:	f023 0301 	bic.w	r3, r3, #1
 8025b96:	6013      	str	r3, [r2, #0]
 8025b98:	4b1c      	ldr	r3, [pc, #112]	; (8025c0c <CRC_Lock+0x88>)
 8025b9a:	681a      	ldr	r2, [r3, #0]
 8025b9c:	4022      	ands	r2, r4
 8025b9e:	42aa      	cmp	r2, r5
 8025ba0:	d005      	beq.n	8025bae <CRC_Lock+0x2a>
 8025ba2:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025ba6:	681b      	ldr	r3, [r3, #0]
 8025ba8:	4023      	ands	r3, r4
 8025baa:	4293      	cmp	r3, r2
 8025bac:	d124      	bne.n	8025bf8 <CRC_Lock+0x74>
 8025bae:	4b18      	ldr	r3, [pc, #96]	; (8025c10 <CRC_Lock+0x8c>)
 8025bb0:	681b      	ldr	r3, [r3, #0]
 8025bb2:	bb0b      	cbnz	r3, 8025bf8 <CRC_Lock+0x74>
 8025bb4:	4b17      	ldr	r3, [pc, #92]	; (8025c14 <CRC_Lock+0x90>)
 8025bb6:	681a      	ldr	r2, [r3, #0]
 8025bb8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025bbc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8025bc0:	d00d      	beq.n	8025bde <CRC_Lock+0x5a>
 8025bc2:	f240 4483 	movw	r4, #1155	; 0x483
 8025bc6:	681a      	ldr	r2, [r3, #0]
 8025bc8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025bcc:	42a2      	cmp	r2, r4
 8025bce:	d006      	beq.n	8025bde <CRC_Lock+0x5a>
 8025bd0:	f240 4285 	movw	r2, #1157	; 0x485
 8025bd4:	681b      	ldr	r3, [r3, #0]
 8025bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025bda:	4293      	cmp	r3, r2
 8025bdc:	d10c      	bne.n	8025bf8 <CRC_Lock+0x74>
 8025bde:	2201      	movs	r2, #1
 8025be0:	4b0d      	ldr	r3, [pc, #52]	; (8025c18 <CRC_Lock+0x94>)
 8025be2:	601a      	str	r2, [r3, #0]
 8025be4:	681a      	ldr	r2, [r3, #0]
 8025be6:	2a00      	cmp	r2, #0
 8025be8:	d1fc      	bne.n	8025be4 <CRC_Lock+0x60>
 8025bea:	4b0c      	ldr	r3, [pc, #48]	; (8025c1c <CRC_Lock+0x98>)
 8025bec:	6018      	str	r0, [r3, #0]
 8025bee:	6818      	ldr	r0, [r3, #0]
 8025bf0:	1a43      	subs	r3, r0, r1
 8025bf2:	4258      	negs	r0, r3
 8025bf4:	4158      	adcs	r0, r3
 8025bf6:	bd30      	pop	{r4, r5, pc}
 8025bf8:	2201      	movs	r2, #1
 8025bfa:	4b09      	ldr	r3, [pc, #36]	; (8025c20 <CRC_Lock+0x9c>)
 8025bfc:	601a      	str	r2, [r3, #0]
 8025bfe:	681a      	ldr	r2, [r3, #0]
 8025c00:	2a00      	cmp	r2, #0
 8025c02:	d1fc      	bne.n	8025bfe <CRC_Lock+0x7a>
 8025c04:	4b07      	ldr	r3, [pc, #28]	; (8025c24 <CRC_Lock+0xa0>)
 8025c06:	e7f1      	b.n	8025bec <CRC_Lock+0x68>
 8025c08:	e0002000 	.word	0xe0002000
 8025c0c:	e000ed00 	.word	0xe000ed00
 8025c10:	e0042000 	.word	0xe0042000
 8025c14:	5c001000 	.word	0x5c001000
 8025c18:	58024c08 	.word	0x58024c08
 8025c1c:	58024c00 	.word	0x58024c00
 8025c20:	40023008 	.word	0x40023008
 8025c24:	40023000 	.word	0x40023000

08025c28 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8025c28:	6101      	str	r1, [r0, #16]
 8025c2a:	4770      	bx	lr

08025c2c <_ZN8touchgfx8Gestures4tickEv>:
 8025c2c:	7b83      	ldrb	r3, [r0, #14]
 8025c2e:	b14b      	cbz	r3, 8025c44 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025c30:	8903      	ldrh	r3, [r0, #8]
 8025c32:	3301      	adds	r3, #1
 8025c34:	b29b      	uxth	r3, r3
 8025c36:	2b07      	cmp	r3, #7
 8025c38:	8103      	strh	r3, [r0, #8]
 8025c3a:	bf81      	itttt	hi
 8025c3c:	2300      	movhi	r3, #0
 8025c3e:	8143      	strhhi	r3, [r0, #10]
 8025c40:	8183      	strhhi	r3, [r0, #12]
 8025c42:	7383      	strbhi	r3, [r0, #14]
 8025c44:	4770      	bx	lr
	...

08025c48 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8025c48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8025c4c:	4698      	mov	r8, r3
 8025c4e:	4604      	mov	r4, r0
 8025c50:	8883      	ldrh	r3, [r0, #4]
 8025c52:	460e      	mov	r6, r1
 8025c54:	88c1      	ldrh	r1, [r0, #6]
 8025c56:	2000      	movs	r0, #0
 8025c58:	f8ad 3006 	strh.w	r3, [sp, #6]
 8025c5c:	eba8 0303 	sub.w	r3, r8, r3
 8025c60:	b21b      	sxth	r3, r3
 8025c62:	4617      	mov	r7, r2
 8025c64:	4a17      	ldr	r2, [pc, #92]	; (8025cc4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8025c66:	2b00      	cmp	r3, #0
 8025c68:	bfb8      	it	lt
 8025c6a:	425b      	neglt	r3, r3
 8025c6c:	9200      	str	r2, [sp, #0]
 8025c6e:	8aa2      	ldrh	r2, [r4, #20]
 8025c70:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8025c74:	b21b      	sxth	r3, r3
 8025c76:	4293      	cmp	r3, r2
 8025c78:	f88d 0004 	strb.w	r0, [sp, #4]
 8025c7c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8025c80:	f8ad 800a 	strh.w	r8, [sp, #10]
 8025c84:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025c88:	dc07      	bgt.n	8025c9a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8025c8a:	1a69      	subs	r1, r5, r1
 8025c8c:	b209      	sxth	r1, r1
 8025c8e:	2900      	cmp	r1, #0
 8025c90:	bfb8      	it	lt
 8025c92:	4249      	neglt	r1, r1
 8025c94:	b209      	sxth	r1, r1
 8025c96:	428a      	cmp	r2, r1
 8025c98:	da10      	bge.n	8025cbc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8025c9a:	6920      	ldr	r0, [r4, #16]
 8025c9c:	4669      	mov	r1, sp
 8025c9e:	6803      	ldr	r3, [r0, #0]
 8025ca0:	eba8 0606 	sub.w	r6, r8, r6
 8025ca4:	685b      	ldr	r3, [r3, #4]
 8025ca6:	4798      	blx	r3
 8025ca8:	2300      	movs	r3, #0
 8025caa:	2001      	movs	r0, #1
 8025cac:	1bef      	subs	r7, r5, r7
 8025cae:	8123      	strh	r3, [r4, #8]
 8025cb0:	8166      	strh	r6, [r4, #10]
 8025cb2:	81a7      	strh	r7, [r4, #12]
 8025cb4:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025cb8:	80e5      	strh	r5, [r4, #6]
 8025cba:	73a0      	strb	r0, [r4, #14]
 8025cbc:	b004      	add	sp, #16
 8025cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025cc2:	bf00      	nop
 8025cc4:	08029770 	.word	0x08029770

08025cc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025cca:	461e      	mov	r6, r3
 8025ccc:	1e4b      	subs	r3, r1, #1
 8025cce:	2b01      	cmp	r3, #1
 8025cd0:	b085      	sub	sp, #20
 8025cd2:	4604      	mov	r4, r0
 8025cd4:	460d      	mov	r5, r1
 8025cd6:	4617      	mov	r7, r2
 8025cd8:	d84b      	bhi.n	8025d72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025cda:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025cde:	1cd3      	adds	r3, r2, #3
 8025ce0:	b29b      	uxth	r3, r3
 8025ce2:	2b06      	cmp	r3, #6
 8025ce4:	d916      	bls.n	8025d14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025ce6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8025d88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025cea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025cee:	f8cd c004 	str.w	ip, [sp, #4]
 8025cf2:	f04f 0c00 	mov.w	ip, #0
 8025cf6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025cfa:	6900      	ldr	r0, [r0, #16]
 8025cfc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025d00:	f88d c008 	strb.w	ip, [sp, #8]
 8025d04:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025d08:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025d0c:	6803      	ldr	r3, [r0, #0]
 8025d0e:	a901      	add	r1, sp, #4
 8025d10:	689b      	ldr	r3, [r3, #8]
 8025d12:	4798      	blx	r3
 8025d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025d18:	1cd3      	adds	r3, r2, #3
 8025d1a:	b29b      	uxth	r3, r3
 8025d1c:	2b06      	cmp	r3, #6
 8025d1e:	d916      	bls.n	8025d4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025d20:	f8df c064 	ldr.w	ip, [pc, #100]	; 8025d88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025d24:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025d28:	f8cd c004 	str.w	ip, [sp, #4]
 8025d2c:	f04f 0c01 	mov.w	ip, #1
 8025d30:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025d34:	6920      	ldr	r0, [r4, #16]
 8025d36:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025d3a:	f88d c008 	strb.w	ip, [sp, #8]
 8025d3e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025d42:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025d46:	6803      	ldr	r3, [r0, #0]
 8025d48:	a901      	add	r1, sp, #4
 8025d4a:	689b      	ldr	r3, [r3, #8]
 8025d4c:	4798      	blx	r3
 8025d4e:	4b0d      	ldr	r3, [pc, #52]	; (8025d84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025d50:	6920      	ldr	r0, [r4, #16]
 8025d52:	9301      	str	r3, [sp, #4]
 8025d54:	2300      	movs	r3, #0
 8025d56:	f88d 5008 	strb.w	r5, [sp, #8]
 8025d5a:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025d5e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8025d62:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025d66:	6803      	ldr	r3, [r0, #0]
 8025d68:	a901      	add	r1, sp, #4
 8025d6a:	681b      	ldr	r3, [r3, #0]
 8025d6c:	4798      	blx	r3
 8025d6e:	b005      	add	sp, #20
 8025d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025d72:	2900      	cmp	r1, #0
 8025d74:	d1eb      	bne.n	8025d4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025d76:	80a2      	strh	r2, [r4, #4]
 8025d78:	80c6      	strh	r6, [r0, #6]
 8025d7a:	60a1      	str	r1, [r4, #8]
 8025d7c:	81a1      	strh	r1, [r4, #12]
 8025d7e:	73a1      	strb	r1, [r4, #14]
 8025d80:	e7e5      	b.n	8025d4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025d82:	bf00      	nop
 8025d84:	0802975c 	.word	0x0802975c
 8025d88:	08029784 	.word	0x08029784

08025d8c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8025d8c:	10c9      	asrs	r1, r1, #3
 8025d8e:	2900      	cmp	r1, #0
 8025d90:	bfb8      	it	lt
 8025d92:	4249      	neglt	r1, r1
 8025d94:	2801      	cmp	r0, #1
 8025d96:	d108      	bne.n	8025daa <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8025d98:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8025d9c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8025da0:	4601      	mov	r1, r0
 8025da2:	dd02      	ble.n	8025daa <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8025da4:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8025da8:	4770      	bx	lr
 8025daa:	29ff      	cmp	r1, #255	; 0xff
 8025dac:	bfa8      	it	ge
 8025dae:	21ff      	movge	r1, #255	; 0xff
 8025db0:	4608      	mov	r0, r1
 8025db2:	4770      	bx	lr

08025db4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025db4:	b410      	push	{r4}
 8025db6:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8025dba:	429c      	cmp	r4, r3
 8025dbc:	d803      	bhi.n	8025dc6 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8025dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025dc2:	f7f0 bb7b 	b.w	80164bc <_ZN8touchgfx7Outline6lineToEii>
 8025dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025dca:	4770      	bx	lr

08025dcc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8025dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025dd0:	b08b      	sub	sp, #44	; 0x2c
 8025dd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025dd6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8025dda:	4606      	mov	r6, r0
 8025ddc:	9308      	str	r3, [sp, #32]
 8025dde:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8025de2:	468a      	mov	sl, r1
 8025de4:	9309      	str	r3, [sp, #36]	; 0x24
 8025de6:	f7f0 fcd5 	bl	8016794 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8025dea:	68b5      	ldr	r5, [r6, #8]
 8025dec:	4604      	mov	r4, r0
 8025dee:	2d00      	cmp	r5, #0
 8025df0:	d044      	beq.n	8025e7c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025df2:	6873      	ldr	r3, [r6, #4]
 8025df4:	42ab      	cmp	r3, r5
 8025df6:	d33d      	bcc.n	8025e74 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8025df8:	f04f 0800 	mov.w	r8, #0
 8025dfc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8025e00:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8025e04:	eb02 0b03 	add.w	fp, r2, r3
 8025e08:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025e0c:	fb02 1203 	mla	r2, r2, r3, r1
 8025e10:	9205      	str	r2, [sp, #20]
 8025e12:	1e6a      	subs	r2, r5, #1
 8025e14:	9204      	str	r2, [sp, #16]
 8025e16:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8025e1a:	f9b4 7000 	ldrsh.w	r7, [r4]
 8025e1e:	454b      	cmp	r3, r9
 8025e20:	463a      	mov	r2, r7
 8025e22:	d008      	beq.n	8025e36 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8025e24:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8025e28:	eb03 0b09 	add.w	fp, r3, r9
 8025e2c:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8025e30:	fb03 1309 	mla	r3, r3, r9, r1
 8025e34:	9305      	str	r3, [sp, #20]
 8025e36:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8025e3a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8025e3e:	4498      	add	r8, r3
 8025e40:	9b04      	ldr	r3, [sp, #16]
 8025e42:	3b01      	subs	r3, #1
 8025e44:	9304      	str	r3, [sp, #16]
 8025e46:	9b04      	ldr	r3, [sp, #16]
 8025e48:	3301      	adds	r3, #1
 8025e4a:	d015      	beq.n	8025e78 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8025e4c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8025e50:	42bb      	cmp	r3, r7
 8025e52:	d117      	bne.n	8025e84 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8025e54:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8025e58:	9b04      	ldr	r3, [sp, #16]
 8025e5a:	4548      	cmp	r0, r9
 8025e5c:	f103 33ff 	add.w	r3, r3, #4294967295
 8025e60:	d17d      	bne.n	8025f5e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8025e62:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8025e66:	4401      	add	r1, r0
 8025e68:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8025e6c:	4480      	add	r8, r0
 8025e6e:	e7e9      	b.n	8025e44 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8025e70:	461f      	mov	r7, r3
 8025e72:	e042      	b.n	8025efa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8025e74:	2000      	movs	r0, #0
 8025e76:	e002      	b.n	8025e7e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8025e78:	2900      	cmp	r1, #0
 8025e7a:	d16d      	bne.n	8025f58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8025e7c:	2001      	movs	r0, #1
 8025e7e:	b00b      	add	sp, #44	; 0x2c
 8025e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e84:	b379      	cbz	r1, 8025ee6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8025e86:	2f00      	cmp	r7, #0
 8025e88:	db29      	blt.n	8025ede <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025e8a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8025e8e:	42bb      	cmp	r3, r7
 8025e90:	dd25      	ble.n	8025ede <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025e92:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8025e96:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8025e9a:	f7ff ff77 	bl	8025d8c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8025e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ea0:	fb10 f003 	smulbb	r0, r0, r3
 8025ea4:	b280      	uxth	r0, r0
 8025ea6:	1c41      	adds	r1, r0, #1
 8025ea8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025eac:	1209      	asrs	r1, r1, #8
 8025eae:	f011 0fff 	tst.w	r1, #255	; 0xff
 8025eb2:	d014      	beq.n	8025ede <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025eb4:	b2c9      	uxtb	r1, r1
 8025eb6:	9102      	str	r1, [sp, #8]
 8025eb8:	2101      	movs	r1, #1
 8025eba:	9808      	ldr	r0, [sp, #32]
 8025ebc:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8025ebe:	b2ba      	uxth	r2, r7
 8025ec0:	4413      	add	r3, r2
 8025ec2:	9101      	str	r1, [sp, #4]
 8025ec4:	4402      	add	r2, r0
 8025ec6:	fa0f f18b 	sxth.w	r1, fp
 8025eca:	f8da 0000 	ldr.w	r0, [sl]
 8025ece:	9100      	str	r1, [sp, #0]
 8025ed0:	6941      	ldr	r1, [r0, #20]
 8025ed2:	b21b      	sxth	r3, r3
 8025ed4:	460d      	mov	r5, r1
 8025ed6:	b212      	sxth	r2, r2
 8025ed8:	9905      	ldr	r1, [sp, #20]
 8025eda:	4650      	mov	r0, sl
 8025edc:	47a8      	blx	r5
 8025ede:	9b04      	ldr	r3, [sp, #16]
 8025ee0:	1c7a      	adds	r2, r7, #1
 8025ee2:	3301      	adds	r3, #1
 8025ee4:	d0ca      	beq.n	8025e7c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025ee6:	f9b4 7000 	ldrsh.w	r7, [r4]
 8025eea:	1abb      	subs	r3, r7, r2
 8025eec:	2b00      	cmp	r3, #0
 8025eee:	dd31      	ble.n	8025f54 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025ef0:	2a00      	cmp	r2, #0
 8025ef2:	dabd      	bge.n	8025e70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8025ef4:	2f00      	cmp	r7, #0
 8025ef6:	dd2d      	ble.n	8025f54 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025ef8:	2200      	movs	r2, #0
 8025efa:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8025efe:	19d1      	adds	r1, r2, r7
 8025f00:	4299      	cmp	r1, r3
 8025f02:	db02      	blt.n	8025f0a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8025f04:	1a9f      	subs	r7, r3, r2
 8025f06:	2f00      	cmp	r7, #0
 8025f08:	dd24      	ble.n	8025f54 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025f0a:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8025f0e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8025f12:	f7ff ff3b 	bl	8025d8c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8025f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f18:	fb10 f003 	smulbb	r0, r0, r3
 8025f1c:	b280      	uxth	r0, r0
 8025f1e:	1c41      	adds	r1, r0, #1
 8025f20:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025f24:	1209      	asrs	r1, r1, #8
 8025f26:	f011 0fff 	tst.w	r1, #255	; 0xff
 8025f2a:	d013      	beq.n	8025f54 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025f2c:	9808      	ldr	r0, [sp, #32]
 8025f2e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8025f30:	b292      	uxth	r2, r2
 8025f32:	b2c9      	uxtb	r1, r1
 8025f34:	4413      	add	r3, r2
 8025f36:	9102      	str	r1, [sp, #8]
 8025f38:	4402      	add	r2, r0
 8025f3a:	b23f      	sxth	r7, r7
 8025f3c:	f8da 0000 	ldr.w	r0, [sl]
 8025f40:	fa0f f18b 	sxth.w	r1, fp
 8025f44:	9100      	str	r1, [sp, #0]
 8025f46:	9701      	str	r7, [sp, #4]
 8025f48:	6947      	ldr	r7, [r0, #20]
 8025f4a:	b21b      	sxth	r3, r3
 8025f4c:	b212      	sxth	r2, r2
 8025f4e:	9905      	ldr	r1, [sp, #20]
 8025f50:	4650      	mov	r0, sl
 8025f52:	47b8      	blx	r7
 8025f54:	464b      	mov	r3, r9
 8025f56:	e75e      	b.n	8025e16 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8025f58:	2f00      	cmp	r7, #0
 8025f5a:	da96      	bge.n	8025e8a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8025f5c:	e78e      	b.n	8025e7c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025f5e:	2900      	cmp	r1, #0
 8025f60:	d0f8      	beq.n	8025f54 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025f62:	e790      	b.n	8025e86 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08025f64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8025f64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8025f68:	2500      	movs	r5, #0
 8025f6a:	4b4b      	ldr	r3, [pc, #300]	; (8026098 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 8025f6c:	4604      	mov	r4, r0
 8025f6e:	f100 0620 	add.w	r6, r0, #32
 8025f72:	e9c0 3100 	strd	r3, r1, [r0]
 8025f76:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8025f7a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8025f7e:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8025f82:	f100 0718 	add.w	r7, r0, #24
 8025f86:	4630      	mov	r0, r6
 8025f88:	4690      	mov	r8, r2
 8025f8a:	f7ef fdcf 	bl	8015b2c <_ZN8touchgfx7OutlineC1Ev>
 8025f8e:	2301      	movs	r3, #1
 8025f90:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8025f94:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8025f98:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8025f9c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8025fa0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8025fa4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8025fa8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025fac:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8025fb0:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8025fb4:	f9b8 2000 	ldrsh.w	r2, [r8]
 8025fb8:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8025fbc:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8025fc0:	4410      	add	r0, r2
 8025fc2:	b280      	uxth	r0, r0
 8025fc4:	fa0f fa80 	sxth.w	sl, r0
 8025fc8:	45aa      	cmp	sl, r5
 8025fca:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8025fce:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8025fd2:	9500      	str	r5, [sp, #0]
 8025fd4:	dd5c      	ble.n	8026090 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025fd6:	4591      	cmp	r9, r2
 8025fd8:	dd5a      	ble.n	8026090 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025fda:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025fde:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025fe2:	440b      	add	r3, r1
 8025fe4:	b29b      	uxth	r3, r3
 8025fe6:	b21d      	sxth	r5, r3
 8025fe8:	2d00      	cmp	r5, #0
 8025fea:	dd51      	ble.n	8026090 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025fec:	458e      	cmp	lr, r1
 8025fee:	dd4f      	ble.n	8026090 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025ff0:	45d1      	cmp	r9, sl
 8025ff2:	bfb8      	it	lt
 8025ff4:	fa1f f089 	uxthlt.w	r0, r9
 8025ff8:	45ae      	cmp	lr, r5
 8025ffa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8025ffe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8026002:	bfb8      	it	lt
 8026004:	fa1f f38e 	uxthlt.w	r3, lr
 8026008:	1a80      	subs	r0, r0, r2
 802600a:	1a5b      	subs	r3, r3, r1
 802600c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8026010:	f8ad 3006 	strh.w	r3, [sp, #6]
 8026014:	f8ad 2000 	strh.w	r2, [sp]
 8026018:	f8ad 1002 	strh.w	r1, [sp, #2]
 802601c:	466d      	mov	r5, sp
 802601e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026022:	e887 0003 	stmia.w	r7, {r0, r1}
 8026026:	f8dc 3000 	ldr.w	r3, [ip]
 802602a:	4660      	mov	r0, ip
 802602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802602e:	4639      	mov	r1, r7
 8026030:	4798      	blx	r3
 8026032:	6861      	ldr	r1, [r4, #4]
 8026034:	4628      	mov	r0, r5
 8026036:	3104      	adds	r1, #4
 8026038:	f7f1 faba 	bl	80175b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802603c:	4638      	mov	r0, r7
 802603e:	f7f1 fa8f 	bl	8017560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026042:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8026046:	f8bd 2000 	ldrh.w	r2, [sp]
 802604a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 802604e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8026052:	4630      	mov	r0, r6
 8026054:	f7ef fd4e 	bl	8015af4 <_ZN8touchgfx7Outline5resetEv>
 8026058:	4620      	mov	r0, r4
 802605a:	f9bd 3000 	ldrsh.w	r3, [sp]
 802605e:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8026062:	015b      	lsls	r3, r3, #5
 8026064:	60a3      	str	r3, [r4, #8]
 8026066:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802606a:	015b      	lsls	r3, r3, #5
 802606c:	60e3      	str	r3, [r4, #12]
 802606e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8026072:	015b      	lsls	r3, r3, #5
 8026074:	6123      	str	r3, [r4, #16]
 8026076:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802607a:	015b      	lsls	r3, r3, #5
 802607c:	6163      	str	r3, [r4, #20]
 802607e:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8026082:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8026086:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 802608a:	b002      	add	sp, #8
 802608c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026090:	2300      	movs	r3, #0
 8026092:	9301      	str	r3, [sp, #4]
 8026094:	e7c2      	b.n	802601c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 8026096:	bf00      	nop
 8026098:	08029258 	.word	0x08029258

0802609c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802609c:	b510      	push	{r4, lr}
 802609e:	4b07      	ldr	r3, [pc, #28]	; (80260bc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80260a0:	781b      	ldrb	r3, [r3, #0]
 80260a2:	2b01      	cmp	r3, #1
 80260a4:	d108      	bne.n	80260b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80260a6:	6843      	ldr	r3, [r0, #4]
 80260a8:	6814      	ldr	r4, [r2, #0]
 80260aa:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80260ae:	680b      	ldr	r3, [r1, #0]
 80260b0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80260b4:	6013      	str	r3, [r2, #0]
 80260b6:	600c      	str	r4, [r1, #0]
 80260b8:	bd10      	pop	{r4, pc}
 80260ba:	bf00      	nop
 80260bc:	2004f6c0 	.word	0x2004f6c0

080260c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80260c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80260c2:	4604      	mov	r4, r0
 80260c4:	ab02      	add	r3, sp, #8
 80260c6:	f843 2d08 	str.w	r2, [r3, #-8]!
 80260ca:	461a      	mov	r2, r3
 80260cc:	9101      	str	r1, [sp, #4]
 80260ce:	a901      	add	r1, sp, #4
 80260d0:	f7ff ffe4 	bl	802609c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80260d4:	68a3      	ldr	r3, [r4, #8]
 80260d6:	9901      	ldr	r1, [sp, #4]
 80260d8:	9a00      	ldr	r2, [sp, #0]
 80260da:	1ac9      	subs	r1, r1, r3
 80260dc:	68e3      	ldr	r3, [r4, #12]
 80260de:	9101      	str	r1, [sp, #4]
 80260e0:	1ad2      	subs	r2, r2, r3
 80260e2:	2a00      	cmp	r2, #0
 80260e4:	9200      	str	r2, [sp, #0]
 80260e6:	db1c      	blt.n	8026122 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80260e8:	6963      	ldr	r3, [r4, #20]
 80260ea:	429a      	cmp	r2, r3
 80260ec:	bfac      	ite	ge
 80260ee:	2002      	movge	r0, #2
 80260f0:	2000      	movlt	r0, #0
 80260f2:	2900      	cmp	r1, #0
 80260f4:	db17      	blt.n	8026126 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80260f6:	6923      	ldr	r3, [r4, #16]
 80260f8:	4299      	cmp	r1, r3
 80260fa:	bfac      	ite	ge
 80260fc:	2308      	movge	r3, #8
 80260fe:	2300      	movlt	r3, #0
 8026100:	4303      	orrs	r3, r0
 8026102:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8026106:	b2dd      	uxtb	r5, r3
 8026108:	b978      	cbnz	r0, 802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802610a:	f104 0020 	add.w	r0, r4, #32
 802610e:	f7ff fe51 	bl	8025db4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026112:	9b01      	ldr	r3, [sp, #4]
 8026114:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8026118:	65e3      	str	r3, [r4, #92]	; 0x5c
 802611a:	9b00      	ldr	r3, [sp, #0]
 802611c:	6623      	str	r3, [r4, #96]	; 0x60
 802611e:	b002      	add	sp, #8
 8026120:	bd70      	pop	{r4, r5, r6, pc}
 8026122:	2001      	movs	r0, #1
 8026124:	e7e5      	b.n	80260f2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8026126:	2304      	movs	r3, #4
 8026128:	e7ea      	b.n	8026100 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802612a:	b113      	cbz	r3, 8026132 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802612c:	ea10 0305 	ands.w	r3, r0, r5
 8026130:	d11d      	bne.n	802616e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 8026132:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8026136:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802613a:	f104 0620 	add.w	r6, r4, #32
 802613e:	b193      	cbz	r3, 8026166 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8026140:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8026144:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8026148:	4298      	cmp	r0, r3
 802614a:	d802      	bhi.n	8026152 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802614c:	4630      	mov	r0, r6
 802614e:	f7f0 f9cf 	bl	80164f0 <_ZN8touchgfx7Outline6moveToEii>
 8026152:	2300      	movs	r3, #0
 8026154:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8026158:	2301      	movs	r3, #1
 802615a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802615e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8026162:	4630      	mov	r0, r6
 8026164:	e7d3      	b.n	802610e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8026166:	4630      	mov	r0, r6
 8026168:	f7ff fe24 	bl	8025db4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802616c:	e7f7      	b.n	802615e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802616e:	461d      	mov	r5, r3
 8026170:	e7cf      	b.n	8026112 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

08026172 <_ZN8touchgfx6Canvas5closeEv>:
 8026172:	b538      	push	{r3, r4, r5, lr}
 8026174:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8026178:	4604      	mov	r4, r0
 802617a:	b993      	cbnz	r3, 80261a2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802617c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8026180:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 8026184:	4213      	tst	r3, r2
 8026186:	d10c      	bne.n	80261a2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8026188:	f100 0520 	add.w	r5, r0, #32
 802618c:	b123      	cbz	r3, 8026198 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802618e:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 8026192:	4628      	mov	r0, r5
 8026194:	f7ff fe0e 	bl	8025db4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026198:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 802619c:	4628      	mov	r0, r5
 802619e:	f7ff fe09 	bl	8025db4 <_ZN8touchgfx10Rasterizer6lineToEii>
 80261a2:	2300      	movs	r3, #0
 80261a4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80261a8:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 80261ac:	4298      	cmp	r0, r3
 80261ae:	bf34      	ite	cc
 80261b0:	2000      	movcc	r0, #0
 80261b2:	2001      	movcs	r0, #1
 80261b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080261b8 <_ZN8touchgfx6Canvas6renderEh>:
 80261b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80261bc:	4604      	mov	r4, r0
 80261be:	6840      	ldr	r0, [r0, #4]
 80261c0:	460d      	mov	r5, r1
 80261c2:	6803      	ldr	r3, [r0, #0]
 80261c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80261c6:	4798      	blx	r3
 80261c8:	fb10 f105 	smulbb	r1, r0, r5
 80261cc:	b289      	uxth	r1, r1
 80261ce:	1c4d      	adds	r5, r1, #1
 80261d0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80261d4:	122d      	asrs	r5, r5, #8
 80261d6:	f000 8097 	beq.w	8026308 <_ZN8touchgfx6Canvas6renderEh+0x150>
 80261da:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80261de:	2b00      	cmp	r3, #0
 80261e0:	f000 8092 	beq.w	8026308 <_ZN8touchgfx6Canvas6renderEh+0x150>
 80261e4:	4620      	mov	r0, r4
 80261e6:	f7ff ffc4 	bl	8026172 <_ZN8touchgfx6Canvas5closeEv>
 80261ea:	4607      	mov	r7, r0
 80261ec:	2800      	cmp	r0, #0
 80261ee:	d043      	beq.n	8026278 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 80261f0:	6863      	ldr	r3, [r4, #4]
 80261f2:	4e46      	ldr	r6, [pc, #280]	; (802630c <_ZN8touchgfx6Canvas6renderEh+0x154>)
 80261f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80261f6:	6837      	ldr	r7, [r6, #0]
 80261f8:	6803      	ldr	r3, [r0, #0]
 80261fa:	689b      	ldr	r3, [r3, #8]
 80261fc:	4798      	blx	r3
 80261fe:	4601      	mov	r1, r0
 8026200:	4638      	mov	r0, r7
 8026202:	f7ee fb43 	bl	801488c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8026206:	4607      	mov	r7, r0
 8026208:	f7e8 f8c8 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 802620c:	6803      	ldr	r3, [r0, #0]
 802620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026210:	4798      	blx	r3
 8026212:	4680      	mov	r8, r0
 8026214:	f7e8 f8c2 	bl	800e39c <_ZN8touchgfx3HAL3lcdEv>
 8026218:	6803      	ldr	r3, [r0, #0]
 802621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802621c:	4798      	blx	r3
 802621e:	280b      	cmp	r0, #11
 8026220:	d857      	bhi.n	80262d2 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8026222:	e8df f000 	tbb	[pc, r0]
 8026226:	584d      	.short	0x584d
 8026228:	2d560668 	.word	0x2d560668
 802622c:	6161613d 	.word	0x6161613d
 8026230:	6161      	.short	0x6161
 8026232:	2208      	movs	r2, #8
 8026234:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8026238:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802623c:	fb91 f2f2 	sdiv	r2, r1, r2
 8026240:	fb08 2303 	mla	r3, r8, r3, r2
 8026244:	441f      	add	r7, r3
 8026246:	424b      	negs	r3, r1
 8026248:	f003 0307 	and.w	r3, r3, #7
 802624c:	f001 0107 	and.w	r1, r1, #7
 8026250:	bf58      	it	pl
 8026252:	4259      	negpl	r1, r3
 8026254:	b2c9      	uxtb	r1, r1
 8026256:	b2ed      	uxtb	r5, r5
 8026258:	e9cd 1500 	strd	r1, r5, [sp]
 802625c:	6860      	ldr	r0, [r4, #4]
 802625e:	fa0f f388 	sxth.w	r3, r8
 8026262:	463a      	mov	r2, r7
 8026264:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8026266:	f104 0020 	add.w	r0, r4, #32
 802626a:	f7ff fdaf 	bl	8025dcc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802626e:	4607      	mov	r7, r0
 8026270:	6830      	ldr	r0, [r6, #0]
 8026272:	6803      	ldr	r3, [r0, #0]
 8026274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026276:	4798      	blx	r3
 8026278:	4638      	mov	r0, r7
 802627a:	b002      	add	sp, #8
 802627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026280:	2204      	movs	r2, #4
 8026282:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8026286:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802628a:	fb91 f2f2 	sdiv	r2, r1, r2
 802628e:	fb08 2303 	mla	r3, r8, r3, r2
 8026292:	441f      	add	r7, r3
 8026294:	424b      	negs	r3, r1
 8026296:	f003 0303 	and.w	r3, r3, #3
 802629a:	f001 0103 	and.w	r1, r1, #3
 802629e:	e7d7      	b.n	8026250 <_ZN8touchgfx6Canvas6renderEh+0x98>
 80262a0:	2202      	movs	r2, #2
 80262a2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80262a6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80262aa:	fb91 f2f2 	sdiv	r2, r1, r2
 80262ae:	fb08 2303 	mla	r3, r8, r3, r2
 80262b2:	2900      	cmp	r1, #0
 80262b4:	f001 0101 	and.w	r1, r1, #1
 80262b8:	441f      	add	r7, r3
 80262ba:	bfb8      	it	lt
 80262bc:	4249      	neglt	r1, r1
 80262be:	e7c9      	b.n	8026254 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 80262c0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80262c4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80262c8:	fb08 f303 	mul.w	r3, r8, r3
 80262cc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80262d0:	441f      	add	r7, r3
 80262d2:	2100      	movs	r1, #0
 80262d4:	e7bf      	b.n	8026256 <_ZN8touchgfx6Canvas6renderEh+0x9e>
 80262d6:	2103      	movs	r1, #3
 80262d8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80262dc:	fb08 f203 	mul.w	r2, r8, r3
 80262e0:	8b23      	ldrh	r3, [r4, #24]
 80262e2:	fb13 2301 	smlabb	r3, r3, r1, r2
 80262e6:	e7f3      	b.n	80262d0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 80262e8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80262ec:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80262f0:	fb08 2303 	mla	r3, r8, r3, r2
 80262f4:	e7ec      	b.n	80262d0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 80262f6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80262fa:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80262fe:	fb08 f303 	mul.w	r3, r8, r3
 8026302:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026306:	e7e3      	b.n	80262d0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8026308:	2701      	movs	r7, #1
 802630a:	e7b5      	b.n	8026278 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802630c:	2004f6c8 	.word	0x2004f6c8

08026310 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8026310:	b513      	push	{r0, r1, r4, lr}
 8026312:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8026316:	4604      	mov	r4, r0
 8026318:	e9cd 2100 	strd	r2, r1, [sp]
 802631c:	b1a3      	cbz	r3, 8026348 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802631e:	466a      	mov	r2, sp
 8026320:	a901      	add	r1, sp, #4
 8026322:	4620      	mov	r0, r4
 8026324:	f7ff feba 	bl	802609c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8026328:	68a3      	ldr	r3, [r4, #8]
 802632a:	9901      	ldr	r1, [sp, #4]
 802632c:	9a00      	ldr	r2, [sp, #0]
 802632e:	1ac9      	subs	r1, r1, r3
 8026330:	68e3      	ldr	r3, [r4, #12]
 8026332:	9101      	str	r1, [sp, #4]
 8026334:	1ad2      	subs	r2, r2, r3
 8026336:	2a00      	cmp	r2, #0
 8026338:	9200      	str	r2, [sp, #0]
 802633a:	da0b      	bge.n	8026354 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802633c:	2301      	movs	r3, #1
 802633e:	2900      	cmp	r1, #0
 8026340:	da0e      	bge.n	8026360 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8026342:	f043 0304 	orr.w	r3, r3, #4
 8026346:	e013      	b.n	8026370 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8026348:	f7ff ff13 	bl	8026172 <_ZN8touchgfx6Canvas5closeEv>
 802634c:	2800      	cmp	r0, #0
 802634e:	d1e6      	bne.n	802631e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8026350:	b002      	add	sp, #8
 8026352:	bd10      	pop	{r4, pc}
 8026354:	6963      	ldr	r3, [r4, #20]
 8026356:	429a      	cmp	r2, r3
 8026358:	bfac      	ite	ge
 802635a:	2302      	movge	r3, #2
 802635c:	2300      	movlt	r3, #0
 802635e:	e7ee      	b.n	802633e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8026360:	6920      	ldr	r0, [r4, #16]
 8026362:	4281      	cmp	r1, r0
 8026364:	bfac      	ite	ge
 8026366:	2008      	movge	r0, #8
 8026368:	2000      	movlt	r0, #0
 802636a:	4318      	orrs	r0, r3
 802636c:	b2c3      	uxtb	r3, r0
 802636e:	b158      	cbz	r0, 8026388 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8026370:	2201      	movs	r2, #1
 8026372:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8026376:	9901      	ldr	r1, [sp, #4]
 8026378:	9a00      	ldr	r2, [sp, #0]
 802637a:	66a1      	str	r1, [r4, #104]	; 0x68
 802637c:	66e2      	str	r2, [r4, #108]	; 0x6c
 802637e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8026382:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8026386:	e7e3      	b.n	8026350 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8026388:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802638c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8026390:	4298      	cmp	r0, r3
 8026392:	d803      	bhi.n	802639c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8026394:	f104 0020 	add.w	r0, r4, #32
 8026398:	f7f0 f8aa 	bl	80164f0 <_ZN8touchgfx7Outline6moveToEii>
 802639c:	2300      	movs	r3, #0
 802639e:	2201      	movs	r2, #1
 80263a0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80263a4:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80263a8:	e7e5      	b.n	8026376 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

080263aa <__aeabi_atexit>:
 80263aa:	460b      	mov	r3, r1
 80263ac:	4601      	mov	r1, r0
 80263ae:	4618      	mov	r0, r3
 80263b0:	f000 b850 	b.w	8026454 <__cxa_atexit>

080263b4 <_ZdlPvj>:
 80263b4:	f000 b812 	b.w	80263dc <_ZdlPv>

080263b8 <__cxa_guard_acquire>:
 80263b8:	6803      	ldr	r3, [r0, #0]
 80263ba:	07db      	lsls	r3, r3, #31
 80263bc:	d406      	bmi.n	80263cc <__cxa_guard_acquire+0x14>
 80263be:	7843      	ldrb	r3, [r0, #1]
 80263c0:	b103      	cbz	r3, 80263c4 <__cxa_guard_acquire+0xc>
 80263c2:	deff      	udf	#255	; 0xff
 80263c4:	2301      	movs	r3, #1
 80263c6:	7043      	strb	r3, [r0, #1]
 80263c8:	4618      	mov	r0, r3
 80263ca:	4770      	bx	lr
 80263cc:	2000      	movs	r0, #0
 80263ce:	4770      	bx	lr

080263d0 <__cxa_guard_release>:
 80263d0:	2301      	movs	r3, #1
 80263d2:	6003      	str	r3, [r0, #0]
 80263d4:	4770      	bx	lr

080263d6 <__cxa_pure_virtual>:
 80263d6:	b508      	push	{r3, lr}
 80263d8:	f000 f80c 	bl	80263f4 <_ZSt9terminatev>

080263dc <_ZdlPv>:
 80263dc:	f000 b88c 	b.w	80264f8 <free>

080263e0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80263e0:	b508      	push	{r3, lr}
 80263e2:	4780      	blx	r0
 80263e4:	f000 f80b 	bl	80263fe <abort>

080263e8 <_ZSt13get_terminatev>:
 80263e8:	4b01      	ldr	r3, [pc, #4]	; (80263f0 <_ZSt13get_terminatev+0x8>)
 80263ea:	e8d3 0faf 	lda	r0, [r3]
 80263ee:	4770      	bx	lr
 80263f0:	20025894 	.word	0x20025894

080263f4 <_ZSt9terminatev>:
 80263f4:	b508      	push	{r3, lr}
 80263f6:	f7ff fff7 	bl	80263e8 <_ZSt13get_terminatev>
 80263fa:	f7ff fff1 	bl	80263e0 <_ZN10__cxxabiv111__terminateEPFvvE>

080263fe <abort>:
 80263fe:	2006      	movs	r0, #6
 8026400:	b508      	push	{r3, lr}
 8026402:	f000 fc9f 	bl	8026d44 <raise>
 8026406:	2001      	movs	r0, #1
 8026408:	f7db fe92 	bl	8002130 <_exit>

0802640c <__assert_func>:
 802640c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802640e:	4614      	mov	r4, r2
 8026410:	461a      	mov	r2, r3
 8026412:	4b09      	ldr	r3, [pc, #36]	; (8026438 <__assert_func+0x2c>)
 8026414:	4605      	mov	r5, r0
 8026416:	681b      	ldr	r3, [r3, #0]
 8026418:	68d8      	ldr	r0, [r3, #12]
 802641a:	b14c      	cbz	r4, 8026430 <__assert_func+0x24>
 802641c:	4b07      	ldr	r3, [pc, #28]	; (802643c <__assert_func+0x30>)
 802641e:	9100      	str	r1, [sp, #0]
 8026420:	4907      	ldr	r1, [pc, #28]	; (8026440 <__assert_func+0x34>)
 8026422:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026426:	462b      	mov	r3, r5
 8026428:	f000 f828 	bl	802647c <fiprintf>
 802642c:	f7ff ffe7 	bl	80263fe <abort>
 8026430:	4b04      	ldr	r3, [pc, #16]	; (8026444 <__assert_func+0x38>)
 8026432:	461c      	mov	r4, r3
 8026434:	e7f3      	b.n	802641e <__assert_func+0x12>
 8026436:	bf00      	nop
 8026438:	20025898 	.word	0x20025898
 802643c:	08029a4c 	.word	0x08029a4c
 8026440:	08029a59 	.word	0x08029a59
 8026444:	08029a87 	.word	0x08029a87

08026448 <atexit>:
 8026448:	2300      	movs	r3, #0
 802644a:	4601      	mov	r1, r0
 802644c:	461a      	mov	r2, r3
 802644e:	4618      	mov	r0, r3
 8026450:	f000 bd54 	b.w	8026efc <__register_exitproc>

08026454 <__cxa_atexit>:
 8026454:	b510      	push	{r4, lr}
 8026456:	4c05      	ldr	r4, [pc, #20]	; (802646c <__cxa_atexit+0x18>)
 8026458:	4613      	mov	r3, r2
 802645a:	b12c      	cbz	r4, 8026468 <__cxa_atexit+0x14>
 802645c:	460a      	mov	r2, r1
 802645e:	4601      	mov	r1, r0
 8026460:	2002      	movs	r0, #2
 8026462:	f000 fd4b 	bl	8026efc <__register_exitproc>
 8026466:	bd10      	pop	{r4, pc}
 8026468:	4620      	mov	r0, r4
 802646a:	e7fc      	b.n	8026466 <__cxa_atexit+0x12>
 802646c:	08026efd 	.word	0x08026efd

08026470 <__errno>:
 8026470:	4b01      	ldr	r3, [pc, #4]	; (8026478 <__errno+0x8>)
 8026472:	6818      	ldr	r0, [r3, #0]
 8026474:	4770      	bx	lr
 8026476:	bf00      	nop
 8026478:	20025898 	.word	0x20025898

0802647c <fiprintf>:
 802647c:	b40e      	push	{r1, r2, r3}
 802647e:	b503      	push	{r0, r1, lr}
 8026480:	ab03      	add	r3, sp, #12
 8026482:	4601      	mov	r1, r0
 8026484:	4805      	ldr	r0, [pc, #20]	; (802649c <fiprintf+0x20>)
 8026486:	f853 2b04 	ldr.w	r2, [r3], #4
 802648a:	6800      	ldr	r0, [r0, #0]
 802648c:	9301      	str	r3, [sp, #4]
 802648e:	f000 f95b 	bl	8026748 <_vfiprintf_r>
 8026492:	b002      	add	sp, #8
 8026494:	f85d eb04 	ldr.w	lr, [sp], #4
 8026498:	b003      	add	sp, #12
 802649a:	4770      	bx	lr
 802649c:	20025898 	.word	0x20025898

080264a0 <__libc_init_array>:
 80264a0:	b570      	push	{r4, r5, r6, lr}
 80264a2:	4d0d      	ldr	r5, [pc, #52]	; (80264d8 <__libc_init_array+0x38>)
 80264a4:	2600      	movs	r6, #0
 80264a6:	4c0d      	ldr	r4, [pc, #52]	; (80264dc <__libc_init_array+0x3c>)
 80264a8:	1b64      	subs	r4, r4, r5
 80264aa:	10a4      	asrs	r4, r4, #2
 80264ac:	42a6      	cmp	r6, r4
 80264ae:	d109      	bne.n	80264c4 <__libc_init_array+0x24>
 80264b0:	4d0b      	ldr	r5, [pc, #44]	; (80264e0 <__libc_init_array+0x40>)
 80264b2:	2600      	movs	r6, #0
 80264b4:	4c0b      	ldr	r4, [pc, #44]	; (80264e4 <__libc_init_array+0x44>)
 80264b6:	f001 f869 	bl	802758c <_init>
 80264ba:	1b64      	subs	r4, r4, r5
 80264bc:	10a4      	asrs	r4, r4, #2
 80264be:	42a6      	cmp	r6, r4
 80264c0:	d105      	bne.n	80264ce <__libc_init_array+0x2e>
 80264c2:	bd70      	pop	{r4, r5, r6, pc}
 80264c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80264c8:	3601      	adds	r6, #1
 80264ca:	4798      	blx	r3
 80264cc:	e7ee      	b.n	80264ac <__libc_init_array+0xc>
 80264ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80264d2:	3601      	adds	r6, #1
 80264d4:	4798      	blx	r3
 80264d6:	e7f2      	b.n	80264be <__libc_init_array+0x1e>
 80264d8:	0804f4fc 	.word	0x0804f4fc
 80264dc:	0804f4fc 	.word	0x0804f4fc
 80264e0:	0804f4fc 	.word	0x0804f4fc
 80264e4:	0804f510 	.word	0x0804f510

080264e8 <malloc>:
 80264e8:	4b02      	ldr	r3, [pc, #8]	; (80264f4 <malloc+0xc>)
 80264ea:	4601      	mov	r1, r0
 80264ec:	6818      	ldr	r0, [r3, #0]
 80264ee:	f000 b88d 	b.w	802660c <_malloc_r>
 80264f2:	bf00      	nop
 80264f4:	20025898 	.word	0x20025898

080264f8 <free>:
 80264f8:	4b02      	ldr	r3, [pc, #8]	; (8026504 <free+0xc>)
 80264fa:	4601      	mov	r1, r0
 80264fc:	6818      	ldr	r0, [r3, #0]
 80264fe:	f000 b819 	b.w	8026534 <_free_r>
 8026502:	bf00      	nop
 8026504:	20025898 	.word	0x20025898

08026508 <memcpy>:
 8026508:	440a      	add	r2, r1
 802650a:	1e43      	subs	r3, r0, #1
 802650c:	4291      	cmp	r1, r2
 802650e:	d100      	bne.n	8026512 <memcpy+0xa>
 8026510:	4770      	bx	lr
 8026512:	b510      	push	{r4, lr}
 8026514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026518:	4291      	cmp	r1, r2
 802651a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802651e:	d1f9      	bne.n	8026514 <memcpy+0xc>
 8026520:	bd10      	pop	{r4, pc}

08026522 <memset>:
 8026522:	4402      	add	r2, r0
 8026524:	4603      	mov	r3, r0
 8026526:	4293      	cmp	r3, r2
 8026528:	d100      	bne.n	802652c <memset+0xa>
 802652a:	4770      	bx	lr
 802652c:	f803 1b01 	strb.w	r1, [r3], #1
 8026530:	e7f9      	b.n	8026526 <memset+0x4>
	...

08026534 <_free_r>:
 8026534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026536:	2900      	cmp	r1, #0
 8026538:	d043      	beq.n	80265c2 <_free_r+0x8e>
 802653a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802653e:	1f0c      	subs	r4, r1, #4
 8026540:	9001      	str	r0, [sp, #4]
 8026542:	2b00      	cmp	r3, #0
 8026544:	bfb8      	it	lt
 8026546:	18e4      	addlt	r4, r4, r3
 8026548:	f000 ff68 	bl	802741c <__malloc_lock>
 802654c:	4a1e      	ldr	r2, [pc, #120]	; (80265c8 <_free_r+0x94>)
 802654e:	9801      	ldr	r0, [sp, #4]
 8026550:	6813      	ldr	r3, [r2, #0]
 8026552:	b933      	cbnz	r3, 8026562 <_free_r+0x2e>
 8026554:	6063      	str	r3, [r4, #4]
 8026556:	6014      	str	r4, [r2, #0]
 8026558:	b003      	add	sp, #12
 802655a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802655e:	f000 bf63 	b.w	8027428 <__malloc_unlock>
 8026562:	42a3      	cmp	r3, r4
 8026564:	d908      	bls.n	8026578 <_free_r+0x44>
 8026566:	6825      	ldr	r5, [r4, #0]
 8026568:	1961      	adds	r1, r4, r5
 802656a:	428b      	cmp	r3, r1
 802656c:	bf01      	itttt	eq
 802656e:	6819      	ldreq	r1, [r3, #0]
 8026570:	685b      	ldreq	r3, [r3, #4]
 8026572:	1949      	addeq	r1, r1, r5
 8026574:	6021      	streq	r1, [r4, #0]
 8026576:	e7ed      	b.n	8026554 <_free_r+0x20>
 8026578:	461a      	mov	r2, r3
 802657a:	685b      	ldr	r3, [r3, #4]
 802657c:	b10b      	cbz	r3, 8026582 <_free_r+0x4e>
 802657e:	42a3      	cmp	r3, r4
 8026580:	d9fa      	bls.n	8026578 <_free_r+0x44>
 8026582:	6811      	ldr	r1, [r2, #0]
 8026584:	1855      	adds	r5, r2, r1
 8026586:	42a5      	cmp	r5, r4
 8026588:	d10b      	bne.n	80265a2 <_free_r+0x6e>
 802658a:	6824      	ldr	r4, [r4, #0]
 802658c:	4421      	add	r1, r4
 802658e:	1854      	adds	r4, r2, r1
 8026590:	6011      	str	r1, [r2, #0]
 8026592:	42a3      	cmp	r3, r4
 8026594:	d1e0      	bne.n	8026558 <_free_r+0x24>
 8026596:	681c      	ldr	r4, [r3, #0]
 8026598:	685b      	ldr	r3, [r3, #4]
 802659a:	4421      	add	r1, r4
 802659c:	6053      	str	r3, [r2, #4]
 802659e:	6011      	str	r1, [r2, #0]
 80265a0:	e7da      	b.n	8026558 <_free_r+0x24>
 80265a2:	d902      	bls.n	80265aa <_free_r+0x76>
 80265a4:	230c      	movs	r3, #12
 80265a6:	6003      	str	r3, [r0, #0]
 80265a8:	e7d6      	b.n	8026558 <_free_r+0x24>
 80265aa:	6825      	ldr	r5, [r4, #0]
 80265ac:	1961      	adds	r1, r4, r5
 80265ae:	428b      	cmp	r3, r1
 80265b0:	bf02      	ittt	eq
 80265b2:	6819      	ldreq	r1, [r3, #0]
 80265b4:	685b      	ldreq	r3, [r3, #4]
 80265b6:	1949      	addeq	r1, r1, r5
 80265b8:	6063      	str	r3, [r4, #4]
 80265ba:	bf08      	it	eq
 80265bc:	6021      	streq	r1, [r4, #0]
 80265be:	6054      	str	r4, [r2, #4]
 80265c0:	e7ca      	b.n	8026558 <_free_r+0x24>
 80265c2:	b003      	add	sp, #12
 80265c4:	bd30      	pop	{r4, r5, pc}
 80265c6:	bf00      	nop
 80265c8:	2004f7cc 	.word	0x2004f7cc

080265cc <sbrk_aligned>:
 80265cc:	b570      	push	{r4, r5, r6, lr}
 80265ce:	4e0e      	ldr	r6, [pc, #56]	; (8026608 <sbrk_aligned+0x3c>)
 80265d0:	460c      	mov	r4, r1
 80265d2:	4605      	mov	r5, r0
 80265d4:	6831      	ldr	r1, [r6, #0]
 80265d6:	b911      	cbnz	r1, 80265de <sbrk_aligned+0x12>
 80265d8:	f000 fb7c 	bl	8026cd4 <_sbrk_r>
 80265dc:	6030      	str	r0, [r6, #0]
 80265de:	4621      	mov	r1, r4
 80265e0:	4628      	mov	r0, r5
 80265e2:	f000 fb77 	bl	8026cd4 <_sbrk_r>
 80265e6:	1c43      	adds	r3, r0, #1
 80265e8:	d00a      	beq.n	8026600 <sbrk_aligned+0x34>
 80265ea:	1cc4      	adds	r4, r0, #3
 80265ec:	f024 0403 	bic.w	r4, r4, #3
 80265f0:	42a0      	cmp	r0, r4
 80265f2:	d007      	beq.n	8026604 <sbrk_aligned+0x38>
 80265f4:	1a21      	subs	r1, r4, r0
 80265f6:	4628      	mov	r0, r5
 80265f8:	f000 fb6c 	bl	8026cd4 <_sbrk_r>
 80265fc:	3001      	adds	r0, #1
 80265fe:	d101      	bne.n	8026604 <sbrk_aligned+0x38>
 8026600:	f04f 34ff 	mov.w	r4, #4294967295
 8026604:	4620      	mov	r0, r4
 8026606:	bd70      	pop	{r4, r5, r6, pc}
 8026608:	2004f7d0 	.word	0x2004f7d0

0802660c <_malloc_r>:
 802660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026610:	1ccd      	adds	r5, r1, #3
 8026612:	4607      	mov	r7, r0
 8026614:	f025 0503 	bic.w	r5, r5, #3
 8026618:	3508      	adds	r5, #8
 802661a:	2d0c      	cmp	r5, #12
 802661c:	bf38      	it	cc
 802661e:	250c      	movcc	r5, #12
 8026620:	2d00      	cmp	r5, #0
 8026622:	db01      	blt.n	8026628 <_malloc_r+0x1c>
 8026624:	42a9      	cmp	r1, r5
 8026626:	d905      	bls.n	8026634 <_malloc_r+0x28>
 8026628:	230c      	movs	r3, #12
 802662a:	2600      	movs	r6, #0
 802662c:	603b      	str	r3, [r7, #0]
 802662e:	4630      	mov	r0, r6
 8026630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026634:	4e2e      	ldr	r6, [pc, #184]	; (80266f0 <_malloc_r+0xe4>)
 8026636:	f000 fef1 	bl	802741c <__malloc_lock>
 802663a:	6833      	ldr	r3, [r6, #0]
 802663c:	461c      	mov	r4, r3
 802663e:	bb34      	cbnz	r4, 802668e <_malloc_r+0x82>
 8026640:	4629      	mov	r1, r5
 8026642:	4638      	mov	r0, r7
 8026644:	f7ff ffc2 	bl	80265cc <sbrk_aligned>
 8026648:	1c43      	adds	r3, r0, #1
 802664a:	4604      	mov	r4, r0
 802664c:	d14d      	bne.n	80266ea <_malloc_r+0xde>
 802664e:	6834      	ldr	r4, [r6, #0]
 8026650:	4626      	mov	r6, r4
 8026652:	2e00      	cmp	r6, #0
 8026654:	d140      	bne.n	80266d8 <_malloc_r+0xcc>
 8026656:	6823      	ldr	r3, [r4, #0]
 8026658:	4631      	mov	r1, r6
 802665a:	4638      	mov	r0, r7
 802665c:	eb04 0803 	add.w	r8, r4, r3
 8026660:	f000 fb38 	bl	8026cd4 <_sbrk_r>
 8026664:	4580      	cmp	r8, r0
 8026666:	d13a      	bne.n	80266de <_malloc_r+0xd2>
 8026668:	6821      	ldr	r1, [r4, #0]
 802666a:	3503      	adds	r5, #3
 802666c:	4638      	mov	r0, r7
 802666e:	1a6d      	subs	r5, r5, r1
 8026670:	f025 0503 	bic.w	r5, r5, #3
 8026674:	3508      	adds	r5, #8
 8026676:	2d0c      	cmp	r5, #12
 8026678:	bf38      	it	cc
 802667a:	250c      	movcc	r5, #12
 802667c:	4629      	mov	r1, r5
 802667e:	f7ff ffa5 	bl	80265cc <sbrk_aligned>
 8026682:	3001      	adds	r0, #1
 8026684:	d02b      	beq.n	80266de <_malloc_r+0xd2>
 8026686:	6823      	ldr	r3, [r4, #0]
 8026688:	442b      	add	r3, r5
 802668a:	6023      	str	r3, [r4, #0]
 802668c:	e00e      	b.n	80266ac <_malloc_r+0xa0>
 802668e:	6822      	ldr	r2, [r4, #0]
 8026690:	1b52      	subs	r2, r2, r5
 8026692:	d41e      	bmi.n	80266d2 <_malloc_r+0xc6>
 8026694:	2a0b      	cmp	r2, #11
 8026696:	d916      	bls.n	80266c6 <_malloc_r+0xba>
 8026698:	1961      	adds	r1, r4, r5
 802669a:	42a3      	cmp	r3, r4
 802669c:	6025      	str	r5, [r4, #0]
 802669e:	bf18      	it	ne
 80266a0:	6059      	strne	r1, [r3, #4]
 80266a2:	6863      	ldr	r3, [r4, #4]
 80266a4:	bf08      	it	eq
 80266a6:	6031      	streq	r1, [r6, #0]
 80266a8:	5162      	str	r2, [r4, r5]
 80266aa:	604b      	str	r3, [r1, #4]
 80266ac:	f104 060b 	add.w	r6, r4, #11
 80266b0:	4638      	mov	r0, r7
 80266b2:	f000 feb9 	bl	8027428 <__malloc_unlock>
 80266b6:	1d23      	adds	r3, r4, #4
 80266b8:	f026 0607 	bic.w	r6, r6, #7
 80266bc:	1af2      	subs	r2, r6, r3
 80266be:	d0b6      	beq.n	802662e <_malloc_r+0x22>
 80266c0:	1b9b      	subs	r3, r3, r6
 80266c2:	50a3      	str	r3, [r4, r2]
 80266c4:	e7b3      	b.n	802662e <_malloc_r+0x22>
 80266c6:	6862      	ldr	r2, [r4, #4]
 80266c8:	42a3      	cmp	r3, r4
 80266ca:	bf0c      	ite	eq
 80266cc:	6032      	streq	r2, [r6, #0]
 80266ce:	605a      	strne	r2, [r3, #4]
 80266d0:	e7ec      	b.n	80266ac <_malloc_r+0xa0>
 80266d2:	4623      	mov	r3, r4
 80266d4:	6864      	ldr	r4, [r4, #4]
 80266d6:	e7b2      	b.n	802663e <_malloc_r+0x32>
 80266d8:	4634      	mov	r4, r6
 80266da:	6876      	ldr	r6, [r6, #4]
 80266dc:	e7b9      	b.n	8026652 <_malloc_r+0x46>
 80266de:	230c      	movs	r3, #12
 80266e0:	4638      	mov	r0, r7
 80266e2:	603b      	str	r3, [r7, #0]
 80266e4:	f000 fea0 	bl	8027428 <__malloc_unlock>
 80266e8:	e7a1      	b.n	802662e <_malloc_r+0x22>
 80266ea:	6025      	str	r5, [r4, #0]
 80266ec:	e7de      	b.n	80266ac <_malloc_r+0xa0>
 80266ee:	bf00      	nop
 80266f0:	2004f7cc 	.word	0x2004f7cc

080266f4 <__sfputc_r>:
 80266f4:	6893      	ldr	r3, [r2, #8]
 80266f6:	3b01      	subs	r3, #1
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	6093      	str	r3, [r2, #8]
 80266fc:	b410      	push	{r4}
 80266fe:	da08      	bge.n	8026712 <__sfputc_r+0x1e>
 8026700:	6994      	ldr	r4, [r2, #24]
 8026702:	42a3      	cmp	r3, r4
 8026704:	db01      	blt.n	802670a <__sfputc_r+0x16>
 8026706:	290a      	cmp	r1, #10
 8026708:	d103      	bne.n	8026712 <__sfputc_r+0x1e>
 802670a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802670e:	f000 bb35 	b.w	8026d7c <__swbuf_r>
 8026712:	6813      	ldr	r3, [r2, #0]
 8026714:	1c58      	adds	r0, r3, #1
 8026716:	6010      	str	r0, [r2, #0]
 8026718:	4608      	mov	r0, r1
 802671a:	7019      	strb	r1, [r3, #0]
 802671c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026720:	4770      	bx	lr

08026722 <__sfputs_r>:
 8026722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026724:	4606      	mov	r6, r0
 8026726:	460f      	mov	r7, r1
 8026728:	4614      	mov	r4, r2
 802672a:	18d5      	adds	r5, r2, r3
 802672c:	42ac      	cmp	r4, r5
 802672e:	d101      	bne.n	8026734 <__sfputs_r+0x12>
 8026730:	2000      	movs	r0, #0
 8026732:	e007      	b.n	8026744 <__sfputs_r+0x22>
 8026734:	463a      	mov	r2, r7
 8026736:	f814 1b01 	ldrb.w	r1, [r4], #1
 802673a:	4630      	mov	r0, r6
 802673c:	f7ff ffda 	bl	80266f4 <__sfputc_r>
 8026740:	1c43      	adds	r3, r0, #1
 8026742:	d1f3      	bne.n	802672c <__sfputs_r+0xa>
 8026744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026748 <_vfiprintf_r>:
 8026748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802674c:	460d      	mov	r5, r1
 802674e:	b09d      	sub	sp, #116	; 0x74
 8026750:	4614      	mov	r4, r2
 8026752:	4698      	mov	r8, r3
 8026754:	4606      	mov	r6, r0
 8026756:	b118      	cbz	r0, 8026760 <_vfiprintf_r+0x18>
 8026758:	6983      	ldr	r3, [r0, #24]
 802675a:	b90b      	cbnz	r3, 8026760 <_vfiprintf_r+0x18>
 802675c:	f000 fd4a 	bl	80271f4 <__sinit>
 8026760:	4b89      	ldr	r3, [pc, #548]	; (8026988 <_vfiprintf_r+0x240>)
 8026762:	429d      	cmp	r5, r3
 8026764:	d11b      	bne.n	802679e <_vfiprintf_r+0x56>
 8026766:	6875      	ldr	r5, [r6, #4]
 8026768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802676a:	07d9      	lsls	r1, r3, #31
 802676c:	d405      	bmi.n	802677a <_vfiprintf_r+0x32>
 802676e:	89ab      	ldrh	r3, [r5, #12]
 8026770:	059a      	lsls	r2, r3, #22
 8026772:	d402      	bmi.n	802677a <_vfiprintf_r+0x32>
 8026774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026776:	f000 fddb 	bl	8027330 <__retarget_lock_acquire_recursive>
 802677a:	89ab      	ldrh	r3, [r5, #12]
 802677c:	071b      	lsls	r3, r3, #28
 802677e:	d501      	bpl.n	8026784 <_vfiprintf_r+0x3c>
 8026780:	692b      	ldr	r3, [r5, #16]
 8026782:	b9eb      	cbnz	r3, 80267c0 <_vfiprintf_r+0x78>
 8026784:	4629      	mov	r1, r5
 8026786:	4630      	mov	r0, r6
 8026788:	f000 fb4a 	bl	8026e20 <__swsetup_r>
 802678c:	b1c0      	cbz	r0, 80267c0 <_vfiprintf_r+0x78>
 802678e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026790:	07dc      	lsls	r4, r3, #31
 8026792:	d50e      	bpl.n	80267b2 <_vfiprintf_r+0x6a>
 8026794:	f04f 30ff 	mov.w	r0, #4294967295
 8026798:	b01d      	add	sp, #116	; 0x74
 802679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802679e:	4b7b      	ldr	r3, [pc, #492]	; (802698c <_vfiprintf_r+0x244>)
 80267a0:	429d      	cmp	r5, r3
 80267a2:	d101      	bne.n	80267a8 <_vfiprintf_r+0x60>
 80267a4:	68b5      	ldr	r5, [r6, #8]
 80267a6:	e7df      	b.n	8026768 <_vfiprintf_r+0x20>
 80267a8:	4b79      	ldr	r3, [pc, #484]	; (8026990 <_vfiprintf_r+0x248>)
 80267aa:	429d      	cmp	r5, r3
 80267ac:	bf08      	it	eq
 80267ae:	68f5      	ldreq	r5, [r6, #12]
 80267b0:	e7da      	b.n	8026768 <_vfiprintf_r+0x20>
 80267b2:	89ab      	ldrh	r3, [r5, #12]
 80267b4:	0598      	lsls	r0, r3, #22
 80267b6:	d4ed      	bmi.n	8026794 <_vfiprintf_r+0x4c>
 80267b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80267ba:	f000 fdbb 	bl	8027334 <__retarget_lock_release_recursive>
 80267be:	e7e9      	b.n	8026794 <_vfiprintf_r+0x4c>
 80267c0:	2300      	movs	r3, #0
 80267c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80267c6:	f04f 0901 	mov.w	r9, #1
 80267ca:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8026994 <_vfiprintf_r+0x24c>
 80267ce:	9309      	str	r3, [sp, #36]	; 0x24
 80267d0:	2320      	movs	r3, #32
 80267d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80267d6:	2330      	movs	r3, #48	; 0x30
 80267d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80267dc:	4623      	mov	r3, r4
 80267de:	469a      	mov	sl, r3
 80267e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80267e4:	b10a      	cbz	r2, 80267ea <_vfiprintf_r+0xa2>
 80267e6:	2a25      	cmp	r2, #37	; 0x25
 80267e8:	d1f9      	bne.n	80267de <_vfiprintf_r+0x96>
 80267ea:	ebba 0b04 	subs.w	fp, sl, r4
 80267ee:	d00b      	beq.n	8026808 <_vfiprintf_r+0xc0>
 80267f0:	465b      	mov	r3, fp
 80267f2:	4622      	mov	r2, r4
 80267f4:	4629      	mov	r1, r5
 80267f6:	4630      	mov	r0, r6
 80267f8:	f7ff ff93 	bl	8026722 <__sfputs_r>
 80267fc:	3001      	adds	r0, #1
 80267fe:	f000 80aa 	beq.w	8026956 <_vfiprintf_r+0x20e>
 8026802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026804:	445a      	add	r2, fp
 8026806:	9209      	str	r2, [sp, #36]	; 0x24
 8026808:	f89a 3000 	ldrb.w	r3, [sl]
 802680c:	2b00      	cmp	r3, #0
 802680e:	f000 80a2 	beq.w	8026956 <_vfiprintf_r+0x20e>
 8026812:	2300      	movs	r3, #0
 8026814:	f04f 32ff 	mov.w	r2, #4294967295
 8026818:	f10a 0a01 	add.w	sl, sl, #1
 802681c:	9304      	str	r3, [sp, #16]
 802681e:	9307      	str	r3, [sp, #28]
 8026820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026824:	931a      	str	r3, [sp, #104]	; 0x68
 8026826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802682a:	4654      	mov	r4, sl
 802682c:	2205      	movs	r2, #5
 802682e:	4859      	ldr	r0, [pc, #356]	; (8026994 <_vfiprintf_r+0x24c>)
 8026830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026834:	f000 fde4 	bl	8027400 <memchr>
 8026838:	9a04      	ldr	r2, [sp, #16]
 802683a:	b9d8      	cbnz	r0, 8026874 <_vfiprintf_r+0x12c>
 802683c:	06d1      	lsls	r1, r2, #27
 802683e:	bf44      	itt	mi
 8026840:	2320      	movmi	r3, #32
 8026842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026846:	0713      	lsls	r3, r2, #28
 8026848:	bf44      	itt	mi
 802684a:	232b      	movmi	r3, #43	; 0x2b
 802684c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026850:	f89a 3000 	ldrb.w	r3, [sl]
 8026854:	2b2a      	cmp	r3, #42	; 0x2a
 8026856:	d015      	beq.n	8026884 <_vfiprintf_r+0x13c>
 8026858:	9a07      	ldr	r2, [sp, #28]
 802685a:	4654      	mov	r4, sl
 802685c:	2000      	movs	r0, #0
 802685e:	f04f 0c0a 	mov.w	ip, #10
 8026862:	4621      	mov	r1, r4
 8026864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026868:	3b30      	subs	r3, #48	; 0x30
 802686a:	2b09      	cmp	r3, #9
 802686c:	d94e      	bls.n	802690c <_vfiprintf_r+0x1c4>
 802686e:	b1b0      	cbz	r0, 802689e <_vfiprintf_r+0x156>
 8026870:	9207      	str	r2, [sp, #28]
 8026872:	e014      	b.n	802689e <_vfiprintf_r+0x156>
 8026874:	eba0 0308 	sub.w	r3, r0, r8
 8026878:	46a2      	mov	sl, r4
 802687a:	fa09 f303 	lsl.w	r3, r9, r3
 802687e:	4313      	orrs	r3, r2
 8026880:	9304      	str	r3, [sp, #16]
 8026882:	e7d2      	b.n	802682a <_vfiprintf_r+0xe2>
 8026884:	9b03      	ldr	r3, [sp, #12]
 8026886:	1d19      	adds	r1, r3, #4
 8026888:	681b      	ldr	r3, [r3, #0]
 802688a:	2b00      	cmp	r3, #0
 802688c:	9103      	str	r1, [sp, #12]
 802688e:	bfbb      	ittet	lt
 8026890:	425b      	neglt	r3, r3
 8026892:	f042 0202 	orrlt.w	r2, r2, #2
 8026896:	9307      	strge	r3, [sp, #28]
 8026898:	9307      	strlt	r3, [sp, #28]
 802689a:	bfb8      	it	lt
 802689c:	9204      	strlt	r2, [sp, #16]
 802689e:	7823      	ldrb	r3, [r4, #0]
 80268a0:	2b2e      	cmp	r3, #46	; 0x2e
 80268a2:	d10c      	bne.n	80268be <_vfiprintf_r+0x176>
 80268a4:	7863      	ldrb	r3, [r4, #1]
 80268a6:	2b2a      	cmp	r3, #42	; 0x2a
 80268a8:	d135      	bne.n	8026916 <_vfiprintf_r+0x1ce>
 80268aa:	9b03      	ldr	r3, [sp, #12]
 80268ac:	3402      	adds	r4, #2
 80268ae:	1d1a      	adds	r2, r3, #4
 80268b0:	681b      	ldr	r3, [r3, #0]
 80268b2:	2b00      	cmp	r3, #0
 80268b4:	9203      	str	r2, [sp, #12]
 80268b6:	bfb8      	it	lt
 80268b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80268bc:	9305      	str	r3, [sp, #20]
 80268be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80269a4 <_vfiprintf_r+0x25c>
 80268c2:	2203      	movs	r2, #3
 80268c4:	7821      	ldrb	r1, [r4, #0]
 80268c6:	4650      	mov	r0, sl
 80268c8:	f000 fd9a 	bl	8027400 <memchr>
 80268cc:	b140      	cbz	r0, 80268e0 <_vfiprintf_r+0x198>
 80268ce:	2340      	movs	r3, #64	; 0x40
 80268d0:	eba0 000a 	sub.w	r0, r0, sl
 80268d4:	3401      	adds	r4, #1
 80268d6:	fa03 f000 	lsl.w	r0, r3, r0
 80268da:	9b04      	ldr	r3, [sp, #16]
 80268dc:	4303      	orrs	r3, r0
 80268de:	9304      	str	r3, [sp, #16]
 80268e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80268e4:	2206      	movs	r2, #6
 80268e6:	482c      	ldr	r0, [pc, #176]	; (8026998 <_vfiprintf_r+0x250>)
 80268e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80268ec:	f000 fd88 	bl	8027400 <memchr>
 80268f0:	2800      	cmp	r0, #0
 80268f2:	d03f      	beq.n	8026974 <_vfiprintf_r+0x22c>
 80268f4:	4b29      	ldr	r3, [pc, #164]	; (802699c <_vfiprintf_r+0x254>)
 80268f6:	bb1b      	cbnz	r3, 8026940 <_vfiprintf_r+0x1f8>
 80268f8:	9b03      	ldr	r3, [sp, #12]
 80268fa:	3307      	adds	r3, #7
 80268fc:	f023 0307 	bic.w	r3, r3, #7
 8026900:	3308      	adds	r3, #8
 8026902:	9303      	str	r3, [sp, #12]
 8026904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026906:	443b      	add	r3, r7
 8026908:	9309      	str	r3, [sp, #36]	; 0x24
 802690a:	e767      	b.n	80267dc <_vfiprintf_r+0x94>
 802690c:	fb0c 3202 	mla	r2, ip, r2, r3
 8026910:	460c      	mov	r4, r1
 8026912:	2001      	movs	r0, #1
 8026914:	e7a5      	b.n	8026862 <_vfiprintf_r+0x11a>
 8026916:	2300      	movs	r3, #0
 8026918:	3401      	adds	r4, #1
 802691a:	f04f 0c0a 	mov.w	ip, #10
 802691e:	4619      	mov	r1, r3
 8026920:	9305      	str	r3, [sp, #20]
 8026922:	4620      	mov	r0, r4
 8026924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026928:	3a30      	subs	r2, #48	; 0x30
 802692a:	2a09      	cmp	r2, #9
 802692c:	d903      	bls.n	8026936 <_vfiprintf_r+0x1ee>
 802692e:	2b00      	cmp	r3, #0
 8026930:	d0c5      	beq.n	80268be <_vfiprintf_r+0x176>
 8026932:	9105      	str	r1, [sp, #20]
 8026934:	e7c3      	b.n	80268be <_vfiprintf_r+0x176>
 8026936:	fb0c 2101 	mla	r1, ip, r1, r2
 802693a:	4604      	mov	r4, r0
 802693c:	2301      	movs	r3, #1
 802693e:	e7f0      	b.n	8026922 <_vfiprintf_r+0x1da>
 8026940:	ab03      	add	r3, sp, #12
 8026942:	462a      	mov	r2, r5
 8026944:	a904      	add	r1, sp, #16
 8026946:	4630      	mov	r0, r6
 8026948:	9300      	str	r3, [sp, #0]
 802694a:	4b15      	ldr	r3, [pc, #84]	; (80269a0 <_vfiprintf_r+0x258>)
 802694c:	e000      	b.n	8026950 <_vfiprintf_r+0x208>
 802694e:	bf00      	nop
 8026950:	4607      	mov	r7, r0
 8026952:	1c78      	adds	r0, r7, #1
 8026954:	d1d6      	bne.n	8026904 <_vfiprintf_r+0x1bc>
 8026956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026958:	07d9      	lsls	r1, r3, #31
 802695a:	d405      	bmi.n	8026968 <_vfiprintf_r+0x220>
 802695c:	89ab      	ldrh	r3, [r5, #12]
 802695e:	059a      	lsls	r2, r3, #22
 8026960:	d402      	bmi.n	8026968 <_vfiprintf_r+0x220>
 8026962:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026964:	f000 fce6 	bl	8027334 <__retarget_lock_release_recursive>
 8026968:	89ab      	ldrh	r3, [r5, #12]
 802696a:	065b      	lsls	r3, r3, #25
 802696c:	f53f af12 	bmi.w	8026794 <_vfiprintf_r+0x4c>
 8026970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026972:	e711      	b.n	8026798 <_vfiprintf_r+0x50>
 8026974:	ab03      	add	r3, sp, #12
 8026976:	462a      	mov	r2, r5
 8026978:	a904      	add	r1, sp, #16
 802697a:	4630      	mov	r0, r6
 802697c:	9300      	str	r3, [sp, #0]
 802697e:	4b08      	ldr	r3, [pc, #32]	; (80269a0 <_vfiprintf_r+0x258>)
 8026980:	f000 f882 	bl	8026a88 <_printf_i>
 8026984:	e7e4      	b.n	8026950 <_vfiprintf_r+0x208>
 8026986:	bf00      	nop
 8026988:	08029ae4 	.word	0x08029ae4
 802698c:	08029b04 	.word	0x08029b04
 8026990:	08029ac4 	.word	0x08029ac4
 8026994:	08029a8c 	.word	0x08029a8c
 8026998:	08029a96 	.word	0x08029a96
 802699c:	00000000 	.word	0x00000000
 80269a0:	08026723 	.word	0x08026723
 80269a4:	08029a92 	.word	0x08029a92

080269a8 <_printf_common>:
 80269a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80269ac:	4616      	mov	r6, r2
 80269ae:	4699      	mov	r9, r3
 80269b0:	688a      	ldr	r2, [r1, #8]
 80269b2:	4607      	mov	r7, r0
 80269b4:	690b      	ldr	r3, [r1, #16]
 80269b6:	460c      	mov	r4, r1
 80269b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80269bc:	4293      	cmp	r3, r2
 80269be:	bfb8      	it	lt
 80269c0:	4613      	movlt	r3, r2
 80269c2:	6033      	str	r3, [r6, #0]
 80269c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80269c8:	b10a      	cbz	r2, 80269ce <_printf_common+0x26>
 80269ca:	3301      	adds	r3, #1
 80269cc:	6033      	str	r3, [r6, #0]
 80269ce:	6823      	ldr	r3, [r4, #0]
 80269d0:	0699      	lsls	r1, r3, #26
 80269d2:	bf42      	ittt	mi
 80269d4:	6833      	ldrmi	r3, [r6, #0]
 80269d6:	3302      	addmi	r3, #2
 80269d8:	6033      	strmi	r3, [r6, #0]
 80269da:	6825      	ldr	r5, [r4, #0]
 80269dc:	f015 0506 	ands.w	r5, r5, #6
 80269e0:	d106      	bne.n	80269f0 <_printf_common+0x48>
 80269e2:	f104 0a19 	add.w	sl, r4, #25
 80269e6:	68e3      	ldr	r3, [r4, #12]
 80269e8:	6832      	ldr	r2, [r6, #0]
 80269ea:	1a9b      	subs	r3, r3, r2
 80269ec:	42ab      	cmp	r3, r5
 80269ee:	dc29      	bgt.n	8026a44 <_printf_common+0x9c>
 80269f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80269f4:	1e13      	subs	r3, r2, #0
 80269f6:	6822      	ldr	r2, [r4, #0]
 80269f8:	bf18      	it	ne
 80269fa:	2301      	movne	r3, #1
 80269fc:	0692      	lsls	r2, r2, #26
 80269fe:	d42e      	bmi.n	8026a5e <_printf_common+0xb6>
 8026a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026a04:	4649      	mov	r1, r9
 8026a06:	4638      	mov	r0, r7
 8026a08:	47c0      	blx	r8
 8026a0a:	3001      	adds	r0, #1
 8026a0c:	d021      	beq.n	8026a52 <_printf_common+0xaa>
 8026a0e:	6823      	ldr	r3, [r4, #0]
 8026a10:	341a      	adds	r4, #26
 8026a12:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8026a16:	f003 0306 	and.w	r3, r3, #6
 8026a1a:	6832      	ldr	r2, [r6, #0]
 8026a1c:	2600      	movs	r6, #0
 8026a1e:	2b04      	cmp	r3, #4
 8026a20:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8026a24:	bf08      	it	eq
 8026a26:	1aad      	subeq	r5, r5, r2
 8026a28:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8026a2c:	bf14      	ite	ne
 8026a2e:	2500      	movne	r5, #0
 8026a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026a34:	4293      	cmp	r3, r2
 8026a36:	bfc4      	itt	gt
 8026a38:	1a9b      	subgt	r3, r3, r2
 8026a3a:	18ed      	addgt	r5, r5, r3
 8026a3c:	42b5      	cmp	r5, r6
 8026a3e:	d11a      	bne.n	8026a76 <_printf_common+0xce>
 8026a40:	2000      	movs	r0, #0
 8026a42:	e008      	b.n	8026a56 <_printf_common+0xae>
 8026a44:	2301      	movs	r3, #1
 8026a46:	4652      	mov	r2, sl
 8026a48:	4649      	mov	r1, r9
 8026a4a:	4638      	mov	r0, r7
 8026a4c:	47c0      	blx	r8
 8026a4e:	3001      	adds	r0, #1
 8026a50:	d103      	bne.n	8026a5a <_printf_common+0xb2>
 8026a52:	f04f 30ff 	mov.w	r0, #4294967295
 8026a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026a5a:	3501      	adds	r5, #1
 8026a5c:	e7c3      	b.n	80269e6 <_printf_common+0x3e>
 8026a5e:	18e1      	adds	r1, r4, r3
 8026a60:	1c5a      	adds	r2, r3, #1
 8026a62:	2030      	movs	r0, #48	; 0x30
 8026a64:	3302      	adds	r3, #2
 8026a66:	4422      	add	r2, r4
 8026a68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026a74:	e7c4      	b.n	8026a00 <_printf_common+0x58>
 8026a76:	2301      	movs	r3, #1
 8026a78:	4622      	mov	r2, r4
 8026a7a:	4649      	mov	r1, r9
 8026a7c:	4638      	mov	r0, r7
 8026a7e:	47c0      	blx	r8
 8026a80:	3001      	adds	r0, #1
 8026a82:	d0e6      	beq.n	8026a52 <_printf_common+0xaa>
 8026a84:	3601      	adds	r6, #1
 8026a86:	e7d9      	b.n	8026a3c <_printf_common+0x94>

08026a88 <_printf_i>:
 8026a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026a8c:	7e0f      	ldrb	r7, [r1, #24]
 8026a8e:	4691      	mov	r9, r2
 8026a90:	4680      	mov	r8, r0
 8026a92:	460c      	mov	r4, r1
 8026a94:	2f78      	cmp	r7, #120	; 0x78
 8026a96:	469a      	mov	sl, r3
 8026a98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026a9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8026a9e:	d807      	bhi.n	8026ab0 <_printf_i+0x28>
 8026aa0:	2f62      	cmp	r7, #98	; 0x62
 8026aa2:	d80a      	bhi.n	8026aba <_printf_i+0x32>
 8026aa4:	2f00      	cmp	r7, #0
 8026aa6:	f000 80d8 	beq.w	8026c5a <_printf_i+0x1d2>
 8026aaa:	2f58      	cmp	r7, #88	; 0x58
 8026aac:	f000 80a3 	beq.w	8026bf6 <_printf_i+0x16e>
 8026ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026ab8:	e03a      	b.n	8026b30 <_printf_i+0xa8>
 8026aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026abe:	2b15      	cmp	r3, #21
 8026ac0:	d8f6      	bhi.n	8026ab0 <_printf_i+0x28>
 8026ac2:	a101      	add	r1, pc, #4	; (adr r1, 8026ac8 <_printf_i+0x40>)
 8026ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026ac8:	08026b21 	.word	0x08026b21
 8026acc:	08026b35 	.word	0x08026b35
 8026ad0:	08026ab1 	.word	0x08026ab1
 8026ad4:	08026ab1 	.word	0x08026ab1
 8026ad8:	08026ab1 	.word	0x08026ab1
 8026adc:	08026ab1 	.word	0x08026ab1
 8026ae0:	08026b35 	.word	0x08026b35
 8026ae4:	08026ab1 	.word	0x08026ab1
 8026ae8:	08026ab1 	.word	0x08026ab1
 8026aec:	08026ab1 	.word	0x08026ab1
 8026af0:	08026ab1 	.word	0x08026ab1
 8026af4:	08026c41 	.word	0x08026c41
 8026af8:	08026b65 	.word	0x08026b65
 8026afc:	08026c23 	.word	0x08026c23
 8026b00:	08026ab1 	.word	0x08026ab1
 8026b04:	08026ab1 	.word	0x08026ab1
 8026b08:	08026c63 	.word	0x08026c63
 8026b0c:	08026ab1 	.word	0x08026ab1
 8026b10:	08026b65 	.word	0x08026b65
 8026b14:	08026ab1 	.word	0x08026ab1
 8026b18:	08026ab1 	.word	0x08026ab1
 8026b1c:	08026c2b 	.word	0x08026c2b
 8026b20:	682b      	ldr	r3, [r5, #0]
 8026b22:	1d1a      	adds	r2, r3, #4
 8026b24:	681b      	ldr	r3, [r3, #0]
 8026b26:	602a      	str	r2, [r5, #0]
 8026b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026b30:	2301      	movs	r3, #1
 8026b32:	e0a3      	b.n	8026c7c <_printf_i+0x1f4>
 8026b34:	6820      	ldr	r0, [r4, #0]
 8026b36:	6829      	ldr	r1, [r5, #0]
 8026b38:	0606      	lsls	r6, r0, #24
 8026b3a:	f101 0304 	add.w	r3, r1, #4
 8026b3e:	d50a      	bpl.n	8026b56 <_printf_i+0xce>
 8026b40:	680e      	ldr	r6, [r1, #0]
 8026b42:	602b      	str	r3, [r5, #0]
 8026b44:	2e00      	cmp	r6, #0
 8026b46:	da03      	bge.n	8026b50 <_printf_i+0xc8>
 8026b48:	232d      	movs	r3, #45	; 0x2d
 8026b4a:	4276      	negs	r6, r6
 8026b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026b50:	485e      	ldr	r0, [pc, #376]	; (8026ccc <_printf_i+0x244>)
 8026b52:	230a      	movs	r3, #10
 8026b54:	e019      	b.n	8026b8a <_printf_i+0x102>
 8026b56:	680e      	ldr	r6, [r1, #0]
 8026b58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026b5c:	602b      	str	r3, [r5, #0]
 8026b5e:	bf18      	it	ne
 8026b60:	b236      	sxthne	r6, r6
 8026b62:	e7ef      	b.n	8026b44 <_printf_i+0xbc>
 8026b64:	682b      	ldr	r3, [r5, #0]
 8026b66:	6820      	ldr	r0, [r4, #0]
 8026b68:	1d19      	adds	r1, r3, #4
 8026b6a:	6029      	str	r1, [r5, #0]
 8026b6c:	0601      	lsls	r1, r0, #24
 8026b6e:	d501      	bpl.n	8026b74 <_printf_i+0xec>
 8026b70:	681e      	ldr	r6, [r3, #0]
 8026b72:	e002      	b.n	8026b7a <_printf_i+0xf2>
 8026b74:	0646      	lsls	r6, r0, #25
 8026b76:	d5fb      	bpl.n	8026b70 <_printf_i+0xe8>
 8026b78:	881e      	ldrh	r6, [r3, #0]
 8026b7a:	2f6f      	cmp	r7, #111	; 0x6f
 8026b7c:	4853      	ldr	r0, [pc, #332]	; (8026ccc <_printf_i+0x244>)
 8026b7e:	bf0c      	ite	eq
 8026b80:	2308      	moveq	r3, #8
 8026b82:	230a      	movne	r3, #10
 8026b84:	2100      	movs	r1, #0
 8026b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026b8a:	6865      	ldr	r5, [r4, #4]
 8026b8c:	2d00      	cmp	r5, #0
 8026b8e:	60a5      	str	r5, [r4, #8]
 8026b90:	bfa2      	ittt	ge
 8026b92:	6821      	ldrge	r1, [r4, #0]
 8026b94:	f021 0104 	bicge.w	r1, r1, #4
 8026b98:	6021      	strge	r1, [r4, #0]
 8026b9a:	b90e      	cbnz	r6, 8026ba0 <_printf_i+0x118>
 8026b9c:	2d00      	cmp	r5, #0
 8026b9e:	d04d      	beq.n	8026c3c <_printf_i+0x1b4>
 8026ba0:	4615      	mov	r5, r2
 8026ba2:	fbb6 f1f3 	udiv	r1, r6, r3
 8026ba6:	fb03 6711 	mls	r7, r3, r1, r6
 8026baa:	5dc7      	ldrb	r7, [r0, r7]
 8026bac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026bb0:	4637      	mov	r7, r6
 8026bb2:	460e      	mov	r6, r1
 8026bb4:	42bb      	cmp	r3, r7
 8026bb6:	d9f4      	bls.n	8026ba2 <_printf_i+0x11a>
 8026bb8:	2b08      	cmp	r3, #8
 8026bba:	d10b      	bne.n	8026bd4 <_printf_i+0x14c>
 8026bbc:	6823      	ldr	r3, [r4, #0]
 8026bbe:	07de      	lsls	r6, r3, #31
 8026bc0:	d508      	bpl.n	8026bd4 <_printf_i+0x14c>
 8026bc2:	6923      	ldr	r3, [r4, #16]
 8026bc4:	6861      	ldr	r1, [r4, #4]
 8026bc6:	4299      	cmp	r1, r3
 8026bc8:	bfde      	ittt	le
 8026bca:	2330      	movle	r3, #48	; 0x30
 8026bcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026bd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026bd4:	1b52      	subs	r2, r2, r5
 8026bd6:	6122      	str	r2, [r4, #16]
 8026bd8:	464b      	mov	r3, r9
 8026bda:	aa03      	add	r2, sp, #12
 8026bdc:	4621      	mov	r1, r4
 8026bde:	4640      	mov	r0, r8
 8026be0:	f8cd a000 	str.w	sl, [sp]
 8026be4:	f7ff fee0 	bl	80269a8 <_printf_common>
 8026be8:	3001      	adds	r0, #1
 8026bea:	d14c      	bne.n	8026c86 <_printf_i+0x1fe>
 8026bec:	f04f 30ff 	mov.w	r0, #4294967295
 8026bf0:	b004      	add	sp, #16
 8026bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026bf6:	4835      	ldr	r0, [pc, #212]	; (8026ccc <_printf_i+0x244>)
 8026bf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8026bfc:	6829      	ldr	r1, [r5, #0]
 8026bfe:	6823      	ldr	r3, [r4, #0]
 8026c00:	f851 6b04 	ldr.w	r6, [r1], #4
 8026c04:	6029      	str	r1, [r5, #0]
 8026c06:	061d      	lsls	r5, r3, #24
 8026c08:	d514      	bpl.n	8026c34 <_printf_i+0x1ac>
 8026c0a:	07df      	lsls	r7, r3, #31
 8026c0c:	bf44      	itt	mi
 8026c0e:	f043 0320 	orrmi.w	r3, r3, #32
 8026c12:	6023      	strmi	r3, [r4, #0]
 8026c14:	b91e      	cbnz	r6, 8026c1e <_printf_i+0x196>
 8026c16:	6823      	ldr	r3, [r4, #0]
 8026c18:	f023 0320 	bic.w	r3, r3, #32
 8026c1c:	6023      	str	r3, [r4, #0]
 8026c1e:	2310      	movs	r3, #16
 8026c20:	e7b0      	b.n	8026b84 <_printf_i+0xfc>
 8026c22:	6823      	ldr	r3, [r4, #0]
 8026c24:	f043 0320 	orr.w	r3, r3, #32
 8026c28:	6023      	str	r3, [r4, #0]
 8026c2a:	2378      	movs	r3, #120	; 0x78
 8026c2c:	4828      	ldr	r0, [pc, #160]	; (8026cd0 <_printf_i+0x248>)
 8026c2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026c32:	e7e3      	b.n	8026bfc <_printf_i+0x174>
 8026c34:	0659      	lsls	r1, r3, #25
 8026c36:	bf48      	it	mi
 8026c38:	b2b6      	uxthmi	r6, r6
 8026c3a:	e7e6      	b.n	8026c0a <_printf_i+0x182>
 8026c3c:	4615      	mov	r5, r2
 8026c3e:	e7bb      	b.n	8026bb8 <_printf_i+0x130>
 8026c40:	682b      	ldr	r3, [r5, #0]
 8026c42:	6826      	ldr	r6, [r4, #0]
 8026c44:	1d18      	adds	r0, r3, #4
 8026c46:	6961      	ldr	r1, [r4, #20]
 8026c48:	6028      	str	r0, [r5, #0]
 8026c4a:	0635      	lsls	r5, r6, #24
 8026c4c:	681b      	ldr	r3, [r3, #0]
 8026c4e:	d501      	bpl.n	8026c54 <_printf_i+0x1cc>
 8026c50:	6019      	str	r1, [r3, #0]
 8026c52:	e002      	b.n	8026c5a <_printf_i+0x1d2>
 8026c54:	0670      	lsls	r0, r6, #25
 8026c56:	d5fb      	bpl.n	8026c50 <_printf_i+0x1c8>
 8026c58:	8019      	strh	r1, [r3, #0]
 8026c5a:	2300      	movs	r3, #0
 8026c5c:	4615      	mov	r5, r2
 8026c5e:	6123      	str	r3, [r4, #16]
 8026c60:	e7ba      	b.n	8026bd8 <_printf_i+0x150>
 8026c62:	682b      	ldr	r3, [r5, #0]
 8026c64:	2100      	movs	r1, #0
 8026c66:	1d1a      	adds	r2, r3, #4
 8026c68:	602a      	str	r2, [r5, #0]
 8026c6a:	681d      	ldr	r5, [r3, #0]
 8026c6c:	6862      	ldr	r2, [r4, #4]
 8026c6e:	4628      	mov	r0, r5
 8026c70:	f000 fbc6 	bl	8027400 <memchr>
 8026c74:	b108      	cbz	r0, 8026c7a <_printf_i+0x1f2>
 8026c76:	1b40      	subs	r0, r0, r5
 8026c78:	6060      	str	r0, [r4, #4]
 8026c7a:	6863      	ldr	r3, [r4, #4]
 8026c7c:	6123      	str	r3, [r4, #16]
 8026c7e:	2300      	movs	r3, #0
 8026c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026c84:	e7a8      	b.n	8026bd8 <_printf_i+0x150>
 8026c86:	6923      	ldr	r3, [r4, #16]
 8026c88:	462a      	mov	r2, r5
 8026c8a:	4649      	mov	r1, r9
 8026c8c:	4640      	mov	r0, r8
 8026c8e:	47d0      	blx	sl
 8026c90:	3001      	adds	r0, #1
 8026c92:	d0ab      	beq.n	8026bec <_printf_i+0x164>
 8026c94:	6823      	ldr	r3, [r4, #0]
 8026c96:	079b      	lsls	r3, r3, #30
 8026c98:	d413      	bmi.n	8026cc2 <_printf_i+0x23a>
 8026c9a:	68e0      	ldr	r0, [r4, #12]
 8026c9c:	9b03      	ldr	r3, [sp, #12]
 8026c9e:	4298      	cmp	r0, r3
 8026ca0:	bfb8      	it	lt
 8026ca2:	4618      	movlt	r0, r3
 8026ca4:	e7a4      	b.n	8026bf0 <_printf_i+0x168>
 8026ca6:	2301      	movs	r3, #1
 8026ca8:	4632      	mov	r2, r6
 8026caa:	4649      	mov	r1, r9
 8026cac:	4640      	mov	r0, r8
 8026cae:	47d0      	blx	sl
 8026cb0:	3001      	adds	r0, #1
 8026cb2:	d09b      	beq.n	8026bec <_printf_i+0x164>
 8026cb4:	3501      	adds	r5, #1
 8026cb6:	68e3      	ldr	r3, [r4, #12]
 8026cb8:	9903      	ldr	r1, [sp, #12]
 8026cba:	1a5b      	subs	r3, r3, r1
 8026cbc:	42ab      	cmp	r3, r5
 8026cbe:	dcf2      	bgt.n	8026ca6 <_printf_i+0x21e>
 8026cc0:	e7eb      	b.n	8026c9a <_printf_i+0x212>
 8026cc2:	2500      	movs	r5, #0
 8026cc4:	f104 0619 	add.w	r6, r4, #25
 8026cc8:	e7f5      	b.n	8026cb6 <_printf_i+0x22e>
 8026cca:	bf00      	nop
 8026ccc:	08029a9d 	.word	0x08029a9d
 8026cd0:	08029aae 	.word	0x08029aae

08026cd4 <_sbrk_r>:
 8026cd4:	b538      	push	{r3, r4, r5, lr}
 8026cd6:	2300      	movs	r3, #0
 8026cd8:	4d05      	ldr	r5, [pc, #20]	; (8026cf0 <_sbrk_r+0x1c>)
 8026cda:	4604      	mov	r4, r0
 8026cdc:	4608      	mov	r0, r1
 8026cde:	602b      	str	r3, [r5, #0]
 8026ce0:	f7db fa9e 	bl	8002220 <_sbrk>
 8026ce4:	1c43      	adds	r3, r0, #1
 8026ce6:	d102      	bne.n	8026cee <_sbrk_r+0x1a>
 8026ce8:	682b      	ldr	r3, [r5, #0]
 8026cea:	b103      	cbz	r3, 8026cee <_sbrk_r+0x1a>
 8026cec:	6023      	str	r3, [r4, #0]
 8026cee:	bd38      	pop	{r3, r4, r5, pc}
 8026cf0:	2004f970 	.word	0x2004f970

08026cf4 <_raise_r>:
 8026cf4:	291f      	cmp	r1, #31
 8026cf6:	b538      	push	{r3, r4, r5, lr}
 8026cf8:	4604      	mov	r4, r0
 8026cfa:	460d      	mov	r5, r1
 8026cfc:	d904      	bls.n	8026d08 <_raise_r+0x14>
 8026cfe:	2316      	movs	r3, #22
 8026d00:	6003      	str	r3, [r0, #0]
 8026d02:	f04f 30ff 	mov.w	r0, #4294967295
 8026d06:	bd38      	pop	{r3, r4, r5, pc}
 8026d08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026d0a:	b112      	cbz	r2, 8026d12 <_raise_r+0x1e>
 8026d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026d10:	b94b      	cbnz	r3, 8026d26 <_raise_r+0x32>
 8026d12:	4620      	mov	r0, r4
 8026d14:	f000 f830 	bl	8026d78 <_getpid_r>
 8026d18:	462a      	mov	r2, r5
 8026d1a:	4601      	mov	r1, r0
 8026d1c:	4620      	mov	r0, r4
 8026d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026d22:	f000 b817 	b.w	8026d54 <_kill_r>
 8026d26:	2b01      	cmp	r3, #1
 8026d28:	d00a      	beq.n	8026d40 <_raise_r+0x4c>
 8026d2a:	1c59      	adds	r1, r3, #1
 8026d2c:	d103      	bne.n	8026d36 <_raise_r+0x42>
 8026d2e:	2316      	movs	r3, #22
 8026d30:	6003      	str	r3, [r0, #0]
 8026d32:	2001      	movs	r0, #1
 8026d34:	e7e7      	b.n	8026d06 <_raise_r+0x12>
 8026d36:	2400      	movs	r4, #0
 8026d38:	4628      	mov	r0, r5
 8026d3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026d3e:	4798      	blx	r3
 8026d40:	2000      	movs	r0, #0
 8026d42:	e7e0      	b.n	8026d06 <_raise_r+0x12>

08026d44 <raise>:
 8026d44:	4b02      	ldr	r3, [pc, #8]	; (8026d50 <raise+0xc>)
 8026d46:	4601      	mov	r1, r0
 8026d48:	6818      	ldr	r0, [r3, #0]
 8026d4a:	f7ff bfd3 	b.w	8026cf4 <_raise_r>
 8026d4e:	bf00      	nop
 8026d50:	20025898 	.word	0x20025898

08026d54 <_kill_r>:
 8026d54:	b538      	push	{r3, r4, r5, lr}
 8026d56:	2300      	movs	r3, #0
 8026d58:	4d06      	ldr	r5, [pc, #24]	; (8026d74 <_kill_r+0x20>)
 8026d5a:	4604      	mov	r4, r0
 8026d5c:	4608      	mov	r0, r1
 8026d5e:	4611      	mov	r1, r2
 8026d60:	602b      	str	r3, [r5, #0]
 8026d62:	f7db f9d5 	bl	8002110 <_kill>
 8026d66:	1c43      	adds	r3, r0, #1
 8026d68:	d102      	bne.n	8026d70 <_kill_r+0x1c>
 8026d6a:	682b      	ldr	r3, [r5, #0]
 8026d6c:	b103      	cbz	r3, 8026d70 <_kill_r+0x1c>
 8026d6e:	6023      	str	r3, [r4, #0]
 8026d70:	bd38      	pop	{r3, r4, r5, pc}
 8026d72:	bf00      	nop
 8026d74:	2004f970 	.word	0x2004f970

08026d78 <_getpid_r>:
 8026d78:	f7db b9c2 	b.w	8002100 <_getpid>

08026d7c <__swbuf_r>:
 8026d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d7e:	460e      	mov	r6, r1
 8026d80:	4614      	mov	r4, r2
 8026d82:	4605      	mov	r5, r0
 8026d84:	b118      	cbz	r0, 8026d8e <__swbuf_r+0x12>
 8026d86:	6983      	ldr	r3, [r0, #24]
 8026d88:	b90b      	cbnz	r3, 8026d8e <__swbuf_r+0x12>
 8026d8a:	f000 fa33 	bl	80271f4 <__sinit>
 8026d8e:	4b21      	ldr	r3, [pc, #132]	; (8026e14 <__swbuf_r+0x98>)
 8026d90:	429c      	cmp	r4, r3
 8026d92:	d12b      	bne.n	8026dec <__swbuf_r+0x70>
 8026d94:	686c      	ldr	r4, [r5, #4]
 8026d96:	69a3      	ldr	r3, [r4, #24]
 8026d98:	60a3      	str	r3, [r4, #8]
 8026d9a:	89a3      	ldrh	r3, [r4, #12]
 8026d9c:	071a      	lsls	r2, r3, #28
 8026d9e:	d52f      	bpl.n	8026e00 <__swbuf_r+0x84>
 8026da0:	6923      	ldr	r3, [r4, #16]
 8026da2:	b36b      	cbz	r3, 8026e00 <__swbuf_r+0x84>
 8026da4:	6923      	ldr	r3, [r4, #16]
 8026da6:	b2f6      	uxtb	r6, r6
 8026da8:	6820      	ldr	r0, [r4, #0]
 8026daa:	4637      	mov	r7, r6
 8026dac:	1ac0      	subs	r0, r0, r3
 8026dae:	6963      	ldr	r3, [r4, #20]
 8026db0:	4283      	cmp	r3, r0
 8026db2:	dc04      	bgt.n	8026dbe <__swbuf_r+0x42>
 8026db4:	4621      	mov	r1, r4
 8026db6:	4628      	mov	r0, r5
 8026db8:	f000 f988 	bl	80270cc <_fflush_r>
 8026dbc:	bb30      	cbnz	r0, 8026e0c <__swbuf_r+0x90>
 8026dbe:	68a3      	ldr	r3, [r4, #8]
 8026dc0:	3001      	adds	r0, #1
 8026dc2:	3b01      	subs	r3, #1
 8026dc4:	60a3      	str	r3, [r4, #8]
 8026dc6:	6823      	ldr	r3, [r4, #0]
 8026dc8:	1c5a      	adds	r2, r3, #1
 8026dca:	6022      	str	r2, [r4, #0]
 8026dcc:	701e      	strb	r6, [r3, #0]
 8026dce:	6963      	ldr	r3, [r4, #20]
 8026dd0:	4283      	cmp	r3, r0
 8026dd2:	d004      	beq.n	8026dde <__swbuf_r+0x62>
 8026dd4:	89a3      	ldrh	r3, [r4, #12]
 8026dd6:	07db      	lsls	r3, r3, #31
 8026dd8:	d506      	bpl.n	8026de8 <__swbuf_r+0x6c>
 8026dda:	2e0a      	cmp	r6, #10
 8026ddc:	d104      	bne.n	8026de8 <__swbuf_r+0x6c>
 8026dde:	4621      	mov	r1, r4
 8026de0:	4628      	mov	r0, r5
 8026de2:	f000 f973 	bl	80270cc <_fflush_r>
 8026de6:	b988      	cbnz	r0, 8026e0c <__swbuf_r+0x90>
 8026de8:	4638      	mov	r0, r7
 8026dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026dec:	4b0a      	ldr	r3, [pc, #40]	; (8026e18 <__swbuf_r+0x9c>)
 8026dee:	429c      	cmp	r4, r3
 8026df0:	d101      	bne.n	8026df6 <__swbuf_r+0x7a>
 8026df2:	68ac      	ldr	r4, [r5, #8]
 8026df4:	e7cf      	b.n	8026d96 <__swbuf_r+0x1a>
 8026df6:	4b09      	ldr	r3, [pc, #36]	; (8026e1c <__swbuf_r+0xa0>)
 8026df8:	429c      	cmp	r4, r3
 8026dfa:	bf08      	it	eq
 8026dfc:	68ec      	ldreq	r4, [r5, #12]
 8026dfe:	e7ca      	b.n	8026d96 <__swbuf_r+0x1a>
 8026e00:	4621      	mov	r1, r4
 8026e02:	4628      	mov	r0, r5
 8026e04:	f000 f80c 	bl	8026e20 <__swsetup_r>
 8026e08:	2800      	cmp	r0, #0
 8026e0a:	d0cb      	beq.n	8026da4 <__swbuf_r+0x28>
 8026e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8026e10:	e7ea      	b.n	8026de8 <__swbuf_r+0x6c>
 8026e12:	bf00      	nop
 8026e14:	08029ae4 	.word	0x08029ae4
 8026e18:	08029b04 	.word	0x08029b04
 8026e1c:	08029ac4 	.word	0x08029ac4

08026e20 <__swsetup_r>:
 8026e20:	4b32      	ldr	r3, [pc, #200]	; (8026eec <__swsetup_r+0xcc>)
 8026e22:	b570      	push	{r4, r5, r6, lr}
 8026e24:	681d      	ldr	r5, [r3, #0]
 8026e26:	4606      	mov	r6, r0
 8026e28:	460c      	mov	r4, r1
 8026e2a:	b125      	cbz	r5, 8026e36 <__swsetup_r+0x16>
 8026e2c:	69ab      	ldr	r3, [r5, #24]
 8026e2e:	b913      	cbnz	r3, 8026e36 <__swsetup_r+0x16>
 8026e30:	4628      	mov	r0, r5
 8026e32:	f000 f9df 	bl	80271f4 <__sinit>
 8026e36:	4b2e      	ldr	r3, [pc, #184]	; (8026ef0 <__swsetup_r+0xd0>)
 8026e38:	429c      	cmp	r4, r3
 8026e3a:	d10f      	bne.n	8026e5c <__swsetup_r+0x3c>
 8026e3c:	686c      	ldr	r4, [r5, #4]
 8026e3e:	89a3      	ldrh	r3, [r4, #12]
 8026e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026e44:	0719      	lsls	r1, r3, #28
 8026e46:	d42c      	bmi.n	8026ea2 <__swsetup_r+0x82>
 8026e48:	06dd      	lsls	r5, r3, #27
 8026e4a:	d411      	bmi.n	8026e70 <__swsetup_r+0x50>
 8026e4c:	2309      	movs	r3, #9
 8026e4e:	6033      	str	r3, [r6, #0]
 8026e50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026e54:	f04f 30ff 	mov.w	r0, #4294967295
 8026e58:	81a3      	strh	r3, [r4, #12]
 8026e5a:	e03e      	b.n	8026eda <__swsetup_r+0xba>
 8026e5c:	4b25      	ldr	r3, [pc, #148]	; (8026ef4 <__swsetup_r+0xd4>)
 8026e5e:	429c      	cmp	r4, r3
 8026e60:	d101      	bne.n	8026e66 <__swsetup_r+0x46>
 8026e62:	68ac      	ldr	r4, [r5, #8]
 8026e64:	e7eb      	b.n	8026e3e <__swsetup_r+0x1e>
 8026e66:	4b24      	ldr	r3, [pc, #144]	; (8026ef8 <__swsetup_r+0xd8>)
 8026e68:	429c      	cmp	r4, r3
 8026e6a:	bf08      	it	eq
 8026e6c:	68ec      	ldreq	r4, [r5, #12]
 8026e6e:	e7e6      	b.n	8026e3e <__swsetup_r+0x1e>
 8026e70:	0758      	lsls	r0, r3, #29
 8026e72:	d512      	bpl.n	8026e9a <__swsetup_r+0x7a>
 8026e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026e76:	b141      	cbz	r1, 8026e8a <__swsetup_r+0x6a>
 8026e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026e7c:	4299      	cmp	r1, r3
 8026e7e:	d002      	beq.n	8026e86 <__swsetup_r+0x66>
 8026e80:	4630      	mov	r0, r6
 8026e82:	f7ff fb57 	bl	8026534 <_free_r>
 8026e86:	2300      	movs	r3, #0
 8026e88:	6363      	str	r3, [r4, #52]	; 0x34
 8026e8a:	89a3      	ldrh	r3, [r4, #12]
 8026e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026e90:	81a3      	strh	r3, [r4, #12]
 8026e92:	2300      	movs	r3, #0
 8026e94:	6063      	str	r3, [r4, #4]
 8026e96:	6923      	ldr	r3, [r4, #16]
 8026e98:	6023      	str	r3, [r4, #0]
 8026e9a:	89a3      	ldrh	r3, [r4, #12]
 8026e9c:	f043 0308 	orr.w	r3, r3, #8
 8026ea0:	81a3      	strh	r3, [r4, #12]
 8026ea2:	6923      	ldr	r3, [r4, #16]
 8026ea4:	b94b      	cbnz	r3, 8026eba <__swsetup_r+0x9a>
 8026ea6:	89a3      	ldrh	r3, [r4, #12]
 8026ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026eb0:	d003      	beq.n	8026eba <__swsetup_r+0x9a>
 8026eb2:	4621      	mov	r1, r4
 8026eb4:	4630      	mov	r0, r6
 8026eb6:	f000 fa63 	bl	8027380 <__smakebuf_r>
 8026eba:	89a0      	ldrh	r0, [r4, #12]
 8026ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026ec0:	f010 0301 	ands.w	r3, r0, #1
 8026ec4:	d00a      	beq.n	8026edc <__swsetup_r+0xbc>
 8026ec6:	2300      	movs	r3, #0
 8026ec8:	60a3      	str	r3, [r4, #8]
 8026eca:	6963      	ldr	r3, [r4, #20]
 8026ecc:	425b      	negs	r3, r3
 8026ece:	61a3      	str	r3, [r4, #24]
 8026ed0:	6923      	ldr	r3, [r4, #16]
 8026ed2:	b943      	cbnz	r3, 8026ee6 <__swsetup_r+0xc6>
 8026ed4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026ed8:	d1ba      	bne.n	8026e50 <__swsetup_r+0x30>
 8026eda:	bd70      	pop	{r4, r5, r6, pc}
 8026edc:	0781      	lsls	r1, r0, #30
 8026ede:	bf58      	it	pl
 8026ee0:	6963      	ldrpl	r3, [r4, #20]
 8026ee2:	60a3      	str	r3, [r4, #8]
 8026ee4:	e7f4      	b.n	8026ed0 <__swsetup_r+0xb0>
 8026ee6:	2000      	movs	r0, #0
 8026ee8:	e7f7      	b.n	8026eda <__swsetup_r+0xba>
 8026eea:	bf00      	nop
 8026eec:	20025898 	.word	0x20025898
 8026ef0:	08029ae4 	.word	0x08029ae4
 8026ef4:	08029b04 	.word	0x08029b04
 8026ef8:	08029ac4 	.word	0x08029ac4

08026efc <__register_exitproc>:
 8026efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026f00:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8026fc0 <__register_exitproc+0xc4>
 8026f04:	4606      	mov	r6, r0
 8026f06:	461f      	mov	r7, r3
 8026f08:	460d      	mov	r5, r1
 8026f0a:	f8d8 0000 	ldr.w	r0, [r8]
 8026f0e:	4691      	mov	r9, r2
 8026f10:	f000 fa0e 	bl	8027330 <__retarget_lock_acquire_recursive>
 8026f14:	4b26      	ldr	r3, [pc, #152]	; (8026fb0 <__register_exitproc+0xb4>)
 8026f16:	681c      	ldr	r4, [r3, #0]
 8026f18:	b934      	cbnz	r4, 8026f28 <__register_exitproc+0x2c>
 8026f1a:	4c26      	ldr	r4, [pc, #152]	; (8026fb4 <__register_exitproc+0xb8>)
 8026f1c:	601c      	str	r4, [r3, #0]
 8026f1e:	4b26      	ldr	r3, [pc, #152]	; (8026fb8 <__register_exitproc+0xbc>)
 8026f20:	b113      	cbz	r3, 8026f28 <__register_exitproc+0x2c>
 8026f22:	681b      	ldr	r3, [r3, #0]
 8026f24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026f28:	6863      	ldr	r3, [r4, #4]
 8026f2a:	2b1f      	cmp	r3, #31
 8026f2c:	dd07      	ble.n	8026f3e <__register_exitproc+0x42>
 8026f2e:	f8d8 0000 	ldr.w	r0, [r8]
 8026f32:	f000 f9ff 	bl	8027334 <__retarget_lock_release_recursive>
 8026f36:	f04f 30ff 	mov.w	r0, #4294967295
 8026f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026f3e:	b35e      	cbz	r6, 8026f98 <__register_exitproc+0x9c>
 8026f40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026f44:	b988      	cbnz	r0, 8026f6a <__register_exitproc+0x6e>
 8026f46:	4b1d      	ldr	r3, [pc, #116]	; (8026fbc <__register_exitproc+0xc0>)
 8026f48:	b923      	cbnz	r3, 8026f54 <__register_exitproc+0x58>
 8026f4a:	f8d8 0000 	ldr.w	r0, [r8]
 8026f4e:	f000 f9f0 	bl	8027332 <__retarget_lock_release>
 8026f52:	e7f0      	b.n	8026f36 <__register_exitproc+0x3a>
 8026f54:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026f58:	f7ff fac6 	bl	80264e8 <malloc>
 8026f5c:	2800      	cmp	r0, #0
 8026f5e:	d0f4      	beq.n	8026f4a <__register_exitproc+0x4e>
 8026f60:	2300      	movs	r3, #0
 8026f62:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026f66:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026f6a:	6863      	ldr	r3, [r4, #4]
 8026f6c:	2201      	movs	r2, #1
 8026f6e:	2e02      	cmp	r6, #2
 8026f70:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026f74:	fa02 f203 	lsl.w	r2, r2, r3
 8026f78:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026f7c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026f80:	ea43 0302 	orr.w	r3, r3, r2
 8026f84:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026f88:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026f8c:	bf02      	ittt	eq
 8026f8e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026f92:	4313      	orreq	r3, r2
 8026f94:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026f98:	6863      	ldr	r3, [r4, #4]
 8026f9a:	f8d8 0000 	ldr.w	r0, [r8]
 8026f9e:	1c5a      	adds	r2, r3, #1
 8026fa0:	3302      	adds	r3, #2
 8026fa2:	6062      	str	r2, [r4, #4]
 8026fa4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026fa8:	f000 f9c4 	bl	8027334 <__retarget_lock_release_recursive>
 8026fac:	2000      	movs	r0, #0
 8026fae:	e7c4      	b.n	8026f3a <__register_exitproc+0x3e>
 8026fb0:	2004f968 	.word	0x2004f968
 8026fb4:	2004f8dc 	.word	0x2004f8dc
 8026fb8:	08029ac0 	.word	0x08029ac0
 8026fbc:	080264e9 	.word	0x080264e9
 8026fc0:	200258fc 	.word	0x200258fc

08026fc4 <__sflush_r>:
 8026fc4:	898a      	ldrh	r2, [r1, #12]
 8026fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026fca:	4605      	mov	r5, r0
 8026fcc:	0710      	lsls	r0, r2, #28
 8026fce:	460c      	mov	r4, r1
 8026fd0:	d458      	bmi.n	8027084 <__sflush_r+0xc0>
 8026fd2:	684b      	ldr	r3, [r1, #4]
 8026fd4:	2b00      	cmp	r3, #0
 8026fd6:	dc05      	bgt.n	8026fe4 <__sflush_r+0x20>
 8026fd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026fda:	2b00      	cmp	r3, #0
 8026fdc:	dc02      	bgt.n	8026fe4 <__sflush_r+0x20>
 8026fde:	2000      	movs	r0, #0
 8026fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026fe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026fe6:	2e00      	cmp	r6, #0
 8026fe8:	d0f9      	beq.n	8026fde <__sflush_r+0x1a>
 8026fea:	2300      	movs	r3, #0
 8026fec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026ff0:	682f      	ldr	r7, [r5, #0]
 8026ff2:	602b      	str	r3, [r5, #0]
 8026ff4:	d032      	beq.n	802705c <__sflush_r+0x98>
 8026ff6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026ff8:	89a3      	ldrh	r3, [r4, #12]
 8026ffa:	075a      	lsls	r2, r3, #29
 8026ffc:	d505      	bpl.n	802700a <__sflush_r+0x46>
 8026ffe:	6863      	ldr	r3, [r4, #4]
 8027000:	1ac0      	subs	r0, r0, r3
 8027002:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027004:	b10b      	cbz	r3, 802700a <__sflush_r+0x46>
 8027006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027008:	1ac0      	subs	r0, r0, r3
 802700a:	2300      	movs	r3, #0
 802700c:	4602      	mov	r2, r0
 802700e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027010:	4628      	mov	r0, r5
 8027012:	6a21      	ldr	r1, [r4, #32]
 8027014:	47b0      	blx	r6
 8027016:	1c43      	adds	r3, r0, #1
 8027018:	89a3      	ldrh	r3, [r4, #12]
 802701a:	d106      	bne.n	802702a <__sflush_r+0x66>
 802701c:	6829      	ldr	r1, [r5, #0]
 802701e:	291d      	cmp	r1, #29
 8027020:	d82c      	bhi.n	802707c <__sflush_r+0xb8>
 8027022:	4a29      	ldr	r2, [pc, #164]	; (80270c8 <__sflush_r+0x104>)
 8027024:	40ca      	lsrs	r2, r1
 8027026:	07d6      	lsls	r6, r2, #31
 8027028:	d528      	bpl.n	802707c <__sflush_r+0xb8>
 802702a:	2200      	movs	r2, #0
 802702c:	04d9      	lsls	r1, r3, #19
 802702e:	6062      	str	r2, [r4, #4]
 8027030:	6922      	ldr	r2, [r4, #16]
 8027032:	6022      	str	r2, [r4, #0]
 8027034:	d504      	bpl.n	8027040 <__sflush_r+0x7c>
 8027036:	1c42      	adds	r2, r0, #1
 8027038:	d101      	bne.n	802703e <__sflush_r+0x7a>
 802703a:	682b      	ldr	r3, [r5, #0]
 802703c:	b903      	cbnz	r3, 8027040 <__sflush_r+0x7c>
 802703e:	6560      	str	r0, [r4, #84]	; 0x54
 8027040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027042:	602f      	str	r7, [r5, #0]
 8027044:	2900      	cmp	r1, #0
 8027046:	d0ca      	beq.n	8026fde <__sflush_r+0x1a>
 8027048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802704c:	4299      	cmp	r1, r3
 802704e:	d002      	beq.n	8027056 <__sflush_r+0x92>
 8027050:	4628      	mov	r0, r5
 8027052:	f7ff fa6f 	bl	8026534 <_free_r>
 8027056:	2000      	movs	r0, #0
 8027058:	6360      	str	r0, [r4, #52]	; 0x34
 802705a:	e7c1      	b.n	8026fe0 <__sflush_r+0x1c>
 802705c:	6a21      	ldr	r1, [r4, #32]
 802705e:	2301      	movs	r3, #1
 8027060:	4628      	mov	r0, r5
 8027062:	47b0      	blx	r6
 8027064:	1c41      	adds	r1, r0, #1
 8027066:	d1c7      	bne.n	8026ff8 <__sflush_r+0x34>
 8027068:	682b      	ldr	r3, [r5, #0]
 802706a:	2b00      	cmp	r3, #0
 802706c:	d0c4      	beq.n	8026ff8 <__sflush_r+0x34>
 802706e:	2b1d      	cmp	r3, #29
 8027070:	d001      	beq.n	8027076 <__sflush_r+0xb2>
 8027072:	2b16      	cmp	r3, #22
 8027074:	d101      	bne.n	802707a <__sflush_r+0xb6>
 8027076:	602f      	str	r7, [r5, #0]
 8027078:	e7b1      	b.n	8026fde <__sflush_r+0x1a>
 802707a:	89a3      	ldrh	r3, [r4, #12]
 802707c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027080:	81a3      	strh	r3, [r4, #12]
 8027082:	e7ad      	b.n	8026fe0 <__sflush_r+0x1c>
 8027084:	690f      	ldr	r7, [r1, #16]
 8027086:	2f00      	cmp	r7, #0
 8027088:	d0a9      	beq.n	8026fde <__sflush_r+0x1a>
 802708a:	0793      	lsls	r3, r2, #30
 802708c:	680e      	ldr	r6, [r1, #0]
 802708e:	600f      	str	r7, [r1, #0]
 8027090:	bf0c      	ite	eq
 8027092:	694b      	ldreq	r3, [r1, #20]
 8027094:	2300      	movne	r3, #0
 8027096:	eba6 0807 	sub.w	r8, r6, r7
 802709a:	608b      	str	r3, [r1, #8]
 802709c:	f1b8 0f00 	cmp.w	r8, #0
 80270a0:	dd9d      	ble.n	8026fde <__sflush_r+0x1a>
 80270a2:	4643      	mov	r3, r8
 80270a4:	463a      	mov	r2, r7
 80270a6:	6a21      	ldr	r1, [r4, #32]
 80270a8:	4628      	mov	r0, r5
 80270aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80270ac:	47b0      	blx	r6
 80270ae:	2800      	cmp	r0, #0
 80270b0:	dc06      	bgt.n	80270c0 <__sflush_r+0xfc>
 80270b2:	89a3      	ldrh	r3, [r4, #12]
 80270b4:	f04f 30ff 	mov.w	r0, #4294967295
 80270b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80270bc:	81a3      	strh	r3, [r4, #12]
 80270be:	e78f      	b.n	8026fe0 <__sflush_r+0x1c>
 80270c0:	4407      	add	r7, r0
 80270c2:	eba8 0800 	sub.w	r8, r8, r0
 80270c6:	e7e9      	b.n	802709c <__sflush_r+0xd8>
 80270c8:	20400001 	.word	0x20400001

080270cc <_fflush_r>:
 80270cc:	b538      	push	{r3, r4, r5, lr}
 80270ce:	690b      	ldr	r3, [r1, #16]
 80270d0:	4605      	mov	r5, r0
 80270d2:	460c      	mov	r4, r1
 80270d4:	b913      	cbnz	r3, 80270dc <_fflush_r+0x10>
 80270d6:	2500      	movs	r5, #0
 80270d8:	4628      	mov	r0, r5
 80270da:	bd38      	pop	{r3, r4, r5, pc}
 80270dc:	b118      	cbz	r0, 80270e6 <_fflush_r+0x1a>
 80270de:	6983      	ldr	r3, [r0, #24]
 80270e0:	b90b      	cbnz	r3, 80270e6 <_fflush_r+0x1a>
 80270e2:	f000 f887 	bl	80271f4 <__sinit>
 80270e6:	4b14      	ldr	r3, [pc, #80]	; (8027138 <_fflush_r+0x6c>)
 80270e8:	429c      	cmp	r4, r3
 80270ea:	d11b      	bne.n	8027124 <_fflush_r+0x58>
 80270ec:	686c      	ldr	r4, [r5, #4]
 80270ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80270f2:	2b00      	cmp	r3, #0
 80270f4:	d0ef      	beq.n	80270d6 <_fflush_r+0xa>
 80270f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80270f8:	07d0      	lsls	r0, r2, #31
 80270fa:	d404      	bmi.n	8027106 <_fflush_r+0x3a>
 80270fc:	0599      	lsls	r1, r3, #22
 80270fe:	d402      	bmi.n	8027106 <_fflush_r+0x3a>
 8027100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027102:	f000 f915 	bl	8027330 <__retarget_lock_acquire_recursive>
 8027106:	4628      	mov	r0, r5
 8027108:	4621      	mov	r1, r4
 802710a:	f7ff ff5b 	bl	8026fc4 <__sflush_r>
 802710e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027110:	4605      	mov	r5, r0
 8027112:	07da      	lsls	r2, r3, #31
 8027114:	d4e0      	bmi.n	80270d8 <_fflush_r+0xc>
 8027116:	89a3      	ldrh	r3, [r4, #12]
 8027118:	059b      	lsls	r3, r3, #22
 802711a:	d4dd      	bmi.n	80270d8 <_fflush_r+0xc>
 802711c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802711e:	f000 f909 	bl	8027334 <__retarget_lock_release_recursive>
 8027122:	e7d9      	b.n	80270d8 <_fflush_r+0xc>
 8027124:	4b05      	ldr	r3, [pc, #20]	; (802713c <_fflush_r+0x70>)
 8027126:	429c      	cmp	r4, r3
 8027128:	d101      	bne.n	802712e <_fflush_r+0x62>
 802712a:	68ac      	ldr	r4, [r5, #8]
 802712c:	e7df      	b.n	80270ee <_fflush_r+0x22>
 802712e:	4b04      	ldr	r3, [pc, #16]	; (8027140 <_fflush_r+0x74>)
 8027130:	429c      	cmp	r4, r3
 8027132:	bf08      	it	eq
 8027134:	68ec      	ldreq	r4, [r5, #12]
 8027136:	e7da      	b.n	80270ee <_fflush_r+0x22>
 8027138:	08029ae4 	.word	0x08029ae4
 802713c:	08029b04 	.word	0x08029b04
 8027140:	08029ac4 	.word	0x08029ac4

08027144 <std>:
 8027144:	2300      	movs	r3, #0
 8027146:	b510      	push	{r4, lr}
 8027148:	4604      	mov	r4, r0
 802714a:	6083      	str	r3, [r0, #8]
 802714c:	8181      	strh	r1, [r0, #12]
 802714e:	4619      	mov	r1, r3
 8027150:	6643      	str	r3, [r0, #100]	; 0x64
 8027152:	81c2      	strh	r2, [r0, #14]
 8027154:	2208      	movs	r2, #8
 8027156:	6183      	str	r3, [r0, #24]
 8027158:	e9c0 3300 	strd	r3, r3, [r0]
 802715c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027160:	305c      	adds	r0, #92	; 0x5c
 8027162:	f7ff f9de 	bl	8026522 <memset>
 8027166:	4b05      	ldr	r3, [pc, #20]	; (802717c <std+0x38>)
 8027168:	6224      	str	r4, [r4, #32]
 802716a:	6263      	str	r3, [r4, #36]	; 0x24
 802716c:	4b04      	ldr	r3, [pc, #16]	; (8027180 <std+0x3c>)
 802716e:	62a3      	str	r3, [r4, #40]	; 0x28
 8027170:	4b04      	ldr	r3, [pc, #16]	; (8027184 <std+0x40>)
 8027172:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027174:	4b04      	ldr	r3, [pc, #16]	; (8027188 <std+0x44>)
 8027176:	6323      	str	r3, [r4, #48]	; 0x30
 8027178:	bd10      	pop	{r4, pc}
 802717a:	bf00      	nop
 802717c:	08027435 	.word	0x08027435
 8027180:	08027457 	.word	0x08027457
 8027184:	0802748f 	.word	0x0802748f
 8027188:	080274b3 	.word	0x080274b3

0802718c <_cleanup_r>:
 802718c:	4901      	ldr	r1, [pc, #4]	; (8027194 <_cleanup_r+0x8>)
 802718e:	f000 b8af 	b.w	80272f0 <_fwalk_reent>
 8027192:	bf00      	nop
 8027194:	080270cd 	.word	0x080270cd

08027198 <__sfmoreglue>:
 8027198:	b570      	push	{r4, r5, r6, lr}
 802719a:	2268      	movs	r2, #104	; 0x68
 802719c:	1e4d      	subs	r5, r1, #1
 802719e:	460e      	mov	r6, r1
 80271a0:	4355      	muls	r5, r2
 80271a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80271a6:	f7ff fa31 	bl	802660c <_malloc_r>
 80271aa:	4604      	mov	r4, r0
 80271ac:	b140      	cbz	r0, 80271c0 <__sfmoreglue+0x28>
 80271ae:	2100      	movs	r1, #0
 80271b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80271b4:	e9c0 1600 	strd	r1, r6, [r0]
 80271b8:	300c      	adds	r0, #12
 80271ba:	60a0      	str	r0, [r4, #8]
 80271bc:	f7ff f9b1 	bl	8026522 <memset>
 80271c0:	4620      	mov	r0, r4
 80271c2:	bd70      	pop	{r4, r5, r6, pc}

080271c4 <__sfp_lock_acquire>:
 80271c4:	4801      	ldr	r0, [pc, #4]	; (80271cc <__sfp_lock_acquire+0x8>)
 80271c6:	f000 b8b3 	b.w	8027330 <__retarget_lock_acquire_recursive>
 80271ca:	bf00      	nop
 80271cc:	2004f96e 	.word	0x2004f96e

080271d0 <__sfp_lock_release>:
 80271d0:	4801      	ldr	r0, [pc, #4]	; (80271d8 <__sfp_lock_release+0x8>)
 80271d2:	f000 b8af 	b.w	8027334 <__retarget_lock_release_recursive>
 80271d6:	bf00      	nop
 80271d8:	2004f96e 	.word	0x2004f96e

080271dc <__sinit_lock_acquire>:
 80271dc:	4801      	ldr	r0, [pc, #4]	; (80271e4 <__sinit_lock_acquire+0x8>)
 80271de:	f000 b8a7 	b.w	8027330 <__retarget_lock_acquire_recursive>
 80271e2:	bf00      	nop
 80271e4:	2004f96f 	.word	0x2004f96f

080271e8 <__sinit_lock_release>:
 80271e8:	4801      	ldr	r0, [pc, #4]	; (80271f0 <__sinit_lock_release+0x8>)
 80271ea:	f000 b8a3 	b.w	8027334 <__retarget_lock_release_recursive>
 80271ee:	bf00      	nop
 80271f0:	2004f96f 	.word	0x2004f96f

080271f4 <__sinit>:
 80271f4:	b510      	push	{r4, lr}
 80271f6:	4604      	mov	r4, r0
 80271f8:	f7ff fff0 	bl	80271dc <__sinit_lock_acquire>
 80271fc:	69a3      	ldr	r3, [r4, #24]
 80271fe:	b11b      	cbz	r3, 8027208 <__sinit+0x14>
 8027200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027204:	f7ff bff0 	b.w	80271e8 <__sinit_lock_release>
 8027208:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802720c:	6523      	str	r3, [r4, #80]	; 0x50
 802720e:	4620      	mov	r0, r4
 8027210:	4b12      	ldr	r3, [pc, #72]	; (802725c <__sinit+0x68>)
 8027212:	4a13      	ldr	r2, [pc, #76]	; (8027260 <__sinit+0x6c>)
 8027214:	681b      	ldr	r3, [r3, #0]
 8027216:	62a2      	str	r2, [r4, #40]	; 0x28
 8027218:	42a3      	cmp	r3, r4
 802721a:	bf04      	itt	eq
 802721c:	2301      	moveq	r3, #1
 802721e:	61a3      	streq	r3, [r4, #24]
 8027220:	f000 f820 	bl	8027264 <__sfp>
 8027224:	6060      	str	r0, [r4, #4]
 8027226:	4620      	mov	r0, r4
 8027228:	f000 f81c 	bl	8027264 <__sfp>
 802722c:	60a0      	str	r0, [r4, #8]
 802722e:	4620      	mov	r0, r4
 8027230:	f000 f818 	bl	8027264 <__sfp>
 8027234:	2200      	movs	r2, #0
 8027236:	2104      	movs	r1, #4
 8027238:	60e0      	str	r0, [r4, #12]
 802723a:	6860      	ldr	r0, [r4, #4]
 802723c:	f7ff ff82 	bl	8027144 <std>
 8027240:	2201      	movs	r2, #1
 8027242:	2109      	movs	r1, #9
 8027244:	68a0      	ldr	r0, [r4, #8]
 8027246:	f7ff ff7d 	bl	8027144 <std>
 802724a:	2202      	movs	r2, #2
 802724c:	2112      	movs	r1, #18
 802724e:	68e0      	ldr	r0, [r4, #12]
 8027250:	f7ff ff78 	bl	8027144 <std>
 8027254:	2301      	movs	r3, #1
 8027256:	61a3      	str	r3, [r4, #24]
 8027258:	e7d2      	b.n	8027200 <__sinit+0xc>
 802725a:	bf00      	nop
 802725c:	08029a88 	.word	0x08029a88
 8027260:	0802718d 	.word	0x0802718d

08027264 <__sfp>:
 8027264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027266:	4607      	mov	r7, r0
 8027268:	f7ff ffac 	bl	80271c4 <__sfp_lock_acquire>
 802726c:	4b1e      	ldr	r3, [pc, #120]	; (80272e8 <__sfp+0x84>)
 802726e:	681e      	ldr	r6, [r3, #0]
 8027270:	69b3      	ldr	r3, [r6, #24]
 8027272:	b913      	cbnz	r3, 802727a <__sfp+0x16>
 8027274:	4630      	mov	r0, r6
 8027276:	f7ff ffbd 	bl	80271f4 <__sinit>
 802727a:	3648      	adds	r6, #72	; 0x48
 802727c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027280:	3b01      	subs	r3, #1
 8027282:	d503      	bpl.n	802728c <__sfp+0x28>
 8027284:	6833      	ldr	r3, [r6, #0]
 8027286:	b30b      	cbz	r3, 80272cc <__sfp+0x68>
 8027288:	6836      	ldr	r6, [r6, #0]
 802728a:	e7f7      	b.n	802727c <__sfp+0x18>
 802728c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027290:	b9d5      	cbnz	r5, 80272c8 <__sfp+0x64>
 8027292:	4b16      	ldr	r3, [pc, #88]	; (80272ec <__sfp+0x88>)
 8027294:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027298:	6665      	str	r5, [r4, #100]	; 0x64
 802729a:	60e3      	str	r3, [r4, #12]
 802729c:	f000 f847 	bl	802732e <__retarget_lock_init_recursive>
 80272a0:	f7ff ff96 	bl	80271d0 <__sfp_lock_release>
 80272a4:	2208      	movs	r2, #8
 80272a6:	4629      	mov	r1, r5
 80272a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80272ac:	6025      	str	r5, [r4, #0]
 80272ae:	61a5      	str	r5, [r4, #24]
 80272b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80272b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80272b8:	f7ff f933 	bl	8026522 <memset>
 80272bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80272c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80272c4:	4620      	mov	r0, r4
 80272c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80272c8:	3468      	adds	r4, #104	; 0x68
 80272ca:	e7d9      	b.n	8027280 <__sfp+0x1c>
 80272cc:	2104      	movs	r1, #4
 80272ce:	4638      	mov	r0, r7
 80272d0:	f7ff ff62 	bl	8027198 <__sfmoreglue>
 80272d4:	4604      	mov	r4, r0
 80272d6:	6030      	str	r0, [r6, #0]
 80272d8:	2800      	cmp	r0, #0
 80272da:	d1d5      	bne.n	8027288 <__sfp+0x24>
 80272dc:	f7ff ff78 	bl	80271d0 <__sfp_lock_release>
 80272e0:	230c      	movs	r3, #12
 80272e2:	603b      	str	r3, [r7, #0]
 80272e4:	e7ee      	b.n	80272c4 <__sfp+0x60>
 80272e6:	bf00      	nop
 80272e8:	08029a88 	.word	0x08029a88
 80272ec:	ffff0001 	.word	0xffff0001

080272f0 <_fwalk_reent>:
 80272f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80272f4:	4606      	mov	r6, r0
 80272f6:	4688      	mov	r8, r1
 80272f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80272fc:	2700      	movs	r7, #0
 80272fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027302:	f1b9 0901 	subs.w	r9, r9, #1
 8027306:	d505      	bpl.n	8027314 <_fwalk_reent+0x24>
 8027308:	6824      	ldr	r4, [r4, #0]
 802730a:	2c00      	cmp	r4, #0
 802730c:	d1f7      	bne.n	80272fe <_fwalk_reent+0xe>
 802730e:	4638      	mov	r0, r7
 8027310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027314:	89ab      	ldrh	r3, [r5, #12]
 8027316:	2b01      	cmp	r3, #1
 8027318:	d907      	bls.n	802732a <_fwalk_reent+0x3a>
 802731a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802731e:	3301      	adds	r3, #1
 8027320:	d003      	beq.n	802732a <_fwalk_reent+0x3a>
 8027322:	4629      	mov	r1, r5
 8027324:	4630      	mov	r0, r6
 8027326:	47c0      	blx	r8
 8027328:	4307      	orrs	r7, r0
 802732a:	3568      	adds	r5, #104	; 0x68
 802732c:	e7e9      	b.n	8027302 <_fwalk_reent+0x12>

0802732e <__retarget_lock_init_recursive>:
 802732e:	4770      	bx	lr

08027330 <__retarget_lock_acquire_recursive>:
 8027330:	4770      	bx	lr

08027332 <__retarget_lock_release>:
 8027332:	4770      	bx	lr

08027334 <__retarget_lock_release_recursive>:
 8027334:	4770      	bx	lr

08027336 <__swhatbuf_r>:
 8027336:	b570      	push	{r4, r5, r6, lr}
 8027338:	460e      	mov	r6, r1
 802733a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802733e:	b096      	sub	sp, #88	; 0x58
 8027340:	4614      	mov	r4, r2
 8027342:	2900      	cmp	r1, #0
 8027344:	461d      	mov	r5, r3
 8027346:	da08      	bge.n	802735a <__swhatbuf_r+0x24>
 8027348:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802734c:	2200      	movs	r2, #0
 802734e:	602a      	str	r2, [r5, #0]
 8027350:	061a      	lsls	r2, r3, #24
 8027352:	d410      	bmi.n	8027376 <__swhatbuf_r+0x40>
 8027354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027358:	e00e      	b.n	8027378 <__swhatbuf_r+0x42>
 802735a:	466a      	mov	r2, sp
 802735c:	f000 f8d0 	bl	8027500 <_fstat_r>
 8027360:	2800      	cmp	r0, #0
 8027362:	dbf1      	blt.n	8027348 <__swhatbuf_r+0x12>
 8027364:	9a01      	ldr	r2, [sp, #4]
 8027366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802736a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802736e:	425a      	negs	r2, r3
 8027370:	415a      	adcs	r2, r3
 8027372:	602a      	str	r2, [r5, #0]
 8027374:	e7ee      	b.n	8027354 <__swhatbuf_r+0x1e>
 8027376:	2340      	movs	r3, #64	; 0x40
 8027378:	2000      	movs	r0, #0
 802737a:	6023      	str	r3, [r4, #0]
 802737c:	b016      	add	sp, #88	; 0x58
 802737e:	bd70      	pop	{r4, r5, r6, pc}

08027380 <__smakebuf_r>:
 8027380:	898b      	ldrh	r3, [r1, #12]
 8027382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027384:	079d      	lsls	r5, r3, #30
 8027386:	4606      	mov	r6, r0
 8027388:	460c      	mov	r4, r1
 802738a:	d507      	bpl.n	802739c <__smakebuf_r+0x1c>
 802738c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027390:	6023      	str	r3, [r4, #0]
 8027392:	6123      	str	r3, [r4, #16]
 8027394:	2301      	movs	r3, #1
 8027396:	6163      	str	r3, [r4, #20]
 8027398:	b002      	add	sp, #8
 802739a:	bd70      	pop	{r4, r5, r6, pc}
 802739c:	ab01      	add	r3, sp, #4
 802739e:	466a      	mov	r2, sp
 80273a0:	f7ff ffc9 	bl	8027336 <__swhatbuf_r>
 80273a4:	9900      	ldr	r1, [sp, #0]
 80273a6:	4605      	mov	r5, r0
 80273a8:	4630      	mov	r0, r6
 80273aa:	f7ff f92f 	bl	802660c <_malloc_r>
 80273ae:	b948      	cbnz	r0, 80273c4 <__smakebuf_r+0x44>
 80273b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80273b4:	059a      	lsls	r2, r3, #22
 80273b6:	d4ef      	bmi.n	8027398 <__smakebuf_r+0x18>
 80273b8:	f023 0303 	bic.w	r3, r3, #3
 80273bc:	f043 0302 	orr.w	r3, r3, #2
 80273c0:	81a3      	strh	r3, [r4, #12]
 80273c2:	e7e3      	b.n	802738c <__smakebuf_r+0xc>
 80273c4:	4b0d      	ldr	r3, [pc, #52]	; (80273fc <__smakebuf_r+0x7c>)
 80273c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80273c8:	89a3      	ldrh	r3, [r4, #12]
 80273ca:	6020      	str	r0, [r4, #0]
 80273cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80273d0:	6120      	str	r0, [r4, #16]
 80273d2:	81a3      	strh	r3, [r4, #12]
 80273d4:	9b00      	ldr	r3, [sp, #0]
 80273d6:	6163      	str	r3, [r4, #20]
 80273d8:	9b01      	ldr	r3, [sp, #4]
 80273da:	b15b      	cbz	r3, 80273f4 <__smakebuf_r+0x74>
 80273dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80273e0:	4630      	mov	r0, r6
 80273e2:	f000 f89f 	bl	8027524 <_isatty_r>
 80273e6:	b128      	cbz	r0, 80273f4 <__smakebuf_r+0x74>
 80273e8:	89a3      	ldrh	r3, [r4, #12]
 80273ea:	f023 0303 	bic.w	r3, r3, #3
 80273ee:	f043 0301 	orr.w	r3, r3, #1
 80273f2:	81a3      	strh	r3, [r4, #12]
 80273f4:	89a0      	ldrh	r0, [r4, #12]
 80273f6:	4305      	orrs	r5, r0
 80273f8:	81a5      	strh	r5, [r4, #12]
 80273fa:	e7cd      	b.n	8027398 <__smakebuf_r+0x18>
 80273fc:	0802718d 	.word	0x0802718d

08027400 <memchr>:
 8027400:	b2c9      	uxtb	r1, r1
 8027402:	4402      	add	r2, r0
 8027404:	b510      	push	{r4, lr}
 8027406:	4290      	cmp	r0, r2
 8027408:	4603      	mov	r3, r0
 802740a:	d101      	bne.n	8027410 <memchr+0x10>
 802740c:	2300      	movs	r3, #0
 802740e:	e003      	b.n	8027418 <memchr+0x18>
 8027410:	781c      	ldrb	r4, [r3, #0]
 8027412:	3001      	adds	r0, #1
 8027414:	428c      	cmp	r4, r1
 8027416:	d1f6      	bne.n	8027406 <memchr+0x6>
 8027418:	4618      	mov	r0, r3
 802741a:	bd10      	pop	{r4, pc}

0802741c <__malloc_lock>:
 802741c:	4801      	ldr	r0, [pc, #4]	; (8027424 <__malloc_lock+0x8>)
 802741e:	f7ff bf87 	b.w	8027330 <__retarget_lock_acquire_recursive>
 8027422:	bf00      	nop
 8027424:	2004f96d 	.word	0x2004f96d

08027428 <__malloc_unlock>:
 8027428:	4801      	ldr	r0, [pc, #4]	; (8027430 <__malloc_unlock+0x8>)
 802742a:	f7ff bf83 	b.w	8027334 <__retarget_lock_release_recursive>
 802742e:	bf00      	nop
 8027430:	2004f96d 	.word	0x2004f96d

08027434 <__sread>:
 8027434:	b510      	push	{r4, lr}
 8027436:	460c      	mov	r4, r1
 8027438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802743c:	f000 f894 	bl	8027568 <_read_r>
 8027440:	2800      	cmp	r0, #0
 8027442:	bfab      	itete	ge
 8027444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027446:	89a3      	ldrhlt	r3, [r4, #12]
 8027448:	181b      	addge	r3, r3, r0
 802744a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802744e:	bfac      	ite	ge
 8027450:	6563      	strge	r3, [r4, #84]	; 0x54
 8027452:	81a3      	strhlt	r3, [r4, #12]
 8027454:	bd10      	pop	{r4, pc}

08027456 <__swrite>:
 8027456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802745a:	461f      	mov	r7, r3
 802745c:	898b      	ldrh	r3, [r1, #12]
 802745e:	4605      	mov	r5, r0
 8027460:	460c      	mov	r4, r1
 8027462:	05db      	lsls	r3, r3, #23
 8027464:	4616      	mov	r6, r2
 8027466:	d505      	bpl.n	8027474 <__swrite+0x1e>
 8027468:	2302      	movs	r3, #2
 802746a:	2200      	movs	r2, #0
 802746c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027470:	f000 f868 	bl	8027544 <_lseek_r>
 8027474:	89a3      	ldrh	r3, [r4, #12]
 8027476:	4632      	mov	r2, r6
 8027478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802747c:	4628      	mov	r0, r5
 802747e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027482:	81a3      	strh	r3, [r4, #12]
 8027484:	463b      	mov	r3, r7
 8027486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802748a:	f000 b817 	b.w	80274bc <_write_r>

0802748e <__sseek>:
 802748e:	b510      	push	{r4, lr}
 8027490:	460c      	mov	r4, r1
 8027492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027496:	f000 f855 	bl	8027544 <_lseek_r>
 802749a:	1c43      	adds	r3, r0, #1
 802749c:	89a3      	ldrh	r3, [r4, #12]
 802749e:	bf15      	itete	ne
 80274a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80274a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80274a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80274aa:	81a3      	strheq	r3, [r4, #12]
 80274ac:	bf18      	it	ne
 80274ae:	81a3      	strhne	r3, [r4, #12]
 80274b0:	bd10      	pop	{r4, pc}

080274b2 <__sclose>:
 80274b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80274b6:	f000 b813 	b.w	80274e0 <_close_r>
	...

080274bc <_write_r>:
 80274bc:	b538      	push	{r3, r4, r5, lr}
 80274be:	4604      	mov	r4, r0
 80274c0:	4d06      	ldr	r5, [pc, #24]	; (80274dc <_write_r+0x20>)
 80274c2:	4608      	mov	r0, r1
 80274c4:	4611      	mov	r1, r2
 80274c6:	2200      	movs	r2, #0
 80274c8:	602a      	str	r2, [r5, #0]
 80274ca:	461a      	mov	r2, r3
 80274cc:	f7da fe57 	bl	800217e <_write>
 80274d0:	1c43      	adds	r3, r0, #1
 80274d2:	d102      	bne.n	80274da <_write_r+0x1e>
 80274d4:	682b      	ldr	r3, [r5, #0]
 80274d6:	b103      	cbz	r3, 80274da <_write_r+0x1e>
 80274d8:	6023      	str	r3, [r4, #0]
 80274da:	bd38      	pop	{r3, r4, r5, pc}
 80274dc:	2004f970 	.word	0x2004f970

080274e0 <_close_r>:
 80274e0:	b538      	push	{r3, r4, r5, lr}
 80274e2:	2300      	movs	r3, #0
 80274e4:	4d05      	ldr	r5, [pc, #20]	; (80274fc <_close_r+0x1c>)
 80274e6:	4604      	mov	r4, r0
 80274e8:	4608      	mov	r0, r1
 80274ea:	602b      	str	r3, [r5, #0]
 80274ec:	f7da fe63 	bl	80021b6 <_close>
 80274f0:	1c43      	adds	r3, r0, #1
 80274f2:	d102      	bne.n	80274fa <_close_r+0x1a>
 80274f4:	682b      	ldr	r3, [r5, #0]
 80274f6:	b103      	cbz	r3, 80274fa <_close_r+0x1a>
 80274f8:	6023      	str	r3, [r4, #0]
 80274fa:	bd38      	pop	{r3, r4, r5, pc}
 80274fc:	2004f970 	.word	0x2004f970

08027500 <_fstat_r>:
 8027500:	b538      	push	{r3, r4, r5, lr}
 8027502:	2300      	movs	r3, #0
 8027504:	4d06      	ldr	r5, [pc, #24]	; (8027520 <_fstat_r+0x20>)
 8027506:	4604      	mov	r4, r0
 8027508:	4608      	mov	r0, r1
 802750a:	4611      	mov	r1, r2
 802750c:	602b      	str	r3, [r5, #0]
 802750e:	f7da fe5e 	bl	80021ce <_fstat>
 8027512:	1c43      	adds	r3, r0, #1
 8027514:	d102      	bne.n	802751c <_fstat_r+0x1c>
 8027516:	682b      	ldr	r3, [r5, #0]
 8027518:	b103      	cbz	r3, 802751c <_fstat_r+0x1c>
 802751a:	6023      	str	r3, [r4, #0]
 802751c:	bd38      	pop	{r3, r4, r5, pc}
 802751e:	bf00      	nop
 8027520:	2004f970 	.word	0x2004f970

08027524 <_isatty_r>:
 8027524:	b538      	push	{r3, r4, r5, lr}
 8027526:	2300      	movs	r3, #0
 8027528:	4d05      	ldr	r5, [pc, #20]	; (8027540 <_isatty_r+0x1c>)
 802752a:	4604      	mov	r4, r0
 802752c:	4608      	mov	r0, r1
 802752e:	602b      	str	r3, [r5, #0]
 8027530:	f7da fe5d 	bl	80021ee <_isatty>
 8027534:	1c43      	adds	r3, r0, #1
 8027536:	d102      	bne.n	802753e <_isatty_r+0x1a>
 8027538:	682b      	ldr	r3, [r5, #0]
 802753a:	b103      	cbz	r3, 802753e <_isatty_r+0x1a>
 802753c:	6023      	str	r3, [r4, #0]
 802753e:	bd38      	pop	{r3, r4, r5, pc}
 8027540:	2004f970 	.word	0x2004f970

08027544 <_lseek_r>:
 8027544:	b538      	push	{r3, r4, r5, lr}
 8027546:	4604      	mov	r4, r0
 8027548:	4d06      	ldr	r5, [pc, #24]	; (8027564 <_lseek_r+0x20>)
 802754a:	4608      	mov	r0, r1
 802754c:	4611      	mov	r1, r2
 802754e:	2200      	movs	r2, #0
 8027550:	602a      	str	r2, [r5, #0]
 8027552:	461a      	mov	r2, r3
 8027554:	f7da fe56 	bl	8002204 <_lseek>
 8027558:	1c43      	adds	r3, r0, #1
 802755a:	d102      	bne.n	8027562 <_lseek_r+0x1e>
 802755c:	682b      	ldr	r3, [r5, #0]
 802755e:	b103      	cbz	r3, 8027562 <_lseek_r+0x1e>
 8027560:	6023      	str	r3, [r4, #0]
 8027562:	bd38      	pop	{r3, r4, r5, pc}
 8027564:	2004f970 	.word	0x2004f970

08027568 <_read_r>:
 8027568:	b538      	push	{r3, r4, r5, lr}
 802756a:	4604      	mov	r4, r0
 802756c:	4d06      	ldr	r5, [pc, #24]	; (8027588 <_read_r+0x20>)
 802756e:	4608      	mov	r0, r1
 8027570:	4611      	mov	r1, r2
 8027572:	2200      	movs	r2, #0
 8027574:	602a      	str	r2, [r5, #0]
 8027576:	461a      	mov	r2, r3
 8027578:	f7da fde4 	bl	8002144 <_read>
 802757c:	1c43      	adds	r3, r0, #1
 802757e:	d102      	bne.n	8027586 <_read_r+0x1e>
 8027580:	682b      	ldr	r3, [r5, #0]
 8027582:	b103      	cbz	r3, 8027586 <_read_r+0x1e>
 8027584:	6023      	str	r3, [r4, #0]
 8027586:	bd38      	pop	{r3, r4, r5, pc}
 8027588:	2004f970 	.word	0x2004f970

0802758c <_init>:
 802758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802758e:	bf00      	nop
 8027590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027592:	bc08      	pop	{r3}
 8027594:	469e      	mov	lr, r3
 8027596:	4770      	bx	lr

08027598 <_fini>:
 8027598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802759a:	bf00      	nop
 802759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802759e:	bc08      	pop	{r3}
 80275a0:	469e      	mov	lr, r3
 80275a2:	4770      	bx	lr
